%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: maintr.dvi
%%Pages: 41
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%+ Courier
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSCommandLine: dvips maintr.dvi -o maintr.ps
%DVIPSParameters: dpi=600, comments removed
%DVIPSSource:  TeX output 2002.04.22:1316
%%BeginProcSet: tex.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]{ch-image}imagemask restore}B /D{/cc X dup type /stringtype ne{]}
if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginFont: Times-Roman
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def
%%EndFont
%%BeginProcSet: texps.pro
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont load]cvx def}def
/ObliqueSlant{dup sin S cos div neg}B /SlantFont{4 index mul add}def
/ExtendFont{3 -1 roll mul exch}def /ReEncodeFont{/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (maintr.dvi)
@start /Fa 135[55 1[55 55 55 55 55 1[55 1[55 1[55 2[55
55 55 55 55 1[55 1[55 17[55 17[55 4[55 3[55 6[55 45[{
 TeXBase1Encoding ReEncodeFont }21 91.249977 /Courier
rf /Fb 152[50 3[50 99[{ TeXBase1Encoding ReEncodeFont }2
83.333336 /Courier rf /Fc 1 113 df<00F007C001FC1FF0031E7878061EE03C061F
C01C0C1F801E0C1F001E0C3F001E183F001F183E001F003E001F007E001F007E003E007C
003E007C003E00FC003E00FC007C00F8007C00F8007801F800F001F800F001F801E001F8
03C003FC078003FE1F0003E7FC0003E1F00007E0000007E0000007C0000007C000000FC0
00000FC000000F8000001F800000FFF80000FFF800002025809922>112
D E /Fd 1 51 df<01FC0007FF801C0FC03003E06001F06000F8F800F8FC00FCFC00FCFC
007C78007C3000FC0000FC0000F80000F80001F00003E00003C0000780000F00001E0000
380000700000E00001C00C03800C0600180C00181800183FFFF87FFFF8FFFFF0FFFFF016
217CA01E>50 D E /Fe 13 89 df<0000001E0000003E0000007C000000F8000001F000
0003E0000007E000000FC000001F8000001F0000003F0000007E000000FC000000FC0000
01F8000003F0000003F0000007E0000007E000000FC000000FC000001F8000001F800000
3F0000003F0000007E0000007E000000FE000000FC000001FC000001F8000001F8000003
F8000003F0000003F0000007F0000007F0000007E000000FE000000FE000000FE000000F
C000001FC000001FC000001FC000001FC000001F8000003F8000003F8000003F8000003F
8000003F8000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F
0000007F000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F
0000003F8000003F8000003F8000003F8000003F8000001F8000001FC000001FC000001F
C000001FC000000FC000000FE000000FE000000FE0000007E0000007F0000007F0000003
F0000003F0000003F8000001F8000001F8000001FC000000FC000000FE0000007E000000
7E0000003F0000003F0000001F8000001F8000000FC000000FC0000007E0000007E00000
03F0000003F0000001F8000000FC000000FC0000007E0000003F0000001F0000001F8000
000FC0000007E0000003E0000001F0000000F80000007C0000003E0000001E1F94718232
>16 D<F0000000F80000007C0000003E0000001F0000000F8000000FC0000007E0000003
F0000001F0000001F8000000FC0000007E0000007E0000003F0000001F8000001F800000
0FC000000FC0000007E0000007E0000003F0000003F0000001F8000001F8000000FC0000
00FC000000FE0000007E0000007F0000003F0000003F0000003F8000001F8000001F8000
001FC000001FC000000FC000000FE000000FE000000FE0000007E0000007F0000007F000
0007F0000007F0000003F0000003F8000003F8000003F8000003F8000003F8000001FC00
0001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000001FC000001FC00
0001FC000001FC000001FC000001FC000001FC000001FC000001FC000003F8000003F800
0003F8000003F8000003F8000003F0000007F0000007F0000007F0000007F0000007E000
000FE000000FE000000FE000000FC000001FC000001FC000001F8000001F8000003F8000
003F0000003F0000007F0000007E000000FE000000FC000000FC000001F8000001F80000
03F0000003F0000007E0000007E000000FC000000FC000001F8000001F8000003F000000
7E0000007E000000FC000001F8000001F0000003F0000007E000000FC000000F8000001F
0000003E0000007C000000F8000000F00000001F947D8232>I<000000000F000000001F
000000003E000000007C00000000F800000001F000000003E000000007C00000000FC000
00001F800000001F000000003E000000007E00000000FC00000001F800000001F0000000
03F000000007E000000007C00000000FC00000001F800000001F800000003F000000003E
000000007E00000000FC00000000FC00000001F800000001F800000003F000000003F000
000007E000000007E00000000FE00000000FC00000000FC00000001F800000001F800000
003F800000003F000000003F000000007F000000007E00000000FE00000000FE00000000
FC00000001FC00000001FC00000001F800000003F800000003F800000003F800000003F0
00000007F000000007F000000007F000000007E00000000FE00000000FE00000000FE000
00000FC00000000FC00000001FC00000001FC00000001FC00000001FC00000001F800000
003F800000003F800000003F800000003F800000003F800000003F800000003F00000000
7F000000007F000000007F000000007F000000007F000000007F000000007F000000007F
000000007F000000007F00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE000000007F000000007F000000007F000000007F
000000007F000000007F000000007F000000007F000000007F000000007F000000003F00
0000003F800000003F800000003F800000003F800000003F800000003F800000001F8000
00001FC00000001FC00000001FC00000001FC00000000FC00000000FC00000000FE00000
000FE00000000FE000000007E000000007F000000007F000000007F000000003F0000000
03F800000003F800000003F800000001F800000001FC00000001FC00000000FC00000000
FE00000000FE000000007E000000007F000000003F000000003F000000003F800000001F
800000001F800000000FC00000000FC00000000FE000000007E000000007E000000003F0
00000003F000000001F800000001F800000000FC00000000FC000000007E000000003E00
0000003F000000001F800000001F800000000FC000000007C000000007E000000003F000
000001F000000001F800000000FC000000007E000000003E000000001F000000001F8000
00000FC000000007C000000003E000000001F000000000F8000000007C000000003E0000
00001F000000000F28C66E823D>I<F000000000F8000000007C000000003E000000001F
000000000F8000000007C000000003E000000003F000000001F800000000F8000000007C
000000007E000000003F000000001F800000000F800000000FC000000007E000000003E0
00000003F000000001F800000001F800000000FC000000007C000000007E000000003F00
0000003F000000001F800000001F800000000FC00000000FC000000007E000000007E000
000007F000000003F000000003F000000001F800000001F800000001FC00000000FC0000
0000FC00000000FE000000007E000000007F000000007F000000003F000000003F800000
003F800000001F800000001FC00000001FC00000001FC00000000FC00000000FE0000000
0FE00000000FE000000007E000000007F000000007F000000007F000000003F000000003
F000000003F800000003F800000003F800000003F800000001F800000001FC00000001FC
00000001FC00000001FC00000001FC00000001FC00000000FC00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE000000007F000000007F000000007F000000007F000000007F000000007F000000
007F000000007F000000007F000000007F000000007F000000007F000000007F00000000
7F000000007F000000007F000000007F000000007F000000007F000000007F000000007F
000000007F000000007F000000007F000000007F000000007F000000007F000000007F00
0000007F000000007F00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FC00000001FC000000
01FC00000001FC00000001FC00000001FC00000001FC00000001F800000003F800000003
F800000003F800000003F800000003F000000003F000000007F000000007F000000007F0
00000007E00000000FE00000000FE00000000FE00000000FC00000001FC00000001FC000
00001FC00000001F800000003F800000003F800000003F000000007F000000007F000000
007E00000000FE00000000FC00000000FC00000001FC00000001F800000001F800000003
F000000003F000000007F000000007E000000007E00000000FC00000000FC00000001F80
0000001F800000003F000000003F000000007E000000007C00000000FC00000001F80000
0001F800000003F000000003E000000007E00000000FC00000000F800000001F80000000
3F000000007E000000007C00000000F800000001F800000003F000000003E000000007C0
0000000F800000001F000000003E000000007C00000000F800000000F00000000028C67E
823D>I<FFFFF8FFFFF8FFFFF8FFFFF8FFFFF8F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000FFFFF8FFFFF8FFFFF8FFFFF8FFFFF815C66B822C>I<FFFFF8FFFFF8FF
FFF8FFFFF8FFFFF80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F8FFFFF8FF
FFF8FFFFF8FFFFF8FFFFF815C67F822C>I<0000000001E00000000003E00000000007C0
000000000F80000000001F80000000001F00000000003E00000000007C0000000000F800
00000001F80000000001F00000000003E00000000007E0000000000FC0000000000F8000
0000001F80000000003F00000000003E00000000007E0000000000FC0000000000FC0000
000001F80000000003F80000000003F00000000007F00000000007E0000000000FE00000
00000FC0000000001FC0000000001F80000000003F80000000003F00000000007F000000
00007E0000000000FE0000000000FC0000000001FC0000000001FC0000000001F8000000
0003F80000000003F00000000007F00000000007F00000000007E0000000000FE0000000
000FE0000000001FC0000000001FC0000000001FC0000000003F80000000003F80000000
003F80000000007F80000000007F00000000007F0000000000FF0000000000FE00000000
00FE0000000000FE0000000001FE0000000001FC0000000001FC0000000001FC00000000
03FC0000000003FC0000000003F80000000003F80000000007F80000000007F800000000
07F80000000007F00000000007F0000000000FF0000000000FF0000000000FF000000000
0FE0000000000FE0000000000FE0000000001FE0000000001FE0000000001FE000000000
1FE0000000001FC0000000001FC0000000003FC0000000003FC0000000003FC000000000
3FC0000000003FC0000000003FC0000000003FC0000000003F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F0000000000
FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000
FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000
FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000
FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000
FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000
FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000FF0000000000
FF0000000000FF00000000007F00000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000003F80000000003FC0000000003FC000000000
3FC0000000003FC0000000003FC0000000003FC0000000003FC0000000001FC000000000
1FC0000000001FE0000000001FE0000000001FE0000000001FE0000000000FE000000000
0FE0000000000FE0000000000FF0000000000FF0000000000FF00000000007F000000000
07F00000000007F80000000007F80000000007F80000000003F80000000003F800000000
03FC0000000003FC0000000001FC0000000001FC0000000001FC0000000001FE00000000
00FE0000000000FE0000000000FE0000000000FF00000000007F00000000007F00000000
007F80000000003F80000000003F80000000003F80000000001FC0000000001FC0000000
001FC0000000000FE0000000000FE00000000007E00000000007F00000000007F0000000
0003F00000000003F80000000001F80000000001FC0000000001FC0000000000FC000000
0000FE00000000007E00000000007F00000000003F00000000003F80000000001F800000
00001FC0000000000FC0000000000FE00000000007E00000000007F00000000003F00000
000003F80000000001F80000000000FC0000000000FC00000000007E00000000003E0000
0000003F00000000001F80000000000F80000000000FC00000000007E00000000003E000
00000001F00000000001F80000000000F800000000007C00000000003E00000000001F00
000000001F80000000000F800000000007C00000000003E00000000001E02BF86C8242>
32 D<F00000000000F800000000007C00000000003E00000000003F00000000001F0000
0000000F800000000007C00000000003E00000000003F00000000001F00000000000F800
00000000FC00000000007E00000000003E00000000003F00000000001F80000000000F80
000000000FC00000000007E00000000007E00000000003F00000000003F80000000001F8
0000000001FC0000000000FC0000000000FE00000000007E00000000007F00000000003F
00000000003F80000000001F80000000001FC0000000000FC0000000000FE00000000007
E00000000007F00000000007F00000000003F00000000003F80000000001F80000000001
FC0000000001FC0000000000FC0000000000FE0000000000FE00000000007F0000000000
7F00000000007F00000000003F80000000003F80000000003F80000000003FC000000000
1FC0000000001FC0000000001FE0000000000FE0000000000FE0000000000FE000000000
0FF00000000007F00000000007F00000000007F00000000007F80000000007F800000000
03F80000000003F80000000003FC0000000003FC0000000003FC0000000001FC00000000
01FC0000000001FE0000000001FE0000000001FE0000000000FE0000000000FE00000000
00FE0000000000FF0000000000FF0000000000FF0000000000FF00000000007F00000000
007F00000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000003F80000000003FC0000000003FC0000000003FC0000000
003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000
003FC0000000003FC0000000003FC0000000001FC0000000001FE0000000001FE0000000
001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000
001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000
001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000
001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000
001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000
001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000001FE0000000
001FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000
003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000
003FC0000000003F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F00000000007F0000000000FF00000000
00FF0000000000FF0000000000FF0000000000FE0000000000FE0000000000FE00000000
01FE0000000001FE0000000001FE0000000001FC0000000001FC0000000003FC00000000
03FC0000000003FC0000000003F80000000003F80000000007F80000000007F800000000
07F00000000007F00000000007F0000000000FF0000000000FE0000000000FE000000000
0FE0000000001FE0000000001FC0000000001FC0000000003FC0000000003F8000000000
3F80000000003F80000000007F00000000007F00000000007F0000000000FE0000000000
FE0000000000FC0000000001FC0000000001FC0000000001F80000000003F80000000003
F00000000007F00000000007F00000000007E0000000000FE0000000000FC0000000001F
C0000000001F80000000003F80000000003F00000000007F00000000007E0000000000FE
0000000000FC0000000001FC0000000001F80000000003F80000000003F00000000007E0
0000000007E0000000000FC0000000000F80000000001F80000000003F00000000003E00
000000007E0000000000FC0000000000F80000000001F00000000003F00000000003E000
00000007C0000000000F80000000001F00000000003F00000000003E00000000007C0000
000000F80000000000F000000000002BF87E8242>I<FFFFFF80FFFFFF80FFFFFF80FFFF
FF80FFFFFF80FFFFFF80FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFF
FF80FFFFFF8019F86A8230>I<FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F80FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF8019F880
8230>I<FFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFFFE00FFFF
FFFFFFFFFFFFFE007FC0000000001FFFFF007FC000000000007FFF003FE0000000000007
FF001FF0000000000001FF800FF80000000000007F800FF80000000000001F8007FC0000
000000000FC003FE00000000000007C001FF00000000000003C001FF00000000000001E0
00FF80000000000000E0007FC000000000000060003FC000000000000070003FE0000000
00000030001FF000000000000030000FF800000000000018000FF8000000000000000007
FC000000000000000003FE000000000000000001FF000000000000000001FF0000000000
00000000FF8000000000000000007FC000000000000000003FE000000000000000003FE0
00000000000000001FF000000000000000000FF8000000000000000007FC000000000000
000007FC000000000000000003FE000000000000000001FF000000000000000000FF0000
00000000000000FF8000000000000000007FC000000000000000003FE000000000000000
003FE000000000000000001FF000000000000000000FF8000000000000000007F0000000
000000000007E0000000000000000007E000000000000000000FC000000000000000000F
8000000000000000001F0000000000000000003E0000000000000000007E000000000000
000000FC000000000000000000F8000000000000000001F0000000000000000003E00000
00000000000007E0000000000000000007C000000000000000000F800000000000000000
1F0000000000000000003E0000000000000000007E0000000000000000007C0000000000
00000000F8000000000000000001F0000000000000180003F0000000000000300007E000
0000000000300007C000000000000070000F8000000000000060001F00000000000000E0
003F00000000000001E0007E00000000000003C0007C00000000000007C000F800000000
00000FC001F00000000000001F8003F00000000000007F8003E0000000000001FF8007C0
000000000007FF000F8000000000003FFF001F00000000000FFFFF003FFFFFFFFFFFFFFF
FE003FFFFFFFFFFFFFFFFE007FFFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFFFC00FFFFFFFF
FFFFFFFFFC004D537B7F58>80 D<7800000000000780FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00
000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00
000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00
000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00
000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00
000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC00
000000000FC0FC00000000000FC0FC00000000000FC0FC00000000000FC0FC0000000000
0FC0FC00000000000FC0FC00000000000FC0FE00000000001FC07E00000000001F807E00
000000001F807F00000000003F803F00000000003F003F00000000003F003F8000000000
7F001F80000000007E001FC000000000FE000FE000000001FC000FF000000003FC0007F8
00000007F80003FC0000000FF00001FE0000001FE00000FF8000007FC000007FC00000FF
8000003FF80007FF0000001FFF003FFE0000000FFFFFFFFC00000003FFFFFFF000000001
FFFFFFE0000000007FFFFF80000000000FFFFC000000000001FFE00000003A537B7F45>
83 D<FFFFFFFFFFFFFFFFFFFFFFFFE000FFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFF
FFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFF8
007FFF00000000000000FFFFFFF8007FFF0000000000000000FFFFFC003FFF8000000000
00000007FFFC001FFFC00000000000000000FFFE000FFFE000000000000000001FFE000F
FFE0000000000000000007FE0007FFF0000000000000000001FF0003FFF8000000000000
0000007F0001FFFC0000000000000000003F8001FFFC0000000000000000000F8000FFFE
0000000000000000000780007FFF00000000000000000003C0003FFF8000000000000000
0001C0003FFF80000000000000000000E0001FFFC0000000000000000000E0000FFFE000
0000000000000000700007FFE0000000000000000000300007FFF0000000000000000000
300003FFF8000000000000000000180001FFFC000000000000000000000000FFFC000000
000000000000000000FFFE0000000000000000000000007FFF0000000000000000000000
003FFF8000000000000000000000003FFF8000000000000000000000001FFFC000000000
000000000000000FFFE0000000000000000000000007FFF0000000000000000000000007
FFF0000000000000000000000003FFF8000000000000000000000001FFFC000000000000
000000000000FFFE000000000000000000000000FFFE0000000000000000000000007FFF
0000000000000000000000003FFF8000000000000000000000001FFFC000000000000000
000000001FFFC000000000000000000000000FFFE0000000000000000000000007FFF000
0000000000000000000003FFF0000000000000000000000003FFF8000000000000000000
000001FFFC000000000000000000000000FFFE0000000000000000000000007FFE000000
0000000000000000007FFF0000000000000000000000003FFF8000000000000000000000
001FFFC000000000000000000000000FFFC000000000000000000000000FFFE000000000
0000000000000007FFF0000000000000000000000003FFF8000000000000000000000003
FFF8000000000000000000000001FFFC000000000000000000000000FFFC000000000000
0000000000007FF80000000000000000000000007FF00000000000000000000000003FF0
0000000000000000000000001FE00000000000000000000000001FC00000000000000000
000000003F800000000000000000000000007F00000000000000000000000000FE000000
00000000000000000000FE00000000000000000000000001FC0000000000000000000000
0003F800000000000000000000000007F00000000000000000000000000FE00000000000
000000000000001FC00000000000000000000000001F800000000000000000000000003F
800000000000000000000000007F00000000000000000000000000FE0000000000000000
0000000001FC00000000000000000000000003F800000000000000000000000007F00000
0000000000000000000007F00000000000000000000000000FE000000000000000000000
00001FC00000000000000000000000003F800000000000000000000000007F0000000000
0000000000000000FE00000000000000000000000000FE00000000000000000000000001
FC00000000000000000000000003F800000000000000000000000007F000000000000000
00001800000FE00000000000000000003000001FC00000000000000000003000001F8000
00000000000000007000003F800000000000000000006000007F00000000000000000000
E00000FE00000000000000000001E00001FC00000000000000000003C00003F800000000
000000000007C00007F00000000000000000000F800007F00000000000000000001F8000
0FE00000000000000000007F80001FC0000000000000000000FF00003F80000000000000
000003FF00007F0000000000000000000FFF0000FE0000000000000000007FFE0000FE00
0000000000000003FFFE0001FC00000000000000007FFFFE0003F8000000000000007FFF
FFFC0007FFFFFFFFFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFFFFFFFF8001FFFFFFFFF
FFFFFFFFFFFFFFF8001FFFFFFFFFFFFFFFFFFFFFFFF8003FFFFFFFFFFFFFFFFFFFFFFFF0
007FFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFF
FFFFFFFFFFE0006D747B7F78>88 D E /Ff 140[32 3[42 42 12[42
97[{ TeXBase1Encoding ReEncodeFont }4 83.333336 /Times-Italic
rf /Fg 170[58 6[58 1[49 5[44 1[58 68[{ TeXBase1Encoding ReEncodeFont }5
79.999924 /Times-Roman rf /Fh 139[60 60 60 1[60 60 1[60
60 5[60 60 1[60 60 60 55[60 60 40[{ TeXBase1Encoding ReEncodeFont }14
100.000000 /Courier rf /Fi 10 112 df<0000300000700000E00001C00003800007
80000F00001E00003E00003C0000780000F80000F00001F00001E00003E00003E00007C0
0007C0000FC0000F80000F80001F80001F00001F00003F00003F00003F00003E00007E00
007E00007E00007E00007E00007E00007C0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
007C00007E00007E00007E00007E00007E00007E00003E00003F00003F00003F00001F00
001F00001F80000F80000F80000FC00007C00007C00003E00003E00001E00001F00000F0
0000F800007800003C00003E00001E00000F000007800003800001C00000E00000700000
30145A77C323>40 D<C00000E000007000003800001C00001E00000F000007800007C000
03C00001E00001F00000F00000F800007800007C00007C00003E00003E00003F00001F00
001F00001F80000F80000F80000FC0000FC0000FC00007C00007E00007E00007E00007E0
0007E00007E00003E00003F00003F00003F00003F00003F00003F00003F00003F00003F0
0003F00003F00003F00003F00003F00003F00003F00003F00003F00003E00007E00007E0
0007E00007E00007E00007E00007C0000FC0000FC0000FC0000F80000F80001F80001F00
001F00003F00003E00003E00007C00007C0000780000F80000F00001F00001E00003C000
07C0000780000F00001E00001C0000380000700000E00000C00000145A7BC323>I<0001
C0000003C0000007C000001FC000007FC00007FFC000FFFFC000FF9FC000F81FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D78BC2D>49
D<7FFFFFFFFFFFFFE0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF07FFFFFFFFFFFFFE0000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
007FFFFFFFFFFFFFE0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF07FFFFFFFFFFFFFE03C167B
A147>61 D<000000007C000003F801FF00001FFF078F80007E0FDE1F8000F803F81F8003
F001F81F8003F001F81F8007E000FC06000FE000FE00000FC0007E00001FC0007F00001F
C0007F00001FC0007F00001FC0007F00001FC0007F00001FC0007F00001FC0007F00001F
C0007F00000FC0007E00000FE000FE000007E000FC000003F001F8000003F001F8000001
F803E0000003FE0FC00000071FFF0000000703F80000000600000000000E00000000000E
00000000000E00000000000F00000000000F00000000000F80000000000FC00000000007
FFFFE0000007FFFFFE000003FFFFFF800001FFFFFFE00000FFFFFFF00003FFFFFFF8000F
C0001FFC001F000001FE003E000000FE007C0000007E007C0000003F00F80000003F00F8
0000001F00F80000001F00F80000001F00F80000001F00FC0000003F007C0000003E007E
0000007E003F000000FC001F800001F8000FC00003F00003F0000FC00000FE007F000000
3FFFFC00000003FFC00000293D7EA82D>103 D<01E00007F80007F8000FFC000FFC000F
FC000FFC0007F80007F80001E00000000000000000000000000000000000000000000000
000000000000000000000000000001FC007FFC007FFC007FFC0007FC0003FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0003FE00FFFFF0FFFFF0FFFFF0143E7DBD1A>105
D<01FC00FFFC00FFFC00FFFC0007FC0003FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0003FE
00FFFFF8FFFFF8FFFFF8153F7DBE1A>108 D<01F801FE0000FF0000FFF807FFC003FFE0
00FFF81E07E00F03F000FFF87803F03C01F80007F8E001F87000FC0003F9C001FCE000FE
0001F98001FCC000FE0001FB8000FFC0007F0001FB0000FF80007F0001FF0000FF80007F
0001FE0000FF00007F0001FE0000FF00007F0001FC0000FE00007F0001FC0000FE00007F
0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F
0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F
0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F
0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F
0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F0001FC0000FE00007F
0001FC0000FE00007F0001FC0000FE00007F0003FE0001FF0000FF80FFFFF87FFFFC3FFF
FEFFFFF87FFFFC3FFFFEFFFFF87FFFFC3FFFFE47287DA74C>I<01F801FE0000FFF807FF
C000FFF81E07E000FFF87803F00007F8E001F80003F9C001FC0001F98001FC0001FB8000
FE0001FB0000FE0001FF0000FE0001FE0000FE0001FE0000FE0001FC0000FE0001FC0000
FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000
FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000
FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000
FE0001FC0000FE0001FC0000FE0001FC0000FE0001FC0000FE0003FE0001FF00FFFFF87F
FFFCFFFFF87FFFFCFFFFF87FFFFC2E287DA733>I<0000FF00000007FFE000001F81F800
007E007E0000F8001F0001F0000F8003E00007C007C00003E00FC00003F01F800001F81F
800001F83F800001FC3F800001FC7F000000FE7F000000FE7F000000FE7F000000FEFF00
0000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF0000
00FFFF000000FF7F000000FE7F000000FE7F000000FE3F800001FC3F800001FC3F800001
FC1F800001F80FC00003F00FC00003F007E00007E003F0000FC001F8001F80007E007E00
003F81FC00000FFFF0000000FF0000282A7EA82D>I E /Fj 3 49
df<FFFFFFFFFFC0FFFFFFFFFFC0FFFFFFFFFFC02A037A9137>0 D<3C7EFFFFFFFF7E3C08
087A9414>I<007800FE01FE01FE01FE03FE03FC03FC03FC07F807F807F807F007F00FE0
0FE00FE00FC01FC01F801F801F803F003F003F003E007E007C007C007C00F800F800F800
F0000F227EA413>48 D E /Fk 133[35 40 40 61 40 45 25 35
35 45 45 45 45 66 25 40 1[25 45 45 25 40 45 40 45 45
8[56 76 1[66 51 45 56 1[56 66 61 76 51 1[40 30 1[66 56
56 66 61 1[56 5[30 30 45 45 1[45 45 45 1[45 45 2[23 30
23 2[30 30 30 71 35[45 2[{ TeXBase1Encoding ReEncodeFont }61
91.249977 /Times-Italic rf /Fl 170[53 6[53 1[44 5[40
1[53 68[{ TeXBase1Encoding ReEncodeFont }5 72.999954
/Times-Roman rf /Fm 5 83 df<0007FC000000001FE000001FFF80000000FFF800007F
FFE0000003FFFE0001FFFFF800000FF01F8003FFFFFE00003F8003C007E00FFF00007E00
01E00F8003FF8000F80000F00F0000FFE001F00000701E00007FF003E00000381C00003F
F807C000001C3800001FF80F8000001C3800000FFC1F0000000C70000007FE3E0000000E
70000007FF3E0000000660000003FFFC00000006E0000001FFF800000007E0000000FFF8
00000003C00000007FF000000003C00000007FF000000003C00000003FF000000003C000
00001FF800000003C00000000FFC00000003C00000000FFE00000003C00000000FFE0000
0003C00000001FFF00000007E00000001FFF80000007600000003FFFC000000660000000
7CFFE000000E700000007C7FE000000E30000000F83FF000001C38000001F01FF800001C
38000003E01FFC0000381C000007C00FFE0000780E00000F8007FF0000F00F00001F0001
FFC001F00780007E0000FFF007E003C001FC00007FFFFFC001F80FF000001FFFFF80007F
FFC0000007FFFE00001FFF00000001FFF8000007F8000000003FE00050297BA75B>49
D<00000000001800000000003C00000000007C00000000007C0000000000F80000000000
F80000000001F00000000001F00000000003E00000000003E00000000007C0000000000F
C0000000000F80000000001F00000000001F00000000003E00000000003E00000000007C
00000000007C0000000000F80000000000F80000000001F00000000001F00000000003E0
0000000003E00000000007C00000000007C0000000000F80000000000F80000000001F00
000000001F00000000003E00000000007E00000000007C0000000000F80000000000F800
00000001F00000000001F00000000003E00000000003E00000000007C00000000007C000
0000000F80000000000F80000000001F00000000001F00000000003E00000000003E0000
0000007C00000000007C0000000000F80000000001F80000000001F00000000003E00000
000003E00000000007C00000000007C0000000000F80000000000F80000000001F000000
00001F00000000003E00000000003E00000000007C00000000007C0000000000F8000000
0000F80000000001F00000000001F00000000003E00000000003E00000000007C0000000
000FC0000000000F80000000001F00000000001F00000000003E00000000003E00000000
007C00000000007C0000000000F80000000000F80000000000F000000000006000000000
002E5474C000>54 D<7FFFFFFFFEFFFFFFFFFFFFFFFFFFFF7FFFFFFFFF000000000F0000
00000F000000000F000000000F000000000F000000000F000000000F000000000F000000
000F000000000F000000000F000000000F000000000F000000000F000000000F00000000
0F000000000F000000000F000000000F000000000F000000000F000000000F000000000F
000000000F000000000F1FFFFFFFFF7FFFFFFFFF7FFFFFFFFF7FFFFFFFFF000000000F00
0000000F000000000F000000000F000000000F000000000F000000000F000000000F0000
00000F000000000F000000000F000000000F000000000F000000000F000000000F000000
000F000000000F000000000F000000000F000000000F000000000F000000000F00000000
0F000000000F000000000F000000000F7FFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFE
283F7BBE33>57 D<000001FFFFFF000000003FFFFFFFF8000001FFFFFFFFFE000007FFFF
FFFFFF80001FFFFFFFFFFFE0007FE1FC007FFFF001FC01FC0003FFF803F001FC0000FFFC
07C003FC00003FFE0F8003FC00000FFE1F0003FC000007FE3F0003FC000003FF7F0003F8
000001FF7E0003F8000001FFFE0003F8000001FFFC0003F8000000FFF00007F8000000FF
C00007F8000000FF000007F0000000FE000007F0000000FE000007F0000000FE000007F0
000000FC00000FF0000001FC00000FE0000001F800000FE0000001F800000FE0000003F0
00000FE0000003F000001FE0000007E000001FC0000007C000001FC000000F8000001FC0
00001F0000001FC000003E0000003F8000007C0000003F800001F80000003F800003E000
00003F80000FC00000007F00007F000000007F000FFE000000007F07FFF8000000007E1F
FFC000000000FE3FFF0000000000FE7FF80000000000FEFF000000000001FC0000000000
0001FC00000000000001FC00000000000001F800000000000003F800000000000003F800
000000000003F000000000000007F000000000000007F000000000000007E00000000000
000FE00000000000000FC00000000000000FC00000000000001FC00000000000001F8000
00000000003F800000000000003F800000000000003F000000000000007F000000000000
007E000000000000007E00000000000000FC00000000000000F000000000000000C00000
0000000040437EBD3F>80 D<000001FFFFFFC000000000003FFFFFFFFE0000000001FFFF
FFFFFFC000000007FFFFFFFFFFF00000001FFFFFFFFFFFF80000007FE1FC001FFFFC0000
01FC01FC0000FFFE000003F001FC00001FFE000007C001FC000007FF00000F8003FC0000
03FF00001F0003FC000001FF00003F0003FC000001FF00007F0003FC000000FF00007E00
03F8000000FF0000FE0003F8000000FF0000FC0003F8000000FE0000F00003F8000000FE
0000C00007F8000000FE0000000007F8000000FC0000000007F0000001FC0000000007F0
000001F80000000007F0000001F00000000007F0000003F0000000000FF0000007E00000
00000FE0000007C0000000000FE000000F80000000000FE000001F00000000000FE00000
3E00000000001FC00000FC00000000001FC00001F000000000001FC0000FE00000000000
1FC000FF8000000000003F803FFF0000000000003F80FFFC0000000000003F81FFE00000
000000003F83FFE00000000000007F07FFF00000000000007F00FFF00000000000007F00
3FF80000000000007E001FF8000000000000FE000FFC000000000000FE000FFC00000000
0000FC0007FE000000000001FC0007FE000000000001FC0003FE000000000001F80003FF
000000000003F80001FF000000000003F80001FF800000000003F00001FF800000000007
F00000FF800000000007F00000FFC00001800007E000007FC0000F80000FE000007FE000
1F00000FE000007FE0003F00000FC000003FF0007E00001FC000003FF0007C00001F8000
001FF800F800001F8000001FFC01F000003F8000000FFF0FE000003F0000000FFFFF8000
007F00000007FFFF0000007E00000003FFFC0000007800000001FFE0000000E000000000
7F00000049407EBD4D>82 D E /Fn 136[66 1[51 30 35 40 1[51
45 51 1[25 2[25 51 1[30 40 51 40 1[45 97[{
 TeXBase1Encoding ReEncodeFont }16 91.249977 /Times-Bold
rf /Fo 138[66 1[47 1[66 11[53 30[73 1[86 68[{
 .167 SlantFont TeXBase1Encoding ReEncodeFont }6 119.999947
/Times-Bold rf /Fp 138[80 1[56 1[80 11[64 30[88 1[104
68[{ .167 SlantFont TeXBase1Encoding ReEncodeFont }6
144.000000 /Times-Bold rf /Fq 21 117 df<0003FE00000FFFE0000E3FF0001C0FF0
001803E0001800C000180000001C0000001C0000001E0000001F0000000F8000000F8000
000FC0000007E0000007F0000003F0000001F800000FFC00003EFE000078FE0001F07E00
03E07F0007C03F000F803F000F803F001F001F003F001F003E001F007E001F007C001F00
7C001F007C001F00FC001E00F8003E00F8003E00F8003E00F8003C00F8007C00F8007C00
780078007800F0007C00F0003C01E0001E03C0000F07800007FF000000FC00001C307DAE
1F>14 D<0003FE001FFE007E0000F80003F00007E0000FC0001F80001F80003F00003F00
007F00007FFFF07FFFF07E00007E0000FC0000FC0000FC00007C00007C00007C00007C00
003E00003E00001F00080F801C07C0F801FFE0007F00171E7D9C1D>I<001C000000003E
000380003E0007C0007E000FC0007E000F80007C000F80007C000F8000FC001F8000FC00
1F0000F8001F0000F8001F0001F8003F0001F8003E0001F0003E0001F0003E0003F0007E
0003F0007C0003E0007C0003E0007C0007E000FC0807E000F81807C000F81807C000F818
0FC001F8380FC001F8300FE003F0300FE007F0701FE00EF8601FF83C78E01F7FF03FC01F
1FC00F003F000000003F000000003E000000003E000000007E000000007E000000007C00
0000007C00000000FC00000000FC00000000F800000000F8000000007000000000252C7E
9D2A>22 D<00FFFFFF8003FFFFFF8007FFFFFF800FFFFFFF001E00E000003C00E0000070
00C000007001C00000E001C00000C001C000000003C000000003C0000000038000000003
800000000780000000078000000007800000000F000000000F000000000F000000001F00
0000001F000000001E000000003E000000003E000000003E000000003E000000007C0000
00007C0000000038000000211E7E9C1F>28 D<3C7EFFFFFFFF7E3C08087A8714>58
D<000000C0000001C0000003C0000003800000038000000780000007000000070000000F
0000000E0000000E0000001E0000001C0000001C0000003C000000380000007800000070
00000070000000F0000000E0000000E0000001E0000001C0000001C0000003C000000380
00000780000007000000070000000F0000000E0000000E0000001E0000001C0000001C00
00003C00000038000000380000007800000070000000F0000000E0000000E0000001E000
0001C0000001C0000003C00000038000000380000007800000070000000F0000000E0000
000E0000001E0000001C0000001C0000003C000000380000003800000078000000700000
0070000000F0000000E0000000E00000001A437CB123>61 D<0000000070000000000070
0000000000F00000000001F00000000001F00000000003F80000000003F80000000007F8
000000000DF8000000000DF80000000019F80000000039F80000000031F80000000061FC
0000000060FC00000000C0FC0000000180FC0000000180FC0000000300FC0000000700FC
0000000600FC0000000C00FE0000000C007E00000018007E00000030007E00000030007E
00000060007E000000E0007E000000C0007E00000180007F000001FFFFFF000003FFFFFF
00000600003F00000600003F00000C00003F00001C00003F00001800003F00003000003F
80003000001F80006000001F8000C000001F8001C000001F8003C000001F8007C000001F
800FC000003FC0FFF80007FFFEFFF80007FFFE2F2F7DAE35>65 D<003FFFFFFF00003FFF
FFFFC00000FE0007F00000FE0001F80000FC0000FC0000FC00007E0001FC00007E0001FC
00007F0001F800007F0001F800007F0003F800007F0003F800007E0003F00000FE0003F0
0000FE0007F00001FC0007F00001F80007E00003F00007E00007E0000FE0001FC0000FE0
007F00000FC003FC00000FFFFFF800001FFFFFFE00001FC0003F80001F80000FC0001F80
000FE0003F800007E0003F800007F0003F000007F0003F000003F0007F000003F0007F00
0003F0007E000007F0007E000007F000FE000007E000FE00000FE000FC00000FC000FC00
001FC001FC00003F8001FC00007F0001F80000FE0001F80003F80003F8000FF000FFFFFF
FFC000FFFFFFFC0000302D7CAC35>I<003FFFFFFE0000003FFFFFFFC0000000FE0007F0
000000FE0001F8000000FC00007E000000FC00003F000001FC00001F000001FC00001F80
0001F800000F800001F800000FC00003F8000007C00003F8000007E00003F0000007E000
03F0000007E00007F0000007E00007F0000007E00007E0000007E00007E0000007E0000F
E0000007E0000FE0000007E0000FC000000FE0000FC000000FE0001FC000000FE0001FC0
00000FC0001F8000001FC0001F8000001FC0003F8000001F80003F8000003F80003F0000
003F00003F0000003F00007F0000007E00007F0000007E00007E000000FC00007E000000
F80000FE000001F80000FE000003F00000FC000007E00000FC00000FC00001FC00001F00
0001FC00003E000001F80000FC000001F80003F0000003F8001FC00000FFFFFFFF000000
FFFFFFF8000000332D7CAC3A>68 D<FFFF801FFFF001FFF8FFFF801FFFF001FFF807F800
01FE00003F8007F00000FC00001F0007E00000FC00001E0007E00000FC00001C0007E000
00FC0000180007F00001FC0000300003F00001FC0000300003F00003FE0000600003F000
037E0000E00003F000067E0000C00003F0000E7E0001800003F0000C7E0001800003F000
187E0003000003F000187E0003000003F000307E0006000003F000307E000C000003F000
607E000C000003F800C07E0018000001F800C07E0018000001F801807F0030000001F801
803F0070000001F803003F0060000001F807003F00C0000001F806003F00C0000001F80C
003F0180000001F80C003F0380000001F818003F0300000001F838003F0600000001FC30
003F0600000000FC60003F0C00000000FC60003F8C00000000FCC0001F9800000000FCC0
001FB000000000FD80001FB000000000FF00001FE000000000FF00001FE000000000FE00
001FC000000000FE00001FC000000000FC00001F8000000000FC00001F0000000000F800
001F00000000007000001E00000000007000001E00000000006000000C00000000452E7C
AC43>87 D<0007E000001FF800007C1CE000F80DE001F00FE003E007E007C007E00FC007
E01F8007C01F8007C03F0007C03F000FC07F000F807E000F807E000F807E001F80FE001F
00FC001F00FC001F00FC003F02FC003E06FC003E06F8003E06F8007E0E7C00FE0C7C00FC
0C7C01FC1C3E07BE181F0E1E380FFC0FF003F003C01F1F7D9D25>97
D<00F800001FF800001FF8000001F8000001F8000001F0000001F0000003F0000003F000
0003E0000003E0000007E0000007E0000007C0000007C000000FC000000FC7E0000F9FF8
000FB83C001FF01E001FE01F001FC01F001F800F803F000F803F000F803E000F803E000F
807E001F807E001F807C001F807C001F807C003F80FC003F00F8003F00F8003F00F8007E
00F8007E00F8007C00F800FC00F800F8007801F0007803F0007807E0003C0F80001E1F00
000FFC000003F00000192F7DAD1E>I<0000001F000003FF000003FF0000003F0000003F
0000003E0000003E0000007E0000007E0000007C0000007C000000FC000000FC000000F8
000000F8000001F80007E1F8001FF9F0007C1DF000F80FF001F00FF003E007E007C007E0
0FC007E01F8007E01F8007C03F0007C03F000FC07F000FC07E000F807E000F807E001F80
FE001F80FC001F00FC001F00FC003F02FC003F06FC003E06F8003E06F8007E0E7C00FE0C
7C00FC0C7C01FC1C3E07BE181F0E1E380FFC0FF003F003C0202F7DAD24>100
D<0003F800000FFE00003E078000F8038001F003C003E001C007C001C00FC003C01F8003
801F8007803F000F003F001E007F01FC007FFFF0007FFF00007E000000FE000000FC0000
00FC000000FC000000FC0000007C0000007C0000607C0000E07C0001C03E0003803E000F
001F001C000F81F80003FFE00000FE00001B1F7D9D21>I<001F00000003FF00000003FF
000000003F000000003F000000003E000000003E000000007E000000007E000000007C00
0000007C00000000FC00000000FC00000000F800000000F800000001F800000001F83F00
0001F1FFC00001F3C1F00003FF00F00003FC00F80003F800F80003F800F80007F000F800
07E000F80007E000F80007C000F8000FC001F8000FC001F0000F8001F0000F8001F0001F
8003F0001F8003E0001F0003E0001F0007E0003F0007C0403F0007C0C03E000FC0C03E00
0F80C07E000F81C07E001F01807C001F03807C001F0700FC000F0600FC000F1E00F80007
F800700001E000222F7DAD29>104 D<000700000F80001FC0001FC0000F800007000000
0000000000000000000000000000000000000000000000000001E00007F8000E3C001C3E
00383E00303E00703E00607E00E07C00C07C00C0FC0080F80000F80001F80001F00003F0
0003E00003E00007E00007C04007C0C00FC0C00F80C00F81C01F01801F03801F07000F06
000F1E0007F80001F000122E7EAC18>I<000000E0000001F0000003F0000003F0000003
F0000001C000000000000000000000000000000000000000000000000000000000000000
000000000000007C000003FE0000078F80000E0780001C0780003807C0003007C000700F
C000600F8000E00F8000C00F8000801F8000001F8000001F0000001F0000003F0000003F
0000003E0000003E0000007E0000007E0000007C0000007C000000FC000000FC000000F8
000000F8000001F8000001F8000001F0000001F0000003F0000003F0000003E0000003E0
000007E0003807C000FC0FC000FC0F8000FC1F0000F83E0000F0F800007FF000001F8000
001C3B81AC1D>I<07C007E0001FE03FF80018F8783E003879E01E00307B801F00707F00
1F00607F001F0060FE001F00E0FC001F00C0FC001F00C0F8001F0081F8003F0001F8003E
0001F0003E0001F0003E0003F0007E0003F0007C0003E0007C0003E000FC0007E000F808
07E000F81807C001F81807C001F0180FC001F0380FC003E0300F8003E0700F8003E0E01F
8001E0C01F8001E3C01F0000FF000E00003E00251F7E9D2B>110
D<007C01F80000FE07FE0001CF8E0F0003879C07800307B807C00707F007C00607E003E0
060FC003E00E0F8003E00C0F8003E00C0F8003E0081F8007E0001F8007E0001F0007E000
1F0007E0003F000FE0003F000FC0003E000FC0003E000FC0007E001F80007E001F80007C
001F00007C003F0000FC003E0000FC007C0000FC00FC0000FE01F80001FF03E00001FB87
C00001F1FF000001F0FC000003F000000003F000000003E000000003E000000007E00000
0007E000000007C000000007C00000000FC00000000FC0000000FFFC000000FFFC000000
232B829D24>112 D<07C01F000FF07FC01CF8E0E03879C1E0307B87E0707F07E0607E07
E060FC07E0E0FC0380C0F80000C0F8000081F8000001F8000001F0000001F0000003F000
0003F0000003E0000003E0000007E0000007E0000007C0000007C000000FC000000FC000
000F8000000F8000001F8000001F8000001F0000000E0000001B1F7E9D20>114
D<000E00001F00001F00003F00003F00003E00003E00007E00007E00007C00007C0000FC
0000FC00FFFFF8FFFFF801F80001F80001F00001F00003F00003F00003E00003E00007E0
0007E00007C00007C0000FC0000FC0000F80000F80001F80101F80301F00301F00701F00
601F00E01E01C01E03801F07000F0E0007FC0001F000152B7EA919>116
D E /Fr 16 119 df<00000FFFFFFE00007FFFFFFF0001FFFFFFFF0007FFFFFFFF001FFF
FFFFFE003FE03FE000007F000FE00000FE0007F00001FC0003F00003F80003F80007F000
01F8000FE00001F8000FC00001F8001FC00001F8001F800001F8003F800001F8003F0000
01F8007F000001F8007E000001F8007E000001F8007E000003F800FE000003F000FC0000
03F000FC000003F000FC000007E000FC000007E000FC00000FE000FC00000FC000FC0000
1F8000FC00001F80007C00003F00007C00007E00007C00007C00003E0000F800001E0001
F000001F0007E000000F800F80000003E07E00000000FFF8000000003FC000000030287D
A634>27 D<1E007F807F80FFC0FFC0FFC0FFC07F807F801E000A0A798919>58
D<1E007F80FF80FFC0FFC0FFE0FFE0FFE07FE01E60006000600060006000E000C000C000
C001C001800380030007000E001C001800380030000B1C798919>I<0000000000070000
00000000000F000000000000000F800000000000001F800000000000001F800000000000
003F800000000000007F800000000000007F80000000000000FF80000000000000FF8000
0000000001FF80000000000003FF80000000000003FF800000000000077FC00000000000
077FC000000000000E3FC000000000001E3FC000000000001C3FC00000000000383FC000
00000000383FC00000000000703FC00000000000703FC00000000000E03FC00000000001
C03FC00000000001C03FE00000000003803FE00000000003801FE00000000007001FE000
0000000F001FE0000000000E001FE0000000001C001FE0000000001C001FE00000000038
001FE00000000078001FE00000000070001FE000000000E0001FE000000000E0001FF000
000001C0001FF000000001C0000FF00000000380000FF00000000700000FF000000007FF
FFFFF00000000FFFFFFFF00000000FFFFFFFF00000001C00000FF00000003C00000FF000
00003800000FF00000007000000FF80000007000000FF8000000E0000007F8000001E000
0007F8000001C0000007F800000380000007F800000380000007F800000700000007F800
000F00000007F800000E00000007F800001E00000007F800003C00000007FC00007C0000
0007FC0000FE00000007FC0007FF0000001FFE00FFFFF00007FFFFFCFFFFF00007FFFFFC
FFFFF00007FFFFF83E417DC044>65 D<0001FFFFFFC0007FFFF80001FFFFFFC000FFFFF8
0001FFFFFF8000FFFFF8000001FF8000000FFF00000001FF0000000FF800000001FE0000
000FE000000001FE0000000F8000000001FE0000001F0000000003FE0000003C00000000
03FC000000F80000000003FC000001F00000000003FC000003C00000000007FC00000780
0000000007F800001F000000000007F800003E000000000007F800007800000000000FF8
0000F000000000000FF00003E000000000000FF000078000000000000FF0000F00000000
00001FF0003E0000000000001FE0007C0000000000001FE000F00000000000001FE001E0
0000000000003FE007E00000000000003FC00FE00000000000003FC01FF0000000000000
3FC03FF00000000000007FC0FFF80000000000007F81EFF80000000000007F83CFF80000
000000007F8F87FC000000000000FF9F07FC000000000000FF3C03FE000000000000FF78
03FE000000000000FFF001FF000000000001FFE001FF000000000001FF8001FF00000000
0001FF0000FF800000000001FE0000FF800000000003FE00007FC00000000003FC00007F
C00000000003FC00003FE00000000003FC00003FE00000000007FC00003FE00000000007
F800001FF00000000007F800001FF00000000007F800000FF8000000000FF800000FF800
0000000FF0000007FC000000000FF0000007FC000000000FF0000007FE000000001FF000
0003FE000000001FE0000003FE000000001FE0000001FF000000003FE0000001FF000000
003FE0000001FF800000003FC0000001FF800000007FE0000003FFE00000FFFFFFE0007F
FFFF0000FFFFFFE0007FFFFF0000FFFFFFE0007FFFFF00004D3E7DBD4D>75
D<0001FFFF800001FFFFF80001FFFF800001FFFFF00001FFFF800001FFFFF0000000FFC0
00000FFE00000001FFC0000003F000000001FFE0000003E000000001FFE0000001C00000
0001DFE0000003C000000003DFF0000003C0000000038FF000000380000000038FF80000
0380000000038FF8000007800000000787FC000007800000000707FC0000070000000007
03FC000007000000000703FE00000F000000000F03FE00000F000000000E01FF00000E00
0000000E01FF00000E000000000E00FF00001E000000001E00FF80001E000000001C007F
80001C000000001C007FC0001C000000001C007FC0003C000000003C003FE0003C000000
0038003FE000380000000038001FE000380000000038001FF000780000000078001FF000
780000000070000FF800700000000070000FF8007000000000700007F800F000000000F0
0007FC00F000000000E00003FC00E000000000E00003FE00E000000000E00003FE01E000
000001E00001FF01E000000001C00001FF01C000000001C00000FF01C000000001C00000
FF83C000000003C00000FF83C0000000038000007FC380000000038000007FC380000000
038000003FC780000000078000003FE780000000070000001FE700000000070000001FF7
00000000070000001FFF000000000F0000000FFF000000000E0000000FFE000000000E00
000007FE000000000E00000007FE000000001E00000007FE000000001C00000003FC0000
00001C00000003FC000000003C00000001FC000000007C00000001FC00000000FE000000
00F800000003FF00000000F8000000FFFFFC000000F8000000FFFFFC00000078000000FF
FFFC000000700000004D3E7DBD49>78 D<000000003FF0000000000003FFFF0000000000
1FC03FC0000000007E0007E000000001F80001F800000007E00000FC0000000FC000007E
0000003F0000003F0000007E0000001F800000FC0000001FC00003F80000000FC00007F0
0000000FE0000FE00000000FE0001FC000000007F0001FC000000007F0003F8000000007
F8007F0000000007F800FF0000000007F801FE0000000003F801FE0000000003F803FC00
00000003FC03FC0000000003FC07F80000000003FC0FF80000000007FC0FF00000000007
FC1FF00000000007FC1FF00000000007FC1FE00000000007FC3FE00000000007FC3FE000
00000007F87FC0000000000FF87FC0000000000FF87FC0000000000FF87FC0000000000F
F8FF80000000001FF0FF80000000001FF0FF80000000001FF0FF80000000003FE0FF8000
0000003FE0FF80000000003FE0FF00000000007FC0FF00000000007FC0FF0000000000FF
80FF0000000000FF80FF0000000000FF00FF0000000001FE00FF0000000003FE00FF0000
000003FC00FF0000000007F8007F8000000007F8007F800000000FF0007F800000001FE0
003F800000001FC0003F800000003F80001FC00000007F00001FC0000000FE00000FE000
0001FC00000FE0000003F8000007F0000007E0000003F800001FC0000001FC00003F8000
0000FE0000FE000000003F8003F8000000000FE01FE00000000003FFFF0000000000007F
F0000000003E427BBF45>I<0001FFFFFFFFF000000001FFFFFFFFFF00000001FFFFFFFF
FFC000000001FF00007FE000000001FF00000FF800000001FE000003FC00000001FE0000
01FC00000003FE000001FE00000003FE000000FF00000003FC000000FF00000003FC0000
00FF00000007FC000000FF00000007FC000000FF80000007F8000000FF80000007F80000
00FF8000000FF8000000FF8000000FF8000001FF0000000FF0000001FF0000000FF00000
01FF0000001FF0000001FE0000001FF0000003FE0000001FE0000003FC0000001FE00000
07FC0000003FE0000007F80000003FE000000FF00000003FC000001FE00000003FC00000
3FC00000007FC000007F800000007FC00000FE000000007F800003FC000000007F80003F
F000000000FFFFFFFFC000000000FFFFFFFC0000000000FF0000000000000000FF000000
0000000001FF0000000000000001FF0000000000000001FE0000000000000001FE000000
0000000003FE0000000000000003FE0000000000000003FC0000000000000003FC000000
0000000007FC0000000000000007FC0000000000000007F80000000000000007F8000000
000000000FF8000000000000000FF8000000000000000FF0000000000000000FF0000000
000000001FF0000000000000001FF0000000000000001FE0000000000000001FE0000000
000000003FE0000000000000003FE0000000000000003FC0000000000000007FE0000000
000000FFFFFFE00000000000FFFFFFE00000000000FFFFFFE00000000000413E7DBD3A>
I<00000007FC001C0000003FFF801C000000FFFFE038000003F803F07800000FE000F8F8
00001F80003DF800003F00001FF000007E00000FF00000FC00000FF00001F8000007F000
01F0000007E00003F0000007E00007E0000003E00007E0000003E0000FE0000003C0000F
C0000003C0000FC0000003C0000FC0000003C0001FC000000380001FC000000380001FC0
00000380001FE000000380001FE000000000001FF000000000001FF800000000001FFE00
000000000FFFC0000000000FFFFC0000000007FFFFC000000007FFFFF800000003FFFFFE
00000001FFFFFF00000000FFFFFF800000003FFFFFC000000007FFFFE000000000FFFFE0
000000000FFFF00000000000FFF000000000003FF000000000001FF800000000000FF800
0000000007F8000000000007F8000000000003F8000700000003F8000F00000003F8000F
00000003F0000E00000003F0000E00000003F0001E00000007F0001E00000007E0001E00
000007E0001E0000000FC0003E0000000FC0003F0000001F80003F0000001F80003F8000
003F00007F8000007E00007FC00000FC00007FE00001F800007DF00003F00000F8FC000F
E00000F83F803F800000F01FFFFE000000E007FFF8000000C0007FC000000036427BBF38
>83 D<0000000007F000000003FFF000000003FFE000000003FFE0000000000FE0000000
000FE0000000000FC0000000000FC0000000001FC0000000001FC0000000001F80000000
001F80000000003F80000000003F80000000003F00000000003F00000000007F00000000
007F00000000007E00000000007E0000000000FE0000000000FE0000000000FC0000001F
80FC000000FFE1FC000003F071FC00000FC039F800001F801DF800003F000FF800007E00
0FF80000FC000FF00001FC0007F00003F80007F00007F00007F00007F00007E0000FE000
07E0001FE0000FE0001FE0000FE0003FC0000FC0003FC0000FC0003FC0001FC0007FC000
1FC0007F80001F80007F80001F80007F80003F8000FF80003F8000FF00003F0000FF0000
3F0000FF00007F0000FF00007F0380FE00007E0380FE00007E0380FE0000FE0380FE0000
FE07807E0001FC07007E0003FC07007E0003FC0F003F0007FC0E003F000EFC0E001F801C
7C1C000F80787C1C0007C1F03E380001FFC01FF000007F0007C0002C407DBE2F>100
D<00003C0000FE0000FE0001FE0001FE0001FE0001FC0000700000000000000000000000
00000000000000000000000000000000000000000000000000000000007E0001FF8003C7
C00703C00F03E00E03E01C03E01C07E03807E03807E0780FE0700FC0700FC0F01FC0F01F
80001F80003F80003F00007F00007E00007E0000FE0000FC0000FC0001FC0001F80003F8
0E03F00E03F00E07F01E07E01C07E01C07E03C07C03807C07807C07007C0E007C1E003E3
C001FF00007C00173E7EBC1F>105 D<01F0000FF00003F8000007FC003FFE001FFF0000
0F1F00F01F007C0F80000E1F03C00F80E007C0001E0F87000FC3C003E0001C0F8E0007C7
8003E0003C0FDC0007EF0003F000380FF80007EE0003F000380FF00007FC0003F000781F
F00007F80003F000701FE00007F80003F000701FC00007F00003F000701FC00007F00003
F000F01F80000FE00007F000F03F80000FE00007E000003F00000FC00007E000003F0000
0FC00007E000003F00001FC0000FE000007F00001FC0000FC000007E00001F80000FC000
007E00001F80001FC000007E00003F80001F800000FE00003F80001F800000FC00003F00
003F800000FC00003F00003F000000FC00007F00003F000001FC00007F00007F01C001F8
00007E00007E01C001F800007E00007E01C001F80000FE0000FE03C003F80000FE0000FC
038003F00000FC0000FC038003F00000FC0000FC078003F00001FC0000F8070007F00001
FC0000F80F0007E00001F80000F80E0007E00001F80000F81C0007E00003F80000F83C00
0FE00003F800007C78000FC00003F000003FE00003800000E000000F80004A297EA750>
109 D<0007C000FE00000FF003FF80001C7C0F07E000383C1C03F000783E7801F800703E
F000F800F03FE000FC00E03FC000FC00E03F8000FE01E07F80007E01C07F00007E01C07E
00007E01C07E0000FF03C0FE0000FF03C0FE0000FF0000FC0000FF0000FC0000FF0001FC
0001FF0001FC0001FE0001F80001FE0001F80001FE0003F80003FE0003F80003FC0003F0
0003FC0003F00003FC0007F00007F80007F00007F80007E00007F00007E0000FF0000FE0
000FE0000FE0001FE0000FE0001FC0000FE0003F80001FE0003F00001FF0007E00001FF0
00FC00001FB801F800003FBC03E000003F9E0FC000003F07FF0000003F01F80000007F00
000000007F00000000007E00000000007E0000000000FE0000000000FE0000000000FC00
00000000FC0000000001FC0000000001FC0000000001F80000000001F80000000003F800
00000003F800000000FFFFE0000000FFFFE0000000FFFFE0000000303A84A72E>112
D<000070000000FC000001FC000001FC000001F8000001F8000003F8000003F8000003F0
000003F0000007F0000007F0000007E0000007E000000FE000000FE000000FC000000FC0
007FFFFFF0FFFFFFF0FFFFFFE0001F8000003F8000003F8000003F0000003F0000007F00
00007F0000007E0000007E000000FE000000FE000000FC000000FC000001FC000001FC00
0001F8000001F8000003F8000003F8000003F0000003F0000007F0000007F001C007E001
C007E003C00FE003800FE003800FC007800FC007000FC00E000FC01E000FC03C0007C038
0007C0700003E1E00001FF8000003E00001C3A7EB821>116 D<007C0000000001FF0000
038003C7C0000FC00703C0000FC00F03E0000FC00E03E0001FC01C03E0001FC01C07E000
1F803807E0001F803807E0003F80780FE0003F80700FC0003F00700FC0003F00F01FC000
7F00F01F80007F00001F80007E00003F80007E00003F0000FE00003F0000FE00007F0000
FC00007E0000FC00007E0001FC0000FE0001FC0000FC0001F80000FC0001F80000FC0003
F80001FC0003F81C01F80003F01C01F80003F01C01F80007F01C01F80007F03C01F80007
E03801F8000FE03801F8001FE07800F8001FE07000FC003FE070007C0073E0F0007E00E3
E0E0003F03C1F1C0000FFF007F800001FC001F002E297EA734>I<007E00007801FF0001
FC03C7C001FE0703C003FE0F03E003FE0E03E003FE1C03E003FE1C07E001FE3807E000FE
3807E0007E780FE0003E700FC0003E700FC0001EF01FC0001EF01F80001C001F80001C00
3F80001C003F00003C003F000038007F000038007E000038007E00007800FE00007000FC
00007000FC0000F000FC0000E001FC0000E001F80001C001F80001C001F800038001F800
038001F800070001F800070000F8000E0000F8001C0000FC003C00007C007800003E00F0
00001F03C0000007FF80000001FC000027297EA72C>I E /Fs 134[60
1[86 1[66 40 47 53 1[66 60 66 100 33 66 1[33 66 60 40
53 66 53 66 60 12[80 66 2[73 2[113 9[86 13[60 60 60 60
60 2[30 40 30 41[66 2[{ TeXBase1Encoding ReEncodeFont }35
119.999947 /Times-Bold rf /Ft 138[45 1[35 30 45 11[40
1[40 14[56 51 12[51 1[66 68[{
 .167 SlantFont TeXBase1Encoding ReEncodeFont }10 91.249977
/Times-Roman rf /Fu 105[45 1[40 40 24[40 45 45 66 45
45 25 35 30 45 45 45 45 71 25 45 25 25 45 45 30 40 45
40 45 40 3[30 1[30 56 66 66 86 66 66 56 51 61 66 51 66
66 81 56 66 35 30 66 66 51 56 66 61 61 66 3[51 1[25 25
45 45 45 45 45 45 45 45 45 45 25 23 30 23 51 1[30 30
30 1[76 1[45 31[51 51 2[{ TeXBase1Encoding ReEncodeFont }82
91.249977 /Times-Roman rf /Fv 2 3 df<1C007F00FF80FF80FF80FF80FF807F001C
000909799917>1 D<6000000006F80000000FFC0000001F7E0000003F3F0000007E1F80
0000FC0FC00001F807E00003F003F00007E001F8000FC000FC001F80007E003F00003F00
7E00001F80FC00000FC1F8000007E3F0000003F7E0000001FFC0000000FF800000007F00
0000007F00000000FF80000001FFC0000003F7E0000007E3F000000FC1F800001F80FC00
003F007E00007E003F0000FC001F8001F8000FC003F00007E007E00003F00FC00001F81F
800000FC3F0000007E7E0000003FFC0000001FF80000000F6000000006282874A841>I
E /Fw 16 112 df<000003FF00000000001FFFE000000000FE01FC00000001F8007E0000
0007E0001F8000000FC0000FC000003F800007F000007F000003F80000FE000001FC0001
FC000000FE0001FC000000FE0003F80000007F0007F80000007F8007F00000003F800FF0
0000003FC00FE00000001FC01FE00000001FE01FE00000001FE03FC00000000FF03FC000
00000FF03FC00000000FF07FC00000000FF87FC00000000FF87F8000000007F87F818000
0607F8FF8180000607FCFF8180000607FCFF81FFFFFE07FCFF81FFFFFE07FCFF81FFFFFE
07FCFF81FFFFFE07FCFF81FFFFFE07FCFF81FFFFFE07FCFF81FFFFFE07FCFF8180000607
FCFF8180000607FCFF8180000607FC7F8000000007F87F8000000007F87FC00000000FF8
7FC00000000FF83FC00000000FF03FC00000000FF01FE00000001FE01FE00000001FE01F
E00000001FE00FF00000003FC007F00000003F8007F00000003F8003F80000007F0001FC
000000FE0001FC000000FE0000FE000001FC00007F000003F800003F800007F000001FC0
000FE0000007E0001F80000003F8007F00000000FE01FC000000001FFFE00000000003FF
000000363D7BBA41>2 D<0000600000E00001C0000380000700000E00001E00003C0000
780000780000F00001E00001E00003C00003C00007C0000780000F80000F00000F00001F
00001E00001E00003E00003E00003E00007C00007C00007C00007C00007C00007C0000F8
0000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F8
0000F80000F80000F80000F80000F800007C00007C00007C00007C00007C00007C00003E
00003E00003E00001E00001E00001F00000F00000F00000F800007800007C00003C00003
C00001E00001E00000F000007800007800003C00001E00000E000007000003800001C000
00E0000060135278BD20>40 D<C00000E000007000003800001C00000E00000F00000780
0003C00003C00001E00000F00000F000007800007800007C00003C00003E00001E00001E
00001F00000F00000F00000F80000F80000F800007C00007C00007C00007C00007C00007
C00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003
E00003E00003E00003E00003E00003E00003E00007C00007C00007C00007C00007C00007
C0000F80000F80000F80000F00000F00001F00001E00001E00003E00003C00007C000078
0000780000F00000F00001E00003C00003C0000780000F00000E00001C00003800007000
00E00000C0000013527CBD20>I<00000030000000000000780000000000007800000000
000078000000000000780000000000007800000000000078000000000000780000000000
007800000000000078000000000000780000000000007800000000000078000000000000
780000000000007800000000000078000000000000780000000000007800000000000078
000000000000780000000000007800000000000078000000000000780000000000007800
0000000000780000007FFFFFFFFFFFF8FFFFFFFFFFFFFCFFFFFFFFFFFFFC7FFFFFFFFFFF
F80000007800000000000078000000000000780000000000007800000000000078000000
000000780000000000007800000000000078000000000000780000000000007800000000
000078000000000000780000000000007800000000000078000000000000780000000000
007800000000000078000000000000780000000000007800000000000078000000000000
780000000000007800000000000078000000000000780000000000003000000036367BAF
41>43 D<0003F80000001FFF0000007E0FC00000F803E00001E000F00003C000780007C0
007C000F80003E000F80003E001F00001F001F00001F003F00001F803F00001F803F0000
1F807E00000FC07E00000FC07E00000FC07E00000FC07E00000FC07E00000FC0FE00000F
E0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0
FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE
00000FE0FE00000FE0FE00000FE0FE00000FE07E00000FC07E00000FC07E00000FC07E00
000FC07F00001FC03F00001F803F00001F803F00001F801F00001F001F80003F000F8000
3E000F80003E0007C0007C0003E000F80001F001F00000F803E000007E0FC000001FFF00
000003F80000233A7DB72A>48 D<0001C0000003C0000007C000001FC00000FFC000FFFF
C000FFFFC000FF1FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000003FE0007FFFFFF07FFFFFF07FFFFFF01C3879B72A>I<000FF00000007F
FE000001FFFF800003E03FE0000F000FF0000E0007F8001C0003FC00380001FE00300001
FE00700000FF00600000FF00FC0000FF00FF00007F80FF80007F80FF80007F80FF80007F
80FF80007F80FF80007F807F00007F801C00007F800000007F80000000FF00000000FF00
000000FF00000001FE00000001FC00000003FC00000003F800000007F000000007E00000
000FE00000001FC00000003F800000003F000000007C00000000F800000001F000000003
E000000007C00000000F800000000F000000001E000180003C000180007800018000F000
038001E000030003C000030007800003000E000007000FFFFFFF001FFFFFFF003FFFFFFF
007FFFFFFE00FFFFFFFE00FFFFFFFE00FFFFFFFE0021387CB72A>I<0007F80000003FFF
0000007FFFC00001F80FF00003C007F800078003FC000E0001FC000F0001FE001FE000FE
001FF000FF001FF000FF001FF000FF001FF000FF001FF000FF000FE000FF0007C000FF00
000000FE00000001FE00000001FE00000001FC00000003F800000003F800000007F00000
0007E00000000F800000007E0000001FFC0000001FFF800000000FE000000007F0000000
01FC00000001FE00000000FF000000007F800000007F800000007FC00000007FC0000000
3FC00000003FE00000003FE01E00003FE07F80003FE0FFC0003FE0FFC0003FE0FFC0003F
E0FFC0003FE0FFC0003FC0FF80007FC07F80007F807E00007F80700000FF00380001FE00
1E0001FE000F8003F80007F00FF00001FFFFC000007FFF0000000FF80000233A7DB72A>
I<000000380000000038000000007800000000F800000000F800000001F800000003F800
000007F800000007F80000000FF80000001FF80000001BF800000033F800000073F80000
0063F8000000C3F8000001C3F800000183F800000303F800000703F800000603F800000C
03F800001C03F800001803F800003003F800007003F800006003F80000C003F80001C003
F800038003F800030003F800070003F8000E0003F8000C0003F800180003F800380003F8
00300003F800600003F800E00003F800FFFFFFFFF8FFFFFFFFF8FFFFFFFFF8000003F800
000003F800000003F800000003F800000003F800000003F800000003F800000003F80000
0003F800000003F800000003F800000007FC000003FFFFF80003FFFFF80003FFFFF82539
7EB82A>I<0600000C000780003C0007F003F80007FFFFF80007FFFFF00007FFFFE00007
FFFF800007FFFF000007FFFC0000067FE000000600000000060000000006000000000600
000000060000000006000000000600000000060000000006000000000600000000060000
00000607F80000063FFE000006780F800007E007E000078003F000070001F800060001F8
00060000FC00000000FE00000000FE00000000FF000000007F000000007F000000007F80
0000007F800000007F800000007F803E00007F807F00007F80FF80007F80FF80007F80FF
80007F80FF80007F80FF00007F00FE0000FF00E00000FF00600000FE00700000FE003000
01FC00380001F8001C0003F8001E0007F0000F800FE00007E03F800001FFFF0000007FFC
0000001FE00000213A7CB72A>I<00003FC0000001FFF0000007FFFC00000FE03E00003F
800700007E001F0000FC003F8001F8007F8003F0007F8003F0007F8007E0007F800FE000
3F000FC0001E001FC00000001FC00000003F800000003F800000003F800000007F800000
007F000000007F01FC00007F07FF8000FF1E07E000FF3801F000FF7000F800FF6000FC00
FFE0007E00FFC0003F00FFC0003F00FF80003F80FF80003FC0FF80001FC0FF80001FC0FF
00001FE0FF00001FE0FF00001FE0FF00001FE0FF00001FE07F00001FE07F00001FE07F00
001FE07F00001FE07F00001FE03F80001FE03F80001FC03F80001FC01F80001FC01F8000
3F801FC0003F800FC0003F0007E0007F0007E000FE0003F000FC0001F801F80000FE07F0
00003FFFC000001FFF00000003FC0000233A7DB72A>I<300000000038000000003E0000
00003FFFFFFFE03FFFFFFFE03FFFFFFFE03FFFFFFFC07FFFFFFFC07FFFFFFF807FFFFFFF
0070000006006000000E006000001C006000001800E000003800C000007000C00000E000
C00000C000000001C00000000380000000030000000007000000000E000000000C000000
001C000000003800000000380000000070000000007000000000F000000001E000000001
E000000003E000000003E000000003C000000007C000000007C00000000FC00000000FC0
0000000FC00000001F800000001F800000001F800000003F800000003F800000003F8000
00003F800000003F800000007F800000007F800000007F800000007F800000007F800000
007F800000007F800000007F800000007F800000003F000000001E000000233B7BB82A>
I<7FFFFFFFFFFFF8FFFFFFFFFFFFFCFFFFFFFFFFFFFC7FFFFFFFFFFFF800000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000007FFFFFFFFFFFF8FFFFFFFFFFFFFCFFFFFF
FFFFFFFC7FFFFFFFFFFFF836167B9F41>61 D<00000003F0000FF00FF8003FFC3C3C00F8
1F707C01F00FE07C03E007C07C07C003E0100FC003F0000FC003F0001F8001F8001F8001
F8001F8001F8001F8001F8001F8001F8001F8001F8001F8001F8001F8001F8000FC003F0
000FC003F00007C003E00003E007C00003F00F800003F81F0000073FFC0000060FF00000
0E000000000E000000000E000000000E000000000F000000000F000000000FC000000007
FFFFC00007FFFFF80003FFFFFE0001FFFFFF8003FFFFFFC00F80007FE01F00000FF03E00
0003F07C000001F07C000001F8F8000000F8F8000000F8F8000000F8F8000000F8F80000
00F8FC000001F87C000001F03E000003E03F000007E00F80000F8007E0003F0001FC01FC
00007FFFF0000007FF000026387EA52A>103 D<03F000FFF000FFF000FFF0000FF00003
F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003
F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003
F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003
F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003
F00007F800FFFFC0FFFFC0FFFFC0123A7EB917>108 D<0003FE0000000FFF8000003E03
E00000F800F80001F0007C0003E0003E0007C0001F000F80000F801F80000FC01F000007
C03F000007E03F000007E07E000003F07E000003F07E000003F07E000003F0FE000003F8
FE000003F8FE000003F8FE000003F8FE000003F8FE000003F8FE000003F8FE000003F8FE
000003F87E000003F07E000003F07F000007F03F000007E03F000007E01F80000FC00F80
000F800FC0001F8007E0003F0003F0007E0000F800F800007E03F000001FFFC0000003FE
000025277EA52A>111 D E /Fx 3 52 df<00380000780001F8001FF800FEF800E0F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80001FC00FFFFF8FFFFF815267BA521>49
D<00FF000003FFE0000E03F0001800F80030007C0060007E0078003F00FC003F00FE001F
80FE001F80FE001F80FE001F807C001F8000001F8000001F0000003F0000003E0000007E
0000007C000000F8000001F0000003E0000003C00000078000000E0000001C0000003800
000070018000E001800180018003000300060003000C0003001FFFFF003FFFFF007FFFFE
00FFFFFE00FFFFFE0019267DA521>I<00FF000003FFE0000F01F8001C007C0030007E00
3C003E007E003F007E003F007E003F007E003F003C003F0000003E0000007E0000007C00
0000F8000001F0000007E00001FF800001FF00000001E0000000F00000007C0000003E00
00003F0000001F0000001F8000001F8038001F807C001F80FE001F80FE001F80FE001F00
FC003F0078003E0070007C003800F8001F01F00007FFC00000FF000019277DA521>I
E /Fy 12 113 df<00007FFFFFC00003FFFFFFE0000FFFFFFFE0001FFFFFFFE0007FFFFF
FFC000FF81FE000001FC007E000003F8003F000007F0003F000007E0001F00000FC0001F
80001F80001F80001F80001F80003F00001F80003F00001F80007E00001F80007E00001F
80007E00003F8000FE00003F0000FC00003F0000FC00003F0000FC00007F0000FC00007E
0000F800007E0000F80000FC0000F80000FC0000F80001F80000F80001F80000F80003F0
00007C0007E000007C0007C000003C000F8000003E003F0000001F007C0000000F81F800
000003FFE0000000007F000000002B257DA32F>27 D<0000000C0000001E0000003E0000
003E0000003C0000007C0000007C00000078000000F8000000F8000000F0000001F00000
01F0000001E0000003E0000003E0000003C0000007C0000007C00000078000000F800000
0F8000000F0000001F0000001F0000001E0000003E0000003E0000003C0000007C000000
7C00000078000000F8000000F8000000F0000001F0000001F0000001E0000003E0000003
E0000007C0000007C00000078000000F8000000F8000000F0000001F0000001F0000001E
0000003E0000003E0000003C0000007C0000007C00000078000000F8000000F8000000F0
000001F0000001F0000001E0000003E0000003E0000003C0000007C0000007C000000780
00000F8000000F8000000F0000001F0000001F0000001E0000003E0000003E0000003C00
00007C0000007C00000078000000F8000000F8000000F0000000600000001F537BBD2A>
61 D<0003FFFFFFFF00000007FFFFFFFFE0000007FFFFFFFFF800000007F80007FE0000
0007F00000FF00000007F000003F8000000FF000001FC000000FF000000FC000000FE000
000FE000000FE0000007F000001FE0000003F000001FE0000003F000001FC0000003F800
001FC0000001F800003FC0000001F800003FC0000001FC00003F80000001FC00003F8000
0001FC00007F80000001FC00007F80000001FC00007F00000001FC00007F00000001FC00
00FF00000001FC0000FF00000003FC0000FE00000003FC0000FE00000003FC0001FE0000
0003FC0001FE00000003F80001FC00000007F80001FC00000007F80003FC00000007F800
03FC00000007F00003F80000000FF00003F80000000FF00007F80000000FE00007F80000
001FE00007F00000001FC00007F00000001FC0000FF00000003F80000FF00000003F8000
0FE00000007F00000FE00000007E00001FE0000000FE00001FE0000001FC00001FC00000
01F800001FC0000003F000003FC0000007E000003FC000000FC000003F8000001F800000
3F8000007F0000007F800000FE0000007F800003FC0000007F00000FF0000000FF00007F
C00000FFFFFFFFFF000000FFFFFFFFFC000000FFFFFFFFC00000003E397DB845>68
D<0003FFFFF80007FFFC0007FFFFF80007FFFC0007FFFFF80007FFFC000007F8000000FF
80000007F0000000FC00000007F0000000F00000000FF0000001E00000000FF000000380
0000000FE0000007000000000FE000000E000000001FE0000038000000001FE000007000
0000001FC00000E0000000001FC0000380000000003FC0000700000000003FC0000E0000
0000003F80003C00000000003F80007000000000007F8000E000000000007F8001C00000
0000007F00070000000000007F000E000000000000FF001C000000000000FF007E000000
000000FE00FE000000000000FE01FF000000000001FE03FF000000000001FE0E7F800000
000001FC1C7F800000000001FC383F800000000003FCE03FC00000000003FDC03FC00000
000003FB801FE00000000003FF001FE00000000007FC000FF00000000007F8000FF00000
000007F00007F00000000007F00007F8000000000FF00007F8000000000FF00003FC0000
00000FE00003FC000000000FE00001FC000000001FE00001FE000000001FE00001FE0000
00001FC00000FF000000001FC00000FF000000003FC000007F800000003FC000007F8000
00003F8000003F800000003F8000003FC00000007F8000003FC00000007F8000001FE000
00007F0000003FE0000000FF8000003FF00000FFFFFF0007FFFFC000FFFFFF0007FFFFC0
00FFFFFF0007FFFF800046397DB847>75 D<0003FFF800001FFFF80007FFFC00003FFFF8
0007FFFC00003FFFF8000007FC000001FF00000007FE0000007C00000006FE0000007800
00000EFF000000700000000E7F000000700000000C7F800000600000000C7F8000006000
00001C3F800000E00000001C3FC00000C0000000181FC00000C0000000181FE00000C000
0000381FE00001C0000000380FF0000180000000300FF00001800000003007F000018000
00007007F80003800000007003F80003000000006003FC0003000000006003FC00030000
0000E001FC000700000000E001FE000600000000C000FE000600000000C000FF00060000
0001C0007F000E00000001C0007F800C0000000180007F800C0000000180003F800C0000
000380003FC01C0000000380001FC0180000000300001FE0180000000300000FE0180000
000700000FF0380000000700000FF03000000006000007F03000000006000007F8300000
000E000003F8700000000E000003FC600000000C000003FC600000000C000001FE600000
001C000001FEE00000001C000000FEC000000018000000FFC0000000180000007FC00000
00380000007FC0000000380000007F80000000300000003F80000000300000003F800000
00700000001F80000000700000001F00000000F00000000F00000007FC0000000F000000
FFFFE000000F000000FFFFE0000006000000FFFFE000000600000045397DB843>78
D<00000001FF00000000001FFFF000000000FE01FC00000003F0007E00000007C0001F80
00001F80000FC000003E000007E00000FC000003F00001F8000003F00003F0000001F800
07E0000001F8000FC0000000FC001F80000000FC003F00000000FE007F000000007E00FE
000000007E00FC000000007F01FC000000007F03F8000000007F03F8000000007F07F000
0000007F07F0000000007F0FF0000000007F0FE0000000007F1FE000000000FF1FE00000
0000FF3FC000000000FF3FC000000000FF3FC000000000FF7F8000000001FE7F80000000
01FE7F8000000001FE7F8000000001FEFF8000000003FCFF0000000003FCFF0000000003
FCFF0000000007F8FF0000000007F8FF000000000FF0FF000000000FF0FF000000000FE0
FF000000001FE0FF000000001FC0FF000000003F807F000000007F807F000000007F007F
00000000FE007F00000001FC003F80000001F8003F80000003F8001F80000007F0001FC0
00000FE0000FC000001F800007E000003F000007F000007E000003F00001F8000001FC00
03F00000007E000FC00000003F807F0000000007FFF80000000000FF80000000383D7CBA
3F>I<0000001FE00380000000FFFC0300000003FFFE070000000FE01F8F0000003F0007
DF0000007E0001FE000000F80000FE000001F00000FE000003E000007E000003E000007C
000007C000003C00000F8000003C00000F8000003C00001F8000003800001F0000003800
001F0000003800001F0000003800003F0000003000003F0000003000003F800000300000
3F8000000000003FC000000000003FE000000000001FF000000000001FFE00000000001F
FFE0000000000FFFFE0000000007FFFFC000000003FFFFF000000001FFFFF800000000FF
FFFC000000001FFFFE0000000003FFFF00000000003FFF000000000003FF800000000000
FF8000000000007F8000000000003F8000000000001F8000000000001F8000000000001F
80000C0000001F80000C0000000F80000C0000000F80001C0000001F80001C0000001F00
001C0000001F00001C0000001F00003C0000003E00003C0000003E00003C0000007C0000
3E000000F800007E000000F800007F000001F000007F800003E000007FC0000FC00000F9
F0001F800000F0FE00FE000000E03FFFF8000000E00FFFE0000000C001FF00000000313D
7CBA33>83 D<7FFFFC01FFFFF800FFFF80FFFFFC01FFFFF800FFFF80FFFFFC01FFFFF000
FFFF8003FF000007FC00000FF80003FC000007F8000003E00001FC000007F8000003C000
01FC000003F8000003800001FC000003F8000003000001FC000003F8000007000001FC00
0003F8000006000001FC000007F800000C000001FC000007F800000C000001FC00000FF8
000018000001FC00000FF8000018000001FC00001BF8000030000001FC00001BF8000060
000001FC000033F8000060000001FE000073F80000C0000001FE000063F80000C0000000
FE0000C3F8000180000000FE0000C3FC000180000000FE000183FC000300000000FE0001
81FC000700000000FE000301FC000600000000FE000701FC000C00000000FE000601FC00
0C00000000FE000C01FC001800000000FE000C01FC001800000000FE001801FC00300000
0000FE001801FC007000000000FE003001FC006000000000FE003001FC00C000000000FE
006001FC00C000000000FF00E001FC018000000000FF00C001FC0180000000007F018001
FC0300000000007F018001FE0300000000007F030001FE0600000000007F030000FE0E00
000000007F060000FE0C00000000007F0E0000FE1800000000007F0C0000FE1800000000
007F180000FE3000000000007F180000FE3000000000007F300000FE6000000000007F30
0000FEE000000000007F600000FEC000000000007F600000FF8000000000007FC00000FF
8000000000007F800000FF0000000000007F800000FF0000000000003F000000FE000000
0000003F000000FE0000000000003E0000007C0000000000003E00000078000000000000
3C000000780000000000003C000000700000000000003800000070000000000000300000
00600000000000513B7CB84E>87 D<0000000F000000003F800000003F800000007F8000
00007F800000007F800000007F000000001C000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000F800000003FE0000000F0F0000001C0F800000380FC00000300FC00000700FC
00000E00FC00000C00FC00001C00FC00001801FC00003801FC00003001F800003001F800
000003F800000003F800000003F000000003F000000007F000000007F000000007E00000
0007E00000000FE00000000FE00000000FC00000000FC00000001FC00000001FC0000000
1F800000001F800000003F800000003F800000003F000000003F000000007F000000007F
000000007E000000007E00000000FE00000000FE00000000FC00000000FC00000001FC00
001E01F800003F01F800007F83F000007F83F00000FF87E00000FF0FC00000FE0F800000
7C1F000000707E0000003FF80000000FC0000000214981B722>106
D<03E0007F0000FE000007F801FFE003FFC0000E3C0781F00F03E0001C3E1E00F83C01F0
00383F3800FC7001F800303F7000FCE001F800303FE0007DC000F800703FC0007F8000F8
00603F80007F0000F800603F80007F0000F800E03F0000FE0001F800C07F0000FE0001F8
00C07E0000FC0001F800C07E0000FC0001F800007E0001FC0003F80000FE0001FC0003F0
0000FC0001F80003F00000FC0001F80003F00000FC0003F80007F00001FC0003F80007E0
0001F80003F00007E00001F80003F0000FE00001F80007F0000FC00003F80007F0000FC0
0003F00007E0001FC06003F00007E0001F806003F0000FE0003F80E007F0000FE0003F00
C007E0000FC0003F00C007E0000FC0003F01C007E0001FC0003E01800FE0001FC0003E03
800FC0001F80003E03000FC0001F80003E07000FC0003F80003E0E001FC0003F80001E1C
001F80003F00000FF8000700000E000003E00043267EA449>109
D<03E0007F000007F801FFE0000E3C0781F0001C3E1E00F800383F3800FC00303F7000FC
00303FE0007C00703FC0007C00603F80007C00603F80007C00E03F0000FC00C07F0000FC
00C07E0000FC00C07E0000FC00007E0001FC0000FE0001F80000FC0001F80000FC0001F8
0000FC0003F80001FC0003F00001F80003F00001F80007F00001F80007E00003F80007E0
0003F0000FE03003F0000FC03003F0001FC07007F0001F806007E0001F806007E0001F80
E007E0001F00C00FE0001F01C00FC0001F01800FC0001F03800FC0001F07001FC0000F0E
001F800007FC0007000001F0002C267EA432>I<000F8003F000001FE00FFC000039F03C
1F000070F8700F8000E0FDE007C000C0FF8007C000C0FF0007E001C0FE0003E00180FE00
03F00180FC0003F00381FC0003F00301FC0003F00301F80003F00301F80003F00003F800
07F00003F80007F00003F00007F00003F00007F00007F0000FF00007F0000FF00007E000
0FE00007E0000FE0000FE0001FE0000FE0001FC0000FC0001FC0000FC0003F80001FC000
3F80001FC0007F00001F80007E00001F8000FE00003F8000FC00003FC001F800003FC003
F000003FE007E000007F700F8000007F383F0000007E1FFC0000007E07E0000000FE0000
000000FE0000000000FC0000000000FC0000000001FC0000000001FC0000000001F80000
000001F80000000003F80000000003F80000000003F00000000007F000000000FFFFC000
0000FFFFC0000000FFFFC00000002C3583A42A>112 D E /Fz 107[37
37 24[37 42 42 60 42 42 23 32 28 42 42 42 42 65 23 42
1[23 42 42 28 37 42 37 42 37 3[28 1[28 3[78 60 60 51
46 55 1[46 60 1[74 51 60 1[28 60 1[46 51 60 55 55 60
5[23 1[42 42 42 42 42 42 42 42 42 42 1[21 28 21 2[28
28 28 1[69 33[46 46 2[{ TeXBase1Encoding ReEncodeFont }68
83.333336 /Times-Roman rf /FA 138[42 1[32 1[42 11[37
30[46 1[60 68[{ .167 SlantFont TeXBase1Encoding ReEncodeFont }6
83.333336 /Times-Roman rf /FB 198[29 29 29 29 29 29 29
29 29 29 48[{ TeXBase1Encoding ReEncodeFont }10 58.333336
/Times-Roman rf /FC 198[33 33 33 33 33 33 33 33 33 33
48[{ TeXBase1Encoding ReEncodeFont }10 66.666664 /Times-Roman
rf /FD 138[55 1[39 1[55 11[44 30[61 1[72 68[{
 .167 SlantFont TeXBase1Encoding ReEncodeFont }6 100.000000
/Times-Bold rf /FE 134[44 50 66 44 55 28 39 39 50 50
50 55 78 28 50 1[28 55 50 33 44 50 44 1[50 26[66 24[33
42[55 2[{ TeXBase1Encoding ReEncodeFont }26 100.000000
/Times-BoldItalic rf /FF 17 104 df<7FFFFFFFFFFFFFE0FFFFFFFFFFFFFFF0FFFF
FFFFFFFFFFF07FFFFFFFFFFFFFE03C04789A4D>0 D<1F003F807FC0FFE0FFE0FFE0FFE0
FFE07FC03F801F000B0B789E1C>I<600000000006F8000000000FFC000000001F7E0000
00003F3F000000007E1F80000000FC0FC0000001F807E0000003F003F0000007E001F800
000FC000FC00001F80007E00003F00003F00007E00001F8000FC00000FC001F8000007E0
03F0000003F007E0000001F80FC0000000FC1F800000007E3F000000003F7E000000001F
FC000000000FF80000000007F00000000007F0000000000FF8000000001FFC000000003F
7E000000007E3F00000000FC1F80000001F80FC0000003F007E0000007E003F000000FC0
01F800001F8000FC00003F00007E00007E00003F0000FC00001F8001F800000FC003F000
0007E007E0000003F00FC0000001F81F80000000FC3F000000007E7E000000003FFC0000
00001FF8000000000F600000000006303072B04D>I<0000007FFFFFFFE0000007FFFFFF
FFF000003FFFFFFFFFF00000FFFFFFFFFFE00003FFC0000000000007FC0000000000000F
E00000000000003F800000000000007F00000000000000FC00000000000001F800000000
000003F000000000000007E000000000000007C00000000000000F800000000000001F80
0000000000001F000000000000003E000000000000003E000000000000003C0000000000
00007C000000000000007C000000000000007800000000000000F800000000000000F800
000000000000F000000000000000F000000000000000F000000000000000F00000000000
0000F000000000000000F000000000000000F000000000000000F000000000000000F800
000000000000F80000000000000078000000000000007C000000000000007C0000000000
00003C000000000000003E000000000000003E000000000000001F000000000000001F80
0000000000000F8000000000000007C000000000000007E000000000000003F000000000
000001F800000000000000FC000000000000007E000000000000003F800000000000001F
E000000000000007FC00000000000003FF80000000000000FFFFFFFFFFE000003FFFFFFF
FFF0000007FFFFFFFFF0000000FFFFFFFFE0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00001FFFFFFFFFFFFFE03FFFFFFFFFFFFFF03FFFFFFFFFFFFFF01FFFFFFFFFFFFFE03C4E
78BE4D>18 D<00000000000000E000000000000003F00000000000000FF0000000000000
3FE0000000000000FF80000000000003FE0000000000000FF80000000000003FE0000000
000000FF80000000000003FE0000000000000FF80000000000003FE0000000000000FF80
000000000003FE0000000000001FF80000000000007FE0000000000001FF800000000000
07FE0000000000001FF00000000000007FC0000000000001FF00000000000007FC000000
0000001FF00000000000007FC0000000000001FF00000000000007FC0000000000001FF0
0000000000007FC0000000000000FF00000000000000FF000000000000007FC000000000
00001FF000000000000007FC00000000000001FF000000000000007FC00000000000001F
F000000000000007FC00000000000001FF000000000000007FC00000000000001FF00000
0000000007FC00000000000001FF800000000000007FE00000000000001FF80000000000
0007FE00000000000000FF800000000000003FE00000000000000FF800000000000003FE
00000000000000FF800000000000003FE00000000000000FF800000000000003FE000000
00000000FF800000000000003FE00000000000000FF000000000000003F0000000000000
00E000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000007FFFFFFFFFFFFFE0FFFFFFFFFFFF
FFF0FFFFFFFFFFFFFFF07FFFFFFFFFFFFFE03C4E78BE4D>20 D<7000000000000000FC00
000000000000FF000000000000007FC00000000000001FF000000000000007FC00000000
000001FF000000000000007FC00000000000001FF000000000000007FC00000000000001
FF000000000000007FC00000000000001FF000000000000007FC00000000000001FF8000
00000000007FE00000000000001FF800000000000007FE00000000000000FF8000000000
00003FE00000000000000FF800000000000003FE00000000000000FF800000000000003F
E00000000000000FF800000000000003FE00000000000000FF800000000000003FE00000
000000000FF00000000000000FF00000000000003FE0000000000000FF80000000000003
FE0000000000000FF80000000000003FE0000000000000FF80000000000003FE00000000
00000FF80000000000003FE0000000000000FF80000000000003FE0000000000001FF800
00000000007FE0000000000001FF80000000000007FE0000000000001FF0000000000000
7FC0000000000001FF00000000000007FC0000000000001FF00000000000007FC0000000
000001FF00000000000007FC0000000000001FF00000000000007FC0000000000000FF00
000000000000FC0000000000000070000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000007FFFFFFFFFFFFFE0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF07FFFFFFFFFFF
FFE03C4E78BE4D>I<0001FF00000000003FC00000000FFFE000000003FFF80000003FFF
FC0000000FFFFE0000007FFFFF0000003FE01F000001FFFFFF8000007E0007C00003F803
FFE00001F80001E00007E0007FF00003F00000F0000780003FF80007C0000070000F0000
1FFC000F80000038001E000007FE001F0000001C001C000003FF003E0000000C00380000
01FF807C0000000E0038000001FFC0F8000000060070000000FFE0F80000000700700000
007FF1F00000000700600000003FF3E00000000300600000001FFBC00000000300E00000
001FFFC00000000380C00000000FFF800000000180C000000007FF000000000180C00000
0003FF000000000180C000000001FF800000000180C000000001FFC00000000180C00000
0000FFC00000000180C0000000007FE00000000180C0000000007FF00000000180C00000
0000FFF80000000180E000000001FFFC00000003806000000001EFFC0000000300600000
0003E7FE00000003007000000007C7FF0000000700700000000F83FF8000000700300000
000F81FFC000000E00380000001F00FFC000000E00180000003E007FE000001C001C0000
007C003FF000003C000E000000F8001FFC0000780007000001F0000FFE0000F000078000
07E00007FF0003F00003C0000FC00003FFE00FE00001F0003F000000FFFFFFC000007C03
FE0000007FFFFF0000003FFFF80000001FFFFE0000000FFFE000000003FFF800000001FE
00000000007FC00000592D7BAB64>49 D<000000FFFFFF00000007FFFFFF8000003FFFFF
FF800000FFFFFFFF000003FF800000000007FC00000000001FE000000000003F80000000
00007E000000000000FC000000000001F8000000000003F0000000000007E00000000000
07C000000000000F8000000000001F8000000000001F0000000000003E0000000000003E
0000000000003C0000000000007C0000000000007C00000000000078000000000000F800
0000000000F8000000000000F0000000000000F0000000000000FFFFFFFFFFFF00FFFFFF
FFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF00F0000000000000F0000000000000F8000000
000000F8000000000000780000000000007C0000000000007C0000000000003C00000000
00003E0000000000003E0000000000001F0000000000001F8000000000000F8000000000
0007C0000000000007E0000000000003F0000000000001F8000000000000FC0000000000
007E0000000000003F8000000000001FE0000000000007FC000000000003FF8000000000
00FFFFFFFF0000003FFFFFFF80000007FFFFFF80000000FFFFFF00313A78B542>I<0000
0000000600000000000F00000000001F00000000001F00000000003E00000000003E0000
0000007C00000000007C0000000000F80000000000F80000000001F00000000001F00000
000003E00000000003E00000000007C00000000007C0000000000F80000000000F800000
00001F00000000001F00000000003E00000000003E00000000007C00000000007C000000
0000F80000000000F80000000001F00000000001F00000000003E00000000003E0000000
0007C00000000007C0000000000F80000000000F80000000001F00000000001F00000000
003E00000000003E00000000007C00000000007C0000000000F80000000000F800000000
01F00000000001F00000000003E00000000003E00000000007C00000000007C000000000
0F80000000000F80000000001F00000000001F00000000003E00000000003E0000000000
7C00000000007C0000000000F80000000000F80000000001F00000000001F00000000003
E00000000003E00000000007C00000000007C0000000000F80000000000F80000000001F
00000000001F00000000003E00000000003E00000000007C00000000007C0000000000F8
0000000000F80000000001F00000000001F00000000003E00000000003E00000000007C0
0000000007C0000000000F80000000000F80000000001F00000000001F00000000003E00
000000003E00000000007C00000000007C0000000000F80000000000F80000000000F000
00000000600000000000305C72C600>54 D<0000000003FE00000000003FFFC000000001
FFFFE000000007FFFFF00000001FFFFFF00000007FFFFFF8000000FC01FFF8000003F000
3FF8000007C0001FF800000F80000FF000001F00000FF000003F00000FE000007E00000F
C00000FC00001F800001FC00001F000001FC00003C000003F8000000000007F800000000
0007F8000000000007F800000000000FF800000000000FF800000000000FFC0000000000
0FFC00000000000FFE00000000000FFF000000000007FF800000000007FFE00000000003
FFF80000000003FFFF0000000001FFFFFC00000000FFFFFC000000007FFFF8000000001F
FFF0000000000FFFC0000000003FFF0000000000FF000000000001F8000000000003E000
000000000FC000000000001F0000000000003E0000000000007C000000000000FC000000
000001F8000000000003F0000000000007F0000000000007E000000000000FE000000000
001FC000000000001FC000000000003FC000000000003F8000000000007F800000000000
7F800000003C007F800000007C00FF80000001F800FF80000003F000FF80000007E000FF
C0000007C000FFC000000F8000FFE000001F0000FFF000003E00007FFC0000FC00007FFF
0001F000003FFFE00FE000003FFFFFFF8000001FFFFFFF0000000FFFFFFC00000003FFFF
E000000000FFFF00000000001FF80000000035487EC535>69 D<0000001FFFFFF0000000
0003FFFFFFFF800000001FFFFFFFFFF0000000FFFFFFFFFFFC000003FFFFFFFFFFFF0000
0FFFFFFFFFFFFF80003FE07FC00FFFFFC000FE007FC0007FFFE001F8007F80000FFFF003
E0007F800003FFF007C0007F800000FFF80FC0007F8000007FF81F8000FF8000003FF83F
8000FF8000001FFC7F8000FF8000000FFC7F0000FF8000000FFCFE0000FF0000000FFCFC
0000FF00000007FCF00000FF00000007FC800000FF00000007FC000001FF00000007F800
0001FE00000007F8000001FE00000007F8000001FE00000007F0000001FE0000000FF000
0003FE0000000FE0000003FC0000000FE0000003FC0000001FC0000003FC0000001F8000
0003FC0000003F80000007FC0000003F00000007F80000007E00000007F8000000FC0000
0007F8000000F800000007F8000001F00000000FF0000003E00000000FF0000007C00000
000FF000001F800000000FF000003E000000001FE00000FC000000001FE00007F0000000
001FE0007FE0000000001FC07FFF80000000003FC1FFFE00000000003FC7FFF000000000
003FCFFF8000000000007F9FFC0000000000007F9F800000000000007F80000000000000
007F0000000000000000FF0000000000000000FF0000000000000000FE00000000000000
01FE0000000000000001FE0000000000000001FC0000000000000003FC00000000000000
03FC0000000000000003F80000000000000007F80000000000000007F000000000000000
07F0000000000000000FF0000000000000000FE0000000000000001FE000000000000000
1FE0000000000000001FC0000000000000003FC0000000000000003F8000000000000000
3F00000000000000007E00000000000000007C0000000000000000600000000000000046
497EC345>80 D<0000001FFFFFFC000000000003FFFFFFFFE0000000001FFFFFFFFFFC00
000000FFFFFFFFFFFF00000003FFFFFFFFFFFFC000000FFFFFFFFFFFFFE000003FE07FC0
03FFFFF00000FE007FC0001FFFF00001F8007FC00003FFF80003E0007F800000FFF80007
C0007F8000003FFC000FC0007F8000001FFC001F80007F8000000FFC003F8000FF800000
0FFC007F8000FF80000007FC007F0000FF80000007FC00FE0000FF00000007FC00FC0000
FF00000007F800F00000FF00000007F800800000FF00000007F800000001FF00000007F0
00000001FF0000000FF000000001FE0000000FE000000001FE0000000FC000000001FE00
00001FC000000001FE0000001F8000000003FE0000003F0000000003FC0000007E000000
0003FC0000007C0000000003FC000000F80000000003FC000001F00000000007F8000007
E00000000007F800000F800000000007F800003F000000000007F80003FC00000000000F
F001FFF800000000000FF00FFFE000000000000FF01FFF8000000000000FF03FFE000000
0000001FE07FFF0000000000001FE07FFF0000000000001FE01FFF8000000000001FC007
FF8000000000003FC003FFC000000000003FC001FFC000000000003F8000FFE000000000
007F8000FFE000000000007F80007FF000000000007F00007FF00000000000FF00003FF8
0000000000FF00003FF80000000000FE00001FF80000000001FE00001FFC0000000001FE
00000FFC0000000001FC00000FFE0000000003FC00000FFE0000070003FC000007FF0000
1F0003F8000007FF00003E0007F8000003FF80007C0007F0000003FF8000F80007F00000
01FFC001F0000FF0000001FFE003E0000FE0000000FFF007C0001FE0000000FFFC1F8000
1FC00000007FFFFE00001FC00000007FFFFC00003F800000003FFFF000003F000000001F
FFC000007C000000000FFE000000700000000003F0000050467EC354>82
D<6000000000000CF000000000001EF000000000001EF000000000001EF000000000001E
F000000000001EF000000000001EF000000000001EF000000000001EF000000000001EF0
00000000001EF000000000001EF000000000001EF000000000001EF000000000001EF000
000000001EF000000000001EF000000000001EF000000000001EF000000000001EF00000
0000001EF000000000001EF000000000001EF000000000001EF000000000001EF0000000
00001EF000000000001EF000000000001EF000000000001EF000000000001EF000000000
001EF000000000001EF000000000001EF000000000001EF000000000001EF00000000000
1EF000000000001EF000000000001EF000000000001EF000000000001EF000000000001E
F000000000001EF000000000001EF800000000003EF800000000003E7800000000003C7C
00000000007C7E0000000000FC3E0000000000F81F0000000001F01F8000000003F00FC0
00000007E007E00000000FC003F80000003F8001FE000000FF00007FC00007FC00003FFC
007FF800000FFFFFFFE0000003FFFFFF800000007FFFFC0000000007FFC00000373D7BBA
42>91 D<600000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F000
00F00000FFFFFEFFFFFFFFFFFF7FFFFE18646FCA2C>98 D<00000600000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F7FFFFFFFFFFFFFFFFF7FFFFE
18647ECA2C>I<0000000FE0000000FFE0000003FC0000000FE00000003FC00000007F80
000000FF00000000FE00000001FC00000001FC00000003F800000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000003F800000003F8000000
03F800000003F800000003F800000003F800000003F800000003F800000003F800000003
F800000003F800000003F800000003F800000003F800000003F800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F800000007F000
000007F00000000FE00000001FE00000003FC00000007F80000000FE00000007F8000000
FFE0000000FFE000000007F800000000FE000000007F800000003FC00000001FE0000000
0FE000000007F000000007F000000003F800000003F800000003F800000003F800000003
F800000003F800000003F800000003F800000003F800000003F800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F800000003F800
000003F800000003F800000003F800000003F800000003F800000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000001FC00000001FC000000
00FE00000000FF000000007F800000003FC00000000FE000000003FC00000000FFE00000
000FE0236479CA32>102 D<FE00000000FFE000000007F800000000FE000000007F8000
00003FC00000001FE00000000FE000000007F000000007F000000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000003F800000003F8000000
03F800000003F800000003F800000003F800000003F800000003F800000003F800000003
F800000003F800000003F800000003F800000003F800000003F800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F800000003F800
000001FC00000001FC00000000FE00000000FF000000007F800000003FC00000000FE000
000003FC00000000FFE0000000FFE0000003FC0000000FE00000003FC00000007F800000
00FF00000000FE00000001FC00000001FC00000003F800000003F800000003F800000003
F800000003F800000003F800000003F800000003F800000003F800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F800000003F800
000003F800000003F800000003F800000003F800000003F800000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000003F800000007F0000000
07F00000000FE00000001FE00000003FC00000007F80000000FE00000007F8000000FFE0
000000FE00000000236479CA32>I E /FG 36 121 df<0000001FFC00000000000001FF
FFC0000000000007F007F000000000001F8000FC00000000007E00003F0000000001FC00
001FC000000003F0000007E000000007E0000003F00000000FC0000001F80000001F8000
0000FC0000003F000000007E0000007F000000007F000000FE000000003F800001FC0000
00001FC00003FC000000001FE00003F8000000000FE00007F8000000000FF00007F00000
000007F0000FF00000000007F8000FF00000000007F8001FE00000000003FC001FE00000
000003FC003FE00000000003FE003FC00000000001FE003FC00000000001FE007FC00000
000001FF007FC00000000001FF007FC00000000001FF007F800000000000FF007F818000
0000C0FF00FF8180000000C0FF80FF8180000000C0FF80FF81FFFFFFFFC0FF80FF81FFFF
FFFFC0FF80FF81FFFFFFFFC0FF80FF81FFFFFFFFC0FF80FF81FFFFFFFFC0FF80FF81FFFF
FFFFC0FF80FF81FFFFFFFFC0FF80FF8180000000C0FF80FF8180000000C0FF80FF818000
0000C0FF80FF800000000000FF807F800000000000FF007FC00000000001FF007FC00000
000001FF007FC00000000001FF003FC00000000001FE003FC00000000001FE003FE00000
000003FE001FE00000000003FC001FE00000000003FC000FE00000000003F8000FF00000
000007F80007F00000000007F00007F8000000000FF00003F8000000000FE00003FC0000
00001FE00001FC000000001FC00000FE000000003F8000007F000000007F0000007F0000
00007F0000003F80000000FE0000001FC0000001FC00000007E0000003F000000003F000
0007E000000001FC00001FC0000000007E00003F00000000001F8000FC000000000007F0
07F0000000000001FFFFC00000000000001FFC0000000041487BC54C>2
D<0000007FF000000000000FFFFF80000000003FC01FE000000000FE0003F800000003F8
0000FE0000000FE000003F8000001FC000001FC000007F8000000FF00000FF00000007F8
0001FE00000003FC0003FC00000001FE0007FC00000001FF0007F800000000FF000FF000
0000007F800FF0000000007F801FF0000000007FC01FE0000000003FC03FE0000000003F
E03FE0000000003FE03FE0000000003FE07FC0000000001FF07FC0000000001FF07FC000
0000001FF07FC0000000001FF07FC0000000001FF07FC0000000001FF07FC0000000001F
F07FC0000000001FF07FC0000000001FF07FC0000000001FF03FE0000000003FE03FE000
0000003FE03FE0000000003FE03FE0000000003FE01FE0000000003FC01FF0000000007F
C00FF0000000007F800FF0000000007F8007F800000000FF0007F800000000FF0003F800
000000FE0003FC00000001FE0001FC00000001FC0000FC00000001F80000FE00000003F8
00007E00000003F000007F00000007F000003F00000007E000001F00000007C000001F80
00000FC000000F8000000F800000078000000F00000007C000001F00000003C000001E00
00C003C000001E0018C001E000003C0018C001E000003C00186000E000003800306000F0
000078003060007000007000306000700000700030700030000060007030003000006000
603800380000E000E03FFFF80000FFFFE03FFFF80000FFFFE03FFFF80000FFFFE01FFFF8
0000FFFFC01FFFF80000FFFFC01FFFF80000FFFFC03D467CC546>10
D<00000C00001C0000380000700000E00001C00003C0000780000F00000F00001E00003C
00003C0000780000F80000F00001F00001E00003E00003E00007C00007C00007C0000F80
000F80000F80001F00001F00001F00003F00003F00003E00003E00007E00007E00007E00
007E00007C00007C00007C0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
007C00007C00007C00007E00007E00007E00007E00003E00003E00003F00003F00001F00
001F00001F00000F80000F80000F800007C00007C00007C00003E00003E00001E00001F0
0000F00000F800007800003C00003C00001E00000F00000F000007800003C00001C00000
E000007000003800001C00000C166476CA26>40 D<C00000E000007000003800001C0000
0E00000F000007800003C00003C00001E00000F00000F000007800007C00003C00003E00
001E00001F00001F00000F80000F80000F800007C00007C00007C00003E00003E00003E0
0003F00003F00001F00001F00001F80001F80001F80001F80000F80000F80000F80000FC
0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC
0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000F80000F80000F80001F80001F8
0001F80001F80001F00001F00003F00003F00003E00003E00003E00007C00007C00007C0
000F80000F80000F80001F00001F00001E00003E00003C00007C0000780000F00000F000
01E00003C00003C0000780000F00000E00001C0000380000700000E00000C0000016647B
CA26>I<00000000C00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E0000000007FFFFFFFFFFFFFFF00FFFFFFFFFF
FFFFFF80FFFFFFFFFFFFFFFF807FFFFFFFFFFFFFFF0000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000001E0
0000000000000001E00000000000000001E00000000000000001E00000000000000000C0
0000000041407BB84C>43 D<0000FF00000007FFE000001F81F800003E007C0000FC003F
0001F8001F8001F0000F8003E00007C007C00003E007C00003E00FC00003F00F800001F0
1F800001F81F800001F83F800001FC3F800001FC3F800001FC3F000000FC7F000000FE7F
000000FE7F000000FE7F000000FE7F000000FEFF000000FFFF000000FFFF000000FFFF00
0000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF0000
00FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000
FFFF000000FFFF000000FFFF000000FFFF000000FF7F000000FE7F000000FE7F000000FE
7F000000FE7F000000FE7F800001FE3F800001FC3F800001FC3F800001FC1F800001F81F
800001F80FC00003F00FC00003F00FC00003F007E00007E003E00007C003F0000FC001F8
001F8000FC003F00003E007C00001F81F8000007FFE0000000FF000028447CC131>48
D<000030000000F0000001F0000003F000001FF00000FFF000FFFFF000FFE7F000FF07F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F000000FF800001FFC
007FFFFFFF7FFFFFFF7FFFFFFF204278C131>I<0003FE0000001FFFC000007FFFF00001
F80FFC0003C001FE00078000FF000E00007F801C00003FC01C00001FE03800001FF03000
000FF07000000FF860000007F86C000007F8FF000007FCFF800007FCFFC00007FCFFC000
03FCFFC00003FCFFC00003FCFFC00003FC7F800007FC3F000007FC00000007FC00000007
F800000007F80000000FF80000000FF00000001FF00000001FE00000001FE00000003FC0
0000007F800000007F00000000FF00000000FE00000001FC00000003F800000007F00000
0007E00000000FC00000001F800000003F000000007C00000000F800000000F000000001
E000000003C000000007800000000F00000C001E00000C003C00000C0038000018007000
001800E000001801C0000018038000003807000000300E000000701FFFFFFFF01FFFFFFF
F03FFFFFFFF07FFFFFFFF0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE026427BC131>I<0001FF
0000000FFFE000003FFFFC0000FE01FE0001F0007F8003C0003FC00700001FE00E00001F
E00E00000FF00FE0000FF01FF0000FF81FF0000FF81FF00007F81FF80007F81FF00007F8
1FF00007F80FE0000FF803C0000FF80000000FF00000000FF00000000FF00000001FE000
00001FE00000003FC00000003F800000007F00000000FE00000001FC00000003F0000000
1FC000000FFF0000000FFFF000000001FC000000007F000000003F800000001FC0000000
0FE00000000FF000000007F800000007FC00000003FC00000003FE00000003FE00000001
FE00000001FF00000001FF00000001FF1E000001FF7F800001FFFFC00001FFFFC00001FF
FFC00001FFFFC00001FFFFC00001FEFF800003FEFF800003FE7E000003FC70000007FC30
000007F83800000FF81C00000FF00E00001FE00780003FC003E0007F8001FE01FE00007F
FFF800000FFFE0000001FF000028447CC131>I<00000003800000000003800000000007
80000000000F80000000000F80000000001F80000000003F80000000003F80000000007F
8000000000FF8000000000FF8000000001FF8000000003BF80000000033F80000000073F
80000000063F800000000C3F800000001C3F80000000183F80000000303F80000000703F
80000000603F80000000C03F80000001C03F80000001803F80000003003F80000007003F
80000006003F8000000C003F8000001C003F80000018003F80000030003F80000070003F
80000060003F800000E0003F800001C0003F80000180003F80000380003F80000300003F
80000600003F80000E00003F80000C00003F80001800003F80003800003F80003000003F
80006000003F8000E000003F8000FFFFFFFFFFC0FFFFFFFFFFC0FFFFFFFFFFC00000003F
80000000003F80000000003F80000000003F80000000003F80000000003F80000000003F
80000000003F80000000003F80000000003F80000000003F80000000003F80000000003F
8000000000FFE00000007FFFFFC000007FFFFFC000007FFFFFC02A437DC231>I<060000
00C007C00007C007FC007F8007FFFFFF0007FFFFFE0007FFFFFC0007FFFFF80007FFFFE0
0007FFFF8000063FFC000006000000000600000000060000000006000000000600000000
060000000006000000000600000000060000000006000000000600000000060000000006
0000000006000000000600FF00000607FFC000061F01F000063800FC0006F0007E0007C0
003F000780001F800780001FC00700000FC00600000FE000000007F000000007F0000000
07F000000007F800000003F800000003F800000003FC00000003FC00000003FC00000003
FC00000003FC3E000003FC7F000003FCFF800003FCFF800003FCFF800003FCFF800003FC
FF800003F8FF000007F8FE000007F860000007F060000007F07000000FF03000000FE038
00001FC01C00001FC01E00003F800F00007F00078000FE0003C001FC0001F807F000007F
FFE000001FFF00000007F8000026447BC131>I<000007FC0000003FFF000000FFFFC000
03FC03E00007E000F0001FC00038003F000058007E0001FC00FE0003FC00FC0007FC01F8
0007FC03F00007FC03F00007FC07E00003F80FE00001F00FE00000001FC00000001FC000
00001FC00000003F800000003F800000003F800000007F800000007F800000007F007F80
007F01FFF0007F0780FC00FF0E003E00FF1C001F80FF38000FC0FF700007E0FF600007E0
FFE00003F0FFC00003F8FFC00001F8FFC00001FCFF800001FCFF800000FEFF800000FEFF
800000FEFF000000FFFF000000FFFF000000FFFF000000FF7F000000FF7F000000FF7F00
0000FF7F000000FF7F000000FF7F800000FF3F800000FF3F800000FF3F800000FE1F8000
00FE1F800001FE1FC00001FC0FC00001FC0FC00003F807E00003F807E00007F003F00007
E001F8000FC000FC001F80007E003F00003F80FE00000FFFF8000003FFE0000000FF8000
28447CC131>I<1C00000000001C00000000001F80000000001FFFFFFFFFC01FFFFFFFFF
C01FFFFFFFFFC03FFFFFFFFF803FFFFFFFFF803FFFFFFFFF003FFFFFFFFE00380000000C
00300000001C0070000000380060000000300060000000700060000000E00060000000C0
00C0000001C000C00000038000C000000700000000000600000000000E00000000001C00
00000000180000000000380000000000700000000000600000000000E00000000001C000
00000001C0000000000380000000000780000000000700000000000F00000000000F0000
0000001F00000000001E00000000003E00000000003E00000000007E00000000007C0000
0000007C0000000000FC0000000000FC0000000001FC0000000001FC0000000001FC0000
000003F80000000003F80000000003F80000000003F80000000007F80000000007F80000
000007F80000000007F80000000007F80000000007F8000000000FF8000000000FF80000
00000FF8000000000FF8000000000FF8000000000FF8000000000FF8000000000FF80000
00000FF8000000000FF80000000007F00000000001C00000002A457BC231>I<0000FF00
000007FFE000001FFFF800007F00FE0000FC003F0001F0001F8003E0000FC003C00007E0
07C00003F00F800001F00F800001F00F000001F81F000000F81F000000F81F000000F81F
000000F81F800000F81F800000F81FC00001F81FC00001F01FE00001F00FF00003E00FFC
0003E007FE0007C007FF800F8003FFC01F0001FFF03E0001FFF87800007FFEF000003FFF
C000001FFFC0000007FFE0000003FFF8000007FFFC00001E7FFF00007C1FFF8000F80FFF
C001E003FFE003C001FFF007C0007FF80F80003FFC1F00000FFC3E000007FE3E000001FE
7C000000FE7C000000FF7C0000007FF80000003FF80000003FF80000001FF80000001FF8
0000001FF80000001FF80000001FFC0000001E7C0000003E7C0000003E7E0000003C3E00
00007C1F000000F81F800001F00FC00003E007E00007C003F8001F8000FF00FF00003FFF
FC00000FFFF0000001FF800028447CC131>I<0000FF00000007FFE000001FFFF800007F
80FC0000FC007E0001F8003F0003F0001F8007E0000FC00FE00007E01FC00007E01FC000
03F03F800003F03F800003F87F800001F87F000001FC7F000001FCFF000001FCFF000001
FCFF000001FEFF000000FEFF000000FEFF000000FEFF000000FEFF000000FEFF000000FF
FF000000FFFF000000FFFF000000FF7F000001FF7F000001FF7F000001FF3F800001FF3F
800003FF1F800003FF1FC00003FF0FC00007FF07E00006FF07E0000EFF03F0001CFF01F8
0038FF007C0070FF003F01E0FF000FFF80FE0001FE00FE00000000FE00000001FE000000
01FC00000001FC00000001FC00000001FC00000003F800000003F800000003F00F800007
F01FC00007E03FE0000FE03FE0000FC03FE0001F803FE0001F803FC0003F003F80007E00
1E0000FC001C0001F8000F0003F00007E01FE00003FFFF800000FFFE0000001FF0000028
447CC131>I<7FFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFF807FFFFF
FFFFFFFFFF00000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000007FFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFF807FFFFF
FFFFFFFFFF0041187BA44C>61 D<FFFFFFFFFFFFF800FFFFFFFFFFFFF800FFFFFFFFFFFF
F80001FFC000007FF800007F80000007FC00007F80000001FC00007F80000000FC00007F
800000007C00007F800000003C00007F800000001C00007F800000001C00007F80000000
0E00007F800000000E00007F800000000E00007F800000000600007F800000000600007F
800000000600007F800000000600007F800000000700007F800006000300007F80000600
0300007F800006000300007F800006000000007F800006000000007F800006000000007F
800006000000007F80000E000000007F80000E000000007F80001E000000007F80003E00
0000007F8000FE000000007FFFFFFE000000007FFFFFFE000000007FFFFFFE000000007F
8000FE000000007F80003E000000007F80001E000000007F80000E000000007F80000E00
0000007F800006000000007F800006000000007F800006000000007F8000060000C0007F
8000060000C0007F8000060000C0007F800006000180007F800000000180007F80000000
0180007F800000000180007F800000000180007F800000000380007F800000000380007F
800000000300007F800000000300007F800000000700007F800000000700007F80000000
0F00007F800000000F00007F800000001E00007F800000001E00007F800000003E00007F
800000007E00007F80000001FE00007F80000007FE0001FFC000007FFE00FFFFFFFFFFFF
FC00FFFFFFFFFFFFFC00FFFFFFFFFFFFFC003A447CC342>69 D<FFFFFFFFFC0000FFFFFF
FFFFC000FFFFFFFFFFF80001FFC0000FFC00007F800001FF00007F8000007F80007F8000
001FE0007F8000000FE0007F80000007F0007F80000007F8007F80000003FC007F800000
03FC007F80000003FE007F80000001FE007F80000001FE007F80000001FF007F80000001
FF007F80000001FF007F80000001FF007F80000001FF007F80000001FF007F80000001FF
007F80000001FE007F80000001FE007F80000003FE007F80000003FC007F80000003FC00
7F80000007F8007F80000007F0007F8000000FE0007F8000001FC0007F8000007F80007F
800001FE00007F80000FFC00007FFFFFFFF000007FFFFFFF8000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F8000000000007F8000000000007F8000000000007F800000
0000007F8000000000007F8000000000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F800000000001FFE000000000FFFFFFC0000000FFFFFFC0000000FFFFFFC00000003844
7CC342>80 D<3FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FF0001FF800
1FF83F80000FF00003F83E00000FF00000F87C00000FF000007C7800000FF000003C7800
000FF000003C7000000FF000001C7000000FF000001C7000000FF000001C6000000FF000
000C6000000FF000000C6000000FF000000C6000000FF000000C6000000FF000000CC000
000FF0000006C000000FF0000006C000000FF0000006C000000FF0000006C000000FF000
00060000000FF00000000000000FF00000000000000FF00000000000000FF00000000000
000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF000
00000000000FF00000000000000FF00000000000000FF00000000000000FF00000000000
000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF000
00000000000FF00000000000000FF00000000000000FF00000000000000FF00000000000
000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF000
00000000000FF00000000000000FF00000000000000FF00000000000000FF00000000000
000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF000
00000000000FF00000000000000FF00000000000000FF00000000000000FF00000000000
000FF00000000000001FF80000000000007FFE0000000001FFFFFFFF80000001FFFFFFFF
80000001FFFFFFFF80003F447DC346>84 D<FFFCFFFCFFFCFFFCF000F000F000F000F000
F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000
F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000
F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000
F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000
F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000FFFCFFFCFFFC
FFFC0E6476CA1B>91 D<FFFCFFFCFFFCFFFC003C003C003C003C003C003C003C003C003C
003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C
003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C
003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C
003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C003C
003C003C003C003C003C003C003C003C003C003C003CFFFCFFFCFFFCFFFC0E647ECA1B>
93 D<0007FC000000003FFF80000000F80FE0000003C003F00000070001F800000E0000
FC00000FC0007E00001FE0007F00001FF0003F80001FF0003F80001FF0003F80001FF000
1FC0001FF0001FC0000FE0001FC0000380001FC0000000001FC0000000001FC000000000
1FC0000000001FC00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC00000FF00
1FC00003FC001FC00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0007FC000
1FC0007F80001FC0007F80001FC060FF00001FC060FF00001FC060FF00001FC060FF0000
3FC060FF00003FC060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0C03FC001
C7E0C01FE00783F1C007F81E03FF8001FFFC01FF00001FE0007C002B2E7CAC31>97
D<0001FE00000007FFC000001F03F000007E00FC0000FC007E0001F8003F0003F0003F00
07E0001F800FE0001FC00FC0000FC01FC0000FC03F80000FE03F800007E03F800007E07F
800007F07F000007F07F000007F0FF000007F0FF000007F0FF000007F0FFFFFFFFF0FFFF
FFFFF0FF00000000FF00000000FF00000000FF00000000FF00000000FF000000007F0000
00007F000000007F800000007F800000003F800000003F800000301FC00000301FC00000
700FC00000600FE00000E007F00000C003F00001C001F800038000FC000700003E001E00
001F80F8000003FFE0000000FF0000242E7DAC2B>101 D<00000FE00000007FF8000001
F81E000003F03F00000FE07F80001FC0FF80001F80FF80003F80FF80007F00FF80007F00
FF80007F007F0000FE001C0000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE000000FFFFFF8000FFFFFF8000FFFFFF800000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000001FF8000007F
FFFF00007FFFFF00007FFFFF000021467EC51E>I<000000000F800001FC007FE0000FFF
81F0F0003F07E381F000FC01FF03F001F800FE01F003F0007E01E007F0007F000007E000
3F00000FE0003F80000FC0001F80001FC0001FC0001FC0001FC0001FC0001FC0001FC000
1FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0000FC000
1F80000FE0003F800007E0003F000007F0007F000003F0007E000001F800FC000001FC01
F8000003BF07E00000030FFF8000000701FC0000000700000000000700000000000F0000
0000000F00000000000F00000000000F800000000007C00000000007E00000000007FFFF
F8000003FFFFFF000003FFFFFFE00001FFFFFFF800007FFFFFFC0001FFFFFFFE0007C000
0FFF000F800000FF003F0000003F803E0000001F807C0000000FC07C0000000FC0F80000
0007C0F800000007C0F800000007C0F800000007C0F800000007C0FC0000000FC07C0000
000F807E0000001F803E0000001F001F0000003E000F8000007C0007E00001F80001F800
07E000007F003F8000001FFFFE00000001FFE000002C427DAC31>I<01FC00000000FFFC
00000000FFFC00000000FFFC0000000007FC0000000003FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
01FE000001FC07FFC00001FC1E07F00001FC3801F80001FC7001FC0001FCE000FC0001FD
C000FE0001FD8000FE0001FF80007F0001FF00007F0001FF00007F0001FE00007F0001FE
00007F0001FE00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0003FE0000FF80FFFFF83FFFFEFFFF
F83FFFFEFFFFF83FFFFE2F457DC436>I<01E00007F80007F8000FFC000FFC000FFC000F
FC0007F80007F80001E00000000000000000000000000000000000000000000000000000
000000000000000000000000000001FC00FFFC00FFFC00FFFC0007FC0003FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0003FE00FFFFF8FFFFF8FF
FFF815437DC21C>I<01FC00FFFC00FFFC00FFFC0007FC0003FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0003FE00FFFFF8FFFFF8FFFFF8
15457DC41C>108 D<01FC00FF00001FE00000FFFC07FFE000FFFC0000FFFC0F03F801E0
7F0000FFFC3C01FC07803F800007FC7000FE0E001FC00003FCE0007E1C000FC00001FDC0
007F38000FE00001FD80007F30000FE00001FF80003FF00007F00001FF00003FE00007F0
0001FF00003FE00007F00001FE00003FC00007F00001FE00003FC00007F00001FE00003F
C00007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001
FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F8000
07F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00
003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F0
0001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F
800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001
FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F8000
07F00001FC00003F800007F00003FE00007FC0000FF800FFFFF81FFFFF03FFFFE0FFFFF8
1FFFFF03FFFFE0FFFFF81FFFFF03FFFFE04B2C7DAB52>I<01FC01FE0000FFFC07FFC000
FFFC1E07F000FFFC3801F80007FC7001FC0003FCE000FC0001FDC000FE0001FD8000FE00
01FF80007F0001FF00007F0001FF00007F0001FE00007F0001FE00007F0001FE00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0003FE0000FF80FFFFF83FFFFEFFFFF83FFFFEFFFFF83FFFFE
2F2C7DAB36>I<00007F8000000003FFF00000000FC0FC0000003E001F0000007C000F80
0000F80007C00001F00003E00003E00001F00007C00000F8000FC00000FC000FC00000FC
001F8000007E003F8000007F003F8000007F003F0000003F007F0000003F807F0000003F
807F0000003F807F0000003F80FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C07F0000003F807F0000003F807F8000007F803F8000007F003F8000007F001F8000007E
001FC00000FE000FC00000FC000FE00001FC0007E00001F80003F00003F00001F80007E0
0000FC000FC000003E001F0000001FC0FE00000007FFF8000000007F8000002A2E7DAC31
>I<01FC03FC0000FFFC0FFF8000FFFC3C07E000FFFC7001F80007FDE000FE0001FD8000
7F0001FF80003F8001FF00001FC001FE00001FE001FC00000FE001FC00000FF001FC0000
07F001FC000007F801FC000003F801FC000003FC01FC000003FC01FC000003FC01FC0000
01FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC0000
01FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000003FC01FC0000
03FC01FC000003FC01FC000007F801FC000007F801FC000007F001FC00000FF001FE0000
0FE001FE00001FC001FF00003FC001FF00003F8001FF80007E0001FDC000FC0001FCF003
F80001FC3C0FE00001FC1FFF800001FC03FC000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000003FE0000
0000FFFFF8000000FFFFF8000000FFFFF80000002F3F7DAB36>I<03F803F0FFF81FFCFF
F83C3EFFF8707F07F8E0FF03F9C0FF01F980FF01FB80FF01FB007E01FB003C01FF000001
FE000001FE000001FE000001FE000001FC000001FC000001FC000001FC000001FC000001
FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001
FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001
FC000001FC000003FF0000FFFFFE00FFFFFE00FFFFFE00202C7DAB26>114
D<003FE01801FFFC3807E01F780F0003F81E0001F83C0000F87C00007878000078F80000
38F8000038F8000018F8000018FC000018FC000018FE000018FF8000007FC000007FFC00
003FFFE0001FFFFC000FFFFF0007FFFFC003FFFFE000FFFFF0001FFFF80000FFF800000F
FC000003FCC00001FEC00000FEC000007EE000007EE000003EE000003EF000003EF00000
3EF000003EF800003CFC00007CFC000078FE0000F8FF0001F0F38003E0F1F00F80E07FFE
00C00FF0001F2E7DAC26>I<0006000000060000000600000006000000060000000E0000
000E0000000E0000000E0000001E0000001E0000001E0000003E0000007E0000007E0000
00FE000001FE000007FE00001FFFFFF0FFFFFFF0FFFFFFF000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C
00FE000C00FE000C007E001C007F0018007F0018003F0038001F8030001FC0700007E0E0
0001FFC000007F001E3E7EBC26>I<FFFFF007FFFCFFFFF007FFFCFFFFF007FFFC03FFC0
01FFC000FF8000FF00007F8000FC00003F8000F800003FC000E000001FE000E000000FE0
01C0000007F00380000007F80300000003FC0600000001FC0E00000001FE1C00000000FF
18000000007F30000000003FF0000000003FE0000000001FE0000000000FE00000000007
F00000000007F8000000000FF8000000000DFC0000000019FE0000000038FF0000000070
7F00000000603F80000000C03FC0000001C01FC0000003800FE0000003000FF000000600
07F800000E0003F800001C0001FC00003C0001FE00007C0001FF0001FC0001FF800FFE00
03FFC0FFFF800FFFFFFFFF800FFFFFFFFF800FFFFF302B7FAA33>120
D E /FH 17 117 df<00030007000E001C0038007000F001E001C003C0078007800F000F
001E001E001E003C003C003C003C0078007800780078007800F800F800F000F000F000F0
00F000F000F000F000F000F000F000F800F800780078007800780078003C003C003C003C
001E001E001E000F000F000780078003C001C001E000F000700038001C000E0007000310
437AB11B>40 D<C000E000700038001C000E000F000780038003C001E001E000F000F000
7800780078003C003C003C003C001E001E001E001E001E001F001F000F000F000F000F00
0F000F000F000F000F000F000F001F001F001E001E001E001E001E003C003C003C003C00
780078007800F000F001E001E003C0038007800F000E001C0038007000E000C00010437C
B11B>I<0000038000000000038000000000038000000000038000000000038000000000
038000000000038000000000038000000000038000000000038000000000038000000000
038000000000038000000000038000000000038000000000038000000000038000000000
03800000000003800000000003800000000003800000000003800000FFFFFFFFFFFCFFFF
FFFFFFFCFFFFFFFFFFFC0000038000000000038000000000038000000000038000000000
038000000000038000000000038000000000038000000000038000000000038000000000
038000000000038000000000038000000000038000000000038000000000038000000000
038000000000038000000000038000000000038000000000038000000000038000002E2F
7CA737>43 D<003FC00000FFF00003E07C0007C03E000F801F000F000F001E0007801E00
07803E0007C03E0007C07C0003E07C0003E07C0003E07C0003E07C0003E0FC0003F0FC00
03F0FC0003F0FC0003F0FC0003F0FC0003F0FC0003F0FC0003F0FC0003F0FC0003F0FC00
03F0FC0003F0FC0003F0FC0003F0FC0003F0FC0003F07C0003E07C0003E07C0003E07E00
07E03E0007C03E0007C03E0007C01F000F800F000F000F801F0007C03E0003F0FC0000FF
F000003FC0001C2D7DAB23>48 D<000C00003C00007C0003FC00FFFC00FC7C00007C0000
7C00007C00007C00007C00007C00007C00007C00007C00007C00007C00007C00007C0000
7C00007C00007C00007C00007C00007C00007C00007C00007C00007C00007C00007C0000
7C00007C00007C00007C00007C00007C00007C00007C00007C00007C0000FE007FFFFE7F
FFFE172C7AAB23>I<007F800001FFF0000780FC000E003F001C001F8038000FC070000F
C0600007E0F00007E0FC0007F0FE0007F0FE0003F0FE0003F0FE0003F07C0007F0000007
F0000007F0000007E000000FE000000FC000001FC000001F8000003F0000007E0000007C
000000F8000001F0000003E0000007C000000F8000001E0000003C00000078000000F000
3000E0003001C0003003800060070000600E0000E01FFFFFE03FFFFFE07FFFFFC0FFFFFF
C0FFFFFFC01C2C7DAB23>I<003FC00001FFF00007C0FC000E007E001C003F001C001F80
3F001FC03F001FC03F800FC03F000FC03F000FC00C001FC000001FC000001F8000001F80
00003F0000003E0000007C000000F8000003F00000FFC00000FFF0000000FC0000003F00
00001F8000001FC000000FC000000FE000000FE0000007F0000007F0380007F07C0007F0
FE0007F0FE0007F0FE0007F0FE000FE0F8000FE060000FC070001FC038001F801E003F00
0780FC0001FFF000007FC0001C2D7DAB23>I<00000E0000000E0000001E0000003E0000
003E0000007E000000FE000000FE000001BE000003BE0000033E0000063E00000E3E0000
0C3E0000183E0000383E0000303E0000603E0000E03E0000C03E0001803E0003803E0003
003E0006003E000E003E000C003E0018003E0038003E0030003E0060003E00E0003E00FF
FFFFFCFFFFFFFC00003E0000003E0000003E0000003E0000003E0000003E0000003E0000
003E0000003E0000007F00001FFFFC001FFFFC1E2D7EAC23>I<0003F800000FFE00003E
078000F8018001F007C003E00FC007C00FC00F800FC00F800FC01F0007801F0000003E00
00003E0000007E0000007E0000007C0000007C0FC000FC3FF000FCF07C00FDC01E00FF80
0F00FF000F80FF0007C0FE0007E0FE0007E0FE0003E0FC0003F0FC0003F0FC0003F0FC00
03F07C0003F07C0003F07C0003F07E0003F07E0003F03E0003E03E0007E01E0007E01F00
07C00F000F8007801F0003C03E0001E07C00007FF000001FC0001C2D7DAB23>54
D<001FC00000FFF00003E07C0007801E000F000F001E0007801E0007803C0003C03C0003
C03C0003C03C0003C03E0003C03E0007C03F0007801FC00F801FE00F001FF81E000FFC3C
0007FFF80003FFE00000FFE000003FF80000FFFC0003C7FF000783FF801F00FFC01E003F
C03C001FE07C0007E0780003F0F80003F0F00001F0F00000F0F00000F0F00000F0F00000
F0F80000E0780001E07C0001C03C0003C01E0007800F800F0007E03C0001FFF000003FC0
001C2D7DAB23>56 D<FFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFC000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000FFFFFF
FFFFFCFFFFFFFFFFFCFFFFFFFFFFFC2E137C9937>61 D<00FF000007FFC0000F01F0001C
00F8003F007C003F003E003F003E003F003F001E001F0000001F0000001F0000001F0000
001F000007FF00007FFF0001FE1F0007F01F001FC01F003F801F007F001F007E001F00FE
001F06FC001F06FC001F06FC001F06FC003F06FE003F067E007F067F00EF8C1F83C7FC0F
FF03F801FC01E01F207D9E23>97 D<001F800000FFF00003E0780007C03E000F801E001F
001F001F000F803E000F807E0007807E0007C07C0007C0FC0007C0FC0007C0FC0007C0FF
FFFFC0FFFFFFC0FC000000FC000000FC000000FC000000FC0000007E0000007E0000003E
0000C03F0000C01F0001C00F8003800FC0030003E00F0001F03C00007FF800001FC0001A
207E9E1F>101 D<07C0FFC0FFC00FC007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C00FE0FFFEFFFE0F2E7EAD14>108
D<07C0FE0000FFC3FF8000FFC703E0000FDE01F00007F801F00007F000F80007F000F800
07E000F80007E000F80007C000F80007C000F80007C000F80007C000F80007C000F80007
C000F80007C000F80007C000F80007C000F80007C000F80007C000F80007C000F80007C0
00F80007C000F80007C000F80007C000F80007C000F80007C000F8000FE001FC00FFFE1F
FFC0FFFE1FFFC0221E7E9D27>110 D<01FE1807FFB81E01F83C00F8780078F00038F000
38F00018F00018F80018FC0018FF00007FF0003FFF001FFFC00FFFF001FFF8001FFC0001
FCC0007EC0003EC0003EE0001EE0001EF0001EF0001EF8003CF8003CFC0078FF01F0E3FF
C0C0FF0017207E9E1C>115 D<00600000600000600000600000E00000E00000E00001E0
0003E00003E00007E0001FE000FFFFF0FFFFF003E00003E00003E00003E00003E00003E0
0003E00003E00003E00003E00003E00003E00003E00003E00003E00003E01803E01803E0
1803E01803E01803E01803E01803E03801F03001F07000F860003FE0000F80152A7FA81B
>I E /FI 45 123 df<0000007800000007FFE000001FFFFC00003C7FFE00007007FE00
006003FE0000E000FE0000C000380000C000000000C000000000E000000000E000000000
E000000000F000000000F000000000F8000000007C000000007C000000007E000000003E
000000003F000000003F800000001FC00000001FC00000000FE00000000FF000000007F0
00000007F80000003FFC000000FFFC000003E1FE000007C1FE00001F00FF00003E00FF00
007C007F8000F8007F8001F8003F8003F0003F8007E0003FC007C0001FC00FC0001FC01F
80001FC01F80001FC03F00001FC03F00000FC07F00000FC07E00000FC07E00000FC07E00
000FC0FE00001F80FC00001F80FC00001F80FC00001F80FC00001F00F800001F00F80000
3F00F800003F00F800003E00F800007E00F800007C00F800007C00FC0000F8007C0000F8
007C0001F0003E0003E0003E0003E0001F0007C0000F800F800007C01F000003E07C0000
00FFF00000001FC0000027487CC62B>14 D<000007FE00007FFF0001FFFE0007F800001F
E000003F8000007F000000FE000001FC000003F8000007F800000FF000000FE000001FE0
00003FE000003FC000003FC000007FFFFFC07FFFFFE07FFFFFE07F800000FF800000FF00
0000FF000000FF000000FF000000FF000000FF000000FE000000FE0000007E0000007F00
00007F0000003F0000003F0000003F8000001F8000000FC0000007C0000C03E0003C01F0
00F000FC07C0003FFF000007F800202C7CAA27>I<000070000000000000F800000E0000
01F800003F000001F800003F000001F800003F000003F800007F000003F800007F000003
F000007E000003F000007E000007F00000FE000007F00000FE000007E00000FC000007E0
0000FC00000FE00001FC00000FE00001FC00000FC00001F800000FC00001F800001FC000
03F800001FC00003F800001F800003F000001F800003F000003F800007F000003F800007
F000003F000007E000003F000007E000007F00000FE000007F00000FE000007E00000FC0
00007E00000FC00000FE00001FC01800FE00001FC03800FC00001F803000FC00001F8030
01FC00003F807001FC00003F806001FC00007F006001FC0000FF006003FE0000FF00E003
FE0001DF00C003FE00039F01C003FF00071F018007FF801E0F838007F7C07807870007E1
FFE003FE0007E07F8000F8000FE000000000000FE000000000000FC000000000000FC000
000000001FC000000000001FC000000000001F8000000000001F8000000000003F800000
0000003F8000000000003F0000000000003F0000000000007F0000000000007F00000000
00007E0000000000007E000000000000FE000000000000FE000000000000FC0000000000
003800000000000035417DAB3B>22 D<000003FFFFFFE000001FFFFFFFF00000FFFFFFFF
F00001FFFFFFFFE00007FFFFFFFFC0000FF80FF80000001FC003F80000003F8001FC0000
007E0000FC000000FC00007E000001F800007E000003F000003E000007F000003F000007
E000003F00000FC000003F00000FC000003F00001F8000003F00001F8000003F00003F80
00003F00003F0000003F00003F0000007F00007F0000007E00007E0000007E00007E0000
007E00007E000000FE0000FE000000FC0000FC000000FC0000FC000001FC0000FC000001
F80000FC000001F80000FC000003F000007C000003E000007C000007E000007C00000FC0
00007C00000F8000003E00001F0000003E00003E0000001F00007C0000001F0000F80000
000F8003F000000007C007C000000001F03F00000000007FFC00000000001FE000000000
342C7DAA37>27 D<000FFFFFFFFC003FFFFFFFFE007FFFFFFFFE01FFFFFFFFFC03FFFFFF
FFF807E001C000000780018000000F00038000001E00038000001C000380000038000380
0000700007000000600007000000E0000700000040000F00000000000F00000000000E00
000000001E00000000001E00000000001E00000000001E00000000003C00000000003C00
000000003C00000000007C00000000007C0000000000780000000000F80000000000F800
00000000F80000000000F80000000001F00000000001F00000000001F00000000003F000
00000003F00000000003E00000000007E00000000007E00000000007E0000000000FE000
0000000FE0000000000FC00000000007800000002F2C7EAA2A>I<1E007F807F80FFC0FF
C0FFC0FFC07F807F801E000A0A78891B>58 D<1E007F80FF80FFC0FFC0FFE0FFE0FFE07F
E01E60006000600060006000E000C000C000C001C0018003800300070006000E001C0038
00700060000B1D78891B>I<00000000000001C000000000000007E00000000000001FE0
0000000000007FC0000000000001FF00000000000007FC0000000000001FF00000000000
007FC0000000000001FF0000000000000FFC0000000000003FF0000000000000FFC00000
00000003FF0000000000000FF80000000000003FE0000000000000FF80000000000003FE
0000000000001FF80000000000007FE0000000000001FF80000000000007FE0000000000
001FF00000000000007FC0000000000001FF00000000000007FC0000000000001FF00000
000000007FC0000000000000FF00000000000000FF000000000000007FC0000000000000
1FF000000000000007FC00000000000001FF000000000000007FC00000000000001FF000
000000000007FE00000000000001FF800000000000007FE00000000000001FF800000000
000003FE00000000000000FF800000000000003FE00000000000000FF800000000000003
FF00000000000000FFC00000000000003FF00000000000000FFC00000000000001FF0000
00000000007FC00000000000001FF000000000000007FC00000000000001FF0000000000
00007FC00000000000001FE000000000000007E000000000000001C03B3878B44C>I<00
00000018000000003C000000007C000000007C000000007800000000F800000000F80000
0000F000000001F000000001F000000001E000000003E000000003E000000003C0000000
07C000000007C000000007800000000F800000000F800000001F000000001F000000001E
000000003E000000003E000000003C000000007C000000007C000000007800000000F800
000000F800000000F000000001F000000001F000000003E000000003E000000003C00000
0007C000000007C000000007800000000F800000000F800000000F000000001F00000000
1F000000001E000000003E000000003E000000003C000000007C000000007C00000000F8
00000000F800000000F000000001F000000001F000000001E000000003E000000003E000
000003C000000007C000000007C000000007800000000F800000000F800000000F000000
001F000000001F000000003E000000003E000000003C000000007C000000007C00000000
7800000000F800000000F800000000F000000001F000000001F000000001E000000003E0
00000003E000000007C000000007C000000007800000000F800000000F800000000F0000
00001F000000001F000000001E000000003E000000003E000000003C000000007C000000
007C000000007800000000F800000000F800000000F000000000600000000026647BCA31
>I<7000000000000000FC00000000000000FF000000000000007FC00000000000001FF0
00000000000007FC00000000000001FF000000000000007FC00000000000001FF0000000
00000007FE00000000000001FF800000000000007FE00000000000001FF8000000000000
03FE00000000000000FF800000000000003FE00000000000000FF800000000000003FF00
000000000000FFC00000000000003FF00000000000000FFC00000000000001FF00000000
0000007FC00000000000001FF000000000000007FC00000000000001FF00000000000000
7FC00000000000001FE00000000000001FE00000000000007FC0000000000001FF000000
00000007FC0000000000001FF00000000000007FC0000000000001FF0000000000000FFC
0000000000003FF0000000000000FFC0000000000003FF0000000000000FF80000000000
003FE0000000000000FF80000000000003FE0000000000001FF80000000000007FE00000
00000001FF80000000000007FE0000000000001FF00000000000007FC0000000000001FF
00000000000007FC0000000000001FF00000000000007FC0000000000000FF0000000000
0000FC0000000000000070000000000000003B3878B44C>I<0000000000003000000000
00000000700000000000000000F00000000000000000F00000000000000001F000000000
00000003F00000000000000003F00000000000000007F80000000000000007F800000000
0000000FF8000000000000001FF8000000000000001FF80000000000000037F800000000
00000037F80000000000000067F800000000000000E7F800000000000000C7F800000000
00000187FC0000000000000187FC0000000000000307FC0000000000000703FC00000000
00000603FC0000000000000C03FC0000000000000C03FC0000000000001803FC00000000
00003803FC0000000000003003FC0000000000006003FE0000000000006003FE00000000
0000C003FE000000000001C001FE0000000000018001FE0000000000030001FE00000000
00030001FE0000000000060001FE00000000000E0001FE00000000000C0001FE00000000
00180001FE0000000000180001FF0000000000300001FF0000000000700000FF00000000
00600000FF0000000000C00000FF0000000000C00000FF0000000001800000FF00000000
03FFFFFFFF0000000003FFFFFFFF0000000007FFFFFFFF0000000006000000FF80000000
0C000000FF800000001C0000007F80000000180000007F80000000300000007F80000000
300000007F80000000600000007F80000000E00000007F80000000C00000007F80000001
800000007F80000001800000007FC0000003000000007FC0000007000000003FC0000006
000000003FC000000E000000003FC000001C000000003FC000003C000000003FC000007C
000000003FC00000FE000000007FE00007FF00000001FFE0007FFFF000007FFFFFC0FFFF
F000007FFFFFC0FFFFE000007FFFFFC042477DC649>65 D<0000000001FF800018000000
003FFFF0003800000001FFFFFC003800000007FF007E00780000001FF0000F80F0000000
7F800003C1F0000001FE000001C3F0000003FC000000E7F000000FF00000007FE000001F
E00000003FE000003FC00000003FE00000FF000000001FE00001FE000000001FC00003FC
000000000FC00007F8000000000FC0000FF8000000000FC0000FF0000000000F80001FE0
000000000780003FC0000000000780007FC000000000078000FF8000000000070000FF00
00000000070001FF0000000000070003FE0000000000070003FE0000000000060007FC00
00000000060007FC000000000006000FF8000000000006000FF8000000000000001FF800
0000000000001FF0000000000000001FF0000000000000003FF0000000000000003FE000
0000000000003FE0000000000000003FE0000000000000007FE0000000000000007FC000
0000000000007FC0000000000000007FC0000000000000007FC000000000000000FF8000
000000000000FF8000000000000000FF8000000000000000FF8000000000000000FF8000
00000000C000FF800000000000C000FF800000000001C000FF80000000000180007F8000
0000000180007F80000000000380007F80000000000300007F80000000000700007F8000
0000000600003FC0000000000E00003FC0000000001C00003FC0000000001800001FC000
0000003800001FE0000000007000000FE000000000E000000FF000000001C0000007F800
00000380000003F80000000700000001FC0000000E00000000FE0000003C000000007F00
000078000000003FC00001E0000000001FF0000FC00000000007FE007F000000000001FF
FFFC0000000000003FFFE000000000000007FF000000000045487CC546>67
D<0000FFFFFFFFFF8000000000FFFFFFFFFFF000000000FFFFFFFFFFFC0000000000FFC0
0007FF00000000007F8000007FC000000000FF8000001FE000000000FF8000000FF00000
0000FF00000007F800000000FF00000003FC00000000FF00000001FC00000001FF000000
00FE00000001FE00000000FE00000001FE000000007F00000001FE000000007F00000003
FE000000003F80000003FC000000003F80000003FC000000003F80000003FC000000003F
C0000007FC000000003FC0000007F8000000003FC0000007F8000000003FC0000007F800
0000003FC000000FF8000000003FC000000FF0000000003FE000000FF0000000003FE000
000FF0000000003FE000001FF0000000003FE000001FE0000000003FC000001FE0000000
003FC000001FE0000000003FC000003FE0000000003FC000003FC0000000007FC000003F
C0000000007FC000003FC0000000007FC000007FC0000000007F8000007F8000000000FF
8000007F8000000000FF8000007F8000000000FF800000FF8000000000FF000000FF0000
000001FF000000FF0000000001FE000000FF0000000001FE000001FF0000000003FE0000
01FE0000000003FC000001FE0000000007FC000001FE0000000007F8000003FE00000000
0FF0000003FC000000000FF0000003FC000000001FE0000003FC000000001FC0000007FC
000000003FC0000007F8000000003F80000007F8000000007F00000007F800000000FE00
00000FF800000001FC0000000FF000000003FC0000000FF000000007F80000000FF00000
000FE00000001FF00000001FC00000001FE00000003F800000001FE0000000FF00000000
3FE0000001FC000000003FE000000FF8000000003FC000003FE000000000FFC00003FF80
000000FFFFFFFFFFFE00000000FFFFFFFFFFF000000000FFFFFFFFFF00000000004B447C
C351>I<0000000001FF800018000000003FFFF0003800000001FFFFFC003800000007FF
007E00780000001FF0000F80F00000007F800003C1F0000001FE000001C3F0000003FC00
0000E7F000000FF00000007FE000001FE00000003FE000003FC00000003FE00000FF0000
00001FE00001FE000000001FC00003FC000000000FC00007F8000000000FC0000FF80000
00000FC0000FF0000000000F80001FE0000000000780003FC0000000000780007FC00000
0000078000FF8000000000070000FF0000000000070001FF0000000000070003FE000000
0000070003FE0000000000060007FC0000000000060007FC000000000006000FF8000000
000006000FF8000000000000001FF8000000000000001FF0000000000000001FF0000000
000000003FF0000000000000003FE0000000000000003FE0000000000000003FE0000000
000000007FE0000000000000007FC0000000000000007FC0000000000000007FC0000000
000000007FC000000000000000FF8000000000000000FF80000001FFFFFF80FF80000003
FFFFFF80FF80000003FFFFFF80FF8000000000FFE000FF80000000007FC000FF80000000
007FC000FF80000000007FC0007F80000000007F80007F80000000007F80007F80000000
00FF80007F8000000000FF00007F8000000000FF00003FC000000000FF00003FC0000000
01FF00003FC000000001FE00001FE000000001FE00001FE000000001FE00000FE0000000
03FE00000FF000000003FC000007F800000007FC000003F80000000FFC000001FC000000
1FFC000000FE0000003DF80000007F80000078F80000003FC00001E0F80000001FF00007
C07800000007FE007F007000000001FFFFFC0030000000003FFFF000000000000007FF00
0000000045487CC54D>71 D<00007FFFFFF800007FFFFFF800007FFFFFF00000007FF000
0000003FC0000000007FC0000000007FC0000000007F80000000007F80000000007F8000
000000FF8000000000FF0000000000FF0000000000FF0000000001FF0000000001FE0000
000001FE0000000001FE0000000003FE0000000003FC0000000003FC0000000003FC0000
000007FC0000000007F80000000007F80000000007F8000000000FF8000000000FF00000
00000FF0000000000FF0000000001FF0000000001FE0000000001FE0000000001FE00000
00003FE0000000003FC0000000003FC0000000003FC0000000007FC0000000007F800000
00007F80000000007F8000000000FF8000000000FF0000000000FF0000000000FF000000
0001FF0000000001FE0000000001FE0000000001FE0000000003FE0000000003FC000000
0003FC0000000003FC0000000007FC0000000007F80000000007F80000000007F8000000
000FF8000000000FF0000000000FF0000000001FF0000000001FF0000000001FE0000000
007FF00000007FFFFFF00000FFFFFFF00000FFFFFFF000002D447DC32B>73
D<0000FFFFFFE00001FFFFC00000FFFFFFE00001FFFFC00000FFFFFFE00001FFFFC00000
00FFE00000003FF8000000007F800000001FE000000000FF800000001F0000000000FF80
0000003E0000000000FF00000000780000000000FF00000000F00000000000FF00000001
C00000000001FF00000003800000000001FE00000007000000000001FE0000001C000000
000001FE00000038000000000003FE00000070000000000003FC000000E0000000000003
FC00000380000000000003FC00000700000000000007FC00000E00000000000007F80000
3800000000000007F800007000000000000007F80000E00000000000000FF80001C00000
000000000FF00007000000000000000FF0000E000000000000000FF0001C000000000000
001FF00078000000000000001FE000F8000000000000001FE001FC000000000000001FE0
03FC000000000000003FE00FFC000000000000003FC01FFE000000000000003FC03BFE00
0000000000003FC0E1FF000000000000007FC1C1FF000000000000007F8380FF80000000
0000007F8700FF800000000000007F9C00FF80000000000000FFB8007FC0000000000000
FF70007FC0000000000000FFC0003FE0000000000000FF80003FE0000000000001FF0000
3FE0000000000001FE00001FF0000000000001FE00001FF0000000000001FE00000FF800
0000000003FE00000FF8000000000003FC00000FFC000000000003FC000007FC00000000
0003FC000007FC000000000007FC000003FE000000000007F8000003FE000000000007F8
000001FF000000000007F8000001FF00000000000FF8000001FF00000000000FF0000000
FF80000000000FF0000000FF80000000000FF00000007FC0000000001FF00000007FC000
0000001FE00000007FC0000000001FE00000003FE0000000003FE00000003FE000000000
3FE00000003FF0000000003FC00000003FF800000000FFE00000007FFC000000FFFFFFE0
000FFFFFE00000FFFFFFE0001FFFFFE00000FFFFFFE0001FFFFFE0000052447CC353>75
D<0000FFFFC000000FFFFF800000FFFFE000000FFFFF800000FFFFE000000FFFFF800000
007FE00000007FE0000000007FF00000001F80000000007FF00000000F0000000000EFF8
0000000E0000000000CFF80000000E0000000000C7F80000000C0000000000C7FC000000
1C0000000001C7FC0000001C000000000183FE00000018000000000183FE000000180000
00000181FF00000038000000000381FF00000038000000000300FF000000300000000003
00FF80000030000000000300FF800000700000000007007FC00000700000000006007FC0
0000600000000006003FC00000600000000006003FE00000E0000000000E003FE00000E0
000000000C001FF00000C0000000000C001FF00000C0000000000C000FF80001C0000000
001C000FF80001C000000000180007F800018000000000180007FC000180000000001800
07FC00038000000000380003FE00038000000000300003FE00030000000000300001FE00
030000000000300001FF00070000000000700001FF00070000000000600000FF80060000
000000600000FF800600000000006000007FC00E0000000000E000007FC00E0000000000
C000003FC00C0000000000C000003FE00C0000000000C000003FE01C0000000001C00000
1FF01C00000000018000001FF01800000000018000000FF01800000000018000000FF838
00000000038000000FF838000000000300000007FC30000000000300000007FC30000000
000300000003FE70000000000700000003FE70000000000600000001FE60000000000600
000001FF60000000000600000001FFE0000000000E00000000FFE0000000000C00000000
FFC0000000000C000000007FC0000000000C000000007FC0000000001C000000007FC000
00000018000000003F800000000038000000003F800000000038000000001F8000000000
78000000001F8000000000FC000000000F0000000003FF000000000F00000000FFFFF800
00000F00000000FFFFF80000000700000000FFFFF8000000060000000051447CC34E>78
D<0000000003FF000000000000007FFFF0000000000001FC01FC00000000000FE0007F00
000000003F00001FC000000000FE000007E000000001F8000003F000000007F0000001F8
0000000FC0000000FC0000001F80000000FE0000007F000000007E000000FE000000007F
000001FC000000003F000003F8000000003F800007F0000000003F80000FF0000000001F
C0000FE0000000001FC0001FC0000000001FC0003F80000000001FE0007F80000000001F
E0007F00000000001FE000FF00000000001FE001FE00000000000FE001FE00000000001F
F003FC00000000001FF003FC00000000001FF007F800000000001FF007F800000000001F
F00FF800000000001FF00FF000000000001FF01FF000000000001FE01FF000000000001F
E01FE000000000003FE03FE000000000003FE03FE000000000003FE03FE000000000003F
E07FC000000000007FC07FC000000000007FC07FC000000000007FC07FC00000000000FF
807FC00000000000FF80FF800000000000FF80FF800000000001FF00FF800000000001FF
00FF800000000001FF00FF800000000003FE00FF800000000003FE00FF800000000007FC
00FF800000000007F800FF80000000000FF8007F80000000000FF0007F80000000001FF0
007F80000000001FE0007F80000000003FC0007F80000000007F80003FC0000000007F80
003FC000000000FF00003FC000000001FE00001FC000000003FC00001FE000000007F800
000FE000000007F0000007F00000000FE0000007F00000003F80000003F80000007F0000
0001FC000000FE00000000FE000001F8000000007F000007F0000000003F80001FC00000
00000FE0007F000000000003F803FC000000000000FFFFE00000000000000FFE00000000
0044487CC54B>I<0000FFFFFFFFFE00000000FFFFFFFFFFE0000000FFFFFFFFFFF80000
0000FFC0000FFE000000007F800001FF00000000FF8000007F80000000FF8000003FC000
0000FF0000001FE0000000FF0000001FE0000001FF0000000FF0000001FF0000000FF000
0001FE0000000FF0000001FE0000000FF8000003FE0000000FF8000003FE0000000FF800
0003FC0000000FF8000003FC0000000FF8000007FC0000000FF8000007FC0000001FF000
0007F80000001FF0000007F80000001FF000000FF80000003FE000000FF80000003FE000
000FF00000003FC000000FF00000007FC000001FF00000007F8000001FF0000000FF0000
001FE0000001FE0000001FE0000003FC0000003FE0000007F80000003FE000000FF00000
003FC000003FC00000003FC00000FF000000007FC00007FC000000007FFFFFFFF0000000
007FFFFFFF80000000007F8000000000000000FF8000000000000000FF80000000000000
00FF0000000000000000FF0000000000000001FF0000000000000001FF00000000000000
01FE0000000000000001FE0000000000000003FE0000000000000003FE00000000000000
03FC0000000000000003FC0000000000000007FC0000000000000007FC00000000000000
07F80000000000000007F8000000000000000FF8000000000000000FF800000000000000
0FF0000000000000000FF0000000000000001FF0000000000000001FF000000000000000
1FE0000000000000001FE0000000000000003FE0000000000000003FE000000000000000
3FC000000000000000FFE0000000000000FFFFFFE00000000000FFFFFFE00000000000FF
FFFFE0000000000045447CC33F>I<00000000FF80018000000007FFF003800000003FFF
FC0380000000FF007E0780000001F8000F0F80000007E000079F0000000FC00003FF0000
001F000001FF0000003E000000FF0000007C000000FE0000007C0000007E000000F80000
007E000001F00000007E000001F00000003C000003E00000003C000003E00000003C0000
07E00000003C000007C000000038000007C000000038000007C00000003800000FC00000
003800000FC00000003000000FE00000003000000FE00000003000000FE0000000000000
0FF000000000000007F800000000000007FC00000000000007FF00000000000003FFE000
0000000003FFFC000000000001FFFFC00000000000FFFFFC00000000007FFFFF00000000
003FFFFFC0000000000FFFFFE00000000003FFFFF800000000003FFFF8000000000007FF
FC0000000000007FFE0000000000000FFE00000000000003FE00000000000001FF000000
00000000FF000000000000007F000000000000007F000000000000003F00000000000000
3F000006000000003F000006000000003F000006000000003F000006000000003F00000E
000000003E00000E000000003E00000C000000003E00000C000000007E00001E00000000
7C00001E000000007C00001E00000000F800001E00000000F000003F00000001F000003F
00000003E000003F80000007C000003F8000000F8000007FC000001F0000007FE000003E
0000007CF800007C000000787E0001F8000000F01FC00FE0000000E007FFFF80000000E0
01FFFE00000000C0003FF00000000039487BC53C>83 D<01FFFFFFFFFFFFFFC003FFFFFF
FFFFFFFFC003FFFFFFFFFFFFFFC003FF0000FF8000FF8007F00000FF00001F8007E00001
FF00000F8007800001FF000007800F000001FE000007800F000001FE000003800E000001
FE000003801C000003FE000003001C000003FC0000030018000003FC0000030038000003
FC0000030030000007FC0000030030000007F80000070070000007F80000060060000007
F800000600E000000FF800000600C000000FF000000600C000000FF000000600C000000F
F0000006000000001FF0000000000000001FE0000000000000001FE0000000000000001F
E0000000000000003FE0000000000000003FC0000000000000003FC0000000000000003F
C0000000000000007FC0000000000000007F80000000000000007F80000000000000007F
8000000000000000FF8000000000000000FF0000000000000000FF0000000000000000FF
0000000000000001FF0000000000000001FE0000000000000001FE0000000000000001FE
0000000000000003FE0000000000000003FC0000000000000003FC0000000000000003FC
0000000000000007FC0000000000000007F80000000000000007F80000000000000007F8
000000000000000FF8000000000000000FF0000000000000000FF0000000000000000FF0
000000000000001FF0000000000000001FE0000000000000001FE0000000000000001FE0
000000000000003FE0000000000000003FC0000000000000003FC0000000000000007FC0
000000000000007FC000000000000000FFC000000000000003FFE000000000001FFFFFFF
FC000000001FFFFFFFFC000000001FFFFFFFF80000000042447EC339>I<7FFFFF800000
1FFFF8FFFFFF8000003FFFF8FFFFFF8000003FFFF801FFE000000003FF0000FF80000000
01FC0000FF8000000000F00000FF8000000000E00000FF8000000001C00000FF80000000
01C000007F80000000038000007F80000000030000007F80000000060000007F80000000
060000007F800000000C0000007FC0000000180000007FC0000000180000003FC0000000
300000003FC0000000700000003FC0000000600000003FC0000000C00000003FC0000000
C00000003FC0000001800000003FE0000003000000003FE0000003000000001FE0000006
000000001FE000000E000000001FE000000C000000001FE0000018000000001FE0000018
000000001FF0000030000000001FF0000060000000001FF0000060000000000FF00000C0
000000000FF00001C0000000000FF0000180000000000FF0000300000000000FF0000300
000000000FF8000600000000000FF8000C00000000000FF8000C000000000007F8001800
0000000007F80030000000000007F80030000000000007F80060000000000007F800E000
0000000007FC00C0000000000007FC0180000000000003FC0180000000000003FC030000
0000000003FC0600000000000003FC0600000000000003FC0C00000000000003FC1C0000
0000000003FE1800000000000003FE3000000000000001FE3000000000000001FE600000
0000000001FEC000000000000001FEC000000000000001FF8000000000000001FF800000
0000000001FF0000000000000001FE0000000000000000FE0000000000000000FC000000
0000000000F80000000000000000F80000000000000000F00000000000000000F0000000
0000000000E000000000000045467BC339>86 D<FFFFFF8003FFFFFC0007FFFFFFFFFF80
07FFFFFC0007FFFFFFFFFF0007FFFFF80007FFFF03FFC000001FFE0000007FE001FF0000
000FF80000003F8001FF0000000FF80000001F0001FF0000000FF80000001E0001FF0000
000FF80000001C0001FF00000007F80000001C0000FF00000007F8000000180000FF0000
0007F8000000300000FF0000000FF8000000700000FF0000000FF8000000600000FF0000
001FF8000000C00000FF0000001FF8000000C00000FF00000037F8000001800000FF0000
0037F8000001800000FF00000067F8000003000000FF000000E7F8000003000000FF0000
00C7F8000006000000FF00000187F800000E000000FF00000187FC00000C000000FF8000
0307FC000018000000FF80000307FC0000180000007F80000603FC0000300000007F8000
0603FC0000300000007F80000C03FC0000600000007F80001C03FC0000E00000007F8000
1803FC0000C00000007F80003003FC0001800000007F80003003FC0001800000007F8000
6003FC0003000000007F80006003FC0003000000007F8000C003FC0006000000007F8001
C003FC0006000000007F80018003FC000C000000007F80030003FC0018000000007F8003
0003FE0018000000007FC0060003FE0030000000007FC0060001FE0030000000003FC00C
0001FE0060000000003FC00C0001FE0060000000003FC0180001FE00C0000000003FC030
0001FE01C0000000003FC0300001FE0180000000003FC0600001FE0300000000003FC060
0001FE0300000000003FC0C00001FE0600000000003FC0C00001FE0600000000003FC180
0001FE0C00000000003FC3800001FE1C00000000003FC3000001FE1800000000003FC600
0001FF3000000000003FE6000001FF3000000000003FEC000001FF6000000000003FEC00
0000FF6000000000001FF8000000FFC000000000001FF8000000FFC000000000001FF000
0000FF8000000000001FE0000000FF0000000000001FE0000000FF0000000000001FC000
0000FE0000000000001FC0000000FE0000000000001F80000000FC0000000000001F8000
0000FC0000000000001F00000000F80000000000001F00000000F80000000000001E0000
0000F00000000000001C00000000E00000000000000C0000000060000000000060467BC3
5C>I<00003FFFFFE0001FFFFF00003FFFFFE0001FFFFF00003FFFFFE0001FFFFF000000
7FFE000003FFE00000003FF8000001FE000000001FF0000000FC000000001FF0000000F0
000000000FF8000001E0000000000FF8000001C00000000007FC000003800000000007FC
000006000000000007FC00000E000000000003FE00001C000000000003FE000038000000
000001FF000070000000000001FF0000E0000000000001FF8001C0000000000000FF8001
80000000000000FF8003000000000000007FC006000000000000007FC00C000000000000
003FE018000000000000003FE030000000000000003FE060000000000000001FF0C00000
00000000001FF1C0000000000000000FFB80000000000000000FFF00000000000000000F
FE000000000000000007FC000000000000000007FC000000000000000003FE0000000000
00000003FE000000000000000003FE000000000000000001FF000000000000000003FF00
0000000000000006FF80000000000000000CFF80000000000000001C7FC0000000000000
00387FC000000000000000707FC000000000000000E03FE000000000000001C03FE00000
0000000003801FF000000000000003001FF000000000000006001FF00000000000000C00
0FF800000000000018000FF8000000000000300007FC000000000000600007FC00000000
0000C00007FC000000000001800003FE000000000003800003FE000000000007000001FF
00000000000E000001FF00000000001C000001FF000000000038000000FF800000000030
000000FF8000000000E00000007FC000000001C00000007FC000000003C00000003FE000
000007800000003FE00000001F800000003FE00000003FC00000007FF0000003FFE00000
01FFF800007FFFFC00001FFFFFF000FFFFFC00001FFFFFF000FFFFFC00001FFFFFF00050
447EC351>I<FFFFFF8000001FFFFCFFFFFF8000001FFFFCFFFFFF8000001FFFF801FFE0
00000003FF8000FFC000000001FC0000FF8000000001F000007FC000000001E000007FC0
00000003C000007FC0000000038000003FE0000000070000003FE00000000E0000003FE0
0000001C0000001FF0000000180000001FF0000000300000001FF8000000600000000FF8
000000C00000000FF80000018000000007FC0000038000000007FC0000070000000007FC
0000060000000003FE00000C0000000003FE0000180000000003FE0000300000000001FF
0000600000000001FF0000E00000000001FF0001C00000000000FF8001800000000000FF
8003000000000000FFC0060000000000007FC00C0000000000007FC0180000000000007F
E0380000000000003FE0700000000000003FE0600000000000001FF0C00000000000001F
F1800000000000001FF3000000000000000FFE000000000000000FFE000000000000000F
FC0000000000000007F80000000000000007F0000000000000000FF0000000000000000F
F0000000000000000FF0000000000000000FE0000000000000001FE0000000000000001F
E0000000000000001FE0000000000000001FC0000000000000003FC0000000000000003F
C0000000000000003FC0000000000000003F80000000000000007F80000000000000007F
80000000000000007F80000000000000007F0000000000000000FF0000000000000000FF
0000000000000000FF0000000000000001FE0000000000000001FE0000000000000001FE
0000000000000007FF00000000000007FFFFFF000000000007FFFFFF000000000007FFFF
FE000000000046447CC339>I<00000FFFFFFFFFFFC000001FFFFFFFFFFFC000001FFFFF
FFFFFF8000001FFF800001FF0000001FF8000001FF0000003FE0000003FE0000003F8000
0007FC0000003F0000000FF80000007E0000001FF00000007C0000003FE0000000780000
007FC0000000F0000000FF80000000F0000000FF80000000E0000001FF00000000C00000
03FE00000001C0000007FC00000001C000000FF8000000018000001FF000000003800000
3FE0000000030000007FC000000003000000FF8000000003000000FF8000000000000001
FF0000000000000003FE0000000000000007FC000000000000000FF8000000000000001F
F0000000000000003FE0000000000000007FC000000000000000FF8000000000000000FF
8000000000000001FF0000000000000003FE0000000000000007FC000000000000000FF8
000000000000001FF0000000000000003FE0000000000000007FC0000000000000007FC0
00000000000000FF8000000000000001FF0000000000000003FE0000000000000007FC00
0006000000000FF8000006000000001FF0000006000000003FE000000E000000007FC000
000C000000007FC000000C00000000FF8000001C00000001FF0000001800000003FE0000
003800000007FC000000380000000FF8000000700000001FF0000000700000003FE00000
00F00000007FC0000000E00000007FC0000001E0000000FF80000003E0000001FF000000
07C0000003FE0000000FC0000007FC0000001FC000000FF80000003F8000001FF0000000
FF8000003FE0000003FF8000003FE000003FFF0000007FFFFFFFFFFF000000FFFFFFFFFF
FF000000FFFFFFFFFFFE00000042447BC343>I<00000FC0000000007FF000000001F838
1C000007E01C7E00000FC00E7E00003F0007FE00007F0003FC0000FE0003FC0001FC0003
FC0001F80001FC0003F80001F80007F00001F8000FF00001F8000FE00003F8001FE00003
F0001FE00003F0003FC00003F0003FC00007F0007FC00007E0007F800007E0007F800007
E0007F80000FE000FF80000FC000FF00000FC000FF00000FC000FF00001FC000FF00001F
8000FE00001F8000FE00001F8000FE00003F8030FE00003F0070FE00003F0060FE00003F
0060FE00007F00E0FE00007F00C0FE0000FE00C07E0001FE00C07E0003FE01C03E00073E
01803F000E3E03801F001C3E03000F80381F070007C0F00F0E0001FFC007FC00007F0001
F0002C2D7CAB33>97 D<0000000001FC00000000FFFC00000000FFFC00000000FFFC0000
000003F80000000001F80000000003F80000000003F80000000003F00000000003F00000
000007F00000000007F00000000007E00000000007E0000000000FE0000000000FE00000
00000FC0000000000FC0000000001FC0000000001FC0000000001F80000000001F800000
00003F80000000003F80000000003F0000000FC03F0000007FF07F000001F8387F000007
E01C7E00000FC00E7E00003F0007FE00007F0003FE0000FE0003FC0001FC0003FC0001F8
0001FC0003F80001FC0007F00001F8000FF00001F8000FE00003F8001FE00003F8001FE0
0003F0003FC00003F0003FC00007F0007FC00007F0007F800007E0007F800007E0007F80
000FE000FF80000FE000FF00000FC000FF00000FC000FF00001FC000FF00001FC000FE00
001F8000FE00001F8000FE00003F8030FE00003F8070FE00003F0060FE00003F0060FE00
007F00E0FE00007F00C0FE0000FE00C07E0001FE00C07E0003FE01C03E00073E01803F00
0E3E03801F001C3E03000F80381F070007C0F00F0E0001FFC007FC00007F0001F0002E46
7CC433>100 D<000007F80000003FFE000001FC07800003F003C0000FC001E0001F8000
E0007F0000E000FE00007001FC00007003F80000F007F80000E007F00000E00FF00001E0
1FE00001C01FE00003C03FC00007803FC0001F003FC000FC007FC01FF0007FFFFF80007F
FFF000007F80000000FF80000000FF00000000FF00000000FF00000000FF00000000FF00
000000FE00000000FE00000000FE00000000FE00000000FE000000187E000000387E0000
00707F000000E03F000001C03F000003801F000007000F80001E000FC000380007E001F0
0001F00FC000007FFE0000001FF00000252D7CAB2D>I<0000007E0000000003FF800000
000FC1E0E000001F0073F000007E0033F00000FC003FF00001F8001FF00003F8001FE000
07F0000FE0000FE0000FE0000FE0000FE0001FC0000FC0003FC0000FC0003F80001FC000
7F80001FC0007F00001F8000FF00001F8000FF00003F8001FF00003F8001FE00003F0001
FE00003F0001FE00007F0003FE00007F0003FC00007E0003FC00007E0003FC0000FE0003
FC0000FE0003F80000FC0003F80000FC0003F80001FC0003F80001FC0003F80001F80003
F80001F80003F80003F80003F80007F80001F80007F00001F8000FF00000F8001FF00000
FC003FF000007C0077E000003E01E7E000001F078FE0000007FE0FE0000001F80FC00000
00000FC0000000001FC0000000001FC0000000001F80000000001F80000000003F800000
00003F80000000003F00000000003F00001C00007E00007F0000FE0000FF0000FC0000FF
0001F80000FF0003F80000FE0007F00000FE000FC00000F8001F8000007C00FE0000001F
FFF800000003FFC00000002C407EAB2F>103 D<00001E0000003F0000007F000000FF00
0000FF000000FF0000007E00000038000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
003E000000FF800001C3C0000781E0000601F0000E01F0001C01F0001803F0003803F000
3003F0003003F0007007F0006007E0006007E000E00FE000C00FC000001FC000001F8000
001F8000003F8000003F0000003F0000007F0000007E000000FE000000FC000000FC0000
01FC000001F8000001F8038003F8030003F0030007F0030007E0070007E0060007E00E00
07E00C0007C01C0007C0180007C0380007C0700003C0E00003E1C00000FF8000003E0000
19437DC121>105 D<000000003C00000000FE00000000FE00000001FE00000001FE0000
0001FE00000001FC00000000700000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000FC00000003FF0000000F078000001C07C000003803E0
00007003E00000E003E00000C003E00001C003E000018007E000038007E000030007E000
070007E00006000FE0000E000FE0000C000FC00000000FC00000001FC00000001FC00000
001F800000001F800000003F800000003F800000003F000000003F000000007F00000000
7F000000007E000000007E00000000FE00000000FE00000000FC00000000FC00000001FC
00000001FC00000001F800000001F800000003F800000003F800000003F000000003F000
000007F000000007F000000007E000000007E00000000FE00000000FE00000000FC00000
000FC00000001FC00000001F800000001F800000003F80001C003F00007F003F0000FF00
7E0000FF00FC0000FF00FC0000FE01F80000FE03E00000F807C00000781F8000003FFE00
000007F0000000275681C128>I<0003F801FFF801FFF801FFF80007F00003F00007F000
07F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F8000
3F80003F00003F00007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001
FC0001F80001F80003F80003F80003F00003F00007F00007F00007E00007E0000FE0000F
E0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F00607F
00E07E00C07E00C07E01C0FE0180FC0180FC0180FC03807C03007C07007C06003E0E001E
1C000FF80003E00015467CC41D>108 D<00F80003FC00007F800003FE001FFF0003FFE0
00071F007C0FC00F81F8000E0F80E007E01C00FC001C0FC3C003E078007C001807C70003
F0E0007E001807CE0001F1C0003E003807DC0001FB80003F003007D80001FB00003F0030
0FF80001FF00003F00700FF00001FE00003F00600FE00001FC00003F00600FE00001FC00
003F00E00FC00003F800007F00C01FC00003F800007E00C01F800003F000007E00001F80
0003F000007E00001F800007F00000FE00003F800007F00000FC00003F000007E00000FC
00003F000007E00000FC00003F00000FE00001FC00007F00000FE00001F800007E00000F
C00001F800007E00000FC00003F800007E00001FC00003F00000FE00001FC00003F00000
FC00001F800007F00000FC00001F800007E00000FC00003F800007E00E01FC00003F8000
0FE00C01F800003F00000FC00C01F800003F00001FC00C01F800007F00001F801C03F800
007F00001F801803F000007E00001F803803F000007E00001F003003F00000FE00001F00
7007F00000FE00001F006007E00000FC00001F00E007E00000FC00001F01C007E00001FC
00000F03800FE00001FC00000F87000FC00001F8000003FE000380000070000000F8004F
2D7DAB55>I<00F80003FC000003FE001FFF0000071F007C0FC0000E0F80E007E0000C07
C3C003E0001C07C70003F0001807CE0001F0003807DC0001F8003007D80001F800300FF8
0001F800700FF00001F800600FE00001F800600FE00001F800E00FC00003F800C01FC000
03F000C01F800003F000001F800003F000001F800007F000003F800007E000003F000007
E000003F000007E000003F00000FE000007F00000FC000007E00000FC000007E00001FC0
00007E00001F800000FE00001F800000FC00003F800000FC00003F000000FC00003F0070
01FC00007F006001F800007E006001F80000FE006001F80000FC00E003F80000FC00C003
F00000FC01C003F00000F8018003F00000F8038007F00000F8030007E00000F8070007E0
0000F80E0007E00000781C000FE000007C38000FC000001FF0000380000007C000342D7D
AB3A>I<000003FC000000003FFF00000000FE07C0000003F003F0000007E001F800001F
C000FC00003F00007C00007F00007E0000FE00007F0001FC00003F0003F800003F0007F8
00003F8007F000003F800FF000003F801FE000003F801FE000003F803FC000003F803FC0
00007F807FC000007F807F8000007F807F8000007F807F800000FF80FF800000FF00FF00
0000FF00FF000000FF00FF000001FF00FF000001FE00FE000001FE00FE000003FC00FE00
0003FC00FE000003F800FE000007F800FE000007F000FE00000FE000FE00001FE0007E00
001FC0007E00003F80003F00007F00003F0000FE00001F8001F800000FC003F0000007E0
0FC0000001F03F80000000FFFC000000001FE0000000292D7CAB2F>I<0003E0003F8000
000FF800FFE000001C7C03C0F80000383E07007C0000703F1E007E0000601F38003F0000
601F70003F0000E01F60001F8000C01FE0001F8000C03FC0001F8001C03F80001FC00180
3F00001FC001803F00001FC003807F00001FC003007F00001FC003007E00001FC000007E
00001FC00000FE00003FC00000FE00003FC00000FC00003FC00000FC00003FC00001FC00
007FC00001FC00007F800001F800007F800001F800007F800003F80000FF800003F80000
FF000003F00000FF000003F00000FE000007F00001FE000007F00001FC000007E00003FC
000007E00003F800000FE00007F800000FE00007F000000FE0000FE000000FE0000FC000
001FF0001F8000001FF0003F0000001FB8007E0000001F9800FC0000003F9C01F8000000
3F8F07E00000003F03FF800000003F00FC000000007F0000000000007F0000000000007E
0000000000007E000000000000FE000000000000FE000000000000FC000000000000FC00
0000000001FC000000000001FC000000000001F8000000000001F8000000000003F80000
00000003F8000000000007F80000000000FFFFF000000000FFFFF000000000FFFFE00000
0000323F83AB31>I<00F8000FC003FE007FF0070F00F0380E0F83C07C0C07C701FC1C07
CE01FC1807DC03FC3807D803FC3007F803FC300FF003F8700FE000E0600FE00000600FC0
0000E00FC00000C01FC00000C01F800000001F800000001F800000003F800000003F0000
00003F000000003F000000007F000000007E000000007E000000007E00000000FE000000
00FC00000000FC00000000FC00000001FC00000001F800000001F800000001F800000003
F800000003F000000003F000000003F000000007F000000007E000000007E000000007E0
0000000FE00000000FC00000000380000000262D7DAB2C>114 D<00000FF00000007FFE
000001F00F8000078001C0000F0000E0001E000060003C000060003C0001F000780007F0
00780007F000F8000FE000F0000FE000F8000FE000F800038000FC00000000FE00000000
FF00000000FFF80000007FFF8000007FFFE000003FFFF800001FFFFC000007FFFE000000
FFFE00000007FF00000000FF000000007F000000003F800000001F800E00001F803F0000
0F007F80000F007F80000F007F80001F00FF00001E00FF00001E00FC00003C006000003C
006000007800700000F000380001E0001C0007C0000F803F000003FFFC0000007FE00000
242D7BAB2E>I<00001C0000007E0000007E0000007E000000FE000000FC000000FC0000
00FC000001FC000001F8000001F8000001F8000003F8000003F0000003F0000003F00000
07F0000007E0000007E0007FFFFFFCFFFFFFFCFFFFFFF8000FC000000FC000001FC00000
1F8000001F8000001F8000003F8000003F0000003F0000003F0000007F0000007E000000
7E0000007E000000FE000000FC000000FC000000FC000001FC000001F8000001F8000001
F8000003F8000003F0000003F0000003F0007007F0006007E0006007E000E007E000C00F
E001C00FC001800FC003800FC0070007C0060007C00E0007C01C0003E0380001E0F00000
FFC000003F00001E3F7EBD23>I<003E000000000000FF800000E00003C3C00003F00007
03E00003F0000601F00003F0000E01F00007F0001C01F00007F0001803F00007E0003803
F00007E0003003F0000FE0003003F0000FE0007007F0000FC0006007E0000FC0006007E0
001FC000E00FE0001FC000C00FC0001F8000001FC0001F8000001F80003F8000001F8000
3F8000003F80003F0000003F00003F0000003F00007F0000007F00007F0000007E00007E
0000007E00007E0000007E0000FE000000FE0000FE000000FC0000FC000000FC0000FC00
0000FC0001FC018000FC0001FC038001F80001F8030001F80001F8030001F80001F80700
01F80003F8060001F80003F0060000F80007F0060000F8000FF00E0000FC000DF00C0000
7C001DF01C00007C0039F01800003E00F0F83800001F03C07870000007FF803FE0000001
FC000F8000312D7DAB38>I<003E00000E0000FF80003F8003C3C0007F800703E0007F80
0601F0007F800E01F0007F801C01F0007F801803F0003F803803F0001F803003F0000F80
3003F0000F807007F00007806007E00007806007E0000780E00FE0000700C00FC0000300
001FC0000300001F80000700001F80000600003F80000600003F00000600003F00000E00
007F00000C00007E00000C00007E00000C00007E00001C0000FE0000180000FC00001800
00FC0000380000FC0000300000FC0000700001F80000600001F80000E00001F80000C000
01F80001C00000F80001800000F80003800000FC0007000000FC00060000007C000E0000
007E001C0000003F00780000000F81E000000007FFC000000000FE000000292D7DAB2F>
I<003E00000000003800FF800001C000FC03C3C00007E001FE0703E00007E001FE0601F0
0007E001FE0E01F0000FE001FE1C01F0000FC001FE1803F0000FC000FE3803F0000FC000
7E3003F0001FC0003E7003F0001F80003E6007F0001F80001E6007E0001F80001E6007E0
003F80001EE00FE0003F00001CC00FC0003F00000C001FC0003F00000C001F80007F0000
1C001F80007E000018003F80007E000018003F00007E000018003F0000FE000038007F00
00FE000030007E0000FC000030007E0000FC000030007E0001FC00007000FE0001FC0000
6000FC0001F800006000FC0001F80000E000FC0001F80000C000FC0001F80000C000F800
03F00001C000F80003F000018000F80003F000038000F80003F000030000F80003F00007
0000FC0007F000060000FC0007F8000E00007C000FF8001C00007E000CF8001800003E00
1CFC003800001F00387E00F000000FC0F01F01C0000003FFC00FFF800000007F0001FE00
003F2D7DAB46>I<0000FC0007E00003FF801FFC000F07C0781E001C03E0E01F003801F1
C07F007000F1807F00E000FB80FF01C000FF00FF018000FE00FF038000FE00FE030000FE
0038070000FC0000060000FC0000060001FC00000E0001F800000C0001F80000000001F8
0000000003F80000000003F00000000003F00000000003F00000000007F00000000007E0
0000000007E00000000007E0000000000FE0000000000FC0000000000FC0000000000FC0
000000001FC0003800001FC0003000001F80003000001F80007000003F8000601E003F80
00603F003F8000E07F807F8001C07F806F800180FF80EF800380FF01CF800700FE0187C0
0E007C0383C01C003C0F01E078001FFC00FFE00003F0003F8000302D7EAB37>I<00007C
0001800001FF0003800003FF800300000FFFC00700001FFFE00E00001FFFF01C00003F03
F838000078007EF8000070001FF00000600001E00000E00001C00000C000038000000000
0700000000000E00000000001C0000000000380000000000700000000000E00000000001
C0000000000380000000000700000000000E00000000001C000000000038000000000070
0000000000E00000000003C0000000000700000000000E00000000001C00001C00003800
00180000700000180000E00000380001C00000300001800000700003900000F00007FF00
01E0000FEFC007C0001E03F01FC0001C01FFFF80003800FFFF00007000FFFE000060007F
FC0000E0003FF00000C0000FC00000292D7CAB2D>122 D E /FJ
134[72 72 104 72 80 48 56 64 1[80 72 80 120 40 80 1[40
80 72 48 64 80 64 80 72 9[143 1[104 96 80 104 1[88 6[56
3[96 104 1[96 104 9[72 72 72 72 72 72 72 49[{
 TeXBase1Encoding ReEncodeFont }41 144.000000 /Times-Bold
rf /FK 134[50 50 72 1[55 33 39 44 55 55 50 55 83 28 55
1[28 55 50 33 44 55 44 55 50 9[100 72 72 66 55 72 4[94
66 78 2[78 1[61 1[72 72 66 72 6[33 1[50 50 50 50 50 50
50 50 2[25 33 25 2[33 33 37[55 2[{ TeXBase1Encoding ReEncodeFont }53
100.000000 /Times-Bold rf /FL 134[50 3[50 28 39 33 50
50 50 50 78 28 2[28 50 50 33 44 3[44 10[72 1[61 55 12[55
1[72 66 1[72 11[50 1[50 50 1[50 1[25 33 25 44[{
 .167 SlantFont TeXBase1Encoding ReEncodeFont }31 100.000000
/Times-Roman rf /FM 134[44 44 66 44 50 28 39 39 50 50
50 50 72 28 44 28 28 50 50 28 44 50 44 50 50 3[39 1[39
3[83 2[55 3[61 3[55 2[33 2[61 2[66 1[61 92 12[50 50 50
2[25 33 25 2[33 33 33 36[50 2[{ TeXBase1Encoding ReEncodeFont }46
100.000000 /Times-Italic rf /FN 107[44 44 24[44 50 50
72 50 50 28 39 33 50 50 50 50 78 28 50 28 28 50 50 33
44 50 44 50 44 3[33 1[33 1[72 1[94 72 72 61 55 66 1[55
72 72 89 61 72 39 33 72 72 55 61 72 66 66 72 5[28 28
50 50 50 50 50 50 50 50 50 50 28 25 33 25 56 1[33 33
33 1[83 33[55 55 2[{ TeXBase1Encoding ReEncodeFont }76
100.000000 /Times-Roman rf /FO 141[40 5[33 60 33 33 7[53
18[86 3[47 2[86 24[30 46[{ TeXBase1Encoding ReEncodeFont }10
119.999947 /Times-Roman rf /FP 134[72 1[104 1[72 40 56
48 72 72 72 72 112 40 2[40 72 72 48 64 72 64 1[64 12[88
80 96 5[88 4[104 71[{ TeXBase1Encoding ReEncodeFont }25
144.000000 /Times-Roman rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: Letter

%%EndSetup
%%Page: 1 1
1 0 bop 551 1242 a FP(Scheduling)34 b(Threads)g(for)h(Lo)l(w)g(Space)g
(Requirement)1412 1425 y(and)g(Good)g(Locality)1543 1868
y FO(Girija)c(J.)e(Narlikar)1162 2249 y FN(Bell)c(Laboratories,)f
(Lucent)h(T)-7 b(echnologies)1506 2369 y(700)25 b(Mountain)e(A)-7
b(v)o(enue)1493 2490 y(Murray)25 b(Hill,)f(NJ)h(07974)1341
2610 y FM(girija@r)l(esear)l(c)o(h.bell-labs.com)640
3021 y FL(Appears)g(in)g(the)f(Theory)h(of)g(Computing)e(Systems,)h(V)
-13 b(olume)24 b(35,)h(2002.)0 5198 y FK(K)n(eyw)o(ords:)54
b FN(Multithreading,)38 b(space)f(ef)n(\002cienc)o(y)-6
b(,)39 b(w)o(ork)e(stealing,)i(dynamic)d(scheduling,)i(nested)f(paral-)
0 5318 y(lelism,)23 b(data)i(locality)-6 b(,)23 b(dynamic)i(dags.)p
eop
%%Page: 2 2
2 1 bop 1925 5589 a FN(2)p eop
%%Page: 3 3
3 2 bop 1683 100 a FJ(Abstract)0 328 y FN(The)19 b(running)f(time)h
(and)g(memory)f(requirement)g(of)i(a)f(parallel)g(program)g(with)f
(dynamic,)h(lightweight)e(threads)0 448 y(depends)22
b(hea)n(vily)g(on)g(the)h(underlying)e(thread)i(scheduler)-5
b(.)29 b(In)23 b(this)f(paper)l(,)h(we)g(present)f(a)h(ne)n(w)f
(asynchronous,)0 569 y(space-ef)n(\002cient)k(scheduling)e(algorithm)g
(for)i(shared)f(memory)g(machines)g(that)f(combines)h(the)g(lo)n(w)f
(schedul-)0 689 y(ing)32 b(o)o(v)o(erheads)f(and)h(good)g(locality)f
(of)h(w)o(ork)h(stealing)e(with)g(the)i(lo)n(w)e(space)i(requirements)e
(of)h(depth-\002rst)0 809 y(schedulers.)f(F)o(or)25 b(a)g
(nested-parallel)f(program)h(with)f(depth)g FI(D)k FN(and)d(serial)g
(space)g(requirement)g FI(S)3462 824 y FH(1)3501 809
y FN(,)g(we)g(sho)n(w)0 930 y(that)19 b(the)g(e)o(xpected)f(space)i
(requirement)e(is)h FI(S)1568 945 y FH(1)1609 930 y FG(+)q
FI(O)s FG(\()p FI(K)8 b FF(\001)q FI(p)q FF(\001)q FI(D)s
FG(\))17 b FN(on)i FI(p)g FN(processors.)29 b(Here,)20
b FI(K)27 b FN(is)18 b(a)i(user)n(-adjustable)0 1050
y(runtime)27 b(parameter)l(,)i(which)f(pro)o(vides)e(a)j(trade-of)n(f)f
(between)g(running)f(time)g(and)h(space)g(requirement.)40
b(Our)0 1171 y(algorithm)33 b(achie)n(v)o(es)g(good)h(locality)f(and)i
(lo)n(w)e(scheduling)g(o)o(v)o(erheads)g(by)i(automatically)d
(increasing)i(the)0 1291 y(granularity)24 b(of)h(the)g(w)o(ork)f
(scheduled)h(on)f(each)i(processor)-5 b(.)146 1411 y(W)d(e)30
b(ha)n(v)o(e)e(implemented)f(the)i(ne)n(w)f(scheduling)g(algorithm)f
(in)i(the)g(conte)o(xt)e(of)i(a)g(nati)n(v)o(e,)g(user)n(-le)n(v)o(el)f
(im-)0 1532 y(plementation)h(of)h(Posix)g(standard)g(threads)g(or)g
(Pthreads,)i(and)e(e)n(v)n(aluated)g(its)f(performance)i(using)e(a)i
(set)f(of)0 1652 y(C-based)e(benchmarks)f(that)g(ha)n(v)o(e)g(dynamic)g
(or)g(irre)o(gular)g(parallelism.)37 b(W)-8 b(e)28 b(compare)g(the)f
(performance)h(of)0 1773 y(our)f(scheduler)h(with)f(that)g(of)g(tw)o(o)
g(pre)n(vious)f(schedulers:)36 b(the)27 b(thread)h(library')-5
b(s)26 b(original)h(scheduler)g(\(which)0 1893 y(uses)33
b(a)h(FIFO)g(queue\),)h(and)f(a)f(pro)o(v)n(ably)f(space-ef)n
(\002cient)i(depth-\002rst)e(scheduler)-5 b(.)56 b(At)33
b(a)h(\002ne)f(thread)h(gran-)0 2013 y(ularity)-6 b(,)34
b(our)f(scheduler)g(outperforms)g(both)f(these)h(pre)n(vious)f
(schedulers,)j(b)n(ut)e(requires)g(mar)n(ginally)f(more)0
2134 y(memory)24 b(than)g(the)h(depth-\002rst)g(scheduler)-5
b(.)146 2254 y(W)d(e)37 b(also)g(present)f(simulation)f(results)h(on)g
(synthetic)g(benchmarks)g(to)g(compare)h(our)f(scheduler)h(with)0
2374 y(space-ef)n(\002cient)28 b(v)o(ersions)e(of)i(both)f(a)h(w)o
(ork-stealing)e(scheduler)i(and)g(a)f(depth-\002rst)h(scheduler)-5
b(.)38 b(The)28 b(results)0 2495 y(indicate)35 b(that)f(unlik)o(e)g
(these)h(pre)n(vious)f(approaches,)j(the)e(ne)n(w)g(algorithm)e(co)o(v)
o(ers)i(a)g(range)g(of)g(scheduling)0 2615 y(granularities)26
b(and)h(space)h(requirements,)f(and)g(allo)n(ws)e(the)i(user)g(to)g
(trade)g(the)g(space)h(requirement)e(of)i(a)f(pro-)0
2736 y(gram)e(with)f(the)g(scheduling)g(granularity)-6
b(.)1925 5589 y(3)p eop
%%Page: 1 4
1 3 bop 0 100 a FJ(1)143 b(Intr)m(oduction)0 323 y FN(Man)o(y)18
b(parallel)h(programming)e(languages)h(allo)n(w)g(the)h(e)o(xpression)e
(of)i(dynamic,)g(lightweight)e(threads.)29 b(These)0
444 y(include)f(data)g(parallel)h(languages)e(lik)o(e)h(HPF)i([29)o(])f
(or)g(Nesl)f([9])g(\(where)h(the)g(sequence)f(of)h(instructions)d(e)o
(x-)0 564 y(ecuted)i(o)o(v)o(er)f(indi)n(vidual)f(data)i(elements)g
(are)g(the)g(\223threads\224\),)i(data\003o)n(w)d(languages)h(lik)o(e)f
(ID)i([21],)g(control-)0 684 y(parallel)22 b(languages)f(with)g
(fork-join)h(constructs)f(lik)o(e)g(Cilk)h([26],)g(CC++)i([17],)e(and)g
(Proteus)g([36],)h(languages)0 805 y(with)38 b(futures)h(lik)o(e)g
(Multilisp)d([49],)43 b(and)c(v)n(arious)f(user)n(-le)n(v)o(el)g
(thread)h(libraries)f([7,)h(22,)g(37,)g(53)o(].)74 b(In)39
b(the)0 925 y(lightweight)30 b(threads)j(model,)g(the)g(programmer)f
(simply)e(e)o(xpresses)i(all)h(the)f(parallelism)f(in)h(the)h(program,)
0 1045 y(while)21 b(the)h(language)g(implementation)d(performs)j(the)g
(task)f(of)h(scheduling)f(the)h(threads)g(onto)f(the)g(processors)0
1166 y(at)33 b(runtime.)55 b(Thus)32 b(the)h(adv)n(antages)f(of)h
(lightweight,)g(user)n(-le)n(v)o(el)f(threads)h(include)g(the)g(ease)g
(of)g(program-)0 1286 y(ming,)23 b(automatic)f(load)h(balancing,)g
(architecture-independent)g(code)h(that)f(can)h(adapt)f(to)g(a)h(v)n
(arying)f(number)0 1407 y(of)i(processors,)f(and)h(the)g(\003e)o
(xibility)e(to)h(use)h(k)o(ernel-independent)f(thread)h(schedulers.)146
1527 y(Programs)40 b(with)e(irre)o(gular)h(and)h(dynamic)e(parallelism)
g(bene\002t)i(most)e(from)h(the)g(use)h(of)f(lightweight)0
1647 y(threads.)30 b(Compile-time)21 b(analysis)g(of)i(such)f
(computations)e(to)i(partition)f(and)i(map)f(the)g(threads)g(onto)g
(proces-)0 1768 y(sors)29 b(is)g(generally)g(not)g(possible.)43
b(Therefore,)31 b(the)e(programs)g(depend)g(hea)n(vily)g(on)g(the)g
(implementation)e(of)0 1888 y(the)e(runtime)e(system)h(for)h(good)f
(performance.)32 b(In)24 b(particular)l(,)-32 2109 y(1.)48
b(T)-8 b(o)20 b(allo)n(w)f(the)g(e)o(xpression)g(of)h(a)g(lar)n(ge)g
(number)f(of)h(threads,)h(the)e(runtime)g(system)g(must)g(pro)o(vide)f
(f)o(ast)i(thread)91 2229 y(operations)k(such)h(as)g(creation,)f
(deletion)g(and)h(synchronization.)-32 2390 y(2.)48 b(The)26
b(thread)g(scheduler)f(must)f(incur)i(lo)n(w)e(o)o(v)o(erheads)h(while)
g(dynamically)f(balancing)h(the)h(load)f(across)g(all)91
2510 y(the)g(processors.)-32 2671 y(3.)48 b(The)30 b(scheduling)e
(algorithm)g(must)h(be)h(space)g(ef)n(\002cient,)g(that)g(is,)g(it)f
(must)f(not)h(create)i(too)e(man)o(y)f(simulta-)91 2792
y(neously)g(acti)n(v)o(e)h(threads,)g(or)h(schedule)e(them)h(in)g(an)g
(order)g(that)g(results)f(in)h(high)f(memory)g(allocation.)43
b(A)91 2912 y(smaller)27 b(memory)g(footprint)f(results)h(in)h(fe)n
(wer)f(page)h(and)g(TLB)g(misses.)38 b(This)26 b(is)i(particularly)f
(important)91 3032 y(for)c(parallel)e(programs,)h(since)g(the)o(y)f
(are)i(typically)e(used)h(to)f(solv)o(e)g(lar)n(ge)i(problems,)e(and)h
(are)h(often)f(limited)91 3153 y(by)i(the)g(amount)f(of)h(memory)g(a)n
(v)n(ailable)f(on)h(a)g(parallel)g(machine.)30 b(Existing)23
b(commercial)g(thread)i(systems,)91 3273 y(ho)n(we)n(v)o(er)l(,)32
b(can)f(lead)h(to)f(poor)g(space)g(and)g(time)g(performance)h(for)f
(multithreaded)f(parallel)h(programs,)h(if)91 3394 y(the)25
b(scheduler)g(is)f(not)g(designed)g(to)h(be)g(space)g(ef)n(\002cient)g
([42].)-32 3554 y(4.)48 b(T)-8 b(oday')j(s)29 b(hardw)o(are-coherent)i
(shared)f(memory)f(multiprocessors)f(\(SMPs\))j(typically)e(ha)n(v)o(e)
g(a)i(lar)n(ge)f(of)n(f-)91 3675 y(chip)i(data)g(cache)h(for)f(each)h
(processor)l(,)h(with)d(a)h(latenc)o(y)g(signi\002cantly)f(lo)n(wer)g
(that)h(the)g(latenc)o(y)f(to)h(main)91 3795 y(memory)-6
b(.)58 b(Therefore,)37 b(the)d(thread)g(scheduler)g(must)f(also)h
(schedule)g(threads)g(for)g(good)g(cache)h(locality)-6
b(.)91 3916 y(The)28 b(most)f(common)f(heuristic)h(to)g(obtain)g(good)g
(locality)g(for)g(\002ne)i(grained)e(threads)h(on)f(multiprocessors)91
4036 y(is)i(to)f(schedule)h(threads)f(close)h(in)f(the)h(computation)e
(graph)i(\(e.g.,)h(a)f(parent)g(thread)f(along)h(with)f(its)g(child)91
4156 y(threads\))d(on)g(the)f(same)h(processor)l(,)g(since)f(the)o(y)g
(typically)g(share)h(common)e(data)i([2,)g(13,)g(32)o(,)g(34,)f(38,)h
(49].)146 4377 y(W)-8 b(ork)32 b(stealing)f(is)g(a)h(runtime)e
(scheduling)h(mechanism)f(that)h(can)h(pro)o(vide)f(a)h(f)o(air)g
(combination)e(of)h(the)0 4497 y(abo)o(v)o(e)c(requirements.)41
b(Each)28 b(processor)g(maintains)f(its)h(o)n(wn)f(queue)h(of)h(ready)f
(threads;)i(a)e(processor)h(steals)0 4618 y(a)i(thread)g(from)g
(another)g(processor')-5 b(s)30 b(ready)h(queue)g(only)f(when)h(it)f
(runs)h(out)f(of)h(ready)h(threads)e(in)h(its)f(o)n(wn)0
4738 y(queue.)f(Since)22 b(thread)f(creation)g(and)g(scheduling)e(are)j
(typically)e(local)g(operations,)h(the)o(y)f(incur)h(lo)n(w)f(o)o(v)o
(erhead)0 4858 y(and)h(contention.)28 b(Further)l(,)23
b(threads)e(close)g(together)f(in)h(the)g(computation)f(graph)h(are)h
(often)f(scheduled)f(on)h(the)0 4979 y(same)g(processor)l(,)g
(resulting)e(in)i(good)f(locality)-6 b(.)28 b(Se)n(v)o(eral)20
b(systems)g(ha)n(v)o(e)g(used)h(w)o(ork)f(stealing)g(to)g(pro)o(vide)g
(high)0 5099 y(performance)26 b([15,)f(22,)g(23,)g(26,)g(33,)g(49,)g
(52,)g(54].)33 b(When)25 b(each)h(processor)g(treats)f(its)f(o)n(wn)h
(ready)h(queue)f(as)h(a)0 5220 y(LIFO)g(stack)g(\(that)f(is,)g(adds)h
(or)f(remo)o(v)o(es)g(threads)g(from)h(the)f(top)g(of)h(the)f(stack\))h
(and)g(steals)f(from)g(the)h(bottom)0 5340 y(of)35 b(another)f
(processor')-5 b(s)34 b(stack,)j(the)d(scheduler)g(successfully)g
(throttles)f(the)i(e)o(xcess)f(parallelism)f([12,)h(49,)1925
5589 y(1)p eop
%%Page: 2 5
2 4 bop 0 100 a FN(51,)32 b(54].)54 b(F)o(or)32 b(fully)g(strict)f
(computations,)i(such)f(a)h(mechanism)e(w)o(as)h(pro)o(v)o(ed)g(to)g
(require)g FI(p)c FF(\001)g FI(S)3475 115 y FH(1)3547
100 y FN(space)k(on)0 220 y FI(p)g FN(processors,)i(where)f
FI(S)897 235 y FH(1)969 220 y FN(is)e(the)i(serial,)g(depth-\002rst)f
(space)h(requirement)f([13].)53 b(A)32 b(computation)f(with)g
FI(W)0 340 y FN(w)o(ork)e(\(total)f(number)g(of)h(operations\))f(and)h
FI(D)i FN(depth)d(\(length)h(of)f(the)h(critical)g(path\))f(w)o(as)h
(sho)n(wn)e(to)i(require)0 461 y FI(W)s(=p)f FG(+)h FI(O)s
FG(\()p FI(D)s FG(\))k FN(time)g(on)h FI(p)g FN(processors)f([13].)58
b(W)-8 b(e)35 b(will)e(henceforth)h(refer)h(to)e(such)h(schedulers)f
(as)h FE(w)o(ork-)0 581 y(stealing)24 b FN(schedulers.)146
702 y(Recent)d(w)o(ork)f([10,)g(41)o(])h(has)e(resulted)h(in)f
FE(depth-\002rst)i FN(scheduling)d(algorithms)h(that)g(require)h
FI(S)3454 717 y FH(1)3498 702 y FG(+)t FI(O)s FG(\()p
FI(p)t FF(\001)t FI(D)s FG(\))0 822 y FN(space)27 b(for)h
(nested-parallel)e(computations)f(with)i(depth)f FI(D)s
FN(.)37 b(F)o(or)28 b(programs)e(that)h(ha)n(v)o(e)f(a)i(lo)n(w)e
(depth)g(\(a)i(high)0 942 y(de)o(gree)22 b(of)g(parallelism\),)f(such)h
(as)g(all)f(programs)h(in)f(the)h(class)f FI(N)10 b(C)30
b FN([18],)22 b(the)g(space)g(bound)f(of)h FI(S)3426
957 y FH(1)3477 942 y FG(+)11 b FI(O)s FG(\()p FI(p)g
FF(\001)g FI(D)s FG(\))0 1063 y FN(is)30 b(asymptotically)f(lo)n(wer)h
(than)g(the)h(w)o(ork)f(stealing)g(bound)g(of)g FI(p)d
FF(\001)f FI(S)2483 1078 y FH(1)2522 1063 y FN(.)49 b(Further)l(,)32
b(the)f(depth-\002rst)f(approach)0 1183 y(allo)n(ws)23
b(a)i(more)f(general)h(memory)f(allocation)f(model)h(compared)g(to)g
(the)g(stack-based)h(allocations)e(assumed)0 1303 y(in)28
b(space-ef)n(\002cient)h(w)o(ork)f(stealing)f([10].)42
b(The)28 b(depth-\002rst)g(approach)h(has)f(been)h(e)o(xtended)e(to)h
(handle)g(com-)0 1424 y(putations)23 b(with)h(futures)h([49])g(or)g
(I-structures)g([21)o(],)g(resulting)f(in)h(similar)e(space)i(bounds)f
([8].)31 b(Experiments)0 1544 y(sho)n(wed)36 b(that)g(an)h
(asynchronous,)h(depth-\002rst)e(scheduler)h(often)f(results)g(in)g(lo)
n(wer)g(space)h(requirement)f(in)0 1665 y(practice,)e(compared)e(to)g
(a)g(w)o(ork-stealing)g(scheduler)f([41].)53 b(Ho)n(we)n(v)o(er)l(,)33
b(since)f(depth-\002rst)f(schedulers)h(use)0 1785 y(a)c(globally)e
(ordered)i(queue,)g(the)o(y)e(do)h(not)g(pro)o(vide)f(some)h(of)h(the)f
(practical)g(adv)n(antages)g(enjo)o(yed)g(by)g(w)o(ork-)0
1905 y(stealing)35 b(schedulers.)63 b(When)36 b(the)g(threads)g(e)o
(xpressed)f(by)h(the)f(user)h(are)h(\002ne)f(grained,)j(the)d
(performance)0 2026 y(may)30 b(suf)n(fer)f(due)h(to)g(poor)g(locality)f
(and)g(high)h(scheduling)e(contention)h(\(i.e.,)i(contention)e(o)o(v)o
(er)g(shared)h(data)0 2146 y(structures)23 b(while)g(scheduling\))g
([42].)30 b(Therefore,)25 b(e)n(v)o(en)e(if)g(basic)h(thread)f
(operations)g(are)i(cheap,)f(the)f(threads)0 2267 y(ha)n(v)o(e)i(to)f
(be)h(coarsened)g(for)g(depth-\002rst)g(schedulers)f(to)g(pro)o(vide)g
(good)g(performance)i(in)e(practice.)146 2387 y(In)c(this)e(paper)l(,)i
(we)g(present)f(a)g(ne)n(w)g(scheduling)f(algorithm)g(for)h
(implementing)e(multithreaded)h(languages)0 2507 y(on)24
b(shared)h(memory)f(machines.)30 b(The)25 b(algorithm,)e(called)i
FD(DFDeques)2528 2471 y FC(1)2566 2507 y FN(,)f(pro)o(vides)g(a)h
(compromise)e(between)0 2628 y(pre)n(vious)30 b(w)o(ork-stealing)h(and)
h(depth-\002rst)f(schedulers.)52 b(Ready)32 b(threads)g(in)f
FL(DFDeques)40 b FN(are)32 b(or)n(ganized)f(in)0 2748
y(multiple)i(ready)h(queues,)j(that)c(are)j(globally)d(ordered)h(as)h
(in)f(depth-\002rst)f(schedulers.)59 b(The)35 b(ready)f(queues)0
2868 y(are)c(treated)g(as)g(LIFO)g(stacks)g(similar)e(to)i(pre)n(vious)
e(w)o(ork-stealing)h(schedulers.)45 b(A)30 b(processor)f(steals)g(from)
0 2989 y(a)j(ready)g(queue)g(chosen)g(randomly)f(from)h(a)g(set)f(of)h
(high-priority)f(queues.)51 b(F)o(or)32 b(nested-parallel)g(\(or)g
(fully)0 3109 y(strict\))i(computations,)h(our)g(algorithm)e
(guarantees)i(an)g(e)o(xpected)g(space)g(bound)f(of)g
FI(S)3151 3124 y FH(1)3220 3109 y FG(+)c FI(O)s FG(\()p
FI(K)36 b FF(\001)29 b FI(p)g FF(\001)g FI(D)s FG(\))p
FN(.)0 3230 y(Here,)f FI(K)35 b FN(is)27 b(a)g(user)n(-adjustable)g
(runtime)f(parameter)i(called)f(the)g FE(memory)g(threshold)r
FN(,)g(which)g(speci\002es)g(the)0 3350 y(net)g(amount)e(of)i(memory)f
(a)h(processor)g(may)f(allocate)h(between)g(consecuti)n(v)o(e)e
(steals.)36 b(Since)27 b FI(K)34 b FN(is)26 b(typically)0
3470 y(\002x)o(ed)k(to)g(be)h(a)g(small,)f(constant)g(amount)f(of)i
(memory)1947 3434 y FC(2)1983 3470 y FN(,)h(the)e(space)h(bound)f
(reduces)g(to)g FI(S)3226 3485 y FH(1)3292 3470 y FG(+)c
FI(O)s FG(\()p FI(D)i FF(\001)e FI(p)p FG(\))p FN(,)32
b(as)0 3591 y(with)23 b(depth-\002rst)g(schedulers.)30
b(F)o(or)24 b(a)g(simplistic)d(cost)i(model,)g(we)h(sho)n(w)f(that)g
(the)h(e)o(xpected)f(running)g(time)g(is)0 3711 y FI(O)s
FG(\()p FI(W)s(=p)e FG(+)h FI(D)s FG(\))i FN(on)h FI(p)g
FN(processors)1194 3675 y FC(3)1231 3711 y FN(.)146 3831
y(W)-8 b(e)22 b(refer)g(to)e(the)h(total)f(number)g(of)h(instructions)e
(e)o(x)o(ecuted)h(in)h(a)g(thread)g(as)g(the)g(thread')-5
b(s)20 b FE(granularity)p FN(.)29 b(W)-8 b(e)0 3952 y(also)24
b(\(informally\))f(de\002ne)i FE(sc)o(heduling)g(granularity)f
FN(to)g(be)g(the)g(a)n(v)o(erage)h(number)f(of)g(instructions)f(e)o(x)o
(ecuted)0 4072 y(consecuti)n(v)o(ely)g(on)i(a)h(single)e(processor)h
(from)g(threads)h(close)f(together)g(in)f(the)i(computation)d(graph.)32
b(Thus,)25 b(a)0 4193 y(lar)n(ger)i(scheduling)f(granularity)g
(typically)f(implies)g(better)i(locality)f(and)g(lo)n(wer)g(scheduling)
g(contention.)35 b(In)0 4313 y(the)25 b FL(DFDeques)32
b FN(scheduler)l(,)25 b(when)g(a)g(processor)g(\002nds)g(its)f(ready)h
(queue)g(empty)-6 b(,)24 b(it)g(steals)g(a)i(thread)f(from)f(the)0
4433 y FM(bottom)19 b FN(of)i(another)f(ready)g(queue.)30
b(This)19 b(thread)h(is)g(typically)f(the)i(coarsest)f(thread)g(in)g
(the)g(queue,)h(resulting)e(in)0 4554 y(a)i(lar)n(ger)g(scheduling)f
(granularity)g(compared)h(to)f(depth)g(\002rst)h(schedulers.)29
b(Although)19 b(we)i(do)g(not)f(analytically)p 0 4643
1560 4 v 116 4705 a FB(1)149 4735 y FA(DFDeques)27 b
Fz(stands)20 b(for)f(\223depth-\002rst)g(deques\224.)116
4804 y FB(2)149 4834 y Fz(In)30 b(practice,)i(we)e(set)h
Fy(K)36 b Fz(to)30 b(a)h(fe)n(w)f(kilobytes)f(\(50KB)g(in)i(our)e(e)o
(xperiments\),)h(which)f(is)i(small)g(compared)d(to)i(the)g(se)n(v)o
(eral)0 4934 y(me)o(gabytes)18 b(\(or)i(gigabytes\))e(of)i(memory)e(a)n
(v)n(ailable)i(on)g(today')-5 b(s)19 b(machines.)116
5004 y FB(3)149 5034 y Fz(When)h(the)g(scheduler)e(in)i
FA(DFDeques)25 b Fz(is)c(parallelized,)d(the)i(costs)g(of)f(all)i
(scheduling)d(operations)g(can)h(be)h(accounted)d(for)i(with)0
5133 y(a)k(more)f(realistic)i(model)e([40)n(].)34 b(Then,)22
b(in)h(the)g(e)o(xpected)e(case,)j(the)f(parallel)f(computation)f(can)i
(be)g(e)o(x)o(ecuted)e(using)h Fy(S)3545 5145 y Fx(1)3603
5133 y Fw(+)e Fy(O)r Fw(\()p Fy(D)j Fv(\001)0 5233 y
Fy(p)h Fv(\001)g Fw(log)14 b Fy(p)p Fw(\))29 b Fz(space)f(and)f
Fy(O)r Fw(\()p Fy(W)r(=p)f Fw(+)d Fy(D)k Fv(\001)d Fw(log)14
b Fy(p)p Fw(\))29 b Fz(time)f(\(including)e(scheduling)g(o)o(v)o
(erheads\).)46 b(Ho)n(we)n(v)o(er)m(,)28 b(for)f(bre)n(vity)-5
b(,)28 b(we)g(omit)g(a)0 5333 y(description)19 b(and)g(analysis)i(of)e
(such)h(a)h(parallelized)e(scheduler)-5 b(.)1925 5589
y FN(2)p eop
%%Page: 3 6
3 5 bop 340 3 3221 4 v 338 139 4 136 v 426 98 a Fu(Benchmark)p
930 139 V 947 139 V 309 w(Max)24 b(threads)p 1806 139
V 1823 139 V 303 w(L2)e(Cache)i(miss)g(rate)p 2682 139
V 2699 139 V 159 w(8)f(processor)j(speedup)p 3559 139
V 948 142 2612 4 v 338 274 4 136 v 930 274 V 947 274
V 998 234 a(FIFO)p 1243 274 V 99 w(ADF)p 1525 274 V 98
w(DFD)p 1806 274 V 1823 274 V 115 w(FIFO)p 2120 274 V
99 w(ADF)p 2401 274 V 98 w(DFD)p 2682 274 V 2699 274
V 115 w(FIFO)p 2996 274 V 99 w(ADF)p 3277 274 V 99 w(DFD)p
3559 274 V 340 278 3221 4 v 338 413 4 136 v 441 372 a(V)-12
b(ol.)28 b(Rend.)p 930 413 V 947 413 V 199 w(436)p 1243
413 V 176 w(36)p 1525 413 V 192 w(37)p 1806 413 V 1823
413 V 204 w(4.2)p 2120 413 V 176 w(3.0)p 2401 413 V 169
w(1.8)p 2682 413 V 2699 413 V 169 w(5.39)p 2996 413 V
131 w(5.99)p 3277 413 V 124 w(6.96)p 3559 413 V 340 416
3221 4 v 338 552 4 136 v 430 511 a(Dense)c(MM)p 930 552
V 947 552 V 164 w(3752)p 1243 552 V 154 w(55)p 1525 552
V 192 w(77)p 1806 552 V 1823 552 V 181 w(24.0)p 2120
552 V 165 w(13)p 2401 552 V 181 w(8.7)p 2682 552 V 2699
552 V 169 w(0.22)p 2996 552 V 131 w(3.78)p 3277 552 V
124 w(5.82)p 3559 552 V 340 555 3221 4 v 338 691 4 136
v 390 650 a(Sparse)g(MVM)p 930 691 V 947 691 V 146 w(173)p
1243 691 V 176 w(51)p 1525 691 V 192 w(49)p 1806 691
V 1823 691 V 181 w(13.8)p 2120 691 V 131 w(13.7)p 2401
691 V 124 w(13.7)p 2682 691 V 2699 691 V 147 w(3.59)p
2996 691 V 131 w(5.04)p 3277 691 V 124 w(6.29)p 3559
691 V 340 694 3221 4 v 338 830 4 136 v 515 789 a(FFTW)p
930 830 V 947 830 V 270 w(510)p 1243 830 V 176 w(30)p
1525 830 V 192 w(33)p 1806 830 V 1823 830 V 181 w(14.6)p
2120 830 V 131 w(16.4)p 2401 830 V 124 w(14.4)p 2682
830 V 2699 830 V 147 w(6.02)p 2996 830 V 131 w(5.96)p
3277 830 V 124 w(6.38)p 3559 830 V 340 833 3221 4 v 338
968 4 136 v 530 928 a(FMM)p 930 968 V 947 968 V 263 w(2030)p
1243 968 V 154 w(50)p 1525 968 V 192 w(54)p 1806 968
V 1823 968 V 181 w(14.0)p 2120 968 V 154 w(2.1)p 2401
968 V 169 w(1.0)p 2682 968 V 2699 968 V 169 w(1.64)p
2996 968 V 131 w(7.03)p 3277 968 V 124 w(7.47)p 3559
968 V 340 972 3221 4 v 338 1107 4 136 v 430 1067 a(Barnes)g(Hut)p
930 1107 V 947 1107 V 165 w(3570)p 1243 1107 V 154 w(42)p
1525 1107 V 169 w(120)p 1806 1107 V 1823 1107 V 159 w(19.0)p
2120 1107 V 154 w(3.9)p 2401 1107 V 169 w(2.9)p 2682
1107 V 2699 1107 V 169 w(0.64)p 2996 1107 V 131 w(6.26)p
3277 1107 V 124 w(6.97)p 3559 1107 V 340 1110 3221 4
v 338 1246 4 136 v 413 1205 a(Decision)h(T)m(r)-5 b(.)p
930 1246 V 947 1246 V 169 w(194)p 1243 1246 V 154 w(138)p
1525 1246 V 146 w(149)p 1806 1246 V 1823 1246 V 182 w(5.8)p
2120 1246 V 176 w(4.9)p 2401 1246 V 169 w(4.6)p 2682
1246 V 2699 1246 V 169 w(4.83)p 2996 1246 V 131 w(4.85)p
3277 1246 V 124 w(5.39)p 3559 1246 V 340 1249 3221 4
v 0 1457 a FN(Figure)19 b(1:)27 b Fu(Summary)18 b(of)g(e)o(xperimental)
j(results)f(with)d(the)i(Solaris)g(Pthreads)g(library)-6
b(.)29 b(F)o(or)17 b(each)i(scheduling)i(technique,)0
1569 y(we)29 b(sho)n(w)h(the)g(maximum)g(number)h(of)e(simultaneously)
34 b(acti)n(v)o(e)d(threads)g(\(each)g(of)f(which)g(requires)i(min.)48
b(8kB)29 b(stack)0 1682 y(space\),)i(the)e(L2)f(cache)i(misses)f(rates)
h(\(\045\),)f(and)g(the)g(speedups)i(on)e(an)g(8-processor)j
(Enterprise)e(5000)g(SMP)-10 b(.)26 b(\223FIFO\224)0
1795 y(is)f(the)h(original)h(Pthreads)g(scheduler)l(,)h(\223)-7
b(ADF\224)24 b(is)h(an)g(asynchronous,)30 b(depth-\002rst)d(scheduler)h
([42)q(],)d(and)h(\223DFD\224)e(is)h(our)0 1908 y(ne)n(w)e
Ft(DFDeques)30 b Fu(scheduler)-5 b(.)0 2192 y FN(pro)o(v)o(e)19
b(this)h(claim,)h(we)f(present)h(e)o(xperimental)e(and)h(simulation)f
(results)g(to)h(v)o(erify)g(it.)29 b(Adjusting)19 b(the)h(memory)0
2312 y(threshold)i FI(K)29 b FN(in)23 b(the)f FL(DFDeques)31
b FN(algorithm)21 b(pro)o(vides)g(a)i(user)n(-controllable)f(trade-of)n
(f)h(between)f(scheduling)0 2433 y(granularity)i(and)h(space)g
(requirement.)146 2553 y(Posix)k(threads)f(or)h(Pthreads)g(ha)n(v)o(e)g
(recently)g(become)g(a)g(popular)f(standard)h(for)g(shared)g(memory)f
(paral-)0 2673 y(lel)g(programming.)41 b(W)-8 b(e)28
b(therefore)i(added)e(the)h FL(DFDeques)36 b FN(scheduling)27
b(algorithm)g(to)h(a)h(nati)n(v)o(e,)f(user)n(-le)n(v)o(el)0
2794 y(Pthreads)h(library)f([53].)42 b(Despite)28 b(being)f(one)i(of)f
(the)h(f)o(astest)f(user)n(-le)n(v)o(el)f(implementations)f(of)j
(Pthreads)f(to-)0 2914 y(day)-6 b(,)24 b(the)h(library')-5
b(s)24 b(scheduler)h(does)f(not)h(ef)n(\002ciently)f(support)g
(\002ne-grained,)h(dynamic)g(threads.)30 b(In)25 b(pre)n(vious)0
3034 y(w)o(ork)35 b([42],)j(Narlikar)d(and)g(Blelloch)g(sho)n(wed)g(ho)
n(w)f(its)h(performance)g(can)h(be)f(impro)o(v)o(ed)f(using)g(a)i
(space-)0 3155 y(ef)n(\002cient)c(depth-\002rst)f(scheduler)-5
b(.)50 b(In)32 b(this)f(paper)l(,)i(we)f(compare)g(the)f(space)h(and)g
(time)e(performance)j(of)e(the)0 3275 y(ne)n(w)38 b FL(DFDeques)46
b FN(scheduler)38 b(with)f(the)h(library')-5 b(s)37 b(original)g
(scheduler)h(\(which)g(uses)g(a)g(FIFO)h(scheduling)0
3396 y(queue\),)30 b(and)f(with)g(a)g(pre)n(vious)f(implementation)e
(of)k(a)f(depth-\002rst)g(scheduler)g(from)g([42)o(].)44
b(T)-8 b(o)29 b(perform)g(the)0 3516 y(e)o(xperimental)e(comparison,)h
(we)h(used)f FG(7)g FN(parallel)h(benchmarks)e(written)h(with)g(a)g
(lar)n(ge)h(number)f(of)h(dynam-)0 3636 y(ically)34 b(created)i
(Pthreads.)121 b(As)35 b(sho)n(wn)e(in)i(Figure)g(1,)i(the)d(ne)n(w)h
FL(DFDeques)42 b FN(scheduler)35 b(results)f(in)g(better)0
3757 y(locality)24 b(and)h(higher)f(speedups)g(compared)h(to)f(both)g
(the)h(depth-\002rst)f(scheduler)h(and)g(the)g(FIFO)g(scheduler)-5
b(.)146 3877 y(Ideally)f(,)25 b(we)h(w)o(ould)f(also)h(lik)o(e)f(to)g
(compare)h(our)f(Pthreads-based)h(implementation)e(of)h
FL(DFDeques)34 b FN(with)0 3998 y(a)22 b(space-ef)n(\002cient)h(w)o
(ork-stealing)e(scheduler)h(\(e.g.,)h(the)f(scheduler)g(used)g(in)g
(Cilk)g([12)o(]\).)31 b(Ho)n(we)n(v)o(er)l(,)21 b(support-)0
4118 y(ing)35 b(the)h(general)g(Pthreads)g(functionality)e(\(which)i
(includes)f(v)n(arious)f(synchronization)h(primiti)n(v)o(es\))e(with)0
4238 y(an)k(e)o(xisting)e(space-ef)n(\002cient)i(w)o(ork-stealing)e
(scheduler)i([12])g(w)o(ould)f(require)h(signi\002cant)f
(modi\002cations)0 4359 y(to)e(both)f(the)h(scheduling)f(algorithm)f
(and)i(the)g(Pthreads)h(implementation)2706 4323 y FC(4)2741
4359 y FN(.)58 b(Therefore,)37 b(to)d(compare)g(our)0
4479 y(ne)n(w)23 b(scheduler)g(to)g(this)f(w)o(ork-stealing)g
(scheduler)l(,)i(we)f(instead)g(b)n(uilt)f(a)h(simple)g(simulator)e
(that)i(implements)0 4599 y(synthetic,)32 b(fully-strict)e(benchmarks.)
51 b(Our)31 b(simulation)e(results)i(indicate)g(that)g(by)h(adjusting)e
(the)h(memory)0 4720 y(threshold,)26 b(our)g(ne)n(w)g(scheduler)h(co)o
(v)o(ers)f(a)g(wide)h(range)g(of)f(space)h(requirements)f(and)h
(scheduling)e(granular)n(-)0 4840 y(ities.)56 b(At)33
b(one)g(e)o(xtreme)g(it)g(performs)g(similar)f(to)h(a)h(depth-\002rst)f
(scheduler)l(,)i(with)d(lo)n(w)h(space)h(requirement)0
4961 y(and)c(small)f(scheduling)f(granularity)-6 b(.)45
b(At)29 b(the)h(other)g(e)o(xtreme,)g(it)g(beha)n(v)o(es)f(e)o(xactly)g
(lik)o(e)g(the)h(w)o(ork-stealing)p 0 5049 1560 4 v 116
5111 a FB(4)149 5141 y Fz(Ev)o(en)c(fully)g(strict)h(Pthreads)g
(benchmarks)d(cannot)h(be)i(e)o(x)o(ecuted)e(using)h(such)g(a)i(w)o
(ork-stealing)c(scheduler)i(in)h(the)f(e)o(xisting)0
5240 y(Solaris)i(Pthreads)f(implementation,)g(because)h(the)f(Pthreads)
h(implementation)d(itself)k(mak)o(es)e(e)o(xtensi)n(v)o(e)g(use)h(of)f
(blocking)f(syn-)0 5340 y(chronization)18 b(primiti)n(v)o(es)h(such)h
(as)h(Pthread)e(mute)o(x)o(es)g(and)h(condition)e(v)n(ariables.)1925
5589 y FN(3)p eop
%%Page: 4 7
4 6 bop 0 100 a FN(scheduler)l(,)25 b(with)f(higher)g(space)h
(requirement)g(and)f(lar)n(ger)i(scheduling)d(granularity)-6
b(.)0 439 y FJ(2)143 b(Backgr)m(ound)34 b(and)h(Pr)m(e)n(vious)f(W)-11
b(ork)0 663 y FN(A)36 b(parallel)f(computation)f(can)i(be)g
(represented)f(by)h(a)g(directed)f(ac)o(yclic)g(graph;)41
b(we)36 b(will)f(refer)h(to)f(such)h(a)0 783 y(computation)20
b(graph)i(as)g(a)h FE(dag)e FN(in)h(the)g(remainder)g(of)g(this)f
(paper)-5 b(.)29 b(Each)23 b(node)e(in)h(the)g(dag)g(represents)g(a)g
(single)0 903 y FE(action)k FN(in)h(a)g(thread;)g(an)g(action)f(is)h(a)
g(unit)f(of)g(w)o(ork)h(that)f(requires)h(a)g(single)f(timestep)f(to)h
(be)h(e)o(x)o(ecuted.)36 b(Each)0 1024 y(edge)21 b(in)g(the)g(dag)h
(represents)f(a)g(dependence)h(between)f(tw)o(o)g(actions.)29
b(Figure)21 b(2)g(sho)n(ws)f(such)h(an)h(e)o(xample)e(dag)0
1144 y(for)29 b(a)g(simple)e(parallel)h(computation.)40
b(The)29 b(dashed,)g(right-to-left)e FE(f)o(ork)i FN(edges)f(in)g(the)g
(\002gure)i(represent)e(the)0 1265 y(fork)d(of)h(a)g(child)e(thread.)33
b(The)25 b(dashed,)h(left-to-right)e FE(sync)o(h)i FN(edges)g
(represent)f(a)h(join)f(between)g(a)h(parent)f(and)0
1385 y(child)i(thread,)h(while)e(each)i(solid)f(v)o(ertical)f
FE(continue)j FN(edge)e(represents)g(a)h(sequential)e(dependence)i
(between)0 1505 y(a)i(pair)f(of)g(consecuti)n(v)o(e)f(actions)h(within)
f(a)h(single)g(thread.)44 b(F)o(or)29 b(computations)e(with)i(dynamic)f
(parallelism,)0 1626 y(the)d(dag)f(is)h(re)n(v)o(ealed)f(and)h
(scheduled)f(onto)g(the)h(processors)f(at)h(runtime.)0
1921 y Fs(2.1)119 b(Scheduling)33 b(f)m(or)c(locality)0
2109 y FN(Detection)23 b(of)h(data)f(accesses)h(or)g(data)g(sharing)f
(patterns)g(among)f(threads)i(in)f(a)h(dynamic)f(and)g(irre)o(gular)g
(com-)0 2229 y(putation)28 b(is)h(often)g(be)o(yond)f(the)h(scope)g(of)
h(the)f(compiler)-5 b(.)43 b(Further)l(,)31 b(today')-5
b(s)28 b(hardw)o(are-coherent)i(SMPs)f(do)0 2349 y(not)k(allo)n(w)g(e)o
(xplicit,)h(softw)o(are-controlled)f(placement)g(of)g(data)h(in)f
(processor)h(caches;)k(therefore,)e(o)n(wner)n(-)0 2470
y(compute)28 b(optimizations)e(for)j(locality)e(that)h(are)h(popular)f
(on)h(distrib)n(uted)d(memory)i(machines)g(typically)f(do)0
2590 y(not)34 b(apply)g(to)g(SMPs.)59 b(Ho)n(we)n(v)o(er)l(,)36
b(in)e(man)o(y)f(parallel)h(programs)g(with)g(\002ne-grained)h
(threads,)h(the)e(threads)0 2710 y(close)26 b(together)g(in)g(the)h
(computation')-5 b(s)24 b(dag)i(often)h(access)g(the)f(same)g(data.)36
b(F)o(or)26 b(e)o(xample,)g(in)g(a)h(di)n(vide-and-)0
2831 y(conquer)32 b(computation)e(\(such)h(as)h(quicksort\))f(where)h
(a)h(ne)n(w)e(thread)h(is)f(fork)o(ed)h(for)g(each)g(recursi)n(v)o(e)f
(call,)j(a)0 2951 y(thread)f(shares)h(data)f(with)g(all)g(its)f
(descendent)i(threads.)56 b(Therefore,)36 b(man)o(y)c(parallel)h
(implementations)e(of)0 3072 y(lightweight)23 b(threads)h(use)h(per)n
(-processor)g(data)f(structures)h(to)f(store)g(ready)h(threads)g([22,)f
(26,)h(31)o(,)g(32)o(,)g(49,)f(52,)0 3192 y(54].)44 b(Threads)29
b(created)h(on)e(a)i(processor)f(are)h(stored)e(locally)h(and)g(mo)o(v)
o(ed)e(only)i(when)g(required)g(to)g(balance)0 3312 y(the)d(load.)35
b(This)26 b(technique)g(ef)n(fecti)n(v)o(ely)f(increases)i(scheduling)e
(granularity)-6 b(,)25 b(and)i(therefore)g(pro)o(vides)e(good)0
3433 y(locality)f([11])h(and)f(lo)n(w)g(scheduling)g(contention.)146
3553 y(Another)i(approach)h(for)g(obtaining)e(good)g(locality)h(is)g
(to)g(allo)n(w)f(the)i(user)f(to)g(supply)f(hints)h(to)g(the)g(sched-)0
3673 y(uler)31 b(re)o(garding)e(the)h(data)h(access)g(patterns)f(of)h
(the)f(threads)g([16,)h(35)o(,)g(45)o(,)g(55)o(].)97
b(Ho)n(we)n(v)o(er)l(,)30 b(such)g(hints)g(can)0 3794
y(be)j(cumbersome)f(for)g(the)h(user)f(to)h(pro)o(vide)e(in)h(comple)o
(x)g(programs,)h(and)g(are)g(often)g(speci\002c)g(to)f(a)h(certain)0
3914 y(language)h(or)h(library)g(interf)o(ace.)61 b(Therefore,)38
b(our)c FL(DFDeques)43 b FN(algorithm)33 b(instead)h(uses)h(the)f
(heuristic)g(of)0 4035 y(scheduling)24 b(threads)g(close)h(in)f(the)h
(dag)g(on)f(the)h(same)f(processor)h(to)g(obtain)f(good)g(locality)-6
b(.)0 4330 y Fs(2.2)119 b(Scheduling)33 b(f)m(or)c(space-ef\002ciency)0
4517 y FN(The)37 b(thread)g(scheduler)f(plays)h(a)g(signi\002cant)f
(role)h(in)f(controlling)g(the)g(amount)g(of)h(acti)n(v)o(e)f
(parallelism)f(in)0 4638 y(a)k(\002ne-grained)h(computation.)72
b(F)o(or)39 b(e)o(xample,)j(consider)c(a)i(single-processor)e(e)o(x)o
(ecution)f(of)j(the)e(dag)h(in)0 4758 y(Figure)25 b(2.)31
b(If)25 b(the)f(scheduler)h(uses)f(a)h(LIFO)g(stack)g(to)f(store)h
(ready)g(threads,)f(and)h(a)g(child)f(thread)h(preempts)f(its)0
4879 y(parent)i(as)h(soon)e(as)h(it)g(is)g(fork)o(ed,)h(the)f(nodes)f
(are)i(e)o(x)o(ecuted)f(in)g(a)g(\(left-to-right\))g(depth-\002rst)g
(order)l(,)g(resulting)0 4999 y(in)32 b(at)h(most)f(5)h(simultaneously)
d(acti)n(v)o(e)i(threads.)55 b(In)32 b(contrast,)j(if)e(the)f
(scheduler)h(uses)f(a)i(FIFO)f(queue,)i(the)0 5119 y(threads)21
b(are)i(e)o(x)o(ecuted)d(in)h(a)h(breadth-\002rst)g(order)l(,)g
(resulting)e(in)i(all)f(13)g(threads)g(being)g(simultaneously)e(acti)n
(v)o(e.)0 5240 y(Systems)28 b(that)g(support)g(\002ne-grained,)i
(dynamic)e(parallelism)g(can)h(suf)n(fer)g(from)f(such)h(a)g(creation)g
(of)f(e)o(xcess)1925 5589 y(4)p eop
%%Page: 5 8
5 7 bop 854 1680 a @beginspecial 20 @llx 270 @lly 579
@urx 729 @ury 2160 @rhi @setspecial
%%BeginDocument: nfigures/dag0.epsi



% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f8000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f8000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060fc0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061870
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063870
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063030
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b030
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b030
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b030
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003830
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003870
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c60
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000780
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444440
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040404
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045fc44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000abfea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fc00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fe04
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fe00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000abfea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045fc44
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eaaaaa8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f8002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038000042404
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c0000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000446444
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000780000000000002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c00000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042404
% 00000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000001e00000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000001e000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000007c00000000000000000446444
% 00000000000000000000000000000000000000000000000000000000001fc0000000000000000000000000000000000000000000000000000078000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000001fc0000000000000000000000000000000000000000000000000000000000000000000000000002000
% 0000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000003f000000000000000000000aaaaa8
% 000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000001e0000000000000000000000042404
% 00000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000004000000000000000000000000aaaaa8
% 000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000f8000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000700000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000300600000000000000000000000000000000000000000010000000000000000000000000000446444
% 000000000000000000000000000000000000000000000000000000000003006000000000000000000000000000000000000000003e0000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000300e00000000000000000000000000000000000000001c00000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000307e000000000000000000000000000000000000000c0000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000307e00000000000000000000000000000000000001f00000000000000000000000000000000042404
% 00000000000000000000000000000000000000000000000000000000000300600000000000000000000000000000000000007000000000000000000000000000000000aaaaa8
% 000000000000000000000000000000000000000000000000000000000003c0600000000000000000000000000000000000100000000000000000000000000000000000002000
% 000000000000000000000000000000000000000000000000000000000003c0600000000000000000000000000000000007e00000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000004060000000000000000000000000000000000c000000000000000000000000000000000000446444
% 00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000c00000000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000001f000000000000000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000020000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000007000000000000000000000000000000000000000000042404
% 000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000fc000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000080000000000000000000000000000000000000000000002000
% 0000000000000000000000000000000000000000000000000000000000000060000000000000000000000001c000000000000000000000000000000000000000000000aaaaa8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000446444
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000042404
% 000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000003e00000000000000000018000000000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000018000000000000000000000000000000000446444
% 000000000000000000000000000000000000000000000000000000000002a000000000000000f800000000000000000000018000000000000000000000000000000000abaea8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe00000000000000000000000000000000001fc00
% 00000000000000000000000000000000000000000000000000000000002aaa000000000003c000000000000000000000000fe000000000000000000000000000000000abaaa8
% 0000000000000000000000000000000000000000000000000000000000040400000000003c000000000000000000000000018000000000000000000000000000000000048c04
% 0000000000000000000000000000000000000000000000000000000000aaaa800000000000000000000000000000000000018000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000f800000000000000000000000000018000000000000000000000000000000000009800
% 0000000000000000000000000000000000000000000000000000000000aaaa8000000f0000000000000000000000000000018000000000000000000000000000000000aafaa8
% 00000000000000000000000000000000000000000000000000000000004444400000000000000000000000000000000000018000000000000000000000000000000000445444
% 0000000000000000000000000000000000000000000000000000000000aaaab8003c000000000000000000000000000000018000000000000000000000000000000000aafaa8
% 000000000000000000000000000000000000000000000000000000000000007003c00000000000000000000000000000000181f8000000000000000000000000000000007000
% 0000000000000000000000000000000000000000000000000000000002aaaaf000000000000000000000000000000000000183fc000000000000000000000000000000aaaaa8
% 000000000000000000000000000000000000000000000000000000000007e71f800000000000000000000000000000000001870e000000000000000000000000000000042404
% 0000000000000000000000000000000000000000000000000000000002affeb80000000000000000000000000000000000018606000000000000000000000000000000aafea8
% 00000000000000000000000000000000000000000000000000000000000ff008000000000000000000000000000000000001860600000000000000000000000000000001fe00
% 0000000000000000000000000000000000000000000000000000000002fffffc000000000000000000000000000000000001e00e000000000000000000000000000000abfea8
% 0000000000000000000000000000000000000000000000000000000003dffc40000000000000000000000000000000000001e00c00000000000000000000000000000047ff44
% 0000000000000000000000000000000000000000000000000000000002bffaa0000000000000000000000000000000000000203c000000000000000000000000000000abffa8
% 00000000000000000000000000000000000000000000000000000001c01ff80000000000000000000000000000000000000000f00000000000000000000000000000003fff00
% 0000000000000000000000000000000000000000000000000000001e02affaa000000000000000000000000000000000000001e0000000000000000000000000000000ebffa8
% 000000000000000000000000000000000000000000000000000000300007e400000000000000000000000000000000000000038000000000000000000000000000007005fe04
% 0000000000000000000000000000000000000000000000000000000002aaaaa000000000000000000000000000000000000007000000000000000000000000000007c0aafea8
% 00000000000000000000000000000000000000000000000000003800000080000000000000000000000000000000000000000600000000000000000000000000000c00001000
% 0000000000000000000000000000000000000000000000000001e00002aaaaa000000000000000000000000000000000000007fe000000000000000000000000020000aabaa8
% 000000000000000000000000000000000000000000000000000700000044c44000000000000000000000000000000000000007fe0000000000000000000000007c0000445444
% 0000000000000000000000000000000000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000000000000001c00000aabaa8
% 00000000000000000000000000000000000000000000000007000000000080000000000000000000000000000000000000000000000000000000000000000000000000001000
% 0000000000000000000000000000000000000000000000003c00000002aaaaa00000000000000000000000000000000000000000000000000000000000000780000000aabaa8
% 000000000000000000000000000000000000000000000000e0000000000484000000000000000000000000000000000000000000000000000000000000007c00000000041404
% 0000000000000000000000000000000000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000006000000000000080000000000000000000000000000000000000000000000000000000000000700000000000001000
% 0000000000000000000000000000000000000000000003c00000000002aaaaa0000000000000000000000000000000000000000000000000000000000f800000000000aabaa8
% 000000000000000000000000000000000000000000001c00000000000044c4400000000000000000000000000000000000000000000000000000000008000000000000445444
% 0000000000000000000000000000000000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000000e00000000000000aabaa8
% 0000000000000000000000000000000000000000000c000000000000000080000000000000000000000000000000000000000000000000000000007800000000000000001000
% 0000000000000000000000000000000000000000007800000000000002aaaaa00000000000000000000000000000000000000000000000000000018000000000000000aabaa8
% 000000000000000000000000000000000000000003c0000000000000000484000000000000000000000000000000000000000000000000000000400000000000000000041404
% 0000000000000000000000000000000000000000000000000000000002aaaaa0000000000000000000000000000000000000000000000000000f800000000000000000aabaa8
% 00000000000000000000000000000000000000018000000000000000000080000000000000000000000000000000000000000000000000000070000000000000000000001000
% 000000000000000000000000000000000000000f000000000000000002aaaaa00000000000000000000000000000000000002aa0000000000000000000180000000000aabaa8
% 000000000000000000000000000000000000007800000000000000000044c440000000000000000000000000000000000000444000000000f000000000180000000000445444
% 0000000000000000000000000000000000000000000000000000000002aaaaa0000000000000000000000000000000000000aaa80000000f0000000000180000000000aabaa8
% 000000000000000000000000000000000000380000000000000000000004b0000000000000000000000000000000000000000000000000000000000000180000000000001000
% 00000000000000000000000002aa00000001e000000000000000000002affaa0000000000000000000000000000000000002aaaa00001e000000000000fe0000000000aabea8
% 000000000000000000000000040400000007000000000000000000000006a40000000000000000000000000000000000000004041801f0000000000000fe000000000004fe04
% 0000000000000000000000000aaa800000000000000000000000000002aaaaa0000000000000000000000000000000000002aaaa380000000000000000180000000000aaeea8
% 000000000000000000000000000000000300000000000000000000000002200000000000000000000000000000000000000003e0c9c000000000000000180000000000004400
% 0000000000000000000000002aaaa0001c000000000000000000000002aaeaa0000000000000000000000000000000000002affb8f0000000000000000180000000000aaeea8
% 00000000000000000000000044444000e00000000000000000000000004744400000000000000000000000000000000000044ffe080000000000000000180000000000444444
% 0000000000000000000000002aaaac0000000000000000000000000002abeaa0000000000000000000000000000000000002bffa840000000000000000180000000000aaeaa8
% 00000000000000000000000000003c20000000000000000000000000000140000000000000000000000000000000000000001ffffe0000000000000000181f80000000002800
% 000000000000000000000000aafae7c000000000000000000000000002abaaa0000000000000000000000000000000000002bffa800000000000000000183fe0000000aaaaa8
% 00000000000000000000000007fdc6000000000000000000000000000005f400000000000000000000000000000000000004dffc0000000000000000001860e0000000043c04
% 000000000000000000000000abffa60000000000000000000000000002affaa0000000000000000000000000000000000003affa800000000000000000186060000000aabea8
% 00000000000000000000000007feff000000000000000000000000000007f8000000000000000000000000000000000000000ff000000000000000000018606000000000ff00
% 000000000000000000000000afffa00000000000000000000000000002affea0000000000000000000000000000000000002abea8000000000000000001800c0000000aaffa8
% 00000000000000000000000047fe4000000000000000000000000000004ffc4000000000000000000000000000000000038444c40000000000000000001e078000000045ffc4
% 000000000000000000000000bffea00000000000000000000000000002affea0000000000000000000000000000000001c02aaaa8000000000000000001e07c0000000abffa8
% 000000000000000000000000e3fc0000000000000000000000000000006ffc0000000000000000000000000000000000f00000800000000000000000000200e000000001ff80
% 000000000000000000000000abfea00000000000000000000000000003effaa0000000000000000000000000000000000002aaaa800000000000000000000060000000afffa8
% 000000000000000000000000047400000000000000000000000000000007fc0000000000000000000000000000000000000404840000000000000000000040600000001cff84
% 000000000000000000000000aaaaa00000000000000000000000000002abeaa0000000000000000000000000000000e00002aaaa800000000000000000006060000000aaffa8
% 0000000000000000000000e000200000000000000000000000000003c000400000000000000000000000000000000380000000800000000000000000000070e0000000003e00
% 000000000000000000000180aaaaa00000000000000000000000000e02aaeaa000000000000000000000000000001e000002aaaa800000000000000000003fc0000000aaaaa8
% 000000000000000000000600446440000000000000000000000000780044444000000000000000000000000000001000000444c4000000000000000000001f80000000444c44
% 000000000000000000001800aaaaa00000000000000000000000000002aaeaa0000000000000000000280000000000000002aaaa800000000000000000000000000010aaaaa8
% 0000000000000000000000000020000000000000000000000000000000004000000000000000000000000000000c000000000080000000000000000000000000000060000800
% 000000000000000000000000aaaaa00000000000000000000000300002aaeaa0000000000000000002aaa000007000000002aaaa8000000000000000000000000001c0aaaaa8
% 0000000000000000000200000424000000000000000000000001c0000004440000000000000000000404000001c0000000040484000000000000000000000000000300040c04
% 0000000000000000001c0000aaaaa00000000000000000000007000002aaeaa000000000000000000aaaa800030c00000002aaaa80000000000000000002aa00000e00aaaaa8
% 0000000000000000003000000020000000000000000000000008000000004000000000000000000000000020000c000000000080000000000000000000000000001800000800
% 00000000002aa00000c00000aaaaa00000000000aa8000000000000002aaeaa000000000000000002aaaa8e0000c00000002affa8000000000000000000aaa80002000aaaaa8
% 00000000004444000100000044644000000000004440000006000000004444400000000000000000044445af000c0000000444d4000000000000000000044440000000444c44
% 0000000000aaaa0000000000aaaaa00000000002aaa800003c00000002aaeaa000000000000000002aaaab38007f00000002aaaa8000000000000000002aaaa0000000aaaaa8
% 000000000000000800000000002000000000000000000000e000000000004000000000000000000000000618007f000000000220000000000000000000000000000000000800
% 0000000002aaaa18c0000000abaea0000000000aaaa808010000000002aaeaa000000000000000002aaaba0c000c00000002aaaa800000000000000000aaaaae100000aaaaa8
% 000000000404042b0000000005fc000000000004040418000000000000064c000000000000000000047e3ff8000c000000040764000000000000000000040406700000040c04
% 0000000002aaaacc00000000abaea0000000000aaaaa38400000000002abfaa000000000000000002afffa00000c00000002abea800000000000000000aaaaaac00000aaeaa8
% 000000000000018400000000008c0000000000000000cf800000000000014800000000000000000001ff0000000c000000000140000000000000000000000013000000007f00
% 0000000002afeb8300000000aaaaa0000000000aaaab8c000000000002abbaa000000000000000002bffaa00000c00000002abea800000000000000000aaaaa9800000aaeba8
% 00000000045fe67c0000000044cc40000000000444470c000000000000455440000000000000000045ffc400000c0040000447e4000000000000000000444461c00000446744
% 000000000abfef8000000000aaeaa0000000002aaaae06000000000002abbaa000000000000000002bffaa00000c00c00002affa800000000000000000abfaef000000aaaaa8
% 00000000003ff8000000000000500000000000001f1ffc000000000000009000000000000000000001ff8000000c01c000000ff000000000000000000003f9f0000000002200
% 000000000abffa8000000000aafaa0000000002affaa00000000000002aaaaa000000000000000002bffaa00000c03c00002bffa800000000000000000afffa8000000aabea8
% 00000000043ff4000000000004740000000000047fc40000000000000004a400000000000000000007ff0400000c02c000041ffc00000000000000000007fc00000000041404
% 000000000abffa8000000000aafaa0000000002affea00000000000002aaeaa000000000000000002ebeaa00000c06c00002bffa800000000000000000affea8000000aabea8
% 00000000001ff0000000000003fc000000000000ffc00000000000000001f00000000000000000000c080000000f0cc000001ff80000000000000000000ffc00000000001c00
% 000000000affea8000000000abfea0000000002affea00000000000002affaa000000000000000002aaaaa00000f18c00002affa800000000000000000affea8000000aabea8
% 0000000004c7c4400000000047fe400000000004ffc40000000000000047fc400000000000000000444c4400000110c0000447f400000000000000000047fc4000000044ff44
% 000000000babaa8000000000affea0000000002affea00000000000002affea000000000000000032aaaaa00000030c00002abea800000000000000000affaa8000000aaffa8
% 00000000000100000000000007fe0000000000007f80000000000000000ffc0000000000000000060008000000007ff80000008000000000000000000031f00000000001ff80
% 000000000aabaa8000000000affea0000000002abfaa00000000000002affea0000000000000001c2aaaaa0000007ff80002aaaa800000000000000000eaeaa8000000abffa8
% 00000000240504000000000007fe0000000000040404000000000000000ffc000000000000000030040c0400000000c00006048400000000000000000004440000000005ff84
% 00000000caabaa8000000000abfea0000000002aaeaa00000000000002affaa0000000000a0000002aaaaa00000000c0000eaaaa800000000000000000aaeaa8000000abffa8
% 00000001800100000000000000f000000000000004000000000000000003f800000000000000000000080000000000c00018008000000000000000000c00400000000000ff80
% 000000060aabaa8000000000aaaaa0000000002aaeaa00000000000002aaeaa000000000aaa080002aaaaa00000000c00062aaaa800000000000000038aaeaa8000000aaffa8
% 00000004044544400000000044644000000000044444000000000000004444400000000044418c00444c44000000000000c444c4000000000000000060444440000000445c44
% 000000000aabaa8000000000aaaaa0000000002aaeaa00000000000002aaeaa000000002aaabb0002aaaaa00000000000182aaaa8000000000000000c0aaeaa8000000aaaaa8
% 0000100000010000000000000020000000000000040000000000000001004000000000000006e000000800000000000002000080000000000000000100004000000000000800
% 0aaa31800aabaa8000000000aaaaa0000000002aaeaa00000000000006aaeaa000000002aaac60002aaaaa00000000000002aaaa800000000028000000aaeaa8000000aaaaa8
% 040477000405040000000000042400000000000404040000000000000c04440000000004041c3000040d04000004000000040484000000000004040000044400000000040c04
% 2aaadc000aabaa8000000000aaaaa0000000002aaeaa0000000000001aaaeaa00000000aaabbe0002affaa00002aa0000002aaaa8000000002aa867000aaeaa8000000aaaaa8
% 00018c0000010000000000000020000000000000040000000000000060004000000000000fbe00000049000000000000000000800000000000000ac000004000000000000800
% 2aab86000aabaa8000000000aaaaa0000000002aaeaa000000000000c2aaeaa00000000abffa00002aaaaa0000aaa8630002aaaa800000000aaab30000aaeaa8000000aaaaa8
% 44467c00044fe440000000004464400000000004444400000000000180444440000000047fc4000044664400004444e6000444c4000000000444730000444440000000444c44
% abffe0000aabaa8000000000aaaaa0000000002aaeaa000002a0000002aaeaa00000000affea00002aaaaa0002aaaab80002aaaa800000002aaae0c000aaeea8000000aaaaa8
% 07ff000000046000000000000020000000000000248000000000000000004000000000007fe000000036000000000130000007f0000000000000cf000003fc00000000000800
% affaa0000aaeea8000000000aaaaa0000000002abfaa00002aaa000002aaeaa00000000affea00002abeaa0002aaab180002aeba800000002afff80000abeaa8000000aaaaa8
% 0ffc000004044400000000000424000000000004348400000404000000044400000000047fe40000041404000404061c000406240000000004ffc00000050c00000000040c04
% affea0000aaeea8000000000aaaaa0000000002abbaa00002aaab18002aaeaa00000000abfea00002abeaa000aafeef00002aaaa800000002affa00000abbaa8000000aaaaa8
% 0ffc000000028000000000000124000000000000110000000000730000004000000000003fc0000000080000001fef80000002200000000001ff000000009000000000000800
% affea0000aaaaa8000000000abfea0000000002abbaa0000aaaade0002aaeaa00000000aafaa00002aaaaa000abffe800002abea800000002bffa00000aabaa8000000aaaaa8
% 47fc40000446c4400000000045e44000000000044d4400004444c8000047fc400000000446440000447e4400047ff400000445440000000005ffc0000044d440000000444c44
% affaa0000aabaa8000000000aaaea0000000002aaaaa0000aaab8e0002abeaa00000000aaaaa00002affaa000abffa800002abea800000002bffa00000aaeaa8000000aaffa8
% 01e00000000100000000000000880000000000000a00000000030e0000011800000000000200000001ff0000003ff000000001c00000000001ff000000006000000000006900
% aaeaa0000aafea8000000000aaeaa0000000002aaeaa0000abeef00002abbaa00000000aaaaa00002bffaa000abffa800002abaa800000002bffa00000aaeaa8000000aaaba8
% 04440000041fe40000000000044c000000000004060400000ff7800000059400000000040604000005ff8400041fe400000407e40000000005ff000000046400000000042604
% aaeaa0000abfea8000000000aafaa0000000002aaeaa0000affe800002aabaa00000000aaaaa00002bffaa000aafea800002affa800000002afea00000abfaa8000000aaaaa8
% 00400000003ff0000000000000500000000000001f0000001ff800000000a000000000000200000001ff80000007800000000ff000000000003c00000003f800000000001600
% aaeaa0000abffa8000000000aabaa0000000002affaa0000bffa800002aaaaa00000000abaea00002bffaa000aaaaa800002bffa800000002abaa00000affea8000000aabea8
% 44444000047ff4400000000044744000000000047fc400005ffc40000044e440000000045fc4000044ff44000446440000045ffc00000000045c40000047fc40000000445444
% aaeaa0000abffa8000000000aafaa0000000002affea0000bffa800002aaeaa00000000abfea00002abeaa000aaaaa800002bffa800000002abaa00000affea8000000aabea8
% 00400000001ff0000000000003fc000000000000ffc000000ff800000001f0000000000018c00000000800000002000000001ff80000000000180000000ffc00000000000800
% abfaa0000abfea8000000000abfea0000000002affea0000affa800002affaa00000000aaaaa00002aaaaa000aaaaa800002affa800000002abaa00000affea8000000aabea8
% 07fc00000407c4000000000007fe000000000004ffc4000007c400000007fc00000000040d840000040c040004260400000407f400000000049d00000007fc0000000004ff04
% abbaa0000aabaa8000000000affea0000000002affea0000abaa800002affea00000000aafaa00002aaaaa000abbea800002abea800000002affa00000abfaa8000000aaffa8
% 01100000000100000000000007fe0000000000007f80000001000000000ffc00000000000d00000000080000003fe0000000000000000000007e00000001f00000000001ff80
% abbaa0000aabaa8000000000affea0000000002abfaa0000abaa800002affea00000000aafaa00002aaaaa000abaea800002abaa800000002aeea00000aaaaa8000000abffa8
% 45f44000044544400000000047fe4000000000044444000045444000004ffc40000000044fc40000444c4400045cc4000004454400000000046640000044644000000045ffc4
% abbaa0000aabaa8000000000abfea0000000002aaeaa0000abaa800002affaa00000000abfea00002aaaaa000abaea800002abaa800000002aeea00000aaaaa8000000abffa8
% 00a00000000100000000000000f000000000000004000000110000000003f800000000003fc0000000080000000880000000010000000000002400000000200000000000ff80
% abeaa0000aabaa8000000000aaaaa0000000002aaeaa0000bffa800002aaeaa00000000affea00002aaaaa000aafaa800002abaa800000002abea00000aaaaa8000000aaffa8
% 07fc000004050400000000000444000000000004040400000ff4000000040400000000047fe40000040c0400040d84000004050400000000043c000000044400000000041c04
% affaa0000aabaa8000000000aaeaa0000000002aaeaa0000aeaa800002aaaaa00000000affea00002aaaaa000aafaa800002abaa800000002afea00000abeea8000000aaaaa8
% 0ffc000000010000000000000040000000000000040000000c60000000008000000000007fe000000008000000050000000001000000000000fe00000001f800000000001000
% affea0000aabaa8000000000aaeaa0000000002aaeaa0000aeea800002aaaaa00000000abfea00002aaaaa000aafea800002abaa800000002bffa00000abaaa8000000aabaa8
% 4ffc40000445444000000000444440000000000444440000446440000044c440000000045fc40000444c4400045fe400000445440000000005ff400000455c40000000445444
% affea0000aabaa8000000000aaeaa0000000002aaeaa0000aeea800002aaaaa00000000aafaa00002aaaaa000abfea800002abaa800000002bffa00000abbaa8000000aabaa8
% 07f80000000100000000000000400000000000000400000006c0000000008000000000000180000000080000003ff000000001000000000001ff000000009000000000001000
% affaa0000aabaa8000000000aaeaa0000000002aaeaa0000aaea800002aaaaa00000000aaaaa00002aaaaa000abffa800002abaa800000002bffa00000aabaa8000000aabaa8
% 05e40000040504000000000004440000000000040404000007840000000484000000000404040000040c0400043ff400000405040000000005ff00000004a400000000041404
% aabaa0000aabaa8000000000aaeaa0000000002aaeaa0000abea800002aaaaa000000002aaa800002aaaaa000abffa800002abaa800000002afea00000abfaa8000000aabaa8
% 0000000000010000000000000040000000000000040000000ff0000000008000000000000002000000080000001fe0000000010000000000007c00000003fc00000000001000
% aaaaa0000aabaa8000000000aaeaa0000000002aaeaa0000affa800002aaaaa000000002aaab00002aaaaa000abfea800002abaa800000002aaea00000affea8000000aabaa8
% 4444400004454440000000004444400000000004444400005ffc40000044c4400000000044418000444c44000447e4000004454400000000044440000047fe40000000445444
% 2aaaa0000aabaa8000000000aaeaa0000000002aaeaa0000bffa800002aaaaa000000000aaa860002aaaaa000aaaba800002abaa800000002aaaa00000affea8000000aabaa8
% 0000600000010000000000000040000000000000040000001ff8000000008000000000000000300000080000000008000000010000000000000000000007fe00000000001000
% 2aaab0000aabaa8000000000aaeaa0000000002aaeaa0000bffa800002aaaaa0000000002a8018002aaaaa0002aaaa000002abaa800000002aaab00000affea8000000aabaa8
% 04040c0004050400000000000444000000000004040400000ffc0000000484000000000000000000040c0400040404000004050400000000040418000007fc00000000041404
% 0aaa86000aabaa8000000000aaeaa0000000002aaeaa0000affa800002aaaaa000000000000000002aabaa0002aaaa000002abaa800000000aaaa60000abfaa8000000aabaa8
% 00000300000100000000000000400000000000000400000001f00000000080000000000000000000007f00000000000800000100000000000000030000004000000000001000
% 02a800000aabaa8000000000aaeaa0000000002aaeaa0000aaae800002aaaaa000000000000000012aebaa0000aaa8060002abaa800000000aaa818000aaeaa8000000aabaa8
% 004000000445444000000000444440000000000444440000444440000044c4400000000000000031446644000044400380044544000000000444006000444440000000445444
% 000000000aafea8000000000aaeaa0000000002aaeaa0000aaaa800002aaaaa0000000000000001baaaaaa00002aa000e002abaa8000000002aa000000aaeaa8000000aabaa8
% 0000000020092000000000000040000000000000040000000000000000008000000000000000000ec02200000000000030000100000000000000000000004000000000001000
% 000000062aaeea8000000000aaeaa0000000002aaeaa0000aaaa800002aaaaa000000000000000066abeaa00000000000802afea800000000000000000aaeaa8000000aabaa8
% 00000003740444000000000004440000000000043f84000004040600000484000000000000000018241404000000000000040d24000000000000000008044c00000000041404
% 00000001daaeea8000000000aaeaa0000000002abeaa00002aaa038002aaaaa0000000000000000e3abeaa00000000000002aeea80000000000000018caffea8000000aabaa8
% 00000000c806c00000000000004000000000000011800000000000c0000080000000000000000003d8ff0000000000000000044000000000000000006c07e800000000001000
% 000000030eaaaa8000000000aaeaa0000000002abbaa00000aa8003002aaaaa000000000000000007affaa0000000000000aeeea80000000000000003eaabaa8000000aabaa8
% 00000001c646c4400000000047fc4000000000045d4400000000001c0044d44000000000000000005dffc40000000000000ee6c4000000000000000033475c40000000445444
% 000000007babaa8000000000abeaa0000000002aabaa00000000000602affaa000000000000000002bffaa00000000000003baaa800000000000000061abbaa8000000aabaa8
% 000000000f07c0000000000001180000000000000a0000000000000000029000000000000000000001ff80000000000000008a8000000000000000007081300000000000fe00
% 000000000bbfea8000000000abbaa0000000002aaaaa00000000000002aaaaa000000000000000002bffaa00000000000003afea80000000000000001eebbaa8000000aafaa8
% 00000000045fe400000000000594000000000004060400000000000000062400000000000000000005ff84000000000000078ff4000000000000000003e5b400000000044604
% 000000000abffa8000000000aabaa0000000002abfaa00000000000006abaaa000000000000000002bffaa00000000000002fffa800000000000000000fbaaa8000000aaeea8
% 00000000003ff0000000000000a00000000000007f8000000000000003316000000000000000000000ff00000000000000001ff800000000000000000010e000000000006400
% 000000000abffa8000000000aaaaa0000000002affea00000000000003ebeaa000000000000000002affaa00000000000002bffa800000000000000000abfaa8000000aaaea8
% 00000000047ff4400000000045fc400000000004ffc4000000000000004544400000000000000000447ce4000000000000045ffc00000000000000000047fc40000000446c44
% 000000000abfea8000000000abfea0000000002affea00000000000002abfaa000000000000000002aaaaa00000000000002bffa800000000000000000affea8000000aaaaa8
% 00000000001ff0000000000003fe000000000000ffc000000000000003c3f8000000000000000000000000000000000000000ff000000000000000000007fe00000000003e00
% 000000000aafaa8000000000affea0000000002affea00000000000002bffea000000000000000002aaaaac0000000000002affa800000000000000000affea8000000aaffa8
% 00000000040404000000000007fe0000000000047f84000000000000000ffc0000000000000000000404043800000000000407c400000000000000000007fee000000004ff84
% 000000000aaaaa8000000000affea0000000002abfea00000000000002affea000000000000000002aaaa80e000000000002aaaa800000000000000000affeb8000000abffa8
% 00000000000000600000000007fe0000000000000e70000000000000000ffc00000000000000000000000003800000000000008000000000000000000003fc1800000001ff80
% 000000000aaaaab800000000abfea0000000002aaaaa00000000000002affea000000000000000002aaaa800000000000002aaaa800000000000000000abfaa8000000abffa8
% 000000000444444c0000000047fc40000000000444440000000000000047fc4000000000000000000444400000000000000444c400000000000000000044444000000045ffc4
% 0000000002aaaa8000000000aaaaa0000000000aaaaa30000000000002abfaa000000000000000000aaaa000018000000002aaaa800000000000000000aaaaa8800000aaffa8
% 000000000000000000000000002000000000000000001c00000000000001e00000000000000000000000000000e00000000007f0000000000000000000000000c00000007f00
% 0000000002aaaa8020000000aaaaa0000000000aaaaa07000000000002aaeaa0000000000000000002aa8000001c00000002aeba8000000000000000002aaaa0600000aabea8
% 0000000004040400180000000424000000000004040400c000000000000444000000000000000000000400000007000000040624000000000000000000040400180000040c04
% 0000000002aaaa000e000000aaaaa0000000000aaaa800000000000002aaeaa0000000000000000000000000000000000002aaaa8000000000000000000aaa800c0000aaaaa8
% 00000000000000000300000001240000000000000000000000000000000040000000000000000000000000000000000000000220000000000000000000000000000000000800
% 0000000000aaaa0000800000abfea00000000002aaa80000c000000002aaeaa0000000000000000000000000000006000002abea80000000000000000002aa00000000aaaaa8
% 00000000004440000000000045e440000000000044400000700000000047fc40000000000000000000000000000001c000044544000000000000000000000000000000444c44
% 00000000002aa00000000000aaaea00000000000aa8000000e00000002abeaa0000000000000000000000000000000700002abea800000000000000000000000006000aaffa8
% 0000000000000000000e000000880000000000000000000003800000000118000000000000000000000000000000001c000001c0000000000000000000000000003000006900
% 000000000000000000038000aaeaa00000000000000000000000000002abbaa0000000000000000000000000000000000002abaa800000000000000000000000001800aaaba8
% 00000000000000000000c000044c0000000000000000000000000000000594000000000000000000000000000000000000640484000000000000000000000000000600042604
% 000000000000000000002000aafaa00000000000000000000001800002aabaa0000000000000000000000000000000000c72aaaa800000000000000000000000000200aaaaa8
% 0000000000000000000000000050000000000000000000000000e0000000a0000000000000000000000000000000000007d803e0000000000000000000000000000000001600
% 000000000000000000000008aabaa00000000000000000000000380002aaaaa00000000000000000000000000000000000ceaffa800000000000000000000000000000aabea8
% 00000000000000000000018c447440000000000000000000000006000044e4400000000000000000000000000000000001874ffc000000000000000000000000000021445444
% 0000000000000000000000eeaaaaa00000000000000000000000000002aaeaa0000000000000000000000000000000000383bffa800000000000000000000000000019aabea8
% 00000000000000000000003b002000000000000000000000000000003000400000000000000000000000000000000000007fdff800000000000000000000000000000dc00800
% 000000000000000000000031aafaa0000000000000000000000000063aaaeaa0000000000000000000000000000000000002bffa800000000000000000000000000006eaaaa8
% 00000000000000000000006087fc0000000000000000000000000001ec05f4000000000000000000000000000000000000041ffc000000000000000000000000000006240c04
% 0000000000000000000000f8ebfea00000000000000000000000000063affaa0000000000000000000000000000000000002affa800000000000000000000000000018babea8
% 000000000000000000000007a7fe00000000000000000000000000004187f8000000000000000000000000000000000000000ff010000000000000000000000000000710ff00
% 000000000000000000000000fffea000000000000000000000000000c2effea0000000000000000000000000000000000002abea9c0000000000000000000000000001eaffa8
% 0000000000000000000000004ffe40000000000000000000000000003feffc4000000000000000000000000000000000000444440380000000000000000000000000007dffc4
% 000000000000000000000000affea00000000000000000000000000002bffea0000000000000000000000000000000000002aaaa80e000000000000000000000000000afffa8
% 00000000000000000000000003fc8000000000000000000000000000000ffc00000000000000000000000000000000000000000000000000000000000000000000000003ff80
% 000000000000000000000000abfee00000000000000000000000000002affaa0000000000000000000000000000000000002aaaa800000000000000000000000000000abffa8
% 000000000000000000000000047410000000000000000000000000000007fc0000000000000000000000000000000000000404040000c000000000000000000000000004ff84
% 000000000000000000000000aaaaa00000000000000000000000000002abeaa0000000000000000000000000000000000002aaaa800070000000000000000000000000aaffa8
% 0000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000003e00
% 000000000000000000000000aaaaa03c00000000000000000000000002aaaaa0000000000000000000000000000000000002aaaa000003800000000000000000000000aaaaa8
% 000000000000000000000000444440070000000000000000000000000044c4400000000000000000000000000000000000004444000000000000000000000000000000445444
% 000000000000000000000000aaaaa00080000000000000000000000002aaaaa0000000000000000000000000000000000002aaaa000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000030000000000000000000000001000
% 0000000000000000000000002aaaa00007000000000000000000000002aaaaa0000000000000000000000000000000000000aaa800000000e000000000000000000000aabaa8
% 0000000000000000000000000404000001c000000000000000000000000484000000000000000000000000000000000000000400000000003800000000000000000000041404
% 0000000000000000000000002aaaa00000380000000000000000000002aaaaa00000000000000000000000000000000000002aa0000000000c00000000000000000000aabaa8
% 00000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000001000
% 0000000000000000000000000aaa800000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 000000000000000000000000044400000000380000000000000000000044c440000000000000000000000000000000000000000000000000001c000000000000000000445444
% 00000000000000000000000002aa000000000e00000000000000000002aaaaa00000000000000000000000000000000000000000000000000003800000000000000000aabaa8
% 00000000000000000000000000000000000001c00000000000000000000080000000000000000000000000000000000000000000000000000000e00000000000000000001000
% 0000000000000000000000000000000000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000100000000000000000aabaa8
% 00000000000000000000000000000000000000020000000000000000000484000000000000000000000000000000000000000000000000000000000000000000000000041404
% 0000000000000000000000000000000000000001c00000000000000002aaaaa00000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000007000000000000000000080000000000000000000000000000000000000000000000000000000007000000000000000001000
% 00000000000000000000000000000000000000001c0000000000000002aaaaa00000000000000000000000000000000000000000000000000000001c00000000000000aabaa8
% 000000000000000000000000000000000000000000000000000000000044c4400000000000000000000000000000000000000000000000000000000380000000000000445444
% 0000000000000000000000000000000000000000003000000000000002aaaaa00000000000000000000000000000000000000000000000000000000080000000000000aabaa8
% 0000000000000000000000000000000000000000001e000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000001000
% 0000000000000000000000000000000000000000000380000000000002aaaaa00000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000c00000000000000484000000000000000000000000000000000000000000000000000000000001c00000000000041404
% 0000000000000000000000000000000000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000000000700000000000aabaa8
% 000000000000000000000000000000000000000000000180000000000000800000000000000000000000000000000000000000000000000000000000000e0000000000001000
% 0000000000000000000000000000000000000000000000f00000000002aaaaa00000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000001c000000000044c4400000000000000000000000000000000000000000000000000000000000000000000000445444
% 0000000000000000000000000000000000000000000000020000000002aaaaa00000000000000000000000000000000000000000000000000000000000000c00000000aabaa8
% 00000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000700000000001000
% 0000000000000000000000000000000000000000000000001c00000002aaaaa000000000000000000000000000000000000000000000000000000000000001c0000000aabaa8
% 000000000000000000000000000000000000000000000000078000000004b4000000000000000000000000000000000000000000000000000000000000000030000000041404
% 00000000000000000000000000000000000000000000000000e0000002affaa00000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 0000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000000000000000fe00
% 0000000000000000000000000000000000000000000000000000000002aaaaa00000000000000000000000000000000000000000000000000000000000000000300000aaaea8
% 0000000000000000000000000000000000000000000000000000e0000046644000000000000000000000000000000000000000000000000000000000000000001c0000444444
% 00000000000000000000000000000000000000000000000000003c0002aaeaa00000000000000000000000000000000000000000000000000000000000000000038000aaeea8
% 0000000000000000000000000000000000000000000000000000060000034000000000000000000000000000000000000000000000000000000000000000000000c000004400
% 0000000000000000000000000000000000000000000000000000000042abeaa00000000000000000000000000000000000000000000000000000000000000000000008aaeaa8
% 0000000000000000000000000000000000000000000000000000000870054400000000000000000000000000000000000000000000000000000000000000000000000c042c04
% 0000000000000000000000000000000000000000000000000000000f5aabeaa000000000000000000000000000000000000000000000000000000000000000000001ceaaaaa8
% 00000000000000000000000000000000000000000000000000000000cc07e000000000000000000000000000000000000000000000000000000000000000000000007b003800
% 0000000000000000000000000000000000000000000000000000000083affaa00000000000000000000000000000000000000000000000000000000000000000000018eafea8
% 0000000000000000000000000000000000000000000000000000000101cff440000000000000000000000000000000000000000000000000000000000000000000003065fe44
% 00000000000000000000000000000000000000000000000000000001fffffaa00000000000000000000000000000000000000000000000000000000000000000000038bbfea8
% 00000000000000000000000000000000000000000000000000000000001ff8000000000000000000000000000000000000000000000000000000000000000000000007fbff00
% 0000000000000000000000000000000000000000000000000000000002bffea00000000000000000000000000000000000000000000000000000000000000000000000afffa8
% 00000000000000000000000000000000000000000000000000000000001ffc08000000000000000000000000000000000000000000000000000000000000000000000007ff04
% 0000000000000000000000000000000000000000000000000000000002affaa7e000000000000000000000000000000000000000000000000000000000000000000000abffa8
% 000000000000000000000000000000000000000000000000000000000007e000300000000000000000000000000000000000000000000000000000000000000000000001fe00
% 0000000000000000000000000000000000000000000000000000000002aaaaa0003c000000000000000000000000000000000000000000000000000000000000000000aafea8
% 00000000000000000000000000000000000000000000000000000000004444400003c00000000000000000000000000000000000000000000000000000000000000000446444
% 0000000000000000000000000000000000000000000000000000000002aaaaa0000000c000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000002000
% 0000000000000000000000000000000000000000000000000000000000aaaa800000000100000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000404000000000003e00000000000000000000000000000000000000000000000000000000000042404
% 0000000000000000000000000000000000000000000000000000000000aaaa8000000000001c0000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000002aaa0000000000000001f0000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000444000000000000000000400000000000000000000000000000000000000000000000000000446444
% 00000000000000000000000000000000000000000000000000000000000aa80000000000000000001f8000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000002000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000001f8000000000000000000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000042404
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc00000000000000000000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f800000000000000000000000000000000000000000446444
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041404
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe0000000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000001000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000000000000000000000aabaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000445444
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000aabaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000001000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aabaa8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000041404
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000aabaa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c000000000000000000000001000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000000000000aabea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044fe44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f00000000000000000aabea8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000004400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00000000000000aaeea8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000044404
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000aaeaa8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f0000000000002800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f0000000447c44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000aabaa8
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000300fc00
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f003ebfea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004277fe04
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ebfffa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000607ff00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ffffa8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc7ff44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000abfea8
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040404
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444444
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa8
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444440
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000c0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000c0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180060c00000000000000c0000000000018000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180060c00000000000000c00000000000f0000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180060c00000000000000c00000000007e0000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180060c00000000000000c0000000003fe0000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000330fc03f07e01f8df83307e03fc07ec0000000007fc0000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f1fe07f87e01f8ffc3f0ff87fe0ffc0000000003f80000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000383870e1c180060f0c381c3860e1c7c0000000001f00000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000387039c0e180060e0c38381ce06381c0000000007e00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030603980e180060c0c30381c006301c0000000038c00000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000306019806180060c0c303ffc0fe300c00000003e0400000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000306019806180060c0c303ffc3fe300c000000fc00000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000306019806180060c0c303000786300cffffff0000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000307019c06180060c0c303800c06300c0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000307039c0e180060c0c30381cc06381c0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000303870e1c180060c0c301c38e0e1c3c0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000301fe07f81e0078c0c300ff0fff8ffc0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300fc03f01e0078c0c3007e07f787ec0000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000800000000000100000000000000000000000
save
countdictstack
mark
newpath
/showpage {} def

[{

save 
/version23-manualfeedpatch where { pop false } { true }ifelse
 % we don't do an explicit 'get' since product and version MAY
 % be in systemdict or statusdict - this technique gets the lookup
 % without failure
statusdict begin
  product (LaserWriter) eq        % true if LaserWriter
  version cvr 23.0 eq             % true if version 23
end

and  % only install this patch if both are true
and  % true only if patch is not installed and is for this printer
     % save object and boolean on stack
dup { exch restore }if
% either true OR saveobject false
dup
{
  /version23-manualfeedpatch true def
  /oldversion23-showpage /showpage load def
  /showpage       % this showpage will wait extra time if manualfeed is true
  {%
     statusdict /manualfeed known
     {% manualfeed known in statusdict
        statusdict /manualfeed get
        {% if true then we loop for 5 seconds
           usertime 5000 add       % target usertime
           { % loop
             dup usertime sub 0 lt
             { exit }if
           }loop
           pop             % pop the usertime off the stac
        }if
     }if
     oldversion23-showpage
  }bind def
}if
not{ restore }if

} stopped cleartomark
/currentpacking where{pop/oldpack currentpacking def/setpacking where{pop
false setpacking}if}if/$brkpage 64 dict def $brkpage begin/prnt{dup type
/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
currentpoint/toy exch def/tox exch def 1 setgray newpath tox toy 2 sub moveto
0 ty rlineto tx 0 rlineto 0 ty neg rlineto closepath fill tox toy moveto 0
setgray show}bind def/nl{currentpoint exch pop lmargin exch moveto 0 -10
rmoveto}def/=={/cp 0 def typeprint nl}def/typeprint{dup type exec}readonly def
/lmargin 72 def/rmargin 72 def/tprint{dup length cp add rmargin gt{nl/cp 0 def
}if dup length cp add/cp exch def prnt}readonly def/cvsprint{=string cvs
tprint( )tprint}readonly def/integertype{cvsprint}readonly def/realtype{
cvsprint}readonly def/booleantype{cvsprint}readonly def/operatortype{(--)
tprint =string cvs tprint(-- )tprint}readonly def/marktype{pop(-mark- )tprint}
readonly def/dicttype{pop(-dictionary- )tprint}readonly def/nulltype{pop
(-null- )tprint}readonly def/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def/fonttype{pop(-fontid- )tprint}
readonly def/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype{dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}
ifelse}readonly def/arraytype{dup rcheck{dup xcheck{({)tprint{typeprint}forall
(})tprint}{([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}
ifelse}readonly def/packedarraytype{dup rcheck{dup xcheck{({)tprint{typeprint}
forall(})tprint}{([)tprint{typeprint}forall(])tprint}ifelse}{pop
(-packedarray- )tprint}ifelse}readonly def/courier/Courier findfont 10
scalefont def end errordict/handleerror{systemdict begin $error begin $brkpage
begin newerror{/newerror false store vmstatus pop pop 0 ne{grestoreall}if
showpage initgraphics courier setfont lmargin 720 moveto(ERROR: )prnt
errorname prnt nl(OFFENDING COMMAND: )prnt/command load prnt $error/ostack
known{nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if
systemdict/showpage get exec(%%[ Error: )print errorname =print
(; OffendingCommand: )print/command load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put/currentpacking where
{pop/setpacking where{pop oldpack setpacking}if}if
userdict /Pscript_Win_Driver_Incr 200 dict dup begin put
/FatalErrorIf{{initgraphics findfont exch scalefont setfont counttomark 3 div
cvi{moveto show}repeat showpage quit}{cleartomark}ifelse}bind def
/VM? {vmstatus exch sub exch pop gt { [
(This job requires more memory than is available in this printer.) 100 500
(Try one or more of the following, and then print again:) 100 485
(In the PostScript dialog box, click Optimize For Portability.) 115 470
(In the Device Options dialog box, make sure the Available Printer Memory is accurate.) 115 455
(Reduce the number of fonts in the document.) 115 440
(Print the document in parts.) 115 425
12 /Times-Roman showpage
(%%[ PrinterError: Low Printer VM ]%%) =
true FatalErrorIf}if} bind def
30000  VM?
/|/def load def/,/load load |/~/exch , |/?/ifelse , |/!/pop , |/`/begin , |/^
/index , |/@/dup , |/+/translate , |/$/roll , |/U/userdict , |/M/moveto , |/-
/rlineto , |/&/currentdict , |/:/gsave , |/;/grestore , |/F/false , |/T/true ,
|/N/newpath , |/E/end , |/Ac/arc , |/An/arcn , |/A/ashow , |/D/awidthshow , |
/C/closepath , |/V/div , |/O/eofill , |/L/fill , |/I/lineto , |/-C/rcurveto ,
|/-M/rmoveto , |/+S/scale , |/Ji/setfont , |/Lc/setlinecap , |/Lj/setlinejoin
, |/Lw/setlinewidth , |/S/show , |/LH/showpage , |/K/stroke , |/W/widthshow ,
|/R/rotate , |/b{bind |}bind |/bd{bind |}bind |/xd{~ |}bd/ld{, |}bd/lw/Lw ld
/lc/Lc ld/lj/Lj ld/sg/setgray ld/L2? F/languagelevel where{! languagelevel 2
ge{! T}if}if |/g{@ not{U/DefIf_save save put}if U/DefIf_bool 2 ^ put}b
/DefIf_El{if U/DefIf_bool get not @{U/DefIf_save get restore}if}b/e{DefIf_El !
}b/self & |/reinitialize{[/TextInit/GraphInit/UtilsInit counttomark{@ where{
self eq}{F}?{cvx exec}{!}?}repeat cleartomark}b/initialize{`{/ADO_mxRot ~ |
/TextInitialised? F | reinitialize E}{U/Pscript_Win_Data 200 dict @ ` put
/ADO_mxRot ~ |/TextInitialised? F | reinitialize}?}b/terminate{!{& self eq{
exit}{E}?}loop E}b/suspend/terminate , |/resume{` Pscript_Win_Data `}b/snap{
transform 0.25 sub round 0.25 add ~ 0.25 sub round 0.25 add ~ itransform}b
/dsnap{dtransform round ~ round ~ idtransform}b<04>cvn{}|/setjn{{statusdict
/jobname known{statusdict/jobname 3 -1 $ put}if}stopped cleartomark}b/solid{[]
0 setdash}b/setdsh{0 setdash}b/colspRefresh{}b/rp{4 2 $ M 1 ^ 0 - 0 ~ - neg 0
-}b/rr{1 ^ 0 - 0 ~ - neg 0 - C}b
L2? not g{/rf{N rp L}b/fx{1 1 dtransform @ 0 ge{1 sub 1}{1 add -0.25}? 3 -1 $
@ 0 ge{1 sub 1}{1 add -0.25}? 3 1 $ 4 1 $ idtransform 4 -2 $ idtransform}b/BZ{
4 -2 $ snap + +S fx rf}b/rs{N rp C K}b/rc{N rp clip N}b/sg{setgray}b/sco{
setrgbcolor}b/sgco{{sg}{sco}?}b}e
L2? g{/colspA/DeviceGray |/colspABC/DeviceRGB |/setAorABC{{colspA}{colspABC}?
setcolorspace}b/rf/rectfill , |/fx{1 1 dtransform @ 0 ge{1 sub 0.5}{1 add -0.5
}? 3 -1 $ @ 0 ge{1 sub 0.5}{1 add -0.5}? 3 1 $ 4 1 $ idtransform 4 -2 $
idtransform}b/BZ{4 -2 $ snap + +S fx rf}b/rs/rectstroke , |/rc/rectclip , |/sg
{@ @ setcolor}b/sco{setcolor}b/colspRefresh{colspABC setcolorspace}b/sgco{{sg
}{sco}?}b/UtilsInit{F setglobal}b/definecolorrendering{/ColorRendering
defineresource !}b/findcolorrendering{@/ColorRendering resourcestatus{! !
/ColorRendering findresource T}{! F}?}b/selectcolorrendering{@/ColorRendering
resourcestatus{! !/ColorRendering}{!/DefaultColorRendering/ColorRendering}?
findresource setcolorrendering}b}e
end

[ 1.000 0 0 1.000 0 0 ] false Pscript_Win_Driver_Incr dup /initialize get exec

[{0 
/languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/JobTimeout  4 -1 roll put setuserparams}{statusdict/setjobtimeout get exec}ifelse 
} stopped cleartomark
[{240 
/languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse 
} stopped cleartomark
[{
statusdict /manualfeed false put
} stopped cleartomark
[{

} stopped cleartomark
[{
letter
} stopped cleartomark
1 setlinecap 1 setlinejoin 
/mysetup [ 0.240 0 0 -0.240 19.000 784.000 ] | 

userdict begin /savelevel0 save def end
savelevel0 restore 
[{

} stopped cleartomark
[{

} stopped cleartomark
/mysetup [ 0.240 0 0 -0.240 19.000 784.000 ] | 
userdict begin /savelevel0 save def end
userdict begin /savelevel1 save def end
savelevel1 restore 
userdict begin /pagesave save def end mysetup concat colspRefresh : 1.000 1.000 1.000 sco 0 0 2550 3300 rf ; 

pagesave restore
Pscript_Win_Driver_Incr begin
/SavedCTM null |/CTMsave{/SavedCTM SavedCTM currentmatrix |}b/CTMrestore{
SavedCTM setmatrix}b/mp null |/ADO_mxRot null |/GDIHMatrix null |
/GDIHPatternDict 22 dict | GDIHPatternDict `/PatternType 1 |/PaintType 2 |
/Reps L2?{1}{5}? |/XStep 8 Reps mul |/YStep XStep |/BBox[0 0 XStep YStep]|
/TilingType 1 |/PaintProc{` 1 Lw[]0 setdash PaintData , exec E}b/FGnd null |
/BGnd null |/HS_Horizontal{horiz}b/HS_Vertical{vert}b/HS_FDiagonal{fdiag}b
/HS_BDiagonal{biag}b/HS_Cross{horiz vert}b/HS_DiagCross{fdiag biag}b/MaxXYStep
XStep YStep gt{XStep}{YStep}? |/horiz{Reps{0 4 M XStep 0 - 0 8 +}repeat 0 -8
Reps mul + K}b/vert{Reps{4 0 M 0 YStep - 8 0 +}repeat 0 -8 Reps mul + K}b/biag
{Reps{0 0 M MaxXYStep @ - 0 YStep neg M MaxXYStep @ - 0 8 +}repeat 0 -8 Reps
mul + 0 YStep M 8 8 - K}b/fdiag{Reps{0 0 M MaxXYStep @ neg - 0 YStep M
MaxXYStep @ neg - 0 8 +}repeat 0 -8 Reps mul + MaxXYStep @ M 8 -8 - K}b E
/makehatch{GDIHPatternDict/PaintData 3 -1 $ put CTMsave GDIHMatrix setmatrix
GDIHPatternDict matrix mp CTMrestore ~ U ~ 2 ^ put}b/h0{/h0/HS_Horizontal
makehatch}b/h1{/h1/HS_Vertical makehatch}b/h2{/h2/HS_FDiagonal makehatch}b/h3{
/h3/HS_BDiagonal makehatch}b/h4{/h4/HS_Cross makehatch}b/h5{/h5/HS_DiagCross
makehatch}b/GDIBWPatternDict 17 dict @ `/PatternType 1 |/PaintType L2?{1}{2}?
|/RepsV L2?{1}{6}? |/RepsH L2?{1}{5}? |/BBox[0 0 RepsH 1]|/TilingType 1 |
/XStep 1 |/YStep 1 |/Height 8 RepsV mul |/Width 8 |/mx[Width 0 0 Height neg 0
Height]|/FGnd null |/BGnd null |/SetBGndFGnd L2?{{BGnd null ne{BGnd aload !
sgco BBox aload ! 2 ^ sub ~ 3 ^ sub ~ rf}if FGnd null ne{FGnd aload ! sgco}if}
}{{}}? b/PaintProc{` SetBGndFGnd RepsH{Width Height F mx PaintData imagemask
Width 0 +}repeat E}b E |/GDIBWPatternMx null |/pfprep{save 4 1 $
/PatternOfTheDay 4 1 $ GDIBWPatternDict `/PaintData ~ |/BGnd ~ |/FGnd ~ | E
CTMsave GDIBWPatternMx setmatrix GDIBWPatternDict matrix mp CTMrestore ~ !}b
/hrf null |/prf{pfprep ~ 6 1 $ 5 hrf restore}b/GraphInit{GDIHMatrix null eq{
/SavedCTM matrix | : ADO_mxRot concat 0 0 snap + : 0.48 @ GDIHPatternDict `
YStep mul ~ XStep mul ~ dsnap YStep V ~ XStep V ~ E +S/GDIHMatrix matrix
currentmatrix readonly | ; : 0.24 -0.24 +S GDIBWPatternDict ` Width Height E
dsnap +S/GDIBWPatternMx matrix currentmatrix readonly | ; ;}if}b/cirp{360 0 An
C}b/ellp{CTMsave + +S 0.5 0 M 0 0 0.5 360 0 An C CTMrestore}b/rrp{/rad ~ |/y2
~ |/x2 ~ |/y1 ~ |/x1 ~ | x2 x1 add 2 V y1 M x1 y1 x1 y2 rad arct x1 y2 x2 y2
rad arct x2 y2 x2 y1 rad arct x2 y1 x1 y1 rad arct C}b/RRp{CTMsave + +S/dyS ~
|/dxS ~ | dxS 2 V 0 M 0 0 0 dyS 0.5 arct 0 dyS dxS dyS 0.5 arct dxS dyS dxS 0
0.5 arct dxS 0 0 0 0.5 arct C CTMrestore}b

L2? not g{/arct{arcto ! ! ! !}b/GDIpattfill{@ ` BGnd null ne PaintType 2 eq
and{: BGnd aload ! sgco fEOFill{O}{L}? ; FGnd aload ! U/fGray 2 ^ put{2}{4}?
-1 $}if E @ patterncalc : 4 ^/PaintType get 2 eq{fGray{6 -1 $ sg}{8 -3 $ sco}?
}if fEOFill{eoclip}{clip}? N patternfill ; N}b/hrf{/fGray 1 ^ 6 eq | -4 $ N rp
C/fEOFill F | GDIpattfill}b/hfMain{/fEOFill ~ |/fGray ~ | GDIpattfill}b/hf{T
hfMain}b/hfW{F hfMain}b/hs{currentpoint strokepath M hfW}b/pfMain{/fEOFill ~ |
pfprep GDIpattfill restore N}b/pf{T pfMain}b/pfW{F pfMain}b/ps{currentpoint
strokepath M pfW}b/mpstr 1 string |/mp{~ @ length 12 add dict copy `
/PatternCTM matrix currentmatrix |/PatternMatrix ~ |/PatWidth XStep mpstr
length mul |/PatHeight YStep |/FontType 3 |/Encoding 256 array | 3 string 0 1
255{Encoding ~ @ 3 ^ cvs cvn put}for !/FontMatrix matrix |/FontBBox BBox |
/BuildChar{! @ ` XStep 0 FontBBox aload ! setcachedevice/PaintProc , E : exec
;}b & E ~ @ 3 -1 $ definefont}b/patterncalc{` : PatternCTM setmatrix
PatternMatrix concat BBox aload ! ! ! + pathbbox ; PatHeight V ceiling 4 1 $
PatWidth V ceiling 4 1 $ PatHeight V floor 4 1 $ PatWidth V floor 4 1 $ 2 ^
sub cvi abs ~ 3 ^ sub cvi abs ~ 4 2 $ PatHeight mul ~ PatWidth mul ~ E}b
/patternfill{5 -1 $ @ ` Ji PatternCTM setmatrix PatternMatrix concat 0 2 ^ 2 ^
M 0 1 mpstr length 1 sub{1 ^ mpstr 3 1 $ put}for ! 2 ^{currentpoint 5 ^{mpstr
S}repeat YStep add M}repeat ! ! ! ! E}b}e

L2? g{/mp/makepattern , |/hrf{6 eq setAorABC setpattern rectfill}b/hf{
setAorABC setpattern O}b/hfW{setAorABC setpattern L}b/hs{setAorABC setpattern
K}b/pf{pfprep setpattern O restore N}b/pfW{pfprep setpattern L restore N}b/ps{
pfprep setpattern K restore N}b}e

end reinitialize
userdict begin /pagesave save def end mysetup concat colspRefresh 

1011 689 N M -18 3 - -8 5 - -6 5 - -6 7 - -4 8 - -4 18 - 0 510 - 0 511 - 4 17 - 4 8 - 6 7 - 6 6 - 8 4 - 18 3 - 18 -3 - 8 -4 - 7 -6 - 5 -7 - 4 -8 - 4 -17 - 0 -511 - 0 -510 - -4 -18 - -4 -8 - -5 -7 - -7 -5 - -8 -5 - -18 -3 - C : 0.702 0.702 0.702 sco O ; 
1011 690 N M -18 3 - 1 0 - -8 5 - -6 5 - -6 7 - -4 8 - 0 -1 - -4 18 - 0 510 - 0 511 - 4 17 - 4 8 - 6 7 - 6 6 - 0 -1 - 8 4 - -1 0 - 18 3 - 18 -3 - 8 -4 - 7 -6 - -1 1 - 5 -7 - 4 -8 - 4 -17 - 0 -511 - 0 -510 - -4 -18 - 0 1 - -4 -8 - -5 -7 - 1 0 - -7 -5 - -8 -5 - -18 -3 - 0 -2 - 18 3 - 1 0 - 8 5 - 7 5 - 0 1 - 5 7 - 4 8 - 4 18 - 0 510 - 0 511 - -4 17 - 0 1 - -4 8 - -5 7 - -7 6 - -8 4 - -1 0 - -18 3 - -18 -3 - -8 -4 - -6 -6 - -1 0 - -6 -7 - -4 -8 - 0 -1 - -4 -17 - 0 -511 - 0 -510 - 4 -18 - 4 -8 - 6 -7 - 1 -1 - 6 -5 - 8 -5 - 18 -3 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
1011 690 N M 0 -2 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
1392 960 N M -17 3 - -14 10 - -10 14 - -3 17 - 0 198 - 0 198 - 3 17 - 10 13 - 14 10 - 17 3 - 17 -3 - 14 -10 - 9 -13 - 3 -17 - 0 -198 - 0 -198 - -3 -17 - -9 -14 - -14 -10 - -17 -3 - C : 0.702 0.702 0.702 sco O ; 
204 981 N M -17 3 - -14 10 - -9 14 - -3 17 - 0 198 - 0 198 - 3 17 - 9 14 - 14 9 - 17 3 - 17 -3 - 14 -9 - 10 -14 - 3 -17 - 0 -198 - 0 -198 - -3 -17 - -10 -14 - -14 -10 - -17 -3 - C : 0.702 0.702 0.702 sco O ; 
696 981 N M -17 3 - -13 9 - -10 14 - -3 17 - 0 198 - 0 198 - 3 17 - 10 14 - 13 9 - 17 4 - 18 -4 - 13 -9 - 10 -14 - 3 -17 - 0 -198 - 0 -198 - -3 -17 - -10 -14 - -13 -9 - -18 -3 - C : 0.702 0.702 0.702 sco O ; 
451 860 N M -17 3 - -14 9 - -10 14 - -3 17 - 0 328 - 0 327 - 3 17 - 10 14 - 14 9 - 17 3 - 17 -3 - 14 -9 - 9 -14 - 3 -17 - 0 -327 - 0 -328 - -3 -17 - -9 -14 - -14 -9 - -17 -3 - C : 0.702 0.702 0.702 sco O ; 
451 861 N M -17 3 - 1 0 - -14 9 - -10 14 - 0 -1 - -3 17 - 0 328 - 0 327 - 3 17 - 10 14 - 0 -1 - 14 9 - -1 0 - 17 3 - 17 -3 - 14 -9 - -1 1 - 9 -14 - 3 -17 - 0 -327 - 0 -328 - -3 -17 - 0 1 - -9 -14 - 1 0 - -14 -9 - -17 -3 - 0 -2 - 17 3 - 1 0 - 14 9 - 0 1 - 9 14 - 3 17 - 0 328 - 0 327 - -3 17 - 0 1 - -9 14 - -14 9 - -1 0 - -17 3 - -17 -3 - -14 -9 - -1 0 - -10 -14 - 0 -1 - -3 -17 - 0 -327 - 0 -328 - 3 -17 - 10 -14 - 1 -1 - 14 -9 - 17 -3 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
451 861 N M 0 -2 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
48 1094 N M -15 2 - -11 9 - -9 11 - -2 15 - 0 77 - 0 77 - 2 15 - 9 12 - 11 8 - 15 3 - 15 -3 - 12 -8 - 8 -12 - 3 -15 - 0 -77 - 0 -77 - -3 -15 - -8 -11 - -12 -9 - -15 -2 - C : 0.702 0.702 0.702 sco O ; 
844 1126 N M -14 3 - -12 8 - -8 12 - -3 15 - 0 77 - 0 77 - 3 15 - 8 12 - 12 8 - 14 3 - 15 -3 - 12 -8 - 8 -12 - 3 -15 - 0 -77 - 0 -77 - -3 -15 - -8 -12 - -12 -8 - -15 -3 - C : 0.702 0.702 0.702 sco O ; 
1231 1077 N M -14 3 - -12 8 - -8 12 - -3 14 - 0 77 - 0 77 - 3 15 - 8 12 - 12 8 - 14 3 - 15 -3 - 12 -8 - 8 -12 - 3 -15 - 0 -77 - 0 -77 - -3 -14 - -8 -12 - -12 -8 - -15 -3 - C : 0.702 0.702 0.702 sco O ; 
1535 1102 N M -18 3 - -7 4 - -7 6 - -6 7 - -4 8 - -4 17 - 0 71 - 0 71 - 4 18 - 4 8 - 6 7 - 7 5 - 7 4 - 18 4 - 18 -4 - 8 -4 - 7 -5 - 5 -7 - 5 -8 - 3 -18 - 0 -71 - 0 -71 - -3 -17 - -5 -8 - -5 -7 - -7 -6 - -8 -4 - -18 -3 - C : 0.702 0.702 0.702 sco O ; 
1535 1103 N M -18 3 - 1 0 - -7 4 - -7 6 - -6 7 - -4 8 - 0 -1 - -4 17 - 0 71 - 0 71 - 4 18 - 4 8 - 6 7 - 0 -1 - 7 5 - 7 4 - -1 0 - 18 4 - 18 -4 - 8 -4 - 7 -5 - -1 1 - 5 -7 - 5 -8 - 3 -18 - 0 -71 - 0 -71 - -3 -17 - 0 1 - -5 -8 - -5 -7 - 1 0 - -7 -6 - -8 -4 - -18 -3 - 0 -2 - 18 3 - 1 0 - 8 4 - 7 6 - 0 1 - 5 7 - 5 8 - 3 17 - 0 71 - 0 71 - -3 18 - 0 1 - -5 8 - -5 7 - -7 5 - -8 4 - -1 0 - -18 4 - -18 -4 - -7 -4 - -7 -5 - -1 0 - -6 -7 - -4 -8 - 0 -1 - -4 -18 - 0 -71 - 0 -71 - 4 -17 - 4 -8 - 6 -7 - 1 -1 - 7 -6 - 7 -4 - 18 -3 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
1535 1103 N M 0 -2 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
1704 843 N M -17 4 - -14 9 - -9 14 - -4 17 - 0 327 - 0 327 - 4 17 - 9 14 - 14 10 - 17 3 - 17 -3 - 14 -10 - 9 -14 - 4 -17 - 0 -327 - 0 -327 - -4 -17 - -9 -14 - -14 -9 - -17 -4 - C : 0.702 0.702 0.702 sco O ; 
1704 844 N M -17 4 - 1 0 - -14 9 - -9 14 - 0 -1 - -4 17 - 0 327 - 0 327 - 4 17 - 9 14 - 0 -1 - 14 10 - -1 0 - 17 3 - 17 -3 - 14 -10 - -1 1 - 9 -14 - 4 -17 - 0 -327 - 0 -327 - -4 -17 - 0 1 - -9 -14 - 1 0 - -14 -9 - -17 -4 - 0 -2 - 17 4 - 1 0 - 14 9 - 0 1 - 9 14 - 4 17 - 0 327 - 0 327 - -4 17 - 0 1 - -9 14 - -14 10 - -1 0 - -17 3 - -17 -3 - -14 -10 - -1 0 - -9 -14 - 0 -1 - -4 -17 - 0 -327 - 0 -327 - 4 -17 - 9 -14 - 1 -1 - 14 -9 - 17 -4 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
1704 844 N M 0 -2 - 0 2 - C : 1.000 1.000 1.000 sco L ; 
1921 1102 N M -15 3 - -12 8 - -8 12 - -3 14 - 0 77 - 0 78 - 3 14 - 8 12 - 12 8 - 15 3 - 14 -3 - 12 -8 - 8 -12 - 3 -14 - 0 -78 - 0 -77 - -3 -14 - -8 -12 - -12 -8 - -14 -3 - C : 0.702 0.702 0.702 sco O ; 
2085 973 N M -17 3 - -14 10 - -9 13 - -3 17 - 0 198 - 0 198 - 3 17 - 9 14 - 14 10 - 17 3 - 17 -3 - 14 -10 - 10 -14 - 3 -17 - 0 -198 - 0 -198 - -3 -17 - -10 -13 - -14 -10 - -17 -3 - C : 0.702 0.702 0.702 sco O ; 
2286 393 N M -18 4 - -7 4 - -7 5 - -6 7 - -4 8 - -4 18 - 0 779 - 0 779 - 4 18 - 4 8 - 6 7 - 7 5 - 7 4 - 18 4 - 18 -4 - 8 -4 - 7 -5 - 5 -7 - 4 -8 - 4 -18 - 0 -779 - 0 -779 - -4 -18 - -4 -8 - -5 -7 - -7 -5 - -8 -4 - -18 -4 - C : 0.702 0.702 0.702 sco O ; 
2290 1887 N M -2 5 rr : 0 0 0 sco O ; 
2288 1891 N M 12 -5 - 3 -2 - -1 4 - -11 44 - -1 4 - -1 -4 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 11 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
2277 1887 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2286 1742 N M -2 -1 rr : 0 0 0 sco O ; 
2290 1887 N M -2 1 rr : 0 0 0 sco O ; 
2286 1742 N M -2 0 - 4 145 - 2 0 - -4 -145 - C : 0 0 0 sco L ; 
2306 1949 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2305 1949 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2305 1949 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2286 694 N M -2 6 rr : 0 0 0 sco O ; 
2284 699 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
2273 694 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2286 488 N M -2 -1 rr : 0 0 0 sco O ; 
2286 694 N M -2 1 rr : 0 0 0 sco O ; 
2286 488 N M -2 206 rr : 0 0 0 sco O ; 
1011 1673 N M -2 6 rr : 0 0 0 sco O ; 
1009 1678 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
998 1673 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1011 1551 N M -2 -1 rr : 0 0 0 sco O ; 
1011 1673 N M -2 1 rr : 0 0 0 sco O ; 
1011 1551 N M -2 122 rr : 0 0 0 sco O ; 
1011 865 N M -2 6 rr : 0 0 0 sco O ; 
1009 870 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
998 865 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1011 746 N M -2 -1 rr : 0 0 0 sco O ; 
1011 865 N M -2 1 rr : 0 0 0 sco O ; 
1011 746 N M -2 119 rr : 0 0 0 sco O ; 
454 1449 N M -2 6 rr : 0 0 0 sco O ; 
452 1454 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
440 1449 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
454 1406 N M -2 -1 rr : 0 0 0 sco O ; 
454 1449 N M -2 1 rr : 0 0 0 sco O ; 
454 1406 N M -2 43 rr : 0 0 0 sco O ; 
450 1353 N M -2 6 rr : 0 0 0 sco O ; 
448 1358 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 3 - -1 -3 - -13 -44 - -1 -3 - 2 1 - 1 1 - 13 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
436 1353 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
450 1239 N M -2 -1 rr : 0 0 0 sco O ; 
450 1353 N M -2 1 rr : 0 0 0 sco O ; 
450 1239 N M -2 114 rr : 0 0 0 sco O ; 
454 1149 N M -2 6 rr : 0 0 0 sco O ; 
452 1154 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
440 1149 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
454 1060 N M -2 -1 rr : 0 0 0 sco O ; 
454 1149 N M -2 1 rr : 0 0 0 sco O ; 
454 1060 N M -2 89 rr : 0 0 0 sco O ; 
454 1003 N M -2 6 rr : 0 0 0 sco O ; 
452 1008 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 3 - -1 -3 - -13 -44 - -1 -3 - 2 1 - 1 1 - 13 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
440 1003 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
454 922 N M -2 -1 rr : 0 0 0 sco O ; 
454 1003 N M -2 1 rr : 0 0 0 sco O ; 
454 922 N M -2 81 rr : 0 0 0 sco O ; 
207 1120 N M -2 6 rr : 0 0 0 sco O ; 
205 1125 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
194 1121 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
207 1035 N M -2 -1 rr : 0 0 0 sco O ; 
207 1120 N M -2 1 rr : 0 0 0 sco O ; 
207 1035 N M -2 85 rr : 0 0 0 sco O ; 
207 1325 N M -2 5 rr : 0 0 0 sco O ; 
205 1329 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
194 1325 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
207 1202 N M -2 -1 rr : 0 0 0 sco O ; 
207 1325 N M -2 1 rr : 0 0 0 sco O ; 
207 1202 N M -2 123 rr : 0 0 0 sco O ; 
1061 742 N M 0 -2 - -5 1 - 0 2 - 5 -1 - C : 0 0 0 sco L ; 
1057 741 N M 7 11 - 2 2 - -4 0 - -45 -3 - -4 0 - 4 -2 - 40 -21 - 3 -1 - -1 2 - -1 1 - -40 21 - -1 -2 - 1 0 - 45 3 - -1 2 - 0 -1 - -7 -11 - 2 -1 - C : 0 0 0 sco L ; 
1059 729 N M -2 13 - -2 0 - 0 -1 - 2 -13 - 2 1 - C : 0 0 0 sco L ; 
2278 486 N M 1 -2 rr : 0 0 0 sco O ; 
2263 489 N M -1 -2 rr : 0 0 0 sco O ; 
2278 486 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
2236 495 N M 1 -2 rr : 0 0 0 sco O ; 
2205 501 N M -1 -2 rr : 0 0 0 sco O ; 
2236 495 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2178 507 N M 1 -2 rr : 0 0 0 sco O ; 
2147 513 N M -1 -2 rr : 0 0 0 sco O ; 
2178 507 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2120 519 N M 1 -2 rr : 0 0 0 sco O ; 
2089 525 N M -1 -2 rr : 0 0 0 sco O ; 
2120 519 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2062 531 N M 1 -2 rr : 0 0 0 sco O ; 
2031 538 N M -1 -2 rr : 0 0 0 sco O ; 
2062 531 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
2004 543 N M 1 -2 rr : 0 0 0 sco O ; 
1973 550 N M -1 -2 rr : 0 0 0 sco O ; 
2004 543 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1946 556 N M 1 -2 rr : 0 0 0 sco O ; 
1915 562 N M -1 -2 rr : 0 0 0 sco O ; 
1946 556 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1888 568 N M 1 -2 rr : 0 0 0 sco O ; 
1857 574 N M -1 -2 rr : 0 0 0 sco O ; 
1888 568 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1830 580 N M 1 -2 rr : 0 0 0 sco O ; 
1799 586 N M -1 -2 rr : 0 0 0 sco O ; 
1830 580 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1772 592 N M 1 -2 rr : 0 0 0 sco O ; 
1741 599 N M -1 -2 rr : 0 0 0 sco O ; 
1772 592 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1714 604 N M 1 -2 rr : 0 0 0 sco O ; 
1683 611 N M -1 -2 rr : 0 0 0 sco O ; 
1714 604 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1656 617 N M 1 -2 rr : 0 0 0 sco O ; 
1625 623 N M -1 -2 rr : 0 0 0 sco O ; 
1656 617 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1598 629 N M 1 -2 rr : 0 0 0 sco O ; 
1567 635 N M -1 -2 rr : 0 0 0 sco O ; 
1598 629 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1540 641 N M 1 -2 rr : 0 0 0 sco O ; 
1509 647 N M -1 -2 rr : 0 0 0 sco O ; 
1540 641 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1482 653 N M 1 -2 rr : 0 0 0 sco O ; 
1451 660 N M -1 -2 rr : 0 0 0 sco O ; 
1482 653 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1424 665 N M 1 -2 rr : 0 0 0 sco O ; 
1393 672 N M -1 -2 rr : 0 0 0 sco O ; 
1424 665 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1366 678 N M 1 -2 rr : 0 0 0 sco O ; 
1335 684 N M -1 -2 rr : 0 0 0 sco O ; 
1366 678 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1308 690 N M 1 -2 rr : 0 0 0 sco O ; 
1277 696 N M -1 -2 rr : 0 0 0 sco O ; 
1308 690 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1250 702 N M 1 -2 rr : 0 0 0 sco O ; 
1219 708 N M -1 -2 rr : 0 0 0 sco O ; 
1250 702 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1192 714 N M 1 -2 rr : 0 0 0 sco O ; 
1161 721 N M -1 -2 rr : 0 0 0 sco O ; 
1192 714 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1134 726 N M 1 -2 rr : 0 0 0 sco O ; 
1103 733 N M -1 -2 rr : 0 0 0 sco O ; 
1134 726 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1076 739 N M 1 -2 rr : 0 0 0 sco O ; 
1061 742 N M -1 -2 rr : 0 0 0 sco O ; 
1076 739 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
2230 1942 N M 0 2 - 6 1 - 0 -2 - -6 -1 - C : 0 0 0 sco L ; 
2235 1945 N M -2 -13 - -1 -3 - 3 1 - 40 20 - 3 2 - -3 0 - -45 5 - -3 1 - 1 -2 - 1 -1 - 45 -5 - 1 2 - -1 0 - -40 -20 - 1 -2 - 0 1 - 2 13 - -2 1 - C : 0 0 0 sco L ; 
2228 1956 N M 7 -12 - 2 0 - 0 1 - -7 12 - -2 -1 - C : 0 0 0 sco L ; 
1018 1733 N M -1 2 rr : 0 0 0 sco O ; 
1034 1736 N M 1 2 rr : 0 0 0 sco O ; 
1018 1733 N M 0 2 - 16 3 - 0 -2 - -16 -3 - C : 0 0 0 sco L ; 
1060 1740 N M -1 2 rr : 0 0 0 sco O ; 
1091 1746 N M 1 2 rr : 0 0 0 sco O ; 
1060 1740 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1118 1750 N M -1 2 rr : 0 0 0 sco O ; 
1149 1756 N M 1 2 rr : 0 0 0 sco O ; 
1118 1750 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1176 1760 N M -1 2 rr : 0 0 0 sco O ; 
1207 1766 N M 1 2 rr : 0 0 0 sco O ; 
1176 1760 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1234 1770 N M -1 2 rr : 0 0 0 sco O ; 
1265 1776 N M 1 2 rr : 0 0 0 sco O ; 
1234 1770 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1291 1780 N M -1 2 rr : 0 0 0 sco O ; 
1322 1785 N M 1 2 rr : 0 0 0 sco O ; 
1291 1780 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1349 1790 N M -1 2 rr : 0 0 0 sco O ; 
1380 1795 N M 1 2 rr : 0 0 0 sco O ; 
1349 1790 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1407 1800 N M -1 2 rr : 0 0 0 sco O ; 
1438 1805 N M 1 2 rr : 0 0 0 sco O ; 
1407 1800 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1465 1810 N M -1 2 rr : 0 0 0 sco O ; 
1496 1815 N M 1 2 rr : 0 0 0 sco O ; 
1465 1810 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1522 1820 N M -1 2 rr : 0 0 0 sco O ; 
1553 1825 N M 1 2 rr : 0 0 0 sco O ; 
1522 1820 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1580 1830 N M -1 2 rr : 0 0 0 sco O ; 
1611 1835 N M 1 2 rr : 0 0 0 sco O ; 
1580 1830 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1638 1840 N M -1 2 rr : 0 0 0 sco O ; 
1669 1845 N M 1 2 rr : 0 0 0 sco O ; 
1638 1840 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1695 1850 N M -1 2 rr : 0 0 0 sco O ; 
1726 1855 N M 1 2 rr : 0 0 0 sco O ; 
1695 1850 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1753 1860 N M -1 2 rr : 0 0 0 sco O ; 
1784 1865 N M 1 2 rr : 0 0 0 sco O ; 
1753 1860 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1811 1870 N M -1 2 rr : 0 0 0 sco O ; 
1842 1875 N M 1 2 rr : 0 0 0 sco O ; 
1811 1870 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1869 1880 N M -1 2 rr : 0 0 0 sco O ; 
1900 1885 N M 1 2 rr : 0 0 0 sco O ; 
1869 1880 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1926 1890 N M -1 2 rr : 0 0 0 sco O ; 
1957 1895 N M 1 2 rr : 0 0 0 sco O ; 
1926 1890 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1984 1900 N M -1 2 rr : 0 0 0 sco O ; 
2015 1905 N M 1 2 rr : 0 0 0 sco O ; 
1984 1900 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2042 1910 N M -1 2 rr : 0 0 0 sco O ; 
2073 1915 N M 1 2 rr : 0 0 0 sco O ; 
2042 1910 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2100 1920 N M -1 2 rr : 0 0 0 sco O ; 
2131 1925 N M 1 2 rr : 0 0 0 sco O ; 
2100 1920 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2157 1930 N M -1 2 rr : 0 0 0 sco O ; 
2188 1935 N M 1 2 rr : 0 0 0 sco O ; 
2157 1930 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2215 1940 N M -1 2 rr : 0 0 0 sco O ; 
2230 1942 N M 1 2 rr : 0 0 0 sco O ; 
2215 1940 N M 0 2 - 15 2 - 0 -2 - -15 -2 - C : 0 0 0 sco L ; 
941 1712 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
945 1716 N M 1 -13 - -1 -4 - 3 2 - 36 27 - 3 2 - -3 0 - -45 -4 - -4 0 - 2 -1 - 1 -1 - 45 4 - 1 2 - -1 0 - -36 -27 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
937 1725 N M 8 -10 - 2 0 - 0 1 - -8 10 - -2 -1 - C : 0 0 0 sco L ; 
477 1532 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
491 1538 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
477 1532 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
515 1547 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
543 1558 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
515 1547 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
567 1567 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
594 1578 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
567 1567 N M -1 2 - 27 11 - 1 -2 - -27 -11 - C : 0 0 0 sco O ; 
618 1587 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
646 1598 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
618 1587 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
670 1607 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
697 1618 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
670 1607 N M -1 2 - 27 11 - 1 -2 - -27 -11 - C : 0 0 0 sco O ; 
721 1627 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
749 1638 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
721 1627 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
773 1647 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
801 1658 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
773 1647 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
825 1667 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
852 1677 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
825 1667 N M -1 2 - 27 10 - 1 -2 - -27 -10 - C : 0 0 0 sco O ; 
876 1687 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
904 1697 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
876 1687 N M -1 2 - 28 10 - 1 -2 - -28 -10 - C : 0 0 0 sco O ; 
928 1707 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
942 1712 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
928 1707 N M -1 2 - 14 5 - 1 -2 - -14 -5 - C : 0 0 0 sco L ; 
503 905 N M 0 -2 - -6 2 - 0 2 - 6 -2 - C : 0 0 0 sco L ; 
498 905 N M 8 10 - 2 2 - -4 0 - -44 1 - -4 1 - 4 -3 - 37 -24 - 2 -2 - 0 3 - -1 1 - -37 24 - -1 -2 - 1 0 - 44 -1 - -1 2 - 0 -1 - -8 -10 - 2 -1 - C : 0 0 0 sco L ; 
499 893 N M -1 13 - -2 0 - 0 -1 - 1 -13 - 2 1 - C : 0 0 0 sco L ; 
986 752 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
971 757 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
986 752 N M -1 -2 - -15 5 - 1 2 - 15 -5 - C : 0 0 0 sco L ; 
946 765 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
918 774 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
946 765 N M -1 -2 - -28 9 - 1 2 - 28 -9 - C : 0 0 0 sco O ; 
893 782 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
864 791 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
893 782 N M -1 -2 - -29 9 - 1 2 - 29 -9 - C : 0 0 0 sco O ; 
839 799 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
811 808 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
839 799 N M -1 -2 - -28 9 - 1 2 - 28 -9 - C : 0 0 0 sco O ; 
786 816 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
757 825 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
786 816 N M -1 -2 - -29 9 - 1 2 - 29 -9 - C : 0 0 0 sco O ; 
732 833 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
704 842 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
732 833 N M -1 -2 - -28 9 - 1 2 - 28 -9 - C : 0 0 0 sco O ; 
679 849 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
650 859 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
679 849 N M -1 -2 - -29 10 - 1 2 - 29 -10 - C : 0 0 0 sco O ; 
626 866 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
597 875 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
626 866 N M -1 -2 - -29 9 - 1 2 - 29 -9 - C : 0 0 0 sco O ; 
572 883 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
543 892 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
572 883 N M -1 -2 - -29 9 - 1 2 - 29 -9 - C : 0 0 0 sco O ; 
519 900 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
504 905 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
519 900 N M -1 -2 - -15 5 - 1 2 - 15 -5 - C : 0 0 0 sco L ; 
388 1496 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
390 1500 N M 3 -13 - 0 -3 - 2 3 - 30 33 - 2 2 - -3 -1 - -43 -11 - -3 0 - 2 -2 - 2 0 - 43 11 - -1 2 - -1 0 - -30 -33 - 2 -1 - 0 1 - -3 13 - -2 -1 - C : 0 0 0 sco L ; 
380 1508 N M 10 -9 - 2 2 - -1 0 - -10 9 - -1 -2 - C : 0 0 0 sco L ; 
209 1389 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
223 1397 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
209 1389 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
243 1409 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
266 1424 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
243 1409 N M -1 2 - 23 15 - 1 -2 - -23 -15 - C : 0 0 0 sco O ; 
287 1436 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
310 1450 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
287 1436 N M -1 2 - 23 14 - 1 -2 - -23 -14 - C : 0 0 0 sco O ; 
330 1462 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
354 1476 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
330 1462 N M -1 2 - 24 14 - 1 -2 - -24 -14 - C : 0 0 0 sco O ; 
374 1488 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
388 1496 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
374 1488 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
266 1010 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
261 1010 N M 10 9 - 3 2 - -3 0 - -44 9 - -4 1 - 3 -2 - 33 -31 - 2 -3 - 0 3 - -1 1 - -33 31 - -1 -1 - 1 -1 - 44 -9 - 0 2 - -1 -1 - -10 -9 - 1 -1 - C : 0 0 0 sco L ; 
261 998 N M 1 13 - -2 0 - -1 -13 - 2 0 - C : 0 0 0 sco L ; 
425 927 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
411 935 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
425 927 N M -1 -2 - -14 8 - 1 2 - 14 -8 - C : 0 0 0 sco L ; 
386 947 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
358 962 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
386 947 N M -1 -2 - -28 15 - 1 2 - 28 -15 - C : 0 0 0 sco O ; 
334 975 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
306 990 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
334 975 N M -1 -2 - -28 15 - 1 2 - 28 -15 - C : 0 0 0 sco O ; 
281 1002 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
267 1010 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
281 1002 N M -1 -2 - -14 8 - 1 2 - 14 -8 - C : 0 0 0 sco L ; 
469 1212 N M -1 -8 - -4 -5 - -6 -5 - -7 -1 - -8 1 - -6 5 - -4 5 - -1 8 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
468 1212 N M -1 -8 - 0 1 - -4 -5 - 1 0 - -6 -5 - -7 -1 - -8 1 - 1 0 - -6 5 - -4 5 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -5 - 1 -1 - 6 -5 - 8 -1 - 7 1 - 1 0 - 6 5 - 0 1 - 4 5 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
468 1212 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
469 1062 N M -1 -8 - -4 -5 - -6 -5 - -7 -1 - -8 1 - -6 5 - -4 5 - -1 8 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
468 1062 N M -1 -8 - 0 1 - -4 -5 - 1 0 - -6 -5 - -7 -1 - -8 1 - 1 0 - -6 5 - -4 5 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -5 - 1 -1 - 6 -5 - 8 -1 - 7 1 - 1 0 - 6 5 - 0 1 - 4 5 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
468 1062 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
469 1408 N M -1 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
468 1408 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
468 1408 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
98 1110 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
92 1111 N M 11 8 - 3 2 - -3 0 - -43 13 - -3 1 - 2 -2 - 29 -34 - 2 -3 - 0 2 - 0 2 - -29 34 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -11 -8 - 1 -2 - C : 0 0 0 sco L ; 
90 1098 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
187 1053 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
173 1061 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
187 1053 N M -1 -2 - -14 8 - 1 2 - 14 -8 - C : 0 0 0 sco L ; 
154 1074 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
131 1089 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
154 1074 N M -1 -2 - -23 15 - 1 2 - 23 -15 - C : 0 0 0 sco O ; 
111 1102 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
98 1110 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
111 1102 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
144 1343 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
146 1347 N M 4 -13 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 13 - -2 -1 - C : 0 0 0 sco L ; 
135 1353 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
45 1268 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
57 1277 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
45 1268 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
81 1295 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
108 1315 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
81 1295 N M -1 2 - 27 20 - 1 -2 - -27 -20 - C : 0 0 0 sco O ; 
132 1333 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
144 1343 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
132 1333 N M -1 2 - 12 10 - 1 -2 - -12 -10 - C : 0 0 0 sco L ; 
50 1200 N M -4 6 rr : 0 0 0 sco O ; 
47 1204 N M 12 -4 - 4 -1 - -1 4 - -12 42 - -2 7 - -2 -7 - -12 -42 - -1 -4 - 3 1 - 2 2 - 12 42 - -4 1 - 0 -1 - 12 -42 - 4 1 - -2 1 - -12 4 - -1 -4 - C : 0 0 0 sco L ; 
36 1200 N M 12 4 - 0 4 - -1 0 - -12 -4 - 1 -4 - C : 0 0 0 sco L ; 
48 1139 N M 0 50 - 0 11 - 0 -61 - C : 0.502 0.502 0.502 sco O ; 
50 1139 N M -4 -2 rr : 0 0 0 sco O ; 
50 1139 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
50 1200 N M -4 2 rr : 0 0 0 sco O ; 
50 1189 N M -4 11 rr : 0 0 0 sco O ; 
223 1187 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
222 1187 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
222 1187 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
223 1383 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
222 1383 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
222 1383 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
65 1254 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
64 1255 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
64 1254 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
65 1146 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
64 1146 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
64 1146 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
223 1037 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
222 1037 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
222 1037 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
469 920 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
468 920 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
468 920 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
469 1520 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
468 1520 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
468 1520 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1027 757 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1026 758 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1026 757 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1027 1732 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1026 1733 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1026 1732 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2302 474 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2301 474 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2301 474 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; : 2098 213 293 130 rc pagesave restore
Pscript_Win_Driver_Incr begin
/bullets{{/bullet}repeat}b/ANSIEncoding[/grave/acute/circumflex/tilde/macron
/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi 18
bullets StandardEncoding 32 95 getinterval aload ! 3 bullets/quotesinglbase
/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron
/guilsinglleft/OE 4 bullets/quoteleft/quoteright/quotedblleft/quotedblright
/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe 2 bullets
/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered
/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]| ANSIEncoding @ 39/quotesingle put 96/grave
put/ANSIEncodingOld ANSIEncoding 256 array copy | ANSIEncodingOld @[138 153
154 169 172 174 177 178 179 181 185 188 189 190 208 215 221 222 240 247 253
254]{/bullet put @}forall 166/bar put 176/ring put

/TextInit{TextInitialised? not{/Pscript_Windows_Font & |/TextInitialised? T |
/fM[1 0 0 -1 0 0]|/mFM matrix |/iMat[1 0 0.212557 neg 1 0 0]|}if}b/xUP null |
/yUP null |/uW null |/xSP null |/ySP null |/sW null |/copyfont{1 ^ length add
dict `{1 ^/FID ne{|}{! !}?}forall & E}b/rF{3 copyfont @ `/Encoding
ANSIEncoding &/CharStrings known{CharStrings/Eth known not{! ANSIEncodingOld}
if}if | E}b/mF{findfont ~{@/Encoding get @ StandardEncoding eq{! T}{{
ISOLatin1Encoding}stopped{! F}{eq}?{T}{@ ` T 32 1 127{Encoding 1 ^ get
StandardEncoding 3 -1 $ get eq and}for E}?}?}{F}?{rF}{3 copyfont}? `
/OrigFontType ~ |/OrigFontName ~ | & E 2 ^ ~ definefont fM 5 4 -1 $ put fM 4 0
put fM makefont Pscript_Windows_Font 3 1 $ put}b/xF{scalefont
Pscript_Windows_Font 3 1 $ put}b/xMF{mFM astore makefont Pscript_Windows_Font
3 1 $ put}b/xF2/scalefont , |/xMF2{mFM astore makefont}b/sLT{: Lw -M
currentpoint snap M 0 - 0 Lc K ;}b/sSU{N/uW ~ |/yUP ~ |/xUP ~ |}b/sU{xUP yUP
uW sLT}b/sST{N/sW ~ |/ySP ~ |/xSP ~ |}b/sT{xSP ySP sW sLT}b/sR{: + R 0 0 M}b
/sRxy{: matrix astore concat 0 0 M}b/eR/; , |

end reinitialize
userdict begin /pagesave save def end mysetup concat colspRefresh 
: 0 0 0 sco 1 Lc 1 Lj solid 2098 213 293 130 rc 0 0 0 sco %%IncludeFont: Helvetica
(F0) cvn
0.897 
 (Helvetica) cvn /Type1 
T 
(Helvetica) cvn
mF 
(F0_116) cvn
F0
116 
xF 
F0_116
Ji 
2248 213 M 
-0.248 0 (t)A 
; : 2160 262 231 104 rc 0 0 0 sco (F0_93) cvn
F0
93 
xF 
F0_93
Ji 
2280 262 M 
0.292 0 (0)A 
; : 1510 659 450 130 rc 0 0 0 sco F0_116
Ji 
1660 659 M 
-0.248 0 (t)A 
; : 1572 708 360 104 rc 0 0 0 sco F0_93
Ji 
1692 708 M 
0.292 0 (2)A 
; : 836 521 450 130 rc 0 0 0 sco F0_116
Ji 
986 521 M 
-0.248 0 (t)A 
; : 899 570 360 104 rc 0 0 0 sco F0_93
Ji 
1019 570 M 
0.292 0 (1)A 
; : 1363 953 450 130 rc 0 0 0 sco F0_116
Ji 
1513 953 M 
-0.248 0 (t)A 
; : 1426 1003 360 104 rc 0 0 0 sco F0_93
Ji 
1546 1003 M 
0.292 0 (4)A 
; 
1016 1453 N M -2 6 rr : 0 0 0 sco O ; 
1014 1458 N M 13 -5 - 3 -1 - -1 3 - -13 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 13 -44 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
1003 1453 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1016 1410 N M -2 -1 rr : 0 0 0 sco O ; 
1016 1453 N M -2 1 rr : 0 0 0 sco O ; 
1016 1410 N M -2 43 rr : 0 0 0 sco O ; 
1012 1357 N M -2 6 rr : 0 0 0 sco O ; 
1010 1362 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
999 1358 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1012 1243 N M -2 -1 rr : 0 0 0 sco O ; 
1012 1357 N M -2 1 rr : 0 0 0 sco O ; 
1012 1243 N M -2 114 rr : 0 0 0 sco O ; 
1016 1153 N M -2 6 rr : 0 0 0 sco O ; 
1014 1158 N M 13 -5 - 3 -1 - -1 3 - -13 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 13 -44 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
1003 1153 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1016 1064 N M -2 -1 rr : 0 0 0 sco O ; 
1016 1153 N M -2 1 rr : 0 0 0 sco O ; 
1016 1064 N M -2 89 rr : 0 0 0 sco O ; 
1016 1007 N M -2 6 rr : 0 0 0 sco O ; 
1014 1012 N M 13 -5 - 3 -1 - -1 3 - -13 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 13 -44 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
1003 1007 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1016 926 N M -2 -1 rr : 0 0 0 sco O ; 
1016 1007 N M -2 1 rr : 0 0 0 sco O ; 
1016 926 N M -2 81 rr : 0 0 0 sco O ; 
700 1132 N M -2 6 rr : 0 0 0 sco O ; 
698 1137 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 3 - -1 -3 - -13 -44 - -1 -3 - 2 1 - 1 1 - 13 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
686 1132 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
700 1047 N M -2 -1 rr : 0 0 0 sco O ; 
700 1132 N M -2 1 rr : 0 0 0 sco O ; 
700 1047 N M -2 85 rr : 0 0 0 sco O ; 
700 1337 N M -2 5 rr : 0 0 0 sco O ; 
698 1341 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
686 1337 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
700 1214 N M -2 -1 rr : 0 0 0 sco O ; 
700 1337 N M -2 1 rr : 0 0 0 sco O ; 
700 1214 N M -2 123 rr : 0 0 0 sco O ; 
946 1507 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
950 1511 N M 1 -13 - 0 -4 - 2 2 - 35 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
941 1520 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
708 1409 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
722 1415 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
708 1409 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
751 1426 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
783 1440 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
751 1426 N M -1 2 - 32 14 - 1 -2 - -32 -14 - C : 0 0 0 sco O ; 
811 1451 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
844 1465 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
811 1451 N M -1 2 - 33 14 - 1 -2 - -33 -14 - C : 0 0 0 sco O ; 
872 1476 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
904 1490 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
872 1476 N M -1 2 - 32 14 - 1 -2 - -32 -14 - C : 0 0 0 sco O ; 
932 1501 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
947 1507 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
932 1501 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
764 1018 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
760 1018 N M 9 10 - 2 2 - -4 0 - -45 4 - -4 1 - 4 -3 - 36 -27 - 2 -2 - 0 3 - -1 1 - -36 27 - -1 -2 - 1 0 - 45 -4 - -1 2 - 0 -1 - -9 -10 - 2 -1 - C : 0 0 0 sco L ; 
760 1006 N M 0 13 - -2 0 - 0 -1 - 0 -13 - 2 1 - C : 0 0 0 sco L ; 
987 932 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
973 937 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
987 932 N M -1 -2 - -14 5 - 1 2 - 14 -5 - C : 0 0 0 sco L ; 
947 947 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
917 959 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
947 947 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
891 969 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
861 981 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
891 969 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
835 991 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
806 1002 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
835 991 N M -1 -2 - -29 11 - 1 2 - 29 -11 - C : 0 0 0 sco O ; 
780 1013 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
765 1018 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
780 1013 N M -1 -2 - -15 5 - 1 2 - 15 -5 - C : 0 0 0 sco L ; 
897 1154 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
892 1155 N M 10 7 - 4 1 - -4 1 - -42 15 - -3 1 - 2 -2 - 28 -35 - 1 -3 - 1 2 - 0 2 - -28 35 - -2 -1 - 0 -1 - 42 -15 - 1 2 - -1 0 - -10 -7 - 1 -2 - C : 0 0 0 sco L ; 
889 1142 N M 4 13 - -2 2 - 0 -1 - -4 -13 - 2 -1 - C : 0 0 0 sco L ; 
1016 1069 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1004 1078 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1016 1069 N M -1 -2 - -12 9 - 1 2 - 12 -9 - C : 0 0 0 sco L ; 
974 1099 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
940 1124 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
974 1099 N M -1 -2 - -34 25 - 1 2 - 34 -25 - C : 0 0 0 sco O ; 
910 1145 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
897 1154 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
910 1145 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
978 1385 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
982 1389 N M 2 -13 - 0 -3 - 2 3 - 31 32 - 3 2 - -4 -1 - -44 -11 - -3 0 - 2 -1 - 1 -1 - 44 11 - 0 2 - -31 -32 - 1 -1 - -2 13 - -2 0 - C : 0 0 0 sco L ; 
971 1397 N M 11 -8 - 2 0 - -1 1 - -11 8 - -1 -1 - C : 0 0 0 sco L ; 
854 1313 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
867 1321 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
854 1313 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
898 1338 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
934 1359 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
898 1338 N M -1 2 - 36 21 - 1 -2 - -36 -21 - C : 0 0 0 sco O ; 
965 1377 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
979 1385 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
965 1377 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
842 1233 N M -4 7 rr : 0 0 0 sco O ; 
839 1238 N M 15 -5 - 4 0 - -1 3 - -15 50 - -2 7 - -2 -7 - -14 -50 - -1 -4 - 3 1 - 2 2 - 14 50 - -4 1 - 0 -1 - 15 -50 - 4 1 - -2 1 - -15 5 - -1 -4 - C : 0 0 0 sco L ; 
826 1233 N M 14 5 - 0 4 - -1 0 - -14 -5 - 1 -4 - C : 0 0 0 sco L ; 
842 1181 N M -4 -2 rr : 0 0 0 sco O ; 
842 1233 N M -4 2 rr : 0 0 0 sco O ; 
842 1181 N M -4 52 rr : 0 0 0 sco O ; 
1032 1216 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1031 1217 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1031 1216 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1032 1066 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1031 1067 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1031 1066 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1032 1412 N M -2 -8 - -4 -5 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 5 - -2 8 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1031 1412 N M -2 -8 - 0 1 - -4 -5 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 5 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -5 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 5 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1031 1412 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
861 1295 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
860 1295 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
860 1295 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
861 1187 N M -1 -8 - -4 -5 - -6 -5 - -8 -1 - -7 1 - -6 5 - -4 5 - -1 8 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
860 1187 N M -1 -8 - 0 1 - -4 -5 - 1 0 - -6 -5 - -8 -1 - -7 1 - 1 0 - -6 5 - -4 5 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -5 - 1 -1 - 6 -5 - 7 -1 - 8 1 - 1 0 - 6 5 - 0 1 - 4 5 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
860 1187 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
715 1199 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
714 1199 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
714 1199 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
715 1395 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
714 1395 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
714 1395 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
715 1049 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
714 1049 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
714 1049 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1032 924 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1031 925 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1031 924 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1032 1524 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1031 1525 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1031 1524 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
2290 1678 N M -2 5 rr : 0 0 0 sco O ; 
2288 1682 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2277 1678 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2290 1555 N M -2 -1 rr : 0 0 0 sco O ; 
2290 1678 N M -2 1 rr : 0 0 0 sco O ; 
2290 1555 N M -2 123 rr : 0 0 0 sco O ; 
2290 869 N M -2 6 rr : 0 0 0 sco O ; 
2288 874 N M 13 -5 - 3 -1 - -1 3 - -13 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 13 -44 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
2277 869 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2290 751 N M -2 -1 rr : 0 0 0 sco O ; 
2290 869 N M -2 1 rr : 0 0 0 sco O ; 
2290 751 N M -2 118 rr : 0 0 0 sco O ; 
1711 1429 N M -2 5 rr : 0 0 0 sco O ; 
1709 1433 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1698 1429 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1711 1385 N M -2 -1 rr : 0 0 0 sco O ; 
1711 1429 N M -2 1 rr : 0 0 0 sco O ; 
1711 1385 N M -2 44 rr : 0 0 0 sco O ; 
1707 1333 N M -2 5 rr : 0 0 0 sco O ; 
1705 1337 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1694 1333 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1707 1218 N M -2 -1 rr : 0 0 0 sco O ; 
1707 1333 N M -2 1 rr : 0 0 0 sco O ; 
1707 1218 N M -2 115 rr : 0 0 0 sco O ; 
1711 1129 N M -2 5 rr : 0 0 0 sco O ; 
1709 1133 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1698 1129 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1711 1039 N M -2 -1 rr : 0 0 0 sco O ; 
1711 1129 N M -2 1 rr : 0 0 0 sco O ; 
1711 1039 N M -2 90 rr : 0 0 0 sco O ; 
1711 983 N M -2 5 rr : 0 0 0 sco O ; 
1709 987 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1698 983 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1711 902 N M -2 -1 rr : 0 0 0 sco O ; 
1711 983 N M -2 1 rr : 0 0 0 sco O ; 
1711 902 N M -2 81 rr : 0 0 0 sco O ; 
1395 1108 N M -2 5 rr : 0 0 0 sco O ; 
1393 1112 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1381 1108 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
1395 1022 N M -2 -1 rr : 0 0 0 sco O ; 
1395 1108 N M -2 1 rr : 0 0 0 sco O ; 
1395 1022 N M -2 86 rr : 0 0 0 sco O ; 
1395 1312 N M -2 5 rr : 0 0 0 sco O ; 
1393 1316 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1381 1312 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
1395 1189 N M -2 -1 rr : 0 0 0 sco O ; 
1395 1312 N M -2 1 rr : 0 0 0 sco O ; 
1395 1189 N M -2 123 rr : 0 0 0 sco O ; 
2221 1715 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
2225 1719 N M 1 -13 - -1 -4 - 3 2 - 35 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
2216 1728 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
1715 1497 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1729 1503 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1715 1497 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1756 1515 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1786 1528 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1756 1515 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1812 1539 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1842 1552 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1812 1539 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1869 1563 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1899 1576 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1869 1563 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1925 1587 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1955 1600 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1925 1587 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1982 1612 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2012 1625 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1982 1612 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2038 1636 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2068 1649 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2038 1636 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2095 1660 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2125 1673 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2095 1660 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2151 1684 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2182 1697 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2151 1684 N M -1 2 - 31 13 - 1 -2 - -31 -13 - C : 0 0 0 sco O ; 
2208 1709 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2222 1715 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2208 1709 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1765 886 N M 0 -2 - -6 2 - 0 2 - 6 -2 - C : 0 0 0 sco L ; 
1760 886 N M 8 11 - 1 2 - -3 0 - -45 -2 - -3 0 - 3 -2 - 39 -23 - 2 -1 - 0 2 - -1 1 - -39 23 - -1 -2 - 1 0 - 45 2 - -1 2 - 0 -1 - -8 -11 - 2 -1 - C : 0 0 0 sco L ; 
1762 873 N M -2 14 - -2 0 - 0 -1 - 2 -14 - 2 1 - C : 0 0 0 sco L ; 
2265 764 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2250 768 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2265 764 N M -1 -2 - -15 4 - 1 2 - 15 -4 - C : 0 0 0 sco L ; 
2223 774 N M 1 -2 rr : 0 0 0 sco O ; 
2194 781 N M -1 -2 rr : 0 0 0 sco O ; 
2223 774 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
2168 788 N M 1 -2 rr : 0 0 0 sco O ; 
2138 795 N M -1 -2 rr : 0 0 0 sco O ; 
2168 788 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2113 801 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2084 809 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2113 801 N M -1 -2 - -29 8 - 1 2 - 29 -8 - C : 0 0 0 sco O ; 
2057 815 N M 1 -2 rr : 0 0 0 sco O ; 
2027 822 N M -1 -2 rr : 0 0 0 sco O ; 
2057 815 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2003 828 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1973 836 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2003 828 N M -1 -2 - -30 8 - 1 2 - 30 -8 - C : 0 0 0 sco O ; 
1946 842 N M 1 -2 rr : 0 0 0 sco O ; 
1916 849 N M -1 -2 rr : 0 0 0 sco O ; 
1946 842 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
1892 855 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1862 863 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1892 855 N M -1 -2 - -30 8 - 1 2 - 30 -8 - C : 0 0 0 sco O ; 
1835 869 N M 1 -2 rr : 0 0 0 sco O ; 
1806 876 N M -1 -2 rr : 0 0 0 sco O ; 
1835 869 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
1780 883 N M 1 -2 rr : 0 0 0 sco O ; 
1765 886 N M -1 -2 rr : 0 0 0 sco O ; 
1780 883 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
1641 1482 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
1645 1486 N M 1 -13 - 0 -4 - 2 2 - 35 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
1636 1495 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
1403 1384 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1417 1390 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1403 1384 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1446 1401 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1478 1415 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1446 1401 N M -1 2 - 32 14 - 1 -2 - -32 -14 - C : 0 0 0 sco O ; 
1506 1426 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1539 1440 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1506 1426 N M -1 2 - 33 14 - 1 -2 - -33 -14 - C : 0 0 0 sco O ; 
1567 1451 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1599 1465 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1567 1451 N M -1 2 - 32 14 - 1 -2 - -32 -14 - C : 0 0 0 sco O ; 
1627 1476 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1642 1482 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1627 1476 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
1459 993 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
1455 993 N M 9 10 - 3 2 - -5 0 - -45 5 - -3 0 - 3 -2 - 36 -28 - 2 -2 - 0 3 - -1 1 - -36 28 - -1 -2 - 1 0 - 45 -5 - -1 2 - 0 -1 - -9 -10 - 2 -1 - C : 0 0 0 sco L ; 
1455 981 N M 0 13 - -2 0 - 0 -1 - 0 -13 - 2 1 - C : 0 0 0 sco L ; 
1682 907 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1668 912 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1682 907 N M -1 -2 - -14 5 - 1 2 - 14 -5 - C : 0 0 0 sco L ; 
1642 923 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1612 934 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1642 923 N M -1 -2 - -30 11 - 1 2 - 30 -11 - C : 0 0 0 sco O ; 
1586 944 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1556 956 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1586 944 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
1530 966 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1501 978 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1530 966 N M -1 -2 - -29 12 - 1 2 - 29 -12 - C : 0 0 0 sco O ; 
1475 988 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1460 993 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1475 988 N M -1 -2 - -15 5 - 1 2 - 15 -5 - C : 0 0 0 sco L ; 
1592 1129 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
1587 1130 N M 11 8 - 3 1 - -3 1 - -43 15 - -3 1 - 2 -2 - 28 -36 - 1 -3 - 1 2 - 0 2 - -28 36 - -2 -1 - 0 -1 - 43 -15 - 1 2 - -1 0 - -11 -8 - 1 -2 - C : 0 0 0 sco L ; 
1584 1117 N M 4 13 - -2 2 - 0 -1 - -4 -13 - 2 -1 - C : 0 0 0 sco L ; 
1711 1044 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1699 1053 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1711 1044 N M -1 -2 - -12 9 - 1 2 - 12 -9 - C : 0 0 0 sco L ; 
1669 1074 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1635 1099 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1669 1074 N M -1 -2 - -34 25 - 1 2 - 34 -25 - C : 0 0 0 sco O ; 
1605 1120 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1592 1129 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1605 1120 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1673 1360 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
1677 1364 N M 2 -13 - 0 -3 - 2 3 - 31 32 - 3 2 - -4 -1 - -43 -11 - -3 0 - 2 -1 - 1 -1 - 43 11 - 0 2 - -31 -32 - 1 -1 - -2 13 - -2 0 - C : 0 0 0 sco L ; 
1667 1372 N M 10 -8 - 2 0 - -1 1 - -10 8 - -1 -1 - C : 0 0 0 sco L ; 
1549 1288 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1562 1296 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1549 1288 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
1593 1314 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1629 1334 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1593 1314 N M -1 2 - 36 20 - 1 -2 - -36 -20 - C : 0 0 0 sco O ; 
1660 1352 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1674 1360 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1660 1352 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
1537 1208 N M -4 8 rr : 0 0 0 sco O ; 
1534 1214 N M 15 -6 - 4 0 - -1 3 - -15 51 - -2 7 - -2 -7 - -14 -51 - -1 -5 - 4 2 - 1 2 - 14 51 - -4 1 - 0 -1 - 15 -51 - 4 1 - -2 1 - -15 6 - -1 -4 - C : 0 0 0 sco L ; 
1522 1208 N M 14 6 - -1 4 - -1 0 - -14 -6 - 2 -4 - C : 0 0 0 sco L ; 
1537 1156 N M -4 -2 rr : 0 0 0 sco O ; 
1537 1208 N M -4 2 rr : 0 0 0 sco O ; 
1537 1156 N M -4 52 rr : 0 0 0 sco O ; 
1727 1191 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1726 1191 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1726 1191 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1727 1041 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1726 1041 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1726 1041 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1727 1387 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1726 1387 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1726 1387 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1556 1270 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
1555 1270 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1555 1270 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1556 1162 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1555 1162 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1555 1162 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1285 1097 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
1279 1098 N M 11 8 - 3 2 - -3 0 - -43 13 - -4 2 - 3 -3 - 29 -33 - 2 -3 - 0 2 - 0 2 - -29 33 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -11 -8 - 1 -2 - C : 0 0 0 sco L ; 
1277 1086 N M 3 12 - -2 2 - 0 -1 - -3 -12 - 2 -1 - C : 0 0 0 sco L ; 
1374 1040 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1361 1049 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1374 1040 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1341 1061 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1318 1076 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1341 1061 N M -1 -2 - -23 15 - 1 2 - 23 -15 - C : 0 0 0 sco O ; 
1298 1089 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1285 1097 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1298 1089 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
1331 1330 N M -2 2 - 5 3 - 2 -2 - -5 -3 - C : 0 0 0 sco L ; 
1334 1334 N M 4 -12 - 1 -3 - 1 3 - 27 36 - 3 3 - -4 -2 - -42 -17 - -3 -1 - 2 -1 - 2 0 - 42 17 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 12 - -2 -1 - C : 0 0 0 sco L ; 
1323 1340 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
1232 1255 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1245 1264 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1232 1255 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
1268 1282 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1295 1303 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1268 1282 N M -1 2 - 27 21 - 1 -2 - -27 -21 - C : 0 0 0 sco O ; 
1319 1320 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1331 1330 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1319 1320 N M -1 2 - 12 10 - 1 -2 - -12 -10 - C : 0 0 0 sco L ; 
1237 1187 N M -4 7 rr : 0 0 0 sco O ; 
1234 1192 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -12 -43 - -1 -5 - 4 2 - 1 2 - 12 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
1224 1187 N M 12 5 - 0 4 - -1 0 - -1 0 - -12 -5 - 2 -4 - C : 0 0 0 sco L ; 
1235 1127 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
1237 1127 N M -4 -2 rr : 0 0 0 sco O ; 
1237 1127 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
1237 1187 N M -4 2 rr : 0 0 0 sco O ; 
1237 1177 N M -4 10 rr : 0 0 0 sco O ; 
1410 1175 N M -1 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1409 1175 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1409 1175 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1410 1366 N M -1 -8 - -4 -8 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 8 - -1 8 - 1 9 - 4 7 - 6 5 - 8 2 - 7 -2 - 6 -5 - 4 -7 - 1 -9 - C : 0 0 0 sco O ; 
1409 1366 N M -1 -8 - 0 1 - -4 -8 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 8 - 0 -1 - -1 8 - 1 9 - 4 7 - 0 -1 - 6 5 - -1 0 - 8 2 - 7 -2 - 6 -5 - -1 1 - 4 -7 - 1 -9 - 2 0 - -1 9 - 0 1 - -4 7 - -6 5 - -7 2 - -1 0 - -8 -2 - -6 -5 - -1 0 - -4 -7 - 0 -1 - -1 -9 - 1 -8 - 4 -8 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 8 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1409 1366 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1252 1241 N M -1 -7 - -5 -6 - -5 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 5 -4 - 5 -6 - 1 -7 - C : 0 0 0 sco O ; 
1251 1241 N M -1 -7 - 0 1 - -5 -6 - 1 0 - -5 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 5 -4 - -1 1 - 5 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -5 6 - -5 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 5 4 - 0 1 - 5 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1251 1241 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1252 1133 N M -1 -7 - -5 -6 - -5 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 5 -4 - 5 -6 - 1 -7 - C : 0 0 0 sco O ; 
1251 1133 N M -1 -7 - 0 1 - -5 -6 - 1 0 - -5 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 5 -4 - -1 1 - 5 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -5 6 - -5 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 5 4 - 0 1 - 5 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1251 1133 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1410 1025 N M -1 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1409 1025 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1409 1025 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1727 900 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1726 900 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1726 900 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1727 1500 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1726 1500 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1726 1500 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2306 761 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2305 762 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2305 761 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2306 1736 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2305 1737 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2305 1736 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2295 1457 N M -2 6 rr : 0 0 0 sco O ; 
2293 1462 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2282 1458 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2295 1414 N M -2 -1 rr : 0 0 0 sco O ; 
2295 1457 N M -2 1 rr : 0 0 0 sco O ; 
2295 1414 N M -2 43 rr : 0 0 0 sco O ; 
2291 1362 N M -2 5 rr : 0 0 0 sco O ; 
2289 1366 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2278 1362 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2291 1247 N M -2 -1 rr : 0 0 0 sco O ; 
2291 1362 N M -2 1 rr : 0 0 0 sco O ; 
2291 1247 N M -2 115 rr : 0 0 0 sco O ; 
2295 1157 N M -2 6 rr : 0 0 0 sco O ; 
2293 1162 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2282 1158 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2295 1068 N M -2 -1 rr : 0 0 0 sco O ; 
2295 1157 N M -2 1 rr : 0 0 0 sco O ; 
2295 1068 N M -2 89 rr : 0 0 0 sco O ; 
2295 1012 N M -2 5 rr : 0 0 0 sco O ; 
2293 1016 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2282 1012 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2295 931 N M -2 -1 rr : 0 0 0 sco O ; 
2295 1012 N M -2 1 rr : 0 0 0 sco O ; 
2295 931 N M -2 81 rr : 0 0 0 sco O ; 
2084 1129 N M -2 5 rr : 0 0 0 sco O ; 
2082 1133 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2071 1129 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2084 1044 N M -2 -1 rr : 0 0 0 sco O ; 
2084 1129 N M -2 1 rr : 0 0 0 sco O ; 
2084 1044 N M -2 85 rr : 0 0 0 sco O ; 
2233 1499 N M -2 2 - 4 4 - 2 -2 - -4 -4 - C : 0 0 0 sco L ; 
2235 1504 N M 5 -13 - 1 -3 - 1 3 - 26 37 - 2 3 - -3 -2 - -42 -17 - -3 -1 - 2 -1 - 2 0 - 42 17 - -1 2 - -1 0 - -26 -37 - 2 -1 - 0 1 - -5 13 - -2 -1 - C : 0 0 0 sco L ; 
2224 1510 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
2113 1404 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2126 1413 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2113 1404 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
2144 1428 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2164 1444 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2144 1428 N M -1 2 - 20 16 - 1 -2 - -20 -16 - C : 0 0 0 sco O ; 
2182 1459 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2203 1475 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2182 1459 N M -1 2 - 21 16 - 1 -2 - -21 -16 - C : 0 0 0 sco O ; 
2221 1490 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2233 1499 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2221 1490 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
2143 1013 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
2137 1014 N M 10 8 - 3 2 - -3 0 - -43 12 - -4 2 - 3 -3 - 30 -33 - 2 -3 - 0 2 - 0 2 - -30 33 - -2 -1 - 0 -1 - 43 -12 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
2135 1001 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
2266 936 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2253 944 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2266 936 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
2222 963 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2187 985 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2222 963 N M -1 -2 - -35 22 - 1 2 - 35 -22 - C : 0 0 0 sco O ; 
2156 1005 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2143 1013 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2156 1005 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
2083 1340 N M -4 7 rr : 0 0 0 sco O ; 
2080 1345 N M 14 -5 - 4 -1 - -1 4 - -14 50 - -2 7 - -2 -7 - -15 -50 - -1 -4 - 3 1 - 2 2 - 15 50 - -4 1 - 0 -1 - 14 -50 - 4 1 - -2 1 - -14 5 - -1 -4 - C : 0 0 0 sco L ; 
2066 1340 N M 15 5 - 0 4 - -1 0 - -15 -5 - 1 -4 - C : 0 0 0 sco L ; 
2083 1288 N M -4 -2 rr : 0 0 0 sco O ; 
2083 1340 N M -4 2 rr : 0 0 0 sco O ; 
2083 1288 N M -4 52 rr : 0 0 0 sco O ; 
2311 1220 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2310 1220 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2310 1220 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2311 1070 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2310 1070 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2310 1070 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2311 1416 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2310 1416 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2310 1416 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2102 1294 N M -2 -8 - -4 -5 - -6 -4 - -7 -2 - -8 2 - -5 4 - -5 5 - -1 8 - 1 7 - 5 6 - 5 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2101 1294 N M -2 -8 - 0 1 - -4 -5 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -5 4 - -5 5 - 0 -1 - -1 8 - 1 7 - 5 6 - 0 -1 - 5 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -5 -4 - -1 0 - -5 -6 - 0 -1 - -1 -7 - 1 -8 - 1 0 - 5 -5 - 0 -1 - 5 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 5 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2101 1294 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1975 1118 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
1969 1119 N M 10 8 - 3 2 - -3 0 - -43 13 - -4 2 - 3 -3 - 30 -33 - 2 -3 - 0 2 - 0 2 - -30 33 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
1967 1107 N M 3 12 - -2 2 - 0 -1 - -3 -12 - 2 -1 - C : 0 0 0 sco L ; 
2063 1061 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2050 1070 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2063 1061 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
2030 1082 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2008 1097 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2030 1082 N M -1 -2 - -22 15 - 1 2 - 22 -15 - C : 0 0 0 sco O ; 
1988 1110 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1975 1118 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1988 1110 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
2021 1351 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
2023 1355 N M 4 -12 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 12 - -2 -1 - C : 0 0 0 sco L ; 
2012 1362 N M 11 -8 - 2 2 - -1 0 - -11 8 - -1 -2 - C : 0 0 0 sco L ; 
1922 1276 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1934 1285 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1922 1276 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
1958 1303 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1985 1324 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1958 1303 N M -1 2 - 27 21 - 1 -2 - -27 -21 - C : 0 0 0 sco O ; 
2009 1342 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2021 1351 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2009 1342 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
1927 1208 N M -4 7 rr : 0 0 0 sco O ; 
1924 1213 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -12 -43 - -1 -5 - 4 2 - 1 2 - 12 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
1914 1208 N M 12 5 - 0 4 - -1 0 - -1 0 - -12 -5 - 2 -4 - C : 0 0 0 sco L ; 
1925 1148 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
1927 1148 N M -4 -2 rr : 0 0 0 sco O ; 
1927 1148 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
1927 1208 N M -4 2 rr : 0 0 0 sco O ; 
1927 1198 N M -4 10 rr : 0 0 0 sco O ; 
2100 1196 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2099 1196 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2099 1196 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1942 1262 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1941 1263 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1941 1262 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1942 1158 N M -2 -9 - -4 -7 - -6 -5 - -7 -2 - -7 2 - -6 5 - -4 7 - -2 9 - 2 9 - 4 7 - 6 5 - 7 2 - 7 -2 - 6 -5 - 4 -7 - 2 -9 - C : 0 0 0 sco O ; 
1941 1158 N M -2 -9 - 0 1 - -4 -7 - 1 0 - -6 -5 - -7 -2 - 1 0 - -7 2 - -6 5 - -4 7 - 0 -1 - -2 9 - 2 9 - 4 7 - 0 -1 - 6 5 - 7 2 - -1 0 - 7 -2 - 6 -5 - -1 1 - 4 -7 - 2 -9 - 2 0 - -2 9 - 0 1 - -4 7 - -6 5 - -7 2 - -1 0 - -7 -2 - -6 -5 - -1 0 - -4 -7 - 0 -1 - -2 -9 - 2 -9 - 4 -7 - 1 -1 - 6 -5 - 7 -2 - 1 0 - 7 2 - 6 5 - 0 1 - 4 7 - 2 9 - -2 0 - C : 0 0 0 sco L ; 
1941 1158 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2100 1046 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2099 1046 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2099 1046 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2311 928 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
2310 928 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2310 928 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2311 1528 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
2310 1528 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2310 1528 N M 2 0 - -2 0 - C : 0 0 0 sco L ; : 1370 2045 1021 119 rc 0 0 0 sco (F0_106) cvn
F0
106 
xF 
F0_106
Ji 
1507 2045 M 
-0.298 0 (r)A 
1.064 0 (o)A 
0.064 0 (o)A 
1.000 0 32 -0.468 0 (t )D 
0.532 0 (t)A 
0.064 0 (h)A 
0.702 0 (r)A 
0.064 0 (ead)A 
; 
2188 2095 N M -6 -9 - -2 -2 - 4 -1 - 38 -13 - 7 -3 - -5 6 - -26 31 - -2 3 - -2 -3 - 1 -3 - 26 -31 - 3 3 - -1 1 - -38 13 - -1 -4 - 2 1 - 6 9 - -4 2 - C : 0 0 0 sco L ; 
2194 2104 N M -6 -9 - 4 -2 - 6 9 - -4 2 - C : 0 0 0 sco L ; 
2190 2094 N M -6 -9 - 38 -13 - -26 31 - -6 -9 - C : 0 0 0 sco O ; 
2189 2096 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2189 2096 N M -13 7 - -16 5 - -1 0 - 0 -2 - 16 -5 - 13 -7 - 1 2 - C : 0 0 0 sco L ; 
2159 2108 N M -38 6 - 0 -2 - 38 -6 - 0 2 - C : 0 0 0 sco L ; 
2028 2115 N M -1 -2 rr : 0 0 0 sco O ; 
2121 2114 N M 0 -2 - -93 1 - 0 2 - 93 -1 - C : 0 0 0 sco L ; : 1892 828 450 130 rc 0 0 0 sco F0_116
Ji 
2042 828 M 
-0.248 0 (t)A 
; : 1955 877 360 104 rc 0 0 0 sco F0_93
Ji 
2075 877 M 
0.292 0 (3)A 
; 
2102 1402 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -5 4 - -5 6 - -1 7 - 1 7 - 5 6 - 5 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2101 1403 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -5 4 - -5 6 - 0 -1 - -1 7 - 1 7 - 5 6 - 0 -1 - 5 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -5 -4 - -1 0 - -5 -6 - 0 -1 - -1 -7 - 1 -7 - 5 -6 - 1 -1 - 5 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2101 1402 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2084 1243 N M -2 6 rr : 0 0 0 sco O ; 
2082 1248 N M 13 -4 - 3 -1 - -1 3 - -15 42 - -1 4 - -1 -4 - -10 -43 - -1 -3 - 2 1 - 1 1 - 10 43 - -2 1 - 0 -1 - 15 -42 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2071 1243 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2087 1182 N M -2 -1 rr : 0 0 0 sco O ; 
2084 1243 N M -2 1 rr : 0 0 0 sco O ; 
2087 1182 N M -2 0 - -3 61 - 2 0 - 3 -61 - C : 0 0 0 sco L ; 
LH 
pagesave restore

(%%[ Page: 1 ]%%)  =

Pscript_Win_Driver_Incr dup /terminate get exec
savelevel0 restore 
(%%[ LastPage ]%%)  =
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 0 1876 a FN(Figure)22 b(2:)29 b Fu(An)21
b(e)o(xample)g(dag)h(for)f(a)f(parallel)j(computation;)i(the)c(threads)
i(are)e(sho)n(wn)h(shaded.)29 b(Each)21 b(right-to-left)j(edge)0
1989 y(represents)29 b(a)d(fork,)i(and)f(each)g(left-to-right)j(edge)d
(represents)i(a)d(synchronization)32 b(of)26 b(a)g(child)h(thread)h
(with)f(its)f(parent.)0 2102 y(V)-10 b(ertical)28 b(edges)g(represent)h
(sequential)h(dependencies)h(within)c(threads.)41 b Fr(t)2427
2116 y FH(0)2493 2102 y Fu(is)26 b(the)i(initial)g(\(root\))g(thread,)h
(which)e(forks)0 2215 y(child)e(threads)g Fr(t)523 2229
y FH(1)562 2215 y Fu(,)e Fr(t)641 2229 y FH(2)680 2215
y Fu(,)f(and)i Fr(t)912 2229 y FH(3)974 2215 y Fu(in)g(that)g(order)-5
b(.)30 b(Child)23 b(threads)j(may)d(fork)h(threads)h(themselv)o(es;)h
(e.g.,)d Fr(t)3274 2229 y FH(2)3336 2215 y Fu(forks)h
Fr(t)3578 2229 y FH(4)3617 2215 y Fu(.)0 2488 y FN(parallelism.)63
b(Limiting)33 b(this)i(e)o(xcess)h(parallelism)e(and)i(lo)n(wering)f
(the)g(space)i(requirement)e(is)g(critical)h(for)0 2608
y(parallel)c(programs,)h(since)f(the)o(y)f(are)i(often)f(limited)e(by)i
(the)g(amount)f(of)h(memory)f(a)n(v)n(ailable)g(on)h(a)g(parallel)0
2729 y(machine.)146 2849 y(Initial)f(attempts)g(to)g(control)g(the)h
(acti)n(v)o(e)f(parallelism)g(were)h(based)g(on)f(heuristics)g([7,)h
(21,)f(38,)h(50)o(,)g(49],)0 2969 y(which)j(included)f(w)o(ork)i
(stealing)e(techniques)h([38)o(,)h(49)o(].)63 b(Heuristic)34
b(attempts)h(w)o(ork)g(well)g(for)g(some)g(pro-)0 3090
y(grams,)f(b)n(ut)e(do)g(not)g(guarantee)g(an)h(upper)f(bound)g(on)g
(the)g(space)h(requirements)f(of)g(a)h(program.)53 b(More)32
b(re-)0 3210 y(cently)-6 b(,)38 b(tw)o(o)e(dif)n(ferent)f(techniques)g
(ha)n(v)o(e)h(been)h(sho)n(wn)d(to)i(be)g(pro)o(v)n(ably)f(space-ef)n
(\002cient:)53 b(w)o(ork-stealing)0 3331 y(schedulers,)24
b(and)h(depth-\002rst)g(schedulers.)146 3451 y(In)i(addition)e(to)h
(being)g(space)h(ef)n(\002cient)g([12,)f(51],)h(w)o(ork)f(stealing)g
(can)h(often)f(result)g(in)g(lar)n(ge)h(scheduling)0
3571 y(granularities,)19 b(by)g(allo)n(wing)e(idle)i(processors)g(to)f
(steal)h(threads)g(higher)f(up)h(in)g(the)g(dag)g(\(e.g.,)h(see)f
(Figure)h(3\(a\)\).)0 3692 y(Se)n(v)o(eral)25 b(systems)e(use)i(such)f
(an)h(approach)g(to)g(obtain)f(good)g(parallel)h(performance)g([12,)f
(22,)h(33,)f(49,)h(54)o(].)146 3812 y(Depth-\002rst)30
b(schedulers)f(guarantee)i(an)f(upper)f(bound)h(on)f(the)h(space)g
(requirement)f(of)h(a)h(parallel)e(com-)0 3933 y(putation)23
b(by)h(prioritizing)f(its)g(threads)h(according)g(to)g(their)g(serial,)
g(depth-\002rst)g(e)o(x)o(ecution)f(order)i([10)o(,)g(41)o(].)31
b(In)0 4053 y(a)c(recent)f(paper)h([42],)g(Narlikar)f(and)g(Blelloch)g
(sho)n(wed)f(that)h(the)g(performance)h(of)g(a)f(commercial)g(Pthreads)
0 4173 y(implementation)h(could)j(be)g(impro)o(v)o(ed)e(for)i
(predominantly)e(nested-parallel)i(benchmarks)f(using)g(a)h(depth-)0
4294 y(\002rst)d(scheduler)-5 b(.)38 b(Ho)n(we)n(v)o(er)l(,)27
b(depth-\002rst)g(schedulers)g(can)h(result)e(in)h(high)g(scheduling)f
(contention)g(and)h(poor)0 4414 y(locality)32 b(when)g(the)g(threads)h
(in)f(the)g(program)h(are)g(v)o(ery)f(\002ne)h(grained)g([41,)f(42].)54
b(This)32 b(is)g(because,)j(unlik)o(e)0 4534 y(w)o(ork)27
b(stealing)f(schedulers,)i(depth-\002rst)f(schedulers)g(may)f(map)h
(threads)g(close)h(together)e(in)h(a)h(computation)0
4655 y(graph)d(on)f(dif)n(ferent)h(processors)f(\(e.g.,)h(see)g(Figure)
g(3\).)146 4775 y(The)e(ne)o(xt)e(section)h(describes)g(a)h(ne)n(w)f
(scheduling)f(algorithm)g(that)g(combines)h(ideas)g(from)g(the)g(abo)o
(v)o(e)g(tw)o(o)0 4896 y(space-ef)n(\002cient)j(approaches.)1925
5589 y(5)p eop
%%Page: 6 9
6 8 bop 50 1388 a @beginspecial 30 @llx 276 @lly 593
@urx 692 @ury 1584 @rhi @setspecial
%%BeginDocument: nfigures/dag1-1.epsi



% 000000000000000001ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff0000000000000000000
% 00000000000000000063c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063c000000000000000000
% 00000000000000000060e00000000000000000000000000000000ff8000000000000000000000000000000000ff80000000000000000000000000000060e000000000000000000
% 0000000000000000006060000000000000000000000000000000031e00000000000000000000000000000000031e00000000000000000000000000000606000000000000000000
% 0000000000000000006060000000000000000000000000000000030700000000000000000000000000000000030700000000000000000000000000000606000000000000000000
% 0000000000000000006060000000000000000000000000000000030300000000000000000000000000000000030300000000000000000000000000000606000000000000000000
% 00000000000000000060e000000000000000000000000000000003030000000000000000000000000000000003030000000000000000000000000000060e000000000000000000
% 00000000000000000061c000000000000000000000000000000003030000000000000000000000000000000003030000000000000000000000000000061c000000000000000000
% 0000000000000000007f000000000000000000000000000000000307000000000000000000000000000000000307000000000000000000000000000007f0000000000000000000
% 0000000000000000006003c00000000000000000000000000000030e00000000000000000000000000000000030e00000000000000000000000000000600000000000000000000
% 000000000000000000600ce0000000000000000000000000000003f80000000000000000000000000000000003f8000000000000000000000000000006003c0000000000000000
% 0000000000000000006008600000000000000000000000000000030000000000000000000000000000000000030004000000000000000000000000000600660000000000000000
% 000000000000000000600060000000000000000000000000000003001f00000000000000000000000000000003001c000000000000000000000000000600c60000000000000000
% 000000000000000000600040000000000000000000000000000003003380000000000000000000000000000003000c000000000000000000000000000600c70000000000000000
% 000000000000000000600080000000000000000000000000000003002180000000000000000000000000000003000c000000000000000000000000000601830000000000000000
% 000000000000000001f803e0000000000000000000000000000003004180000000000000000000000000000003000c000000000000000000000000001f81830000000000000000
% 000000000000000000000070000000000000000000000000000003000180000000000000000000000000000003000c000000000000000000000000000001830000000000000000
% 00000000000000000000003000000000000000000000000000000fc0018000000000000000000000000000000fc00c000000000000000000000000000001830000000000000000
% 000000000000000000000030000000000000000000000000000000000300000000000000000000000000000000000c000000000000000000000000000001830000000000000000
% 000000000000000000000020000000000000000000000000000000000200000000000000000000000000000000000c000000000000000000000000000001c30000000000000000
% 000000000000000000000840000000000000000000000000000000000400000000000000000000000000000000000c000000000000000000000000000000c60000000000540000
% 000000000000000000000f80000000000000000000000000000000000c00000000000000000000000000000000000c000000000000000000000000000000660000000000aa0000
% 000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000c0000000000000000000000000000003c0000000005400000
% 000000000000000000000000000000000000000000000000000000001040000000000000000000000000000000001f00000000000000000000000000000000000000000aaa8000
% 000000000000000000000000000000000000000000000000000000003f800000000000000000000000000000000000000000000000000000000000000000000000000011114000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044045000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaa00
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040404040
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000511111100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000404040400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111f9100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaabfea80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010407fe040
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaabfea80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011113ff100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaabffa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004443fe400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaabfea80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051117fd100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002abaafaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fc0414040
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003aaaabaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5111111100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f02aaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000404050400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007800001111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000004040414040
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000000aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000aaaaabaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f8000000000010444054400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaabaa80
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c000000000000011111111100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e000000000000000aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014040414040
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000000aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000000011111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaabaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000404050400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c0000000000000000000002aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000002aaaaabaa80
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000004040414040
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c00000000000000000000000000011111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000002aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040444054400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000002aaaaabaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000051111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000002aaaaabaa80
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000044040414040
% 000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000038000000000000000000000000000000000002aaaaabaa80
% 000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000008000000000000000000000000000000000000051111111100
% 0000000000000000000000000000000000000000000000000000000000070ffc0000000000000000000000000001e00000000000000000000000000000000000000aaaaaabaa80
% 000000000000000000000000000000000000000000000000000000000038f803800000000000000000000000000e00000000000000000000000000000000000000040404050400
% 0000000000000000000000000000000000000000000000000000000000e00000c000000000000000000000000200000000000000000000000000000000000000000aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000003800000200000000000000000000000fc0000000000000000000000000000000000000000011111111100
% 000000000000000000000000000000000000000000000000000000000e0000001000000000000000000000038000000000000000000000000000000000000000000aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000018000000180000000000000000000080000000000000000000000000000000000000000000004040414040
% 00000000000000000000000000000000000000000000000000000000600000000c0000000000000000003e000000000000000000000000000000000000000000000aaaaaabaa80
% 000000000000000000000000000000000000000000000000000000018000000004000000000000000000c000000000000000000000000000000000000000000000011111111100
% 0000000000000000000000000000000000000000000000000000000300000000060000000000000000e000000000000000000000000000000000000000000000000aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000c0000000002000000000000001f800000000000000000000000000000000000000000000000140444054400
% 00000000000000000000000000000000000000000000000000000038000000000300000000000000100000000000000000000000000000000000000000000000000aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000006000000000010000000000003800000000000000000000000000000000000000000000000000111111111100
% 000000000000000000000000000000000000000000000000000001800000000001000000000003e0000000000000000000000000000000000000000000000000000aaaaabbaa80
% 00000000000000000000000000000000000000000000000000000300000000000080000000000400000000000000000000000000000000000000000000000000000040404fc040
% 00000000000000000000000000000000000000000000000000000c000000000000800000000e0000000000000000000000000000000000000000000000000000002aaaaaabea80
% 00000000000000000000000000000000000000000000000000001800000000000080000001f0000000000000000000000000000000000000000000000000000000111111195100
% 000000000000000000000000000000000000000000000000000060000000000000c0000001000000000000000000000000000000000000000000000000000000002aaaaaaeea80
% 0000000000000000000000000000000000000000000000000000c00000000000004000078000000000000000000000000000000000000000000000000000000000040404048400
% 00000000000000000000000000000000000000000000000000018000000000000040007c00000000000000000000000000000000000000000000000000000000002aaaaaaeaa80
% 0000000000000000000000000000000000000000000000000003000000000000004000000000000000000000000000000000000000000000000000000000000000511111159100
% 000000000000000000000000000000000000000000000000000c0000000000008040e00000000000000000000000000000000000000000000000000000000000002aaaaaabaa80
% 0000000000000000000000000000000000000000000000000018000000000003805f00000000000000000000000000000000000000000000000000000000000000404040434040
% 0000000000000000000000000000000000000000000000000030000000000006802000000000000000000000000000000000000000000000000000000000000000aaaaaaabaa80
% 0000000000000000000000000000000000000000000000000060000000003e18f82000000000000000000000000000000000000000000000000000000000000000111111131100
% 0000000000000000000000000000000000000000000000000180000000007f60802000000000000000000000000000000000000000000000000000000000000000aaaaaaafea80
% 000000000000000000000000000000000000000000000000030000000000ff80c020000000000000000000000000000000000000000000000000000000000000014404440fe400
% 000000000000000000000000000000000000000000000000060000000000ffffc02000000000000000000000000000000000000000000000000000000000000000aaaaaabffa80
% 0000000000000000000000000000000000000000000000000c0000000000ffc00020000000000000000000000000000000000000000000000000000000000000011111111ff100
% 00000000000000000000000000000000000000000000000018000000000fffc0002000000000000000000000000000000000000000000000000000000000000002aaaaaabffa80
% 000000000000000000000000000000000000000000000000200000000018ff80002000000000000000000000000000000000000000000000000000000000000000404041dff040
% 000000000000000000000000000000000000000000000000400000000c00ff80002000000000000000000000000000000000000000000000000000000000000002aaaaabbffa80
% 00000000000000000000000000000000000000000000000080000001f0007f000020000000000000000000000000000000000000000000000000000000000000051111911ff100
% 0000000000000000000000000000000000000000000000010000000200003e00002000000000000000000000000000000000000000000000000000000000000002aabfaaafea80
% 000000000000000000000000000000000000000000000002000003000000040000200000000000000000000000000000000000000000000000000000000000000404740407c400
% 00000000000000000000000000000000000000000000000400003e000000040000200000000000000000000000000000000000000000000000000000000000000aaaaaaaabaa80
% 0000000000000000000000000000000000000000000000080000400000000400001000000000000000000000000000000000000000000000000000000000000001f11111111100
% 000000000000000000fef03ee00000000000000000000030006000000000040000100000000000000000000000000000000000000000000000000000000000001eaaaaaaabaa80
% 00000000000000003f0000001e00000000000000000000600fc0000000000400001000000000000000000000000007ffff00000000000000000000000000000010404040414040
% 00000000000000038888888889a0000000000000000000c01800000000000400001000000000000000000000001bbaaaaabb000000000000000000000000001c0aaaaaaaabaa80
% 000000000000007800000000001c0000000000000000018c00000000000004000010000000000000000000000ffdddddddddf8000000000000000000000001e011111111111100
% 0000000000000780020002000206000000000000000003f00000000000000400001000000000000000000000aaaaaaaaaaaaae000000000000000000000002002aaaaaaaabaa80
% 0000000000007800000000000000c0000000000000000700000000000000040000100000000000000000003f57775777577757e000000000000000000003800044440444054400
% 0000000000018888888888888888b0000000000000018c0000000000000004000020000000000000000003aaaaaaaaaaaaaaaab80000000000000000003c00002aaaaaaaabaa80
% 00000000000e0000000000000000180000000000003e18000000000000000400002000000000000000001fdddddddddddddddddf00000000000000000040000011111111111100
% 00000000007020202020202020202c000000000000403000000000000000040000200000000000000000eaaaaaaaaaaaaaaaaaaa800000000000000000000000aaaaaaaaabaa80
% 0000000001c000000000000000000200000000007000600000000000000004000020000000000000000f757575757575757575756000000000000003e000000140404040414040
% 000000000a888888888888888888890000000007c000400000000000000004000020000000000000003aaaaaaaaaaaaaaaaaaaaab80000000000001c00000002aaaaaaaaabaa80
% 000000063800000000000000000000800000000c000080000000000000000400002000000000000003dddddddddddddddddddddddc000000000000000000000111111111111100
% 00000006e202020202020202020202c000000c0000030000000000000000040000200000000000000eaaaaaaaaaaaaaaaaaaaaaaae00000000003c0000000002aaaaaaaaabaa80
% 000000098000000000000000000000600000f8000002000000000000000004000020000000000018775757575757575757575757570000000003c0000000000404040404050400
% 000000188888888888888888888888a0000100000004000000000000000004000020000000000019aaaaaaaaaaaaaaaaaaaaaaaaab800000000000000000000aaaaaaaaaabaa80
% 0000001000000000000000000000003001800000000c00000000000000000400002000000000003fddddddddddddddddddddddddddc00000038000000000001111111111111100
% 000000202020202020202020202023301e000000001800000000000000000400002000000000006aaaaaaaaaaaaaaaaaaaaaaaaaaae000007c0000000000002aaaaaaaaaabaa80
% 00000060000000000000000003f00e086000000000100000000000000000048000200000000000f575757575757575757575757575600000400000000000004040404040414040
% 0000008888888888888888888ff8bab800000000002000000000000000003f0000200000000001aaaaaaaaaaaaaaaaaaaaaaaaaaaab00070000000000000002aaaaaaaaaabba80
% 00000080000000000000000007fce3c40000000000600000000000000000250000200000000003ddddddddddddddddddddddddddddd807c000000000000000111111111117f100
% 0000010002000200020002000ffd83040000000000c00000000000000000210000200000000002aaaaaaaaaaaaaaaaaaaaaaaaaaabe81c0000000000000000aaaaaaaaaaaeaa80
% 0000030000000000000000000fff018600000000008000000000000000003300002000000000077757775777577757775777577f57fc0000000000000000014404440444046400
% 0000028888888888888888888ffcff8a000000000100000000000000000012000020000000000aaaaaaaaaaaaaaaaaaaaaaaaaffbebc000000000000000002aaaaaaaaaaaeaa80
% 000006000000000000000000effc0002000000000300000000000000000012000020000000001dddddddddddddddddddddddddfffddc0000000000000000051111111111135100
% 000004202020202020202021a7f82022000000000200000000000000000012000020000000000aaaaaaaaaaaaaaaaaaaaaaaaaffeaea00000000000000000aaaaaaaaaaaaaea80
% 00000800000000000000000003f0000300000000040000000000000000000e0000200000000035757575757575757575757575fffff60000000000000000104040404040424040
% 00001888888888888888888888c88889000000000c0000000000000000000c000040000000002aaaaaaaaaaaaaaaaaaaaaaaaaffeaaa00000000000000002aaaaaaaaaaaabea80
% 0000100000000000000000400040000100000000080000000000000000000f000040000000005ddddddddddddddddddddddddfffdddf0000000000000000511111111111119100
% 0000220202020202020203c20242020300000000100000000000000000003f80004000000000aaaaaaaaaaaaaaaaaaaaaaaabeffaaaa0000000000000000aaaaaaaaaaaaabea80
% 0000200000000000000007000040000100000000100000000000000000003fc0004000000001d75757575757575757575757777f5757000000000000000104040404040407fc00
% 000008888888888888889c8888c8888900000000200000000000000000007fc0004000000003aaaaaaaaaaaaaaaaaaaaaaaaaabeaaab0000000000000002aaaaaaaaaaaaaffa80
% 0000400000000000000030000040000100000000600000000000000000007fe0004000000003dddddddddddddddddddddddddddddddd00000000000000011111111111111ffd00
% 0000a02020202020202020202060202000000000400000000000000000007fe0004000000002aaaaaaaaaaaaaaaaaaaaaafaaaaeaaaa000000000000000aaaaaaaaaaaaaaffe80
% 0000800000000000000000000040000100000000c00000000000000000037fe00040000000057575757575757575757577f57575757500000000000000104040404040404ffc40
% 0001888888888888889c888888c88889000000008000000000000000000e7fc000400000000aaaaaaaaaaaaaaaaaaaaaaeaaaaaeaaaa000000000000002aaaaaaaaaaaaaeffe80
% 0001000000000000007000000040000100000001800000000000000000103fc000400000001ddddddddddddddddddddddddddddddddd0000000000000051111111111111dff900
% 000202000200020002c002000240020000000001000000000000000000001f0000400000000aaaaaaaaaaaaaaaaaaaabaaaaaaaeaaaa00000000000000aaaaaaaaaaaaabaffa80
% 000200000000000003000000004000010000000300000000000000000c0002000040000000375777577757775777577f577757775777000000000000014404440444044405e400
% 00008888888888888888888888c888890000000200000000000000007800020000400000002aaaaaaaaaaaaaaaaaaafaaaaaaaaeaaaa00000000000002aaaaaaaaaaaaaaaaea80
% 00040000000000100000000000400001000000060000000000000003c000020000400000005ddddddddddddddddddddddddddddddddd0000000000000511111111111111115100
% 000c20202020203020202020206020200000000400000000000000020000020000400000006aaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaa0000000000000aaaaaaaaaaaaaaaaaea80
% 000800000000007380000000025800010000000c0000000000000000000002000040000000f5757575757575757575757575757575750000000000001040404040404340404040
% 00188888888888de888888888bf88889000000080000000000000180000002000040000001aaaaaaaaaaaaaaaaabaaaaaaaaaaaeaaaa0000000000002aaaaaaaaaaaaeaaaaea80
% 00100000000001980000000001080001000000180000000000000e00000002000040000001dddddddddddddddddfdddddddddddddddd0000000000005111111111111911115100
% 000202020202030e02020202031a0203000000100000000000003800000002000040000002aaaaaaaaaaaaaaaabaaaaaaaaaaaaeaaaa000000000000aaaaaaaaaaaabaaaaaea80
% 00200000001f860e00000000011000010000001000000000000040000000020000400000035757575757575757575757575757575757000000000001040404040404c404044400
% 0028888888bfcdf88888888889988889000000200000000000000000000002000040000002aaaaaaaaaaaaabaaaaaaaaaaaaaabfaaaa000000000002aaaaaaaaaaabaaaaaaea80
% 00600000003fdf000000000000b00001000000200000000000000000000002000040000005ddddddddddddddfdddddddddddddffdddd0000000000011111111111111111115100
% 00602020207fe0202020202020a02020000000600000000000e00000000002000040000002aaaaaaaaaaaabbeaaaaaaaaaaaaaabaaaa80000000000aaaaaaaaaaaaaaaaaaaea80
% 00c00000007fe0000000000000a0000100000040000000000700000000000200004000000d75757575757575f57575757575757575758000000000104040404040404040404040
% 0088888888ffe8888888888888e8888900000040000000001c00000000000200004000000aaaaaaaaaaaaaeaeaaaaaaaaaaaaabbaaaa80000000002aaaaaaaaaaaaaaaaaaaea80
% 00800000007fe0000000000003f00000800000c0000000800000000000000200004000001dddddddddddfdfffddddddddddddddfdddd8000000000511111111173911111115100
% 00800200023fc2000200020007f8020080000080000001800000000000001fc0004000000aaaaaaaaaaffbeaaaaaaaaaaaaaaabaaaaa8000000000aaaaaaaaaafeaaaaaaaaea80
% 0100000000df80000000000007fc0000800000800000069c00000000000016c00040000037775777577fff77577757775777577f5777800000000144044404449c440444077c00
% 018888888b8a8888888888888ffc88888000010000000cf00000000000001880004000002aaaaaaaaaaffaaaaaaaaaaaaaaaaaaeaaaa8000000002aaaaaaaaabbaaaaaaaaafa80
% 0100000002020000000000000ffc000080000100000018400000000000000880004000003ddddddddddffddddddddddddddddddfdddd800000000511111111131f111111131100
% 0220202020222020202020202ffc202080000100000060600000000000000880004000006aaaaaaaaaaffeaaaaaaaaaaaaaaaaffaaaa800000000aaaaaaaafaefaaaaaaaabba80
% 02000000000200000000000007fc00008000030000f0cff000000000000009000040000075757575757ffd7575757575757575fff57580000000104040405fcfc0404040417040
% 02888888c88a8888888888888ff888888000020003fdf0000000000000000d0000400000aaaaaaaaaaaffaaaaaaaaaaaaaaaaaffaaaa800000002aaaaaaabffeaaaaaaaaabaa80
% 04000001800200000000000003f000008000020007fc0000000000000000050000400000dddddddddddffdddddddddddddddddffdddd80000000511111117ff11111111111b100
% 060202060202020202020202024202028000060007fe0000000000000000070000400000aaaaaaaaaabbeaaaaaaaaaaaaaaaaaffeaaa80000000aaaaaaaaffeaaaaaaaaaaaaa80
% 0400000c0002000000000000004000008000040007fe00000000000000000f0000400001d75757575757575757575757575757ffd75780000001040404047fe40404040404c400
% 00888888888a88888888888888c888888000040007fe00000000000000003f8000400001aaaaaaaaaaaaeaaaaaaaaaaaaaaaaaffaaaa80000002aaaaaaaaffeaaaaaaaaaabea80
% 080000000002000000000000004000008000040007fe00000000000000003fc000200001ddddddddddddddddddddddddddddddffddddc0000001111111113ff11111111117f900
% 0820212020222020202020202060202080000c0007fc00000000000000007fc000200002aaaaaaaaaaaaeaaaaaaaaaaaaaaaaabeaaaac000000aaaaaaaaaffeaaaaaaaaaaffa80
% 080066000002000000000000004000004000080003fc00000000000000007fe0002000037575757575757575757575757575757575754000000040404041cfc0404040404ffc40
% 0888fc88888a88888888888888c888888000080001f000000000000000007fe000200002aaaaaaaaeaaaeaaaaaaaaaaaaaaaaaaeaaaa8000000aaaaaaaabaaaaaaaaaaaaaffe80
% 1001980000020000000000000040000040000800002000000000000000007fc000200007ddddddddddddddddddddddddddddddddddddc0000011111111111311111111111ffd00
% 02031a0002020200020002000240020040000800002000000000000000007fc000200006aaaaaaabaaaaeaaaaaaaaaaaaaaaeaaeaaaa8000002aaaaaaaaaaaaaaaaaaaaaaffe80
% 10060c0000124000000000000040000040001000002000000000000000003fc0002000075777577757775777577757775777d777577740000044044404440644044404440ffc00
% 188cf888889fc8888888888888c8888880001000002000000000000000001f0000200002aaaaaaaaaaaaeaaaaaaaaaaaaaabaaaeaaaa800000aaaaaaaaeaaaaaaaaaaaaaaffa80
% 27ef8000001ac0000000000000400000400010000020000000000000000002000020000dddddddfddddddddddddddddddddfddddddddc00001111111131113111111111113f100
% 2ffc20202028a0202020202020602020400010000020000000000000000002000020000aaaaabfaaaaaaeaaaaaaaaaaaaaaeaaaeaaaac00000aaaaaaaeaaaaaaaaaaaaaaaaea80
% 3ff80000000880000000000000400000400010000020000000000000000802000010000d7575777575757575757575757575757575754000014040404840424040404040404040
% 3ff88888888888888888888888c88888800030000020000000000000003802000010001aaaaaeeaaaaaaeaaaaaaaaaaaaaaaaaaeaaaaa00002aaaaaaaaaaaaaaaaaaaaaaaaea80
% 3ff80000000500000000000000400000400020000020000000000000006002000010001ddddddfdddddddddddddddddddddddddddddde000051111311111131111111111115100
% 3ffa02020207020202020202024a020240002000002000000000000001c002000010000aaaaaafaaaaaffaaaaaaaaaaaaaaaaaaeaaaaa00002aaaaebaaaaaaaaaaaaaaaaaaea80
% 7ff80000000500000000000003f800002000200000200000000000000300020000100017577f7f575757f757575757575757575757576000040404660404060404040404044400
% 0ff88888888f88888888888889888888a00020000020000000000000060002000010001aabffeaaaaaaabaaaaaaaaaaabaaaaaaeaaaaa0000aaaaabeaaaaaaaaaaaaaaaaaaea80
% 47e00000000200000000000001180000200020000020000000000000180002000010001ddfffdddddddfdddddddddddffddddddddddde000111111111111131111111111115100
% 60a02020202220202020202021302020200020000020000000000000000002000010002aabfeaaaaaaabbaaaaaaaaaafeaaaaaaeaaaaa0000aaaabaeaaaaaaaaaaaaaaaaaaea80
% 40800000001f80000000000001900000200040000024000000000000000002000018003577ff7575757575757575757df5757577f57560001040467e40405ac040404040404040
% 0888888888bfc8888888888888b88888a000400001fc000000000000000002000008002aabffaaaaaaabaaaaaaaaaabbaaaaaaafaaaaa0002aaaafeaaaaabfeaaaaaaaaaaaea80
% 40800000003fc0000000000000a0000020004000016c000000000000000002000008003ddfffddddddddfdddddddddfdfdddddfdddddf0001117ff11111119d111111111115100
% 42800200027fe2000200020002a00200200040000188000000000108000002000008002aabfeaaaaaaaaeaaaaaaabeefaaaaaabbaaaaa0002aaffaaaaaaaaaaaaaaaaaaaaaea80
% 40800000007fe0000000000000600000200040000088000000000398000002000008003757ff57775777d7775777ffff5777577757775000444ffc4404440cc404440444044400
% 0888888888ffe8888888888888c88888a000400000880000000002e0000002000008002aaafaaaaaaaaaeaaaaaabffeaaaaaaabaaaaab0002abffaaaaaaaaeaaaaaaaaaaaaea80
% 40800000007fe0000000000003f000001000400000900000000004c000001fc00008005dddfdddddddddfdddddddffdddddddddfddddd000511ff9111111151111111111115100
% 64b02020203fe0202020202027f82020300040000050000000000c60000016c00004006aaabaaaaaaaaffaaaaaabffaaaaaaaaaeaaaaa000aabffaaaaaaaafaaaaaaaaaaabfa80
% 47f00000001f80000000000007fc0000100040000050000000001870000018800004007575757575757ffd757575fff57575757d75757000405ff840404047404040404042d840
% 0ff88888888a8888888888888ffc88889000400000700000001e31c0000008800004002aaabaaaaaaaaffaaaaaabffaaaaaaaaaeaaaab000aaaffaaaaaaaabaaaaaaaaaaaaba80
% 8630000000020000000000000ffc00001000400000600000007fae00000008800004005dddfddddddddffdddddddffdddddddddfddddd001111ff1111111131111111111111100
% 8222020202020202020202020ffe02020000400000200000007ff000000009000004002aaabaaaaaaaaffeaaaaaaffaaaaaaaaffaaaaa000aaaffaaaaaaaafaaaaaaaaaaabba80
% 03600000000200000000000007fc00001000400000f0000000ffc00000000d000004005757775757575fff5757577f57575757ffd75758010407e40404041fc404040404052400
% 0be88888888a8888888888888ff888889000400003fc000000ffc000000005000002002aabbaaaaaaaaffaaaaaaabaaaaaaaaaffaaaaa800aaaaaaaaaaaabfeaaaaaaaaaabaa80
% 41600000000200000000000003f000001000400007fc000000ffc000000007000002005dddffdddddddffdddddddfdddddddddffddddd8011111911111117ff11111111111b100
% 61e020202022202020202020202020203000400007fe000000ffc000000006000002006aaafeaaaaaaabeaaaaaaabaaaaaaaaaffeaaaa800aaaaaaaaaaaaffeaaaaaaaaaaaea80
% 47e000000002000000000000008000000800400007fe000000ff800000000f000002007575f575757575757575757575757575fff57578014040c04040407fe04040404040c040
% 0ff88888888a888888888888888888888800400007fe0000007f800000003f800002002aaaeeaaaaaaaaeaaaaaaabaaaaaaaaaffaaaaa802aaaaaaaaaaaaffeaaaaaaaaaabea80
% 5ff800000002000000000000008000000800400007fe0000001e000000003fc00002005dddddddddddddddddddddfdddddddddffddddd8011111911111113ff11111111117f900
% 5ff802000202020002000200028002000800400007fc00000008000000007fc00002006aaaeaaaaaaaaaeaaaaaabbfaaaaaaaabeaaaaa802aaaebaaaaaaabfeaaaaaaaaaaffa80
% 5ff800000002000000000000008000000800400003fc00000008000000007fe000010077577f5777577757775777ff7757775777577758000447f44404440fc4044404440ffc00
% 1ff88888888a888888888888888888888800400001f000000008000000007fe00001002aaafaaaaaaaaaeaaaaaabbeaaaaaaaaaaaaaaa802aaaebaaaaaaaaaaaaaaaaaaaaffe80
% 5ff8000000020000000000000080000008004000002000000008000000007fc00001005dddfddddddddddddddddddfdddddddddddddddc011113311111111311111111111ffd00
% 6ff02020202220202020202020a0202028004000002000000008000000007fc00001006aabfeaaaaaaaaeaaaaaaaeeaaaaaaaaaaaaaaa802aaabaaaaaaaaaaaaaaaaaaaaaffe80
% 47f0000000020000000000000080000008004000002000000088000000003fc00001007577ff7575757575757575fd757575757d757574004043604040404240404040404ff840
% 08c88888888a88888888888888888888880020000020000000eb800000001f000001002aabfeaaaaaaaaeaaaaaaaeeaaaaaaaaaaaaaaa802aaabeaaaaaaaaaaaaaaaaaaaaffa80
% 40200000000200000000000000800000080020000020000000ff0000000000000000805ddfffdddddddddddddddddddddddddddddddddc0111115111111113111111111113f100
% 220202020202020202020202028202020800200000200000004b0000000004000000802aabffaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaac00aaabeaaaaaaabaeaaaaaaaaaaaaa80
% 20000000000200000000000000800000080020000020000000430000000004000000805757ff57575757575757577f575757575f575754010407f40404041fc404040404048400
% 28888888888a88888888888888888888880020000020000000630000000004000000802aabfeaaaaaaaaeaaaaaaafeaaaaaaaaaaaaaaa800aaaffaaaaaaabaeaaaaaaaaaaaaa80
% 20008000000200000000000000800000080020000020000000620000000004000000803dddfdddddddddddddddddffdddddddddddddddc01111ff9111111199111111111119100
% 2020e020202220202020202020a02020280020000020000000260000000004000000802aaafaaaaaaaaaeaaaaaabffaaaaaaaaaaaaaaa800aabffaaaaaaaaaaaaaaaaaaaaaaa80
% 20003000000200000000000000800000080030000020000000360000000004000000c035757d7575757575757575ff757575757d75757401405ff840404048c04040404040c040
% 18889888888a88888888888888888888880010000020000000340000000004000000402aaaaaaaaaaaaaeaaaaaabffaaaaaaaaaaaaaaa800aabffaaaaaaaafaaaaaaaaaaaaaa80
% 10000c000002000000000000008000000400100000200000003c0000000004000000403dddddddddddddddddddddffdddddddddddddddc00111ff9111111151111111111119100
% 020003000202020002000200028002000400100000200000001e0000000004000000402aaaaaaaaaaaaaeaaaaaabffaaaaaaaaaaaaaaac00aaaffaaaaaaaafaaaaaaaaaaaaaa80
% 100000000002000000000000008000000400100000200000003f0000000004000000401757775777577757775777ff775777577f577756000447e44404441fc40444044404c400
% 08888888889ac88888888888888888888800100000200000007f8000000004000000401aaaaabaaaaaaaeaaaaaaaffaaaaaaaaaaaaaaaa00aaaaeaaaaaaabfeaaaaaaaaaaaaa80
% 08000000001fc00000000000008000000400180000200000007fc000000004000000401dddddddddddddddddddddffddddddddddddddde005111311111113ff111111111119100
% 082020286038e0202020202020a020202400080000200000007fc000000004000000200aaaaaaeaaaaaaeaaaaaaaabaaaaaaaaaaaaaaaa002aaaaaaaaaaabfeaaaaaaaaaaaaa80
% 0800000c4008800000000000008000000400080000200000007fc000000004000000200d7575777575757575757575f57575757d757576004040404040407fe04040404040c040
% 0088888be888888888888888888888888800080000200000007fc000000004000000200aaaaaaaeaaaaaeaaaaaaaaaaaaaaaaaaaaaaaaa002aaaaaaaaaaabfeaaaaaaaaaaaaa80
% 04000001b008800000000000008000000400080000200000007fc000000004000000200dddddddddddddddddddddddddddddddddddddde00111111d111113ff111111111119100
% 060202039a07020202020202028202020400040000200000007f8000000004000000200eaaaaaaaaaaaaeaaaaaaaaaaaaaaaaaaaaaaaaa000aaaaaeaaaaabfeaaaaaaaaaaaaa80
% 06000006080500000000000004b000000400040000200000003f800000000400000020075757575757577f5757575757d757575f57575600140404340404070404040404048400
% 0288888b8c8d8888888888888ff888888800040000200000001fc0000000040000002002aaaaaaaaaaabfaaaaaaaaaaaeaaaaaaaaaaaaa000aaaaaaeaaaaaeaaaaaaaaaaaaaa80
% 030000007607000000000000023000000800040000200000000020000000040000001005dddddddfdddfddddddddddddddddddddddddde00011111171111171111111111119100
% 002020203f3fa02020202020222020202800020000200000000000000000040000001002aaaaaaabfaabbaaaaaaaaaaaaeaaaaaaaaaaaa0002aaaaaaaaaaaeaaaaaaaaaaaaaa80
% 01000000033fc000000000000220000008000200002000000000000000000400000010037575757575757575757575757775757d7575760004404040404046404040404040c040
% 0188888888bfe888888888888ba888888800020000240000000000000000040000001002aaaaaaaabeabaaaaaaaaaaaaaaeaaaefaaaaaa0002aaaaaaaaaaaeaaaaaaaaaaaaaa80
% 00800000007fe00000000000016000000800030001bc0000000000000000040000001001ddddddddffddfdddddddddddddddddffddddde00011111111111375111111111119100
% 00800200027fe200020002000340020008000100017c0000000000380000040000001000aaaaaaabebabeaaaaaaaaaaaaaaaaaeaaaaaaa0000aaaaaaaeeabfeaaaaaaaaaaaaa80
% 00400000007fe000000000000140000008000100018800000000000c0000040000001001d77757777ff7f7775777577757775777577756000044044406e43fc40444044404c400
% 0008888888ffe888888888888bf888888800018000880000000000030000040000001800aaaaaaaaafeffaaaaaaaaaaaaaaaaeaeaaaaaa00002aaaaaabbabaeaaaaaaaaaaaaa80
% 00200000003fc0000000000007f80000080000800088000000000000c000048000000800ddddddddddfffdddddddddddddddfffdddddde00005111111191119111111111119100
% 00302020203fe0202020202027fc202028000080009000000000000060003f80000008006aaaaaaaaaaffaaaaaaaaaaaaaaabfaeaaaaaa00002aaaaaabaabbaaaaaaaaaaaaaa80
% 0010000000000000000000000ffc0000080000c0005000000000000000002d000000080075757575757ffd757575757575757dfd7575760000104040474c59c04040404046f040
% 0018888888888888888888888ffc888888000040005000000000000000003100000008002aaaaaaaaaaffeaaaaaaaaaaaaaaaafeaaaaa800000aaaaaabeebbaaaaaaaaaaaffa80
% 0008000000000380000000000ffc000008000040007000000000000000001100000008003ddddddddddffdddddddddddddddfdffdddddc0000051111113b191111111111173100
% 000e0202020202e20202020207fe02020800002000f000000000000000031300000008000aaaaaaaaaaffaaaaaaaaaaaaaaaafffaaaaac000002aaaaaaafafaaaaaaaaaaaaaa80
% 00040000000000300000000007f800001000002003fc00000000000000339200000008001f575757575fff5757575757575757ffd75754000001040404058f0404040404062400
% 0002888888888888888888888bf888889000003007fc000000000000000eda00000004000aaaaaaaaaaffaaaaaaaaaaaaaaaaaffeaaaa8000000aaaaaaaaafaaaaaaaaaaaaea80
% 000300000000000000000000004000001000001007fe00000000000000066a000000040005dddddddddfffddddddddddddddddffdddddc000000511111111fd111111111135100
% 000020202020202020202020206020203000001007fe000000000000000c3f000000040002aaaaaaaaaaaaaaaaaaaaaaaaaaaaffaaaaa80000002aaaaaaabfeaaaaaaaaaabea80
% 000080000000000060000000004000001000000807fe000000000000001c3f8000000400037575757575757575757575757575fff57574000000104040407fe04040404041e040
% 0000888888888888b888888888c888889000000807fe0000000000000003ffc00000040003aaaaaaaaaaaaaeaaaaaaaaaaaaaaffaaaaa800000002aaaaaabfeaaaaaaaaaaffa80
% 00006000000000000c000000004000002000000407fc00000000000000007fc00000040001dddddddddddddfddddddddddddddffdddddc000000011111113ff71111111117f900
% 000022000200020003000200024802002000000403fc00000000000000007fe00000040000aaaaaaaaaaaaaaeaaaaaaaaaaaaaaeaaaaa800000000aaaaaabfebaaaaaaaaaffe80
% 00001000000000000000000003f800002000000201f700000000000000007fe00000040000f75777577757777f77577757775777577758000000004404443fe5844404440ffc00
% 00001888888888888888888889888888a0000002000000000000000000007fe000000200002aaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaa8000000002aaaaabfeaaaaaaaaaaffe80
% 00000c0000000000000800000118000020000001000000000000000000007fc000000200003dddddddddddddddddddddddddddddddddd8000000001111111111111111111ffd00
% 0000062020202020202c20202130202040000001800002000000000000003f8000000200000aaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaa8000000000aaaaaaaaaaaaaaaaaaffa80
% 0000030000000000000300000190000040000000800003c00000000000000f0000000200000d757575757575757f757575757577f575780000000004404040404c40404047f840
% 00000188888888888889c88888b8888880000000c0000070000000000000020000000200000aaaaaaaaaaaaaaaabeaaaaaaaaaafaaaab00000000002aaaaaaaaabaaaaaaabfa80
% 000000c0000000000000400000a00000400000004000000e0000000000000200000002000007ddddddddddddddddfdddddddddfdddddd000000000011111111111911111115100
% 00000062020202020202020202a2020280000000200000000000000000000200000002000002aaaaaaaaaaaaaaaaaaaaaaaaaabbaaaaa00000000000aaaaaaaaaaeaaaaaaaea80
% 0000003000000000000000100060000080000000300000000000000000000200000002000001575757575757575757575757575757575000000000004404040404040404044400
% 000000188888888888888b9888c8888880000000100000000400000000000200000002000000aaaaaaaaaaaaaaaaaaaaaaaaaabaaaaab000000000000aaaaaaaaaaaaaaaaaea80
% 0000000c00000000000000dc0040000080000000080000000700000000001fc00000020000005ddddddddddddddddddddddddddfdddde000000000000511111111111111115100
% 00000006202020202020207620602020000000000c00000000e00000000016c00000020000002aaaaaaaaaaaaaaaaaafaaaaaaaeaaaaa0000000000002aaaaaaaaaaaaaaabfa80
% 00000003000000000000006303f00001000000000600000000380000000018800000020000001d757575757575757575f575757d7575600000000000014040404043404042d840
% 0000000088888888888888c98ff8888b000000000200000000000000000008800000010000000aaaaaaaaaaaaaaaaaaaaaaaaaaeaaaa80000000000000aaaaaaaaaaeaaaaaba80
% 00000000600000000000007cc7fc00020000000001000000000000000000088000000100000007dddddddddddddddddddddfddddddddc000000000000051111111117111111100
% 000000002200020002000207effc02020000000001800000000010000000090000000100000002aaaaaaaaaaaaaaaaaaaaafaaaaaaaa800000000000002aaaaaaaaabaaaabba80
% 000000000c000000000000007ffc00060000000000c0000000000e0000000d0000000100000000f757775777577757775777d77f5777c000000000000014044404440444056400
% 0000000002888888888888889ffc888800000000004000000000038000000500000001000000002aaaaaaaaaaaaaaaaaaabeeaffaaaa800000000000000aaaaaaaaaaaaaabaa80
% 0000000001800000000000000ffc000400000000006000000000007000000700000001000000003dddddddddddddddddddddfdffdddd800000000000000511111111111911b100
% 0000000000e020202020202027fe202800000000003000000000000002000600000001000000000aaaaaaaaaaaaaaaaaaababaffaaaa8000000000000002aaaaaaaaabaaaaea80
% 00000000006000000000000003f000080000000000100000000000000300020000000100000000077575757575757575757ffdfff57500000000000000014040404040dc40c040
% 00000000001888888888888888888898000000000008000000000000238002000000010000000003aaaaaaaaaaaaaaaaaaaabeffeaab0000000000000000aaaaaaaaaabeaaea80
% 00000000000c00000000000000000c100000000000040000000000001e600f000000010000000000ddddddddddddddddddddddffddde0000000000000000511111111173115100
% 0000000000060202020202020202072000000000000200000000000006303f8000000100000000006aaaaaaaaaaaaaaaaaaaaaffaaaa00000000000000002aaaaaaaaaebabea80
% 000000000001800000000000000000e000000000000100000000000006183fc000000100000000001f575757575757575757577f5754000000000000000004040404047587fc00
% 000000000000888888888888888888a00000000000018000000000000c067fc0000001000000000002aaaaaaaaaaaaaaaaaaaabeaae800000000000000002aaaaaaaaabeaffa80
% 00000000000070000000000000000040000000000000c0000000000007ff7fe0000001000000000003ddddddddddddddddddddddddfc00000000000000001111111111175ffd00
% 000000000000182020202020202020c0c000000000006000000000000003ffe0000001000000000000eaaaaaaaaaaaaaaaaaaaaaaaae00000000000000000aaaaaaaaaaaeffe80
% 0000000000000c00000000000000008070000000000030000000000000007fe00000010000000000007575757575757575757575757900000000000000000440404040407ffc40
% 000000000000038888888888888889800e000000000010000000000000007fc00000010000000000001aaaaaaaaaaaaaaaaaaaaaaab0000000000000000002aaaaaaaaaaaffe80
% 0000000000000180000000000000010003000000000008000000000000003fc00000010000000000000fddddddddddddddddddddddf004000000000000000511111111111ff900
% 00000000000000c0020002000200030000000000000004000000000000001f0000000080000000000002aaaaaaaaaaaaaaaaaaaaaaa0038000000000000002aaaaaaaaaaaffa80
% 000000000000003000000000000002000000000000000200000000000000000000000080000000000000d7775777577757775777576000e000000000000001440444044405e400
% 0000000000000018888888888888880000070000000001000000000000000400000000800000000000002aaaaaaaaaaaaaaaaaaaaa80003800000000000000aaaaaaaaaaaaaa80
% 000000000000000c0000000000000c000001c000000000800000000000000400000000800000000000001ddddddddddddddddddddd800000000000000000011111111111111100
% 0000000000000002202020202020280000007000000000400000000000000400000000800000000000000aaaaaaaaaaaaaaaaaaaaa80000000000000000000aaaaaaaaaaabaa80
% 0000000000000001800000000000100000000000000000200000000000000400000000800000000000000375757575757575757575000000000000000000004040404040414040
% 0000000000000000a88888888888b000000000000000003000000000000004000000010000000000000001aaaaaaaaaaaaaaaaaaab0000001c0000000000002aaaaaaaaaabaa80
% 000000000000000030000000000020000000007000000018000000000000040000000100000000000000007dddddddddddddddddde000000038000000000005111111111111100
% 00000000000000000a020202020240000000001c0000000c000000000000040000000100000000000000000aaaaaaaaaaaaaaaaaae00000000e000000000002aaaaaaaaaabaa80
% 0000000000000000060000000000c0000000000700000006000000000000040000000100000000000000000f57575757575757575c000000000000000000000404040404050400
% 0000000000000000038888888888800000000000800000030000000000000400000001000000000000000003aaaaaaaaaaaaaaaaa8000000000000000000000aaaaaaaaaabaa80
% 0000000000000000018000000001000000000000000000018000000000000400000001000000000000000001ddddddddddddddddd80000000000c0000000001111111111111100
% 000000000000000000602020202200000000000002000000c0000000000004000000010000000000000000006aaaaaaaaaaaaaaaa0000000000070000000000aaaaaaaaaabaa80
% 000000000000000000300000000600000000000001c0000060000000000004000000010000000000000000003d757575757575756000000000000e000000000040404040414040
% 00000000000000000018888888880000000000000070000020000000000004000000010000000000000000000aaaaaaaaaaaaaaa80000000000003000000000aaaaaaaaaabaa80
% 0000000000000000000700000018000000000000001c0000100000000000040000000100000000000000000007ddddddddddddddc0000000000000000000000511111111111100
% 000000000000000000008200022000000000000000000000080000000000040000000100000000000000000000aaaaaaaaaaaaaa800000000000000000000002aaaaaaaaabaa80
% 0000000000000000000060000020000000000000000000000400000000000400000001000000000000000000007757775777577700000000000000030000000404440444054400
% 0000000000000000000038888880000000000000000038000200000000000400000001000000000000000000003aaaaaaaaaaaaa0000000000000000e0000002aaaaaaaaabaa80
% 000000000000000000000e0000c000000000000000000e000100000000000400000001000000000000000000000ddddddddddddc00000000000000003800000111111111111100
% 0000000000000000000002e02200000000000000000001c000800000000004000000010000000000000000000002aaaaaaaaaaa800000000000000000c000002aaaaaaaaabaa80
% 0000000000000000000000780e000000000000000000004000400000000004000000020000000000000000000001f5757575757000000000000000000000000140404040414040
% 00000000000000000000000bb8000000000000000000000000600000000004000000020000000000000000000000aaaaaaaaaab0000000000000000000000000aaaaaaaaabaa80
% 000000000000000000000000000000000000000000000001803000000000040000000200000000000000000000003ddddddddde00000000000000000001c000111111111111100
% 000000000000000000000000000000000000000000000000e01800000000040000000200000000000000000000000eaaaaaaaa80000000000000000000038000aaaaaaaaabaa80
% 0000000000000000000000000000000000000000000000001c08000000000400000002000000000000000000000003d75757578000000000000000000000e00004040404050400
% 0000000000000000000000000000000000000000000000000604000000000400000002000000000000000000000000aaaaaaab00000000000000000000002000aaaaaaaaabaa80
% 00000000000000000000000000000000000000000000000000060000000004000000020000000000000000000000003dddddde0000000000000000000000000051111111111100
% 00000000000000000000000000000000000000000000000000030000000004000000020000000000000000000000000aaaaaa8000000000000000000000000402aaaaaaaabaa80
% 000000000000000000000000000000000000000000000000000f80000000040000000600000000000000000000000001f575700000000000000000000000007040404040414040
% 0000000000000000000000000000000000000000000000000001c00000000400000004000000000000000000000000003aaaa00000000000000000000000000e2aaaaaaaabaa80
% 00000000000000000000000000000000000000000000000000006000000044800000040000000000000000000000000007ff000000000000000000000000000391111111111100
% 0000000000000000000000000000000000000000000000000000200000003f0000000400000000000000000000000000000000000000000000000000000000002aaaaaaaabba80
% 000000000000000000000000000000000000000000000000000030000000250000000400000000000000000000000000000000000000000000000000000000000444044406f400
% 000000000000000000000000000000000000000000000000000018e00000210000000400000000000000000000000000000000000000000000000000000000000aaaaaaaafaa80
% 000000000000000000000000000000000000000000000000000008380000330000000c000000000000000000000000000000000000000000000000000000000011d11111153100
% 0000000000000000000000000000000000000000000000000000040e0000120000000800000000000000000000000000000000000000000000000000000000000afaaaaaaeaa80
% 00000000000000000000000000000000000000000000000000000601004012000000080000000000000000000000000000000000000000000000000000000000105e4040424040
% 000000000000000000000000000000000000000000000000000003000060120000000800000000000000000000000000000000000000000000000000000000000aaaaaaaaaea80
% 0000000000000000000000000000000000000000000000000000010004700c00000008000000000000000000000000000000000000000000000000000000000001111151135100
% 0000000000000000000000000000000000000000000000000000008003c80c0000000800000000000000000000000000000000000000000000000000000000000aaaaefaabea80
% 000000000000000000000000000000000000000000000000000000c000c63e0000001000000000000000000000000000000000000000000000000000000000000404079c058400
% 0000000000000000000000000000000000000000000000000000004000c37f00000010000000000000000000000000000000000000000000000000000000000002aaabaeafea80
% 000000000000000000000000000000000000000000000000000000200181ff800000100000000000000000000000000000000000000000000000000000000000051111971ff100
% 0000000000000000000000000000000000000000000000000000003000ffff80000010000000000000000000000000000000000000000000000000000000000002aaababbffa80
% 000000000000000000000000000000000000000000000000000000180000ffc00000200000000000000000000000000000000000000000000000000000000000044040fedff040
% 000000000000000000000000000000000000000000000000000000080000ffe0000020000000000000000000000000000000000000000000000000000000000002aaaaabfffa80
% 0000000000000000000000000000000000000000000000000000000c0000ff800000200000000000000000000000000000000000000000000000000000000000011111111ff100
% 000000000000000000000000000000000000000000000000000000040000ff807c0020000000000000000000000000000000000000000000000000000000000002aaaaaabffa80
% 0000000000000000000000000000000000000000000000000000000600007f000380600000000000000000000000000000000000000000000000000000000000014404441ff400
% 0000000000000000000000000000000000000000000000000000000200003e000003c0000000000000000000000000000000000000000000000000000000000000aaaaaaafea80
% 000000000000000000000000000000000000000000000000000000010000000000007e00000000000000000000000000000000000000000000000000000000000111111117d100
% 0000000000000000000000000000000000000000000000000000000180000000000040000000000000000000000000000000000000000000000000000000000000aaaaaaabaa80
% 00000000000000000000000000000000000000000000000000000000800000000000800fe000000000000000000000000000000000000000000000000000000001404040414040
% 0000000000000000000000000000000000000000000000000000000080000000000080000800000000000000000000000000000000000000000000000000000000aaaaaaabaa80
% 000000000000000000000000000000000000000000000000000000004000000000008000003c000000000000000000000000000000000000000000000000000001111111111100
% 0000000000000000000000000000000000000000000000000000000040000000000100000003e00000000000000000000000000000000000000000000000000000aaaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000020000000000100000000008000000000000000000000000000000000000000000000000000040404050400
% 0000000000000000000000000000000000000000000000000000000020000000000100000000007f00000000000000000000000000000000000000000000000000aaaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000030000000000200000000000000000000000000000000000000000000000000000000000000111111111100
% 0000000000000000000000000000000000000000000000000000000010000000000200000000000003f00000000000000000000000000000000000000000000000aaaaaaabaa80
% 00000000000000000000000000000000000000000000000000000000180000000002000000000000001c0000000000000000000000000000000000000000000000404040414040
% 0000000000000000000000000000000000000000000000000000000008000000000400000000000000000f000000000000000000000000000000000000000000002aaaaaabaa80
% 00000000000000000000000000000000000000000000000000000000040000000004000000000000000001f0000000000000000000000000000000000000000000511111111100
% 0000000000000000000000000000000000000000000000000000000006000000000c000000000000000000000000000000000000000000000000000000000000002aaaaaabaa80
% 00000000000000000000000000000000000000000000000000000000030000000008000000000000000000001f0000000000000000000000000000000000000000440444054400
% 00000000000000000000000000000000000000000000000000000000018000000010000000000000000000000040000000000000000000000000000000000000002aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000c000000030000000000000000000000001f0000000000000000000000000000000000000511111111100
% 000000000000000000000000000000000000000000000000000000000020000000200000000000000000000000000f0000000000000000000000000000000000002aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000180000004000000000000000000000000000070000000000000000000000000000000000004040414040
% 00000000000000000000000000000000000000000000000000000000000e000000800000000000000000000000000000f8000000000000000000000000000000002aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000038000030000000000000000000000000000000400000000000000000000000000000000111111111100
% 000000000000000000000000000000000000000000000000000000000000e0000e000000000000000000000000000000000f8000000000000000000000000000002aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000003c00380000000000000000000000000000000000700000000000000000000000000000040404050400
% 00000000000000000000000000000000000000000000000000000000000003ffe000000000000000000000000000000000000078000000000000000000000000000aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000000111111111100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000aaaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000000000000104040414040
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaabaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c0000000000000000000111111111100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000780000000000000000000aaaaaabaa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000040444054400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000000aaaaaabba80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111177100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000aaaaaafaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000004040446040
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000000000aaaaaaeaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00000000011111135100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000aaaaaaaea80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000040404074400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaabea80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00011111119100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c002aaaaabaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4407047c040
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001faabeafea80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000511371ff100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002abfbfffa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004747ffc00
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaabfffa80
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001117f1ff100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaabffa80
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040404fe040
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaabea80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010404040400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111100
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004040404040
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaaaa80
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111100
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaa00
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444044400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaaa800
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051111000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005550000
save
countdictstack
mark
newpath
/showpage {} def

[{

save 
/version23-manualfeedpatch where { pop false } { true }ifelse
 % we don't do an explicit 'get' since product and version MAY
 % be in systemdict or statusdict - this technique gets the lookup
 % without failure
statusdict begin
  product (LaserWriter) eq        % true if LaserWriter
  version cvr 23.0 eq             % true if version 23
end

and  % only install this patch if both are true
and  % true only if patch is not installed and is for this printer
     % save object and boolean on stack
dup { exch restore }if
% either true OR saveobject false
dup
{
  /version23-manualfeedpatch true def
  /oldversion23-showpage /showpage load def
  /showpage       % this showpage will wait extra time if manualfeed is true
  {%
     statusdict /manualfeed known
     {% manualfeed known in statusdict
        statusdict /manualfeed get
        {% if true then we loop for 5 seconds
           usertime 5000 add       % target usertime
           { % loop
             dup usertime sub 0 lt
             { exit }if
           }loop
           pop             % pop the usertime off the stac
        }if
     }if
     oldversion23-showpage
  }bind def
}if
not{ restore }if

} stopped cleartomark
/currentpacking where{pop/oldpack currentpacking def/setpacking where{pop
false setpacking}if}if/$brkpage 64 dict def $brkpage begin/prnt{dup type
/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
currentpoint/toy exch def/tox exch def 1 setgray newpath tox toy 2 sub moveto
0 ty rlineto tx 0 rlineto 0 ty neg rlineto closepath fill tox toy moveto 0
setgray show}bind def/nl{currentpoint exch pop lmargin exch moveto 0 -10
rmoveto}def/=={/cp 0 def typeprint nl}def/typeprint{dup type exec}readonly def
/lmargin 72 def/rmargin 72 def/tprint{dup length cp add rmargin gt{nl/cp 0 def
}if dup length cp add/cp exch def prnt}readonly def/cvsprint{=string cvs
tprint( )tprint}readonly def/integertype{cvsprint}readonly def/realtype{
cvsprint}readonly def/booleantype{cvsprint}readonly def/operatortype{(--)
tprint =string cvs tprint(-- )tprint}readonly def/marktype{pop(-mark- )tprint}
readonly def/dicttype{pop(-dictionary- )tprint}readonly def/nulltype{pop
(-null- )tprint}readonly def/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def/fonttype{pop(-fontid- )tprint}
readonly def/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype{dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}
ifelse}readonly def/arraytype{dup rcheck{dup xcheck{({)tprint{typeprint}forall
(})tprint}{([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}
ifelse}readonly def/packedarraytype{dup rcheck{dup xcheck{({)tprint{typeprint}
forall(})tprint}{([)tprint{typeprint}forall(])tprint}ifelse}{pop
(-packedarray- )tprint}ifelse}readonly def/courier/Courier findfont 10
scalefont def end errordict/handleerror{systemdict begin $error begin $brkpage
begin newerror{/newerror false store vmstatus pop pop 0 ne{grestoreall}if
showpage initgraphics courier setfont lmargin 720 moveto(ERROR: )prnt
errorname prnt nl(OFFENDING COMMAND: )prnt/command load prnt $error/ostack
known{nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if
systemdict/showpage get exec(%%[ Error: )print errorname =print
(; OffendingCommand: )print/command load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put/currentpacking where
{pop/setpacking where{pop oldpack setpacking}if}if
userdict /Pscript_Win_Driver_Incr 200 dict dup begin put
/FatalErrorIf{{initgraphics findfont exch scalefont setfont counttomark 3 div
cvi{moveto show}repeat showpage quit}{cleartomark}ifelse}bind def
/VM? {vmstatus exch sub exch pop gt { [
(This job requires more memory than is available in this printer.) 100 500
(Try one or more of the following, and then print again:) 100 485
(In the PostScript dialog box, click Optimize For Portability.) 115 470
(In the Device Options dialog box, make sure the Available Printer Memory is accurate.) 115 455
(Reduce the number of fonts in the document.) 115 440
(Print the document in parts.) 115 425
12 /Times-Roman showpage
(%%[ PrinterError: Low Printer VM ]%%) =
true FatalErrorIf}if} bind def
30000  VM?
/|/def load def/,/load load |/~/exch , |/?/ifelse , |/!/pop , |/`/begin , |/^
/index , |/@/dup , |/+/translate , |/$/roll , |/U/userdict , |/M/moveto , |/-
/rlineto , |/&/currentdict , |/:/gsave , |/;/grestore , |/F/false , |/T/true ,
|/N/newpath , |/E/end , |/Ac/arc , |/An/arcn , |/A/ashow , |/D/awidthshow , |
/C/closepath , |/V/div , |/O/eofill , |/L/fill , |/I/lineto , |/-C/rcurveto ,
|/-M/rmoveto , |/+S/scale , |/Ji/setfont , |/Lc/setlinecap , |/Lj/setlinejoin
, |/Lw/setlinewidth , |/S/show , |/LH/showpage , |/K/stroke , |/W/widthshow ,
|/R/rotate , |/b{bind |}bind |/bd{bind |}bind |/xd{~ |}bd/ld{, |}bd/lw/Lw ld
/lc/Lc ld/lj/Lj ld/sg/setgray ld/L2? F/languagelevel where{! languagelevel 2
ge{! T}if}if |/g{@ not{U/DefIf_save save put}if U/DefIf_bool 2 ^ put}b
/DefIf_El{if U/DefIf_bool get not @{U/DefIf_save get restore}if}b/e{DefIf_El !
}b/self & |/reinitialize{[/TextInit/GraphInit/UtilsInit counttomark{@ where{
self eq}{F}?{cvx exec}{!}?}repeat cleartomark}b/initialize{`{/ADO_mxRot ~ |
/TextInitialised? F | reinitialize E}{U/Pscript_Win_Data 200 dict @ ` put
/ADO_mxRot ~ |/TextInitialised? F | reinitialize}?}b/terminate{!{& self eq{
exit}{E}?}loop E}b/suspend/terminate , |/resume{` Pscript_Win_Data `}b/snap{
transform 0.25 sub round 0.25 add ~ 0.25 sub round 0.25 add ~ itransform}b
/dsnap{dtransform round ~ round ~ idtransform}b<04>cvn{}|/setjn{{statusdict
/jobname known{statusdict/jobname 3 -1 $ put}if}stopped cleartomark}b/solid{[]
0 setdash}b/setdsh{0 setdash}b/colspRefresh{}b/rp{4 2 $ M 1 ^ 0 - 0 ~ - neg 0
-}b/rr{1 ^ 0 - 0 ~ - neg 0 - C}b
L2? not g{/rf{N rp L}b/fx{1 1 dtransform @ 0 ge{1 sub 1}{1 add -0.25}? 3 -1 $
@ 0 ge{1 sub 1}{1 add -0.25}? 3 1 $ 4 1 $ idtransform 4 -2 $ idtransform}b/BZ{
4 -2 $ snap + +S fx rf}b/rs{N rp C K}b/rc{N rp clip N}b/sg{setgray}b/sco{
setrgbcolor}b/sgco{{sg}{sco}?}b}e
L2? g{/colspA/DeviceGray |/colspABC/DeviceRGB |/setAorABC{{colspA}{colspABC}?
setcolorspace}b/rf/rectfill , |/fx{1 1 dtransform @ 0 ge{1 sub 0.5}{1 add -0.5
}? 3 -1 $ @ 0 ge{1 sub 0.5}{1 add -0.5}? 3 1 $ 4 1 $ idtransform 4 -2 $
idtransform}b/BZ{4 -2 $ snap + +S fx rf}b/rs/rectstroke , |/rc/rectclip , |/sg
{@ @ setcolor}b/sco{setcolor}b/colspRefresh{colspABC setcolorspace}b/sgco{{sg
}{sco}?}b/UtilsInit{F setglobal}b/definecolorrendering{/ColorRendering
defineresource !}b/findcolorrendering{@/ColorRendering resourcestatus{! !
/ColorRendering findresource T}{! F}?}b/selectcolorrendering{@/ColorRendering
resourcestatus{! !/ColorRendering}{!/DefaultColorRendering/ColorRendering}?
findresource setcolorrendering}b}e
end

[ 1.000 0 0 1.000 0 0 ] false Pscript_Win_Driver_Incr dup /initialize get exec

[{0 
/languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/JobTimeout  4 -1 roll put setuserparams}{statusdict/setjobtimeout get exec}ifelse 
} stopped cleartomark
[{240 
/languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse 
} stopped cleartomark
[{
statusdict /manualfeed false put
} stopped cleartomark
[{

} stopped cleartomark
[{
letter
} stopped cleartomark
1 setlinecap 1 setlinejoin 
/mysetup [ 0.240 0 0 -0.240 19.000 784.000 ] | 

userdict begin /savelevel0 save def end
savelevel0 restore 
[{

} stopped cleartomark
[{

} stopped cleartomark
/mysetup [ 0.240 0 0 -0.240 19.000 784.000 ] | 
userdict begin /savelevel0 save def end
userdict begin /savelevel1 save def end
savelevel1 restore 
userdict begin /pagesave save def end mysetup concat colspRefresh : 1.000 1.000 1.000 sco 0 0 2550 3300 rf ; 

: 0 0 2391 3229 rc pagesave restore
Pscript_Win_Driver_Incr begin
/SavedCTM null |/CTMsave{/SavedCTM SavedCTM currentmatrix |}b/CTMrestore{
SavedCTM setmatrix}b/mp null |/ADO_mxRot null |/GDIHMatrix null |
/GDIHPatternDict 22 dict | GDIHPatternDict `/PatternType 1 |/PaintType 2 |
/Reps L2?{1}{5}? |/XStep 8 Reps mul |/YStep XStep |/BBox[0 0 XStep YStep]|
/TilingType 1 |/PaintProc{` 1 Lw[]0 setdash PaintData , exec E}b/FGnd null |
/BGnd null |/HS_Horizontal{horiz}b/HS_Vertical{vert}b/HS_FDiagonal{fdiag}b
/HS_BDiagonal{biag}b/HS_Cross{horiz vert}b/HS_DiagCross{fdiag biag}b/MaxXYStep
XStep YStep gt{XStep}{YStep}? |/horiz{Reps{0 4 M XStep 0 - 0 8 +}repeat 0 -8
Reps mul + K}b/vert{Reps{4 0 M 0 YStep - 8 0 +}repeat 0 -8 Reps mul + K}b/biag
{Reps{0 0 M MaxXYStep @ - 0 YStep neg M MaxXYStep @ - 0 8 +}repeat 0 -8 Reps
mul + 0 YStep M 8 8 - K}b/fdiag{Reps{0 0 M MaxXYStep @ neg - 0 YStep M
MaxXYStep @ neg - 0 8 +}repeat 0 -8 Reps mul + MaxXYStep @ M 8 -8 - K}b E
/makehatch{GDIHPatternDict/PaintData 3 -1 $ put CTMsave GDIHMatrix setmatrix
GDIHPatternDict matrix mp CTMrestore ~ U ~ 2 ^ put}b/h0{/h0/HS_Horizontal
makehatch}b/h1{/h1/HS_Vertical makehatch}b/h2{/h2/HS_FDiagonal makehatch}b/h3{
/h3/HS_BDiagonal makehatch}b/h4{/h4/HS_Cross makehatch}b/h5{/h5/HS_DiagCross
makehatch}b/GDIBWPatternDict 17 dict @ `/PatternType 1 |/PaintType L2?{1}{2}?
|/RepsV L2?{1}{6}? |/RepsH L2?{1}{5}? |/BBox[0 0 RepsH 1]|/TilingType 1 |
/XStep 1 |/YStep 1 |/Height 8 RepsV mul |/Width 8 |/mx[Width 0 0 Height neg 0
Height]|/FGnd null |/BGnd null |/SetBGndFGnd L2?{{BGnd null ne{BGnd aload !
sgco BBox aload ! 2 ^ sub ~ 3 ^ sub ~ rf}if FGnd null ne{FGnd aload ! sgco}if}
}{{}}? b/PaintProc{` SetBGndFGnd RepsH{Width Height F mx PaintData imagemask
Width 0 +}repeat E}b E |/GDIBWPatternMx null |/pfprep{save 4 1 $
/PatternOfTheDay 4 1 $ GDIBWPatternDict `/PaintData ~ |/BGnd ~ |/FGnd ~ | E
CTMsave GDIBWPatternMx setmatrix GDIBWPatternDict matrix mp CTMrestore ~ !}b
/hrf null |/prf{pfprep ~ 6 1 $ 5 hrf restore}b/GraphInit{GDIHMatrix null eq{
/SavedCTM matrix | : ADO_mxRot concat 0 0 snap + : 0.48 @ GDIHPatternDict `
YStep mul ~ XStep mul ~ dsnap YStep V ~ XStep V ~ E +S/GDIHMatrix matrix
currentmatrix readonly | ; : 0.24 -0.24 +S GDIBWPatternDict ` Width Height E
dsnap +S/GDIBWPatternMx matrix currentmatrix readonly | ; ;}if}b/cirp{360 0 An
C}b/ellp{CTMsave + +S 0.5 0 M 0 0 0.5 360 0 An C CTMrestore}b/rrp{/rad ~ |/y2
~ |/x2 ~ |/y1 ~ |/x1 ~ | x2 x1 add 2 V y1 M x1 y1 x1 y2 rad arct x1 y2 x2 y2
rad arct x2 y2 x2 y1 rad arct x2 y1 x1 y1 rad arct C}b/RRp{CTMsave + +S/dyS ~
|/dxS ~ | dxS 2 V 0 M 0 0 0 dyS 0.5 arct 0 dyS dxS dyS 0.5 arct dxS dyS dxS 0
0.5 arct dxS 0 0 0 0.5 arct C CTMrestore}b

L2? not g{/arct{arcto ! ! ! !}b/GDIpattfill{@ ` BGnd null ne PaintType 2 eq
and{: BGnd aload ! sgco fEOFill{O}{L}? ; FGnd aload ! U/fGray 2 ^ put{2}{4}?
-1 $}if E @ patterncalc : 4 ^/PaintType get 2 eq{fGray{6 -1 $ sg}{8 -3 $ sco}?
}if fEOFill{eoclip}{clip}? N patternfill ; N}b/hrf{/fGray 1 ^ 6 eq | -4 $ N rp
C/fEOFill F | GDIpattfill}b/hfMain{/fEOFill ~ |/fGray ~ | GDIpattfill}b/hf{T
hfMain}b/hfW{F hfMain}b/hs{currentpoint strokepath M hfW}b/pfMain{/fEOFill ~ |
pfprep GDIpattfill restore N}b/pf{T pfMain}b/pfW{F pfMain}b/ps{currentpoint
strokepath M pfW}b/mpstr 1 string |/mp{~ @ length 12 add dict copy `
/PatternCTM matrix currentmatrix |/PatternMatrix ~ |/PatWidth XStep mpstr
length mul |/PatHeight YStep |/FontType 3 |/Encoding 256 array | 3 string 0 1
255{Encoding ~ @ 3 ^ cvs cvn put}for !/FontMatrix matrix |/FontBBox BBox |
/BuildChar{! @ ` XStep 0 FontBBox aload ! setcachedevice/PaintProc , E : exec
;}b & E ~ @ 3 -1 $ definefont}b/patterncalc{` : PatternCTM setmatrix
PatternMatrix concat BBox aload ! ! ! + pathbbox ; PatHeight V ceiling 4 1 $
PatWidth V ceiling 4 1 $ PatHeight V floor 4 1 $ PatWidth V floor 4 1 $ 2 ^
sub cvi abs ~ 3 ^ sub cvi abs ~ 4 2 $ PatHeight mul ~ PatWidth mul ~ E}b
/patternfill{5 -1 $ @ ` Ji PatternCTM setmatrix PatternMatrix concat 0 2 ^ 2 ^
M 0 1 mpstr length 1 sub{1 ^ mpstr 3 1 $ put}for ! 2 ^{currentpoint 5 ^{mpstr
S}repeat YStep add M}repeat ! ! ! ! E}b}e

L2? g{/mp/makepattern , |/hrf{6 eq setAorABC setpattern rectfill}b/hf{
setAorABC setpattern O}b/hfW{setAorABC setpattern L}b/hs{setAorABC setpattern
K}b/pf{pfprep setpattern O restore N}b/pfW{pfprep setpattern L restore N}b/ps{
pfprep setpattern K restore N}b}e

end reinitialize
userdict begin /pagesave save def end mysetup concat colspRefresh 
: 0 0 0 sco 1 Lc 1 Lj solid 0 0 2391 3229 rc 
2359 492 N M -5 -8 - -6 -6 - -6 -3 - -6 -2 - -15 2 - -15 8 - -14 12 - -13 14 - -9 15 - -5 13 - -10 53 - -7 55 - -14 109 - -10 54 - -17 52 - -10 26 - -13 25 - -16 24 - -18 24 - -166 168 - -18 24 - -17 24 - -14 26 - -11 27 - -8 29 - -4 30 - 0 32 - 5 35 - 6 23 - 9 21 - 11 19 - 13 18 - 14 17 - 16 16 - 34 30 - 68 57 - 29 30 - 13 17 - 10 17 - 25 53 - 19 53 - 16 55 - 13 54 - 18 112 - 15 111 - 5 17 - 12 15 - 16 13 - 19 9 - 21 5 - 21 0 - 20 -7 - 8 -5 - 8 -8 - 19 -24 - 14 -26 - 12 -26 - 9 -27 - 6 -29 - 4 -29 - 3 -59 - -1 -61 - -4 -61 - -3 -60 - 0 -59 - 3 -83 - -1 -82 - -2 -83 - -5 -83 - -15 -165 - -18 -164 - -2 -30 - 2 -32 - 8 -70 - 22 -145 - 2 -35 - 0 -34 - -2 -32 - -7 -29 - -11 -26 - -7 -12 - -9 -10 - -10 -10 - -12 -9 - -13 -8 - -15 -7 - 16 6 - C : 0.651 0.651 0.651 sco O ; ; 
2358 493 N M 0 1 - 2 -1 - 0 -1 - -2 1 - C : 0.502 0.502 0.502 sco L ; 
2358 493 N M -5 -8 - 1 0 - -6 -6 - -6 -3 - -6 -2 - -15 2 - 1 0 - -15 8 - -14 12 - -13 14 - -9 15 - -5 13 - 0 -1 - -10 53 - -7 55 - -14 109 - -10 54 - 0 1 - -17 52 - -10 26 - -13 25 - -16 24 - -18 24 - -166 168 - -18 24 - -17 24 - -14 26 - -11 27 - -8 29 - 0 -1 - -4 30 - 0 32 - 5 35 - 6 23 - 9 21 - 11 19 - 13 18 - 14 17 - 16 16 - 34 30 - 0 -1 - 68 57 - 0 1 - 29 30 - 13 17 - 10 17 - 25 53 - 19 53 - -2 1 - -19 -53 - -25 -53 - -10 -17 - -13 -17 - 1 0 - -29 -30 - -68 -57 - -34 -30 - -16 -16 - -1 0 - -14 -17 - -13 -18 - -11 -19 - -9 -21 - -6 -23 - 0 -1 - -5 -35 - 0 -32 - 4 -30 - 8 -29 - 11 -27 - 14 -26 - 17 -24 - 18 -24 - 1 0 - 166 -168 - -1 0 - 18 -24 - 16 -24 - 13 -25 - 10 -26 - 17 -52 - 10 -54 - 14 -109 - 7 -55 - 10 -53 - 5 -13 - 9 -15 - 1 0 - 13 -14 - 0 -1 - 14 -12 - 15 -8 - 15 -2 - 1 0 - 6 2 - 6 3 - 0 1 - 6 6 - 5 8 - -2 1 - C : 0.502 0.502 0.502 sco L ; : 0 0 2391 3229 rc 
2185 1725 N M 16 55 - 13 54 - 18 112 - 15 111 - 5 17 - 12 15 - 0 -1 - 16 13 - 19 9 - -1 0 - 21 5 - 21 0 - 20 -7 - 8 -5 - 0 1 - 8 -8 - -1 0 - 19 -24 - 14 -26 - 12 -26 - 9 -27 - 6 -29 - 4 -29 - 3 -59 - -1 -61 - -4 -61 - -3 -60 - 0 -59 - 3 -83 - -1 -82 - -2 -83 - -5 -83 - -15 -165 - -18 -164 - -2 -30 - 2 -32 - 8 -70 - 22 -145 - 2 -35 - 0 -34 - -2 -32 - -7 -29 - 0 1 - -11 -26 - -7 -12 - 1 0 - -9 -10 - 1 -1 - 9 10 - 7 12 - 11 26 - 7 29 - 2 32 - 0 34 - -2 35 - -22 145 - -8 70 - -2 32 - 2 30 - 18 164 - 15 165 - 5 83 - 2 83 - 1 82 - -3 83 - 0 59 - 3 60 - 4 61 - 1 61 - -3 59 - -4 29 - -6 29 - 0 1 - -9 27 - -12 26 - -14 26 - -19 24 - -8 8 - -8 5 - -20 7 - -1 0 - -21 0 - -21 -5 - -19 -9 - -16 -13 - -1 0 - -12 -15 - -5 -17 - 0 -1 - -15 -111 - -18 -112 - -13 -54 - 0 1 - -16 -55 - 2 -1 - C : 0.502 0.502 0.502 sco L ; ; : 0 0 2391 3229 rc 
2393 521 N M -10 -10 - -12 -9 - -13 -8 - 1 -2 - 13 8 - 12 9 - 0 1 - 10 10 - -1 1 - C : 0.502 0.502 0.502 sco L ; ; 
2343 487 N M -1 0 - 1 -2 - 1 0 - -1 2 - C : 0.502 0.502 0.502 sco L ; 
2358 494 N M 1 -2 - -15 -7 - -1 2 - 15 7 - C : 0.502 0.502 0.502 sco L ; 
1062 719 N M -36 15 - -35 18 - -34 21 - -33 22 - -31 25 - -30 25 - -56 53 - -27 29 - -25 32 - -22 33 - -19 35 - -17 36 - -14 37 - -11 38 - -8 38 - -6 39 - -2 39 - 0 39 - 4 39 - 6 39 - 9 38 - 12 38 - 15 36 - 14 27 - 16 25 - 35 48 - 40 45 - 42 44 - 42 45 - 40 48 - 18 25 - 18 26 - 16 28 - 14 30 - 6 11 - 8 11 - 10 10 - 10 8 - 25 14 - 28 8 - 27 0 - 14 -2 - 12 -6 - 12 -7 - 10 -10 - 9 -13 - 7 -15 - 16 -48 - 11 -49 - 8 -48 - 5 -49 - 2 -48 - -1 -49 - -8 -97 - -13 -98 - -15 -97 - -15 -97 - -10 -97 - 0 -60 - 4 -76 - 4 -81 - -1 -38 - -4 -36 - -4 -23 - -6 -21 - -9 -17 - -11 -14 - -14 -9 - -17 -5 - -20 1 - -24 6 - 9 -14 - C : 1.000 1.000 1.000 sco O ; 
1063 720 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1063 720 N M -36 15 - -35 18 - -34 21 - -33 22 - -31 25 - -30 25 - -56 53 - -27 29 - -25 32 - -22 33 - -19 35 - -17 36 - -14 37 - -11 38 - 0 -1 - -8 38 - -6 39 - -2 39 - 0 39 - 4 39 - 6 39 - 9 38 - 12 38 - 15 36 - 14 27 - 16 25 - 35 48 - 40 45 - 42 44 - 42 45 - 40 48 - 18 25 - 18 26 - 16 28 - 14 30 - 6 11 - 8 11 - 10 10 - 0 -1 - 10 8 - 25 14 - 28 8 - -1 0 - 27 0 - 0 2 - -27 0 - -28 -8 - -25 -14 - -10 -8 - -10 -10 - -1 0 - -8 -11 - -6 -11 - -14 -30 - -16 -28 - -18 -26 - -18 -25 - -40 -48 - 1 0 - -42 -45 - -42 -44 - -40 -45 - -1 0 - -35 -48 - -16 -25 - -14 -27 - -15 -36 - -12 -38 - 0 -1 - -9 -38 - -6 -39 - -4 -39 - 0 -39 - 2 -39 - 6 -39 - 8 -38 - 11 -38 - 14 -37 - 17 -36 - 19 -35 - 22 -33 - 25 -32 - 1 0 - 27 -29 - 56 -53 - 0 -1 - 30 -25 - 31 -25 - 33 -22 - 34 -21 - 35 -18 - 36 -15 - 1 2 - C : 0 0 0 sco L ; 
1111 1935 N M 14 -2 - 12 -6 - 12 -7 - 0 1 - 10 -10 - -1 0 - 9 -13 - 7 -15 - 16 -48 - 11 -49 - 8 -48 - 5 -49 - 2 -48 - -1 -49 - -8 -97 - -13 -98 - -15 -97 - -15 -97 - -10 -97 - 0 -60 - 4 -76 - 4 -81 - -1 -38 - -4 -36 - -4 -23 - 0 1 - -6 -21 - -9 -17 - -11 -14 - 1 0 - -14 -9 - -17 -5 - -20 1 - 0 -2 - 20 -1 - 1 0 - 17 5 - 14 9 - 0 1 - 11 14 - 9 17 - 6 21 - 4 23 - 4 36 - 1 38 - -4 81 - -4 76 - 0 60 - 10 97 - 15 97 - 15 97 - 13 98 - 8 97 - 1 49 - -2 48 - -5 49 - -8 48 - -11 49 - 0 1 - -16 48 - -7 15 - -9 13 - -10 10 - -12 7 - -12 6 - -1 0 - -14 2 - 0 -2 - C : 0 0 0 sco L ; 
1053 734 N M -1 -2 rr : 0 0 0 sco O ; 
1077 728 N M 0 -2 - -24 6 - 0 2 - 24 -6 - C : 0 0 0 sco L ; 
1373 940 N M 30 -12 - 33 -12 - 37 -11 - 38 -9 - 40 -7 - 40 -5 - 40 -2 - 39 0 - 37 4 - 35 7 - 31 11 - 27 16 - 11 9 - 10 10 - 9 12 - 8 13 - 5 14 - 4 16 - 3 17 - 0 18 - 0 44 - 2 45 - 9 91 - 10 92 - 6 92 - -1 46 - -4 46 - -8 45 - -13 44 - -19 44 - -24 42 - -15 21 - -17 21 - -19 21 - -20 20 - -13 9 - -14 4 - -17 1 - -17 -2 - -19 -5 - -20 -7 - -44 -22 - -191 -122 - -24 -15 - -22 -16 - -20 -17 - -18 -17 - -16 -19 - -15 -19 - -25 -40 - -19 -42 - -12 -44 - -8 -45 - -1 -46 - 3 -46 - 8 -47 - 13 -46 - 17 -45 - 21 -44 - 24 -42 - 28 -40 - 31 -38 - 6 9 - C : 0.404 0.404 0.404 sco O ; 
1373 939 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0.149 0.149 0.149 sco L ; 
1373 939 N M 30 -12 - 33 -12 - 37 -11 - 38 -9 - 40 -7 - 40 -5 - 40 -2 - 39 0 - 37 4 - 35 7 - 1 0 - 31 11 - 27 16 - 11 9 - 0 1 - 10 10 - 9 12 - 8 13 - 5 14 - 4 16 - 3 17 - 0 18 - 0 44 - 2 45 - 9 91 - 10 92 - 6 92 - -1 46 - -4 46 - -8 45 - 0 1 - -13 44 - -19 44 - -24 42 - -15 21 - -17 21 - -19 21 - -20 20 - -13 9 - -14 4 - -1 0 - -17 1 - -17 -2 - -19 -5 - -20 -7 - 1 -2 - 20 7 - 19 5 - -1 0 - 17 2 - 17 -1 - 14 -4 - 13 -9 - 0 1 - 20 -20 - 19 -21 - -1 0 - 17 -21 - 15 -21 - 24 -42 - 19 -44 - 13 -44 - 8 -45 - 4 -46 - 1 -46 - -6 -92 - -10 -92 - -9 -91 - -2 -45 - 0 -44 - 0 -18 - -3 -17 - -4 -16 - 0 1 - -5 -14 - -8 -13 - -9 -12 - 1 0 - -10 -10 - -11 -9 - -27 -16 - -31 -11 - -35 -7 - -37 -4 - -39 0 - -40 2 - -40 5 - -40 7 - -38 9 - 1 0 - -37 11 - -33 12 - -30 12 - -1 -2 - C : 0.149 0.149 0.149 sco L ; 
1637 1744 N M -44 -22 - -191 -122 - -24 -15 - -22 -16 - -20 -17 - -18 -17 - -1 0 - -16 -19 - -15 -19 - -25 -40 - -19 -42 - -12 -44 - 0 -1 - -8 -45 - -1 -46 - 3 -46 - 8 -47 - 13 -46 - 17 -45 - 21 -44 - 24 -42 - 28 -40 - 2 1 - -28 40 - -24 42 - -21 44 - -17 45 - -13 46 - 0 -1 - -8 47 - -3 46 - 1 46 - 8 45 - 12 44 - 19 42 - 25 40 - 15 19 - 16 19 - 18 17 - 0 -1 - 20 17 - 22 16 - 24 15 - 191 122 - 44 22 - -1 2 - C : 0.149 0.149 0.149 sco L ; 
1366 931 N M 0 -1 - 2 1 - 0 1 - -2 -1 - C : 0.149 0.149 0.149 sco L ; 
1335 969 N M 2 1 - 31 -38 - -2 -1 - -31 38 - C : 0.149 0.149 0.149 sco L ; 
181 931 N M 25 -12 - 28 -11 - 31 -11 - 32 -8 - 34 -7 - 34 -5 - 33 -2 - 33 0 - 31 4 - 29 7 - 26 10 - 23 15 - 10 9 - 8 10 - 14 24 - 8 29 - 2 34 - 0 42 - 2 43 - 7 88 - 9 89 - 5 89 - -1 44 - -3 44 - -7 43 - -11 43 - -16 42 - -20 41 - -27 41 - -33 39 - -11 8 - -12 5 - -13 1 - -15 -2 - -16 -5 - -17 -7 - -37 -21 - -161 -118 - -20 -14 - -18 -16 - -17 -16 - -15 -17 - -27 -36 - -21 -39 - -15 -40 - -11 -43 - -6 -43 - -1 -44 - 2 -45 - 7 -45 - 11 -44 - 14 -44 - 18 -42 - 20 -41 - 24 -39 - 26 -36 - 5 9 - C : 0.910 0.910 0.910 sco O ; 
181 930 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0.102 0.102 0.102 sco L ; 
181 930 N M 25 -12 - 28 -11 - 31 -11 - 32 -8 - 34 -7 - 34 -5 - 33 -2 - 33 0 - 31 4 - 29 7 - 1 0 - 26 10 - 23 15 - 0 1 - 10 9 - 8 10 - 14 24 - 8 29 - 2 34 - 0 42 - 2 43 - 7 88 - 9 89 - 5 89 - -1 44 - -3 44 - -7 43 - -11 43 - 0 1 - -16 42 - -20 41 - -27 41 - -33 39 - -11 8 - -12 5 - -1 0 - -13 1 - -15 -2 - -16 -5 - -17 -7 - -37 -21 - -161 -118 - -20 -14 - -18 -16 - -17 -16 - 1 -1 - 17 16 - 18 16 - 0 -1 - 20 14 - 161 118 - 37 21 - 17 7 - 16 5 - -1 0 - 15 2 - 13 -1 - 12 -5 - 11 -8 - -1 1 - 33 -39 - 27 -41 - 20 -41 - 16 -42 - 11 -43 - 7 -43 - 3 -44 - 1 -44 - -5 -89 - -9 -89 - -7 -88 - -2 -43 - 0 -42 - -2 -34 - 0 1 - -8 -29 - -14 -24 - -8 -10 - 1 0 - -10 -9 - -23 -15 - -26 -10 - -29 -7 - -31 -4 - -33 0 - -33 2 - -34 5 - -34 7 - -32 8 - 1 0 - -31 11 - -28 11 - -25 12 - -1 -2 - C : 0.102 0.102 0.102 sco L ; 
150 1521 N M -15 -17 - -1 0 - -27 -36 - -21 -39 - -15 -40 - 0 -1 - -11 -43 - -6 -43 - -1 -44 - 2 -45 - 7 -45 - 11 -44 - 14 -44 - 18 -42 - 20 -41 - 24 -39 - 2 1 - -24 39 - -20 41 - -18 42 - -14 44 - 0 -1 - -11 44 - -7 45 - -2 45 - 1 44 - 6 43 - 11 43 - 15 40 - 21 39 - 27 36 - 15 17 - -1 1 - C : 0.102 0.102 0.102 sco L ; 
175 922 N M 0 -1 - 2 1 - 0 1 - -2 -1 - C : 0.102 0.102 0.102 sco L ; 
149 958 N M 2 1 - 26 -36 - -2 -1 - -26 36 - C : 0.102 0.102 0.102 sco L ; : 222 365 354 114 rc pagesave restore
Pscript_Win_Driver_Incr begin
/bullets{{/bullet}repeat}b/ANSIEncoding[/grave/acute/circumflex/tilde/macron
/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi 18
bullets StandardEncoding 32 95 getinterval aload ! 3 bullets/quotesinglbase
/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron
/guilsinglleft/OE 4 bullets/quoteleft/quoteright/quotedblleft/quotedblright
/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe 2 bullets
/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered
/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]| ANSIEncoding @ 39/quotesingle put 96/grave
put/ANSIEncodingOld ANSIEncoding 256 array copy | ANSIEncodingOld @[138 153
154 169 172 174 177 178 179 181 185 188 189 190 208 215 221 222 240 247 253
254]{/bullet put @}forall 166/bar put 176/ring put

/TextInit{TextInitialised? not{/Pscript_Windows_Font & |/TextInitialised? T |
/fM[1 0 0 -1 0 0]|/mFM matrix |/iMat[1 0 0.212557 neg 1 0 0]|}if}b/xUP null |
/yUP null |/uW null |/xSP null |/ySP null |/sW null |/copyfont{1 ^ length add
dict `{1 ^/FID ne{|}{! !}?}forall & E}b/rF{3 copyfont @ `/Encoding
ANSIEncoding &/CharStrings known{CharStrings/Eth known not{! ANSIEncodingOld}
if}if | E}b/mF{findfont ~{@/Encoding get @ StandardEncoding eq{! T}{{
ISOLatin1Encoding}stopped{! F}{eq}?{T}{@ ` T 32 1 127{Encoding 1 ^ get
StandardEncoding 3 -1 $ get eq and}for E}?}?}{F}?{rF}{3 copyfont}? `
/OrigFontType ~ |/OrigFontName ~ | & E 2 ^ ~ definefont fM 5 4 -1 $ put fM 4 0
put fM makefont Pscript_Windows_Font 3 1 $ put}b/xF{scalefont
Pscript_Windows_Font 3 1 $ put}b/xMF{mFM astore makefont Pscript_Windows_Font
3 1 $ put}b/xF2/scalefont , |/xMF2{mFM astore makefont}b/sLT{: Lw -M
currentpoint snap M 0 - 0 Lc K ;}b/sSU{N/uW ~ |/yUP ~ |/xUP ~ |}b/sU{xUP yUP
uW sLT}b/sST{N/sW ~ |/ySP ~ |/xSP ~ |}b/sT{xSP ySP sW sLT}b/sR{: + R 0 0 M}b
/sRxy{: matrix astore concat 0 0 M}b/eR/; , |

end reinitialize
userdict begin /pagesave save def end mysetup concat colspRefresh 
: 0 0 0 sco 1 Lc 1 Lj solid 222 365 354 114 rc 0 0 0 sco %%IncludeFont: Times-Roman
(F0) cvn
0.900 
 (Times-Roman) cvn /Type1 
T 
(Times-Roman) cvn
mF 
(F0_100) cvn
F0
100 
xF 
F0_100
Ji 
340 365 M 
0.400 0 (P)A 
; : 302 409 282 90 rc 0 0 0 sco (F0_80) cvn
F0
80 
xF 
F0_80
Ji 
396 409 M 
(3)S 
; : 812 377 354 114 rc 0 0 0 sco F0_100
Ji 
930 377 M 
0.400 0 (P)A 
; : 892 421 282 90 rc 0 0 0 sco F0_80
Ji 
986 421 M 
(2)S 
; : 1410 373 354 114 rc 0 0 0 sco F0_100
Ji 
1528 373 M 
0.400 0 (P)A 
; : 1490 417 282 90 rc 0 0 0 sco F0_80
Ji 
1584 417 M 
(1)S 
; : 1939 368 354 114 rc 0 0 0 sco F0_100
Ji 
2057 368 M 
0.400 0 (P)A 
; : 2018 412 282 90 rc 0 0 0 sco F0_80
Ji 
2112 412 M 
(0)S 
; 
2351 1971 N M -2 6 rr : 0 0 0 sco O ; 
2349 1976 N M 12 -5 - 3 -2 - -1 4 - -11 43 - -1 4 - -1 -4 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 11 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
2338 1971 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2347 1827 N M -2 -1 rr : 0 0 0 sco O ; 
2351 1971 N M -2 1 rr : 0 0 0 sco O ; 
2347 1827 N M -2 0 - 4 144 - 2 0 - -4 -144 - C : 0 0 0 sco L ; 
2367 2033 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2366 2034 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2366 2033 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2347 779 N M -2 5 rr : 0 0 0 sco O ; 
2345 783 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
2334 779 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2347 573 N M -2 -1 rr : 0 0 0 sco O ; 
2347 779 N M -2 1 rr : 0 0 0 sco O ; 
2347 573 N M -2 206 rr : 0 0 0 sco O ; 
1072 1758 N M -2 5 rr : 0 0 0 sco O ; 
1070 1762 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1059 1758 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1072 1635 N M -2 -1 rr : 0 0 0 sco O ; 
1072 1758 N M -2 1 rr : 0 0 0 sco O ; 
1072 1635 N M -2 123 rr : 0 0 0 sco O ; 
1072 949 N M -2 6 rr : 0 0 0 sco O ; 
1070 954 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1059 950 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1072 831 N M -2 -1 rr : 0 0 0 sco O ; 
1072 949 N M -2 1 rr : 0 0 0 sco O ; 
1072 831 N M -2 118 rr : 0 0 0 sco O ; 
491 1494 N M -2 5 rr : 0 0 0 sco O ; 
489 1498 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
478 1494 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
491 1450 N M -2 -1 rr : 0 0 0 sco O ; 
491 1494 N M -2 1 rr : 0 0 0 sco O ; 
491 1450 N M -2 44 rr : 0 0 0 sco O ; 
487 1398 N M -2 5 rr : 0 0 0 sco O ; 
485 1402 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
474 1398 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
487 1283 N M -2 -1 rr : 0 0 0 sco O ; 
487 1398 N M -2 1 rr : 0 0 0 sco O ; 
487 1283 N M -2 115 rr : 0 0 0 sco O ; 
491 1194 N M -2 5 rr : 0 0 0 sco O ; 
489 1198 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
478 1194 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
491 1104 N M -2 -1 rr : 0 0 0 sco O ; 
491 1194 N M -2 1 rr : 0 0 0 sco O ; 
491 1104 N M -2 90 rr : 0 0 0 sco O ; 
491 1048 N M -2 5 rr : 0 0 0 sco O ; 
489 1052 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
478 1048 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
491 967 N M -2 -1 rr : 0 0 0 sco O ; 
491 1048 N M -2 1 rr : 0 0 0 sco O ; 
491 967 N M -2 81 rr : 0 0 0 sco O ; 
245 1165 N M -2 6 rr : 0 0 0 sco O ; 
243 1170 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
231 1165 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
245 1080 N M -2 -1 rr : 0 0 0 sco O ; 
245 1165 N M -2 1 rr : 0 0 0 sco O ; 
245 1080 N M -2 85 rr : 0 0 0 sco O ; 
245 1369 N M -2 6 rr : 0 0 0 sco O ; 
243 1374 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
231 1369 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
245 1246 N M -2 -1 rr : 0 0 0 sco O ; 
245 1369 N M -2 1 rr : 0 0 0 sco O ; 
245 1246 N M -2 123 rr : 0 0 0 sco O ; 
1122 826 N M 0 -2 - -5 1 - 0 2 - 5 -1 - C : 0 0 0 sco L ; 
1118 825 N M 7 11 - 2 2 - -4 0 - -45 -3 - -4 0 - 4 -2 - 40 -21 - 3 -1 - -1 2 - -1 1 - -40 21 - -1 -2 - 1 0 - 45 3 - -1 2 - 0 -1 - -7 -11 - 2 -1 - C : 0 0 0 sco L ; 
1120 813 N M -2 13 - -2 0 - 0 -1 - 2 -13 - 2 1 - C : 0 0 0 sco L ; 
2339 570 N M 1 -2 rr : 0 0 0 sco O ; 
2323 573 N M -1 -2 rr : 0 0 0 sco O ; 
2339 570 N M 0 -2 - -16 3 - 0 2 - 16 -3 - C : 0 0 0 sco L ; 
2297 579 N M 1 -2 rr : 0 0 0 sco O ; 
2266 585 N M -1 -2 rr : 0 0 0 sco O ; 
2297 579 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2239 591 N M 1 -2 rr : 0 0 0 sco O ; 
2208 598 N M -1 -2 rr : 0 0 0 sco O ; 
2239 591 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
2181 603 N M 1 -2 rr : 0 0 0 sco O ; 
2150 610 N M -1 -2 rr : 0 0 0 sco O ; 
2181 603 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
2123 616 N M 1 -2 rr : 0 0 0 sco O ; 
2092 622 N M -1 -2 rr : 0 0 0 sco O ; 
2123 616 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2065 628 N M 1 -2 rr : 0 0 0 sco O ; 
2034 634 N M -1 -2 rr : 0 0 0 sco O ; 
2065 628 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2007 640 N M 1 -2 rr : 0 0 0 sco O ; 
1976 646 N M -1 -2 rr : 0 0 0 sco O ; 
2007 640 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1949 652 N M 1 -2 rr : 0 0 0 sco O ; 
1918 659 N M -1 -2 rr : 0 0 0 sco O ; 
1949 652 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1891 664 N M 1 -2 rr : 0 0 0 sco O ; 
1860 671 N M -1 -2 rr : 0 0 0 sco O ; 
1891 664 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1833 677 N M 1 -2 rr : 0 0 0 sco O ; 
1802 683 N M -1 -2 rr : 0 0 0 sco O ; 
1833 677 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1775 689 N M 1 -2 rr : 0 0 0 sco O ; 
1744 695 N M -1 -2 rr : 0 0 0 sco O ; 
1775 689 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1717 701 N M 1 -2 rr : 0 0 0 sco O ; 
1686 707 N M -1 -2 rr : 0 0 0 sco O ; 
1717 701 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1659 713 N M 1 -2 rr : 0 0 0 sco O ; 
1628 720 N M -1 -2 rr : 0 0 0 sco O ; 
1659 713 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1601 725 N M 1 -2 rr : 0 0 0 sco O ; 
1570 732 N M -1 -2 rr : 0 0 0 sco O ; 
1601 725 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1543 738 N M 1 -2 rr : 0 0 0 sco O ; 
1512 744 N M -1 -2 rr : 0 0 0 sco O ; 
1543 738 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1485 750 N M 1 -2 rr : 0 0 0 sco O ; 
1454 756 N M -1 -2 rr : 0 0 0 sco O ; 
1485 750 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1427 762 N M 1 -2 rr : 0 0 0 sco O ; 
1396 768 N M -1 -2 rr : 0 0 0 sco O ; 
1427 762 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1369 774 N M 1 -2 rr : 0 0 0 sco O ; 
1338 781 N M -1 -2 rr : 0 0 0 sco O ; 
1369 774 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1311 786 N M 1 -2 rr : 0 0 0 sco O ; 
1280 793 N M -1 -2 rr : 0 0 0 sco O ; 
1311 786 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1253 798 N M 1 -2 rr : 0 0 0 sco O ; 
1222 805 N M -1 -2 rr : 0 0 0 sco O ; 
1253 798 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1195 811 N M 1 -2 rr : 0 0 0 sco O ; 
1164 817 N M -1 -2 rr : 0 0 0 sco O ; 
1195 811 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1137 823 N M 1 -2 rr : 0 0 0 sco O ; 
1122 826 N M -1 -2 rr : 0 0 0 sco O ; 
1137 823 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
2291 2027 N M 0 2 - 6 1 - 0 -2 - -6 -1 - C : 0 0 0 sco L ; 
2296 2030 N M -2 -13 - -2 -3 - 4 1 - 40 19 - 3 2 - -3 0 - -45 5 - -3 1 - 1 -2 - 1 -1 - 45 -5 - 1 2 - -1 0 - -40 -19 - 1 -2 - 0 1 - 2 13 - -2 1 - C : 0 0 0 sco L ; 
2289 2040 N M 7 -11 - 2 0 - 0 1 - -7 11 - -2 -1 - C : 0 0 0 sco L ; 
1079 1817 N M -1 2 rr : 0 0 0 sco O ; 
1095 1820 N M 1 2 rr : 0 0 0 sco O ; 
1079 1817 N M 0 2 - 16 3 - 0 -2 - -16 -3 - C : 0 0 0 sco L ; 
1121 1825 N M -1 2 rr : 0 0 0 sco O ; 
1152 1830 N M 1 2 rr : 0 0 0 sco O ; 
1121 1825 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1179 1835 N M -1 2 rr : 0 0 0 sco O ; 
1210 1840 N M 1 2 rr : 0 0 0 sco O ; 
1179 1835 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1237 1845 N M -1 2 rr : 0 0 0 sco O ; 
1268 1850 N M 1 2 rr : 0 0 0 sco O ; 
1237 1845 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1295 1855 N M -1 2 rr : 0 0 0 sco O ; 
1326 1860 N M 1 2 rr : 0 0 0 sco O ; 
1295 1855 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1352 1865 N M -1 2 rr : 0 0 0 sco O ; 
1383 1870 N M 1 2 rr : 0 0 0 sco O ; 
1352 1865 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1410 1874 N M -1 2 rr : 0 0 0 sco O ; 
1441 1880 N M 1 2 rr : 0 0 0 sco O ; 
1410 1874 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1468 1884 N M -1 2 rr : 0 0 0 sco O ; 
1499 1890 N M 1 2 rr : 0 0 0 sco O ; 
1468 1884 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1526 1894 N M -1 2 rr : 0 0 0 sco O ; 
1556 1900 N M 1 2 rr : 0 0 0 sco O ; 
1526 1894 N M 0 2 - 30 6 - 0 -2 - -30 -6 - C : 0 0 0 sco O ; 
1583 1904 N M -1 2 rr : 0 0 0 sco O ; 
1614 1910 N M 1 2 rr : 0 0 0 sco O ; 
1583 1904 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1641 1914 N M -1 2 rr : 0 0 0 sco O ; 
1672 1920 N M 1 2 rr : 0 0 0 sco O ; 
1641 1914 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1699 1924 N M -1 2 rr : 0 0 0 sco O ; 
1730 1930 N M 1 2 rr : 0 0 0 sco O ; 
1699 1924 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1756 1934 N M -1 2 rr : 0 0 0 sco O ; 
1787 1940 N M 1 2 rr : 0 0 0 sco O ; 
1756 1934 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1814 1944 N M -1 2 rr : 0 0 0 sco O ; 
1845 1950 N M 1 2 rr : 0 0 0 sco O ; 
1814 1944 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1872 1954 N M -1 2 rr : 0 0 0 sco O ; 
1903 1960 N M 1 2 rr : 0 0 0 sco O ; 
1872 1954 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1930 1964 N M -1 2 rr : 0 0 0 sco O ; 
1961 1969 N M 1 2 rr : 0 0 0 sco O ; 
1930 1964 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1987 1974 N M -1 2 rr : 0 0 0 sco O ; 
2018 1979 N M 1 2 rr : 0 0 0 sco O ; 
1987 1974 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2045 1984 N M -1 2 rr : 0 0 0 sco O ; 
2076 1989 N M 1 2 rr : 0 0 0 sco O ; 
2045 1984 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2103 1994 N M -1 2 rr : 0 0 0 sco O ; 
2134 1999 N M 1 2 rr : 0 0 0 sco O ; 
2103 1994 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2161 2004 N M -1 2 rr : 0 0 0 sco O ; 
2191 2009 N M 1 2 rr : 0 0 0 sco O ; 
2161 2004 N M 0 2 - 30 5 - 0 -2 - -30 -5 - C : 0 0 0 sco O ; 
2218 2014 N M -1 2 rr : 0 0 0 sco O ; 
2249 2019 N M 1 2 rr : 0 0 0 sco O ; 
2218 2014 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2276 2024 N M -1 2 rr : 0 0 0 sco O ; 
2291 2027 N M 1 2 rr : 0 0 0 sco O ; 
2276 2024 N M 0 2 - 15 3 - 0 -2 - -15 -3 - C : 0 0 0 sco L ; 
1018 1795 N M 0 2 - 6 2 - 0 -2 - -6 -2 - C : 0 0 0 sco L ; 
1023 1799 N M 0 -13 - -1 -4 - 3 2 - 35 28 - 3 3 - -3 -1 - -44 -5 - -4 0 - 2 -1 - 1 -1 - 44 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - 0 13 - -2 1 - C : 0 0 0 sco L ; 
1014 1808 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
496 1571 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
511 1578 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
496 1571 N M -1 2 - 15 7 - 1 -2 - -15 -7 - C : 0 0 0 sco L ; 
535 1588 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
563 1600 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
535 1588 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
587 1610 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
615 1622 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
587 1610 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
639 1633 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
667 1645 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
639 1633 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
692 1655 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
720 1667 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
692 1655 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
744 1677 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
772 1689 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
744 1677 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
796 1700 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
824 1712 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
796 1700 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
848 1722 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
876 1734 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
848 1722 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
901 1744 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
929 1756 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
901 1744 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
953 1767 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
981 1779 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
953 1767 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
1005 1789 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1019 1795 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1005 1789 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
550 957 N M 0 -2 - -6 2 - 0 2 - 6 -2 - C : 0 0 0 sco L ; 
545 957 N M 8 11 - 1 3 - -3 -1 - -45 -3 - -3 0 - 3 -2 - 39 -22 - 3 -1 - -1 2 - -1 1 - -39 22 - -1 -2 - 1 0 - 45 3 - -1 2 - 0 -1 - -8 -11 - 2 -1 - C : 0 0 0 sco L ; 
547 944 N M -2 14 - -2 0 - 0 -1 - 2 -14 - 2 1 - C : 0 0 0 sco L ; 
1047 844 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1032 848 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1047 844 N M -1 -2 - -15 4 - 1 2 - 15 -4 - C : 0 0 0 sco L ; 
1005 854 N M 1 -2 rr : 0 0 0 sco O ; 
976 860 N M -1 -2 rr : 0 0 0 sco O ; 
1005 854 N M 0 -2 - -29 6 - 0 2 - 29 -6 - C : 0 0 0 sco O ; 
950 866 N M 1 -2 rr : 0 0 0 sco O ; 
921 873 N M -1 -2 rr : 0 0 0 sco O ; 
950 866 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
895 879 N M 1 -2 rr : 0 0 0 sco O ; 
866 885 N M -1 -2 rr : 0 0 0 sco O ; 
895 879 N M 0 -2 - -29 6 - 0 2 - 29 -6 - C : 0 0 0 sco O ; 
840 891 N M 1 -2 rr : 0 0 0 sco O ; 
811 898 N M -1 -2 rr : 0 0 0 sco O ; 
840 891 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
785 904 N M 1 -2 rr : 0 0 0 sco O ; 
756 910 N M -1 -2 rr : 0 0 0 sco O ; 
785 904 N M 0 -2 - -29 6 - 0 2 - 29 -6 - C : 0 0 0 sco O ; 
730 916 N M 1 -2 rr : 0 0 0 sco O ; 
701 923 N M -1 -2 rr : 0 0 0 sco O ; 
730 916 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
675 929 N M 1 -2 rr : 0 0 0 sco O ; 
646 935 N M -1 -2 rr : 0 0 0 sco O ; 
675 929 N M 0 -2 - -29 6 - 0 2 - 29 -6 - C : 0 0 0 sco O ; 
620 941 N M 1 -2 rr : 0 0 0 sco O ; 
591 948 N M -1 -2 rr : 0 0 0 sco O ; 
620 941 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
565 954 N M 1 -2 rr : 0 0 0 sco O ; 
550 957 N M -1 -2 rr : 0 0 0 sco O ; 
565 954 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
425 1541 N M -2 2 - 5 3 - 2 -2 - -5 -3 - C : 0 0 0 sco L ; 
428 1545 N M 2 -13 - -1 -3 - 3 3 - 31 33 - 3 3 - -4 -2 - -43 -12 - -3 0 - 2 -2 - 2 0 - 43 12 - -1 2 - -1 0 - -31 -33 - 2 -1 - 0 1 - -2 13 - -2 -1 - C : 0 0 0 sco L ; 
418 1552 N M 10 -8 - 2 2 - -1 0 - -10 8 - -1 -2 - C : 0 0 0 sco L ; 
247 1434 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
260 1442 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
247 1434 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
280 1454 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
304 1468 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
280 1454 N M -1 2 - 24 14 - 1 -2 - -24 -14 - C : 0 0 0 sco O ; 
324 1480 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
348 1494 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
324 1480 N M -1 2 - 24 14 - 1 -2 - -24 -14 - C : 0 0 0 sco O ; 
368 1507 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
391 1521 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
368 1507 N M -1 2 - 23 14 - 1 -2 - -23 -14 - C : 0 0 0 sco O ; 
412 1533 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
425 1541 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
412 1533 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
304 1054 N M 0 -2 - -5 3 - 0 2 - 5 -3 - C : 0 0 0 sco L ; 
299 1055 N M 10 9 - 3 2 - -3 0 - -44 9 - -4 1 - 3 -2 - 32 -31 - 2 -3 - 0 3 - -1 1 - -32 31 - -1 -1 - 1 -1 - 44 -9 - 0 2 - -1 -1 - -10 -9 - 1 -1 - C : 0 0 0 sco L ; 
298 1043 N M 2 13 - -2 0 - -2 -13 - 2 0 - C : 0 0 0 sco L ; 
462 972 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
448 979 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
462 972 N M -1 -2 - -14 7 - 1 2 - 14 -7 - C : 0 0 0 sco L ; 
424 992 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
396 1007 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
424 992 N M -1 -2 - -28 15 - 1 2 - 28 -15 - C : 0 0 0 sco O ; 
371 1019 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
343 1034 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
371 1019 N M -1 -2 - -28 15 - 1 2 - 28 -15 - C : 0 0 0 sco O ; 
319 1047 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
305 1054 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
319 1047 N M -1 -2 - -14 7 - 1 2 - 14 -7 - C : 0 0 0 sco L ; 
507 1256 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
506 1257 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
506 1256 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
507 1106 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
506 1107 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
506 1106 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
507 1452 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
506 1453 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
506 1452 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
135 1155 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
130 1156 N M 10 8 - 3 2 - -3 0 - -43 13 - -4 2 - 3 -3 - 30 -34 - 2 -3 - 0 2 - 0 2 - -30 34 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
128 1143 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
224 1097 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
211 1106 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
224 1097 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
191 1119 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
168 1133 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
191 1119 N M -1 -2 - -23 14 - 1 2 - 23 -14 - C : 0 0 0 sco O ; 
148 1146 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
135 1155 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
148 1146 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
182 1387 N M -2 2 - 4 4 - 2 -2 - -4 -4 - C : 0 0 0 sco L ; 
184 1392 N M 4 -13 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 13 - -2 -1 - C : 0 0 0 sco L ; 
173 1398 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
82 1312 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
95 1322 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
82 1312 N M -1 2 - 13 10 - 1 -2 - -13 -10 - C : 0 0 0 sco L ; 
118 1339 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
146 1360 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
118 1339 N M -1 2 - 28 21 - 1 -2 - -28 -21 - C : 0 0 0 sco O ; 
169 1378 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
182 1387 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
169 1378 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
88 1244 N M -4 7 rr : 0 0 0 sco O ; 
85 1249 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -13 -43 - -1 -4 - 3 1 - 2 2 - 13 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
73 1244 N M 13 5 - 1 4 - -1 0 - -1 0 - -13 -5 - 1 -4 - C : 0 0 0 sco L ; 
86 1184 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
88 1184 N M -4 -2 rr : 0 0 0 sco O ; 
88 1184 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
88 1244 N M -4 2 rr : 0 0 0 sco O ; 
88 1234 N M -4 10 rr : 0 0 0 sco O ; 
261 1232 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -5 4 - -4 6 - -2 7 - 2 7 - 4 6 - 5 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
260 1233 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -5 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 5 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -5 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 5 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
260 1232 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
261 1428 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -5 4 - -4 6 - -2 8 - 2 7 - 4 6 - 5 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
260 1428 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -5 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 5 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -5 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 5 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
260 1428 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
102 1298 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
101 1298 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
101 1298 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
102 1190 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
101 1190 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
101 1190 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
261 1082 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -5 4 - -4 6 - -2 7 - 2 7 - 4 6 - 5 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
260 1083 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -5 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 5 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -5 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 5 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
260 1082 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
507 965 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
506 965 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
506 965 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
507 1565 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
506 1565 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
506 1565 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1088 841 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1087 842 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1087 841 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1088 1816 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1087 1817 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1087 1816 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
2363 558 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2362 559 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2362 558 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1077 1538 N M -2 5 rr : 0 0 0 sco O ; 
1075 1542 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1064 1538 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1077 1494 N M -2 -1 rr : 0 0 0 sco O ; 
1077 1538 N M -2 1 rr : 0 0 0 sco O ; 
1077 1494 N M -2 44 rr : 0 0 0 sco O ; 
1073 1442 N M -2 5 rr : 0 0 0 sco O ; 
1071 1446 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1060 1442 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1073 1327 N M -2 -1 rr : 0 0 0 sco O ; 
1073 1442 N M -2 1 rr : 0 0 0 sco O ; 
1073 1327 N M -2 115 rr : 0 0 0 sco O ; 
1077 1238 N M -2 5 rr : 0 0 0 sco O ; 
1075 1242 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1064 1238 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1077 1148 N M -2 -1 rr : 0 0 0 sco O ; 
1077 1238 N M -2 1 rr : 0 0 0 sco O ; 
1077 1148 N M -2 90 rr : 0 0 0 sco O ; 
1077 1092 N M -2 5 rr : 0 0 0 sco O ; 
1075 1096 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1064 1092 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1077 1011 N M -2 -1 rr : 0 0 0 sco O ; 
1077 1092 N M -2 1 rr : 0 0 0 sco O ; 
1077 1011 N M -2 81 rr : 0 0 0 sco O ; 
761 1217 N M -2 5 rr : 0 0 0 sco O ; 
759 1221 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
747 1217 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
761 1132 N M -2 -1 rr : 0 0 0 sco O ; 
761 1217 N M -2 1 rr : 0 0 0 sco O ; 
761 1132 N M -2 85 rr : 0 0 0 sco O ; 
761 1421 N M -2 6 rr : 0 0 0 sco O ; 
759 1426 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
747 1421 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
761 1298 N M -2 -1 rr : 0 0 0 sco O ; 
761 1421 N M -2 1 rr : 0 0 0 sco O ; 
761 1298 N M -2 123 rr : 0 0 0 sco O ; 
1007 1591 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
1011 1596 N M 0 -14 - -1 -4 - 3 2 - 36 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -36 -28 - 1 -2 - 0 1 - 0 14 - -2 1 - C : 0 0 0 sco L ; 
1002 1604 N M 9 -9 - 2 0 - 0 1 - -9 9 - -2 -1 - C : 0 0 0 sco L ; 
769 1493 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
783 1499 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
769 1493 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
811 1511 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
844 1524 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
811 1511 N M -1 2 - 33 13 - 1 -2 - -33 -13 - C : 0 0 0 sco O ; 
872 1536 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
905 1549 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
872 1536 N M -1 2 - 33 13 - 1 -2 - -33 -13 - C : 0 0 0 sco O ; 
933 1561 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
965 1574 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
933 1561 N M -1 2 - 32 13 - 1 -2 - -32 -13 - C : 0 0 0 sco O ; 
993 1585 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1008 1591 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
993 1585 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
825 1103 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
821 1103 N M 9 10 - 2 2 - -4 0 - -45 4 - -3 0 - 3 -2 - 36 -28 - 2 -2 - 0 3 - -1 1 - -36 28 - -1 -2 - 1 0 - 45 -4 - -1 2 - 0 -1 - -9 -10 - 2 -1 - C : 0 0 0 sco L ; 
821 1090 N M 0 14 - -2 0 - 0 -1 - 0 -14 - 2 1 - C : 0 0 0 sco L ; 
1048 1016 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1033 1022 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1048 1016 N M -1 -2 - -15 6 - 1 2 - 15 -6 - C : 0 0 0 sco L ; 
1008 1032 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
978 1043 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1008 1032 N M -1 -2 - -30 11 - 1 2 - 30 -11 - C : 0 0 0 sco O ; 
952 1053 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
922 1065 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
952 1053 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
896 1075 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
867 1087 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
896 1075 N M -1 -2 - -29 12 - 1 2 - 29 -12 - C : 0 0 0 sco O ; 
841 1097 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
826 1103 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
841 1097 N M -1 -2 - -15 6 - 1 2 - 15 -6 - C : 0 0 0 sco L ; 
958 1238 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
953 1239 N M 10 8 - 4 1 - -4 1 - -42 15 - -3 1 - 2 -2 - 28 -35 - 1 -3 - 1 2 - 0 2 - -28 35 - -2 -1 - 0 -1 - 42 -15 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
950 1227 N M 4 12 - -2 2 - 0 -1 - -4 -12 - 2 -1 - C : 0 0 0 sco L ; 
1077 1153 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1064 1162 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1077 1153 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1035 1184 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1000 1208 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1035 1184 N M -1 -2 - -35 24 - 1 2 - 35 -24 - C : 0 0 0 sco O ; 
971 1229 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
958 1238 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
971 1229 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1039 1469 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
1043 1473 N M 2 -13 - 0 -3 - 2 3 - 31 32 - 3 2 - -4 -1 - -44 -11 - -3 0 - 2 -1 - 1 -1 - 44 11 - 0 2 - -31 -32 - 1 -1 - -2 13 - -2 0 - C : 0 0 0 sco L ; 
1032 1481 N M 11 -8 - 2 0 - -1 1 - -11 8 - -1 -1 - C : 0 0 0 sco L ; 
915 1397 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
928 1405 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
915 1397 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
959 1423 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
995 1443 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
959 1423 N M -1 2 - 36 20 - 1 -2 - -36 -20 - C : 0 0 0 sco O ; 
1026 1461 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1040 1469 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1026 1461 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
903 1317 N M -4 8 rr : 0 0 0 sco O ; 
900 1323 N M 15 -6 - 4 0 - -1 3 - -15 51 - -2 7 - -2 -7 - -14 -51 - -1 -5 - 4 2 - 1 2 - 14 51 - -4 1 - 0 -1 - 15 -51 - 4 1 - -2 1 - -15 6 - -1 -4 - C : 0 0 0 sco L ; 
888 1317 N M 14 6 - -1 4 - -1 0 - -14 -6 - 2 -4 - C : 0 0 0 sco L ; 
903 1265 N M -4 -2 rr : 0 0 0 sco O ; 
903 1317 N M -4 2 rr : 0 0 0 sco O ; 
903 1265 N M -4 52 rr : 0 0 0 sco O ; 
1093 1300 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1092 1301 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1092 1300 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1093 1150 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1092 1151 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1092 1150 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1093 1496 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1092 1497 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1092 1496 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
922 1381 N M -1 -8 - -4 -6 - -5 -5 - -7 -1 - -6 1 - -6 5 - -3 6 - -2 8 - 2 8 - 3 7 - 6 5 - 6 1 - 7 -1 - 5 -5 - 4 -7 - 1 -8 - C : 0 0 0 sco O ; 
921 1381 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -5 -5 - -7 -1 - -6 1 - 1 0 - -6 5 - -3 6 - 0 -1 - -2 8 - 2 8 - 3 7 - 0 -1 - 6 5 - -1 0 - 6 1 - 7 -1 - 0 1 - 5 -5 - -1 0 - 4 -7 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 7 - -5 5 - -1 0 - -7 1 - -6 -1 - -6 -5 - -1 0 - -3 -7 - 0 -1 - -2 -8 - 2 -8 - 3 -6 - 1 -1 - 6 -5 - 6 -1 - 7 1 - 1 1 - 5 5 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
921 1381 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
922 1271 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
921 1271 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
921 1271 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
776 1284 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
775 1284 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
775 1284 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
776 1479 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
775 1479 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
775 1479 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
776 1134 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
775 1134 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
775 1134 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1093 1009 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1092 1009 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1092 1009 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1093 1609 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1092 1609 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1092 1609 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2351 1762 N M -2 6 rr : 0 0 0 sco O ; 
2349 1767 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
2338 1762 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2351 1639 N M -2 -1 rr : 0 0 0 sco O ; 
2351 1762 N M -2 1 rr : 0 0 0 sco O ; 
2351 1639 N M -2 123 rr : 0 0 0 sco O ; 
2351 954 N M -2 5 rr : 0 0 0 sco O ; 
2349 958 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2338 954 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2351 835 N M -2 -1 rr : 0 0 0 sco O ; 
2351 954 N M -2 1 rr : 0 0 0 sco O ; 
2351 835 N M -2 119 rr : 0 0 0 sco O ; 
1772 1513 N M -2 5 rr : 0 0 0 sco O ; 
1770 1517 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1759 1513 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1772 1469 N M -2 -1 rr : 0 0 0 sco O ; 
1772 1513 N M -2 1 rr : 0 0 0 sco O ; 
1772 1469 N M -2 44 rr : 0 0 0 sco O ; 
1768 1417 N M -2 6 rr : 0 0 0 sco O ; 
1766 1422 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
1755 1417 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1768 1303 N M -2 -1 rr : 0 0 0 sco O ; 
1768 1417 N M -2 1 rr : 0 0 0 sco O ; 
1768 1303 N M -2 114 rr : 0 0 0 sco O ; 
1772 1213 N M -2 5 rr : 0 0 0 sco O ; 
1770 1217 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1759 1213 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1772 1123 N M -2 -1 rr : 0 0 0 sco O ; 
1772 1213 N M -2 1 rr : 0 0 0 sco O ; 
1772 1123 N M -2 90 rr : 0 0 0 sco O ; 
1772 1067 N M -2 6 rr : 0 0 0 sco O ; 
1770 1072 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
1759 1067 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1772 986 N M -2 -1 rr : 0 0 0 sco O ; 
1772 1067 N M -2 1 rr : 0 0 0 sco O ; 
1772 986 N M -2 81 rr : 0 0 0 sco O ; 
1456 1192 N M -2 6 rr : 0 0 0 sco O ; 
1454 1197 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
1442 1192 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
1456 1107 N M -2 -1 rr : 0 0 0 sco O ; 
1456 1192 N M -2 1 rr : 0 0 0 sco O ; 
1456 1107 N M -2 85 rr : 0 0 0 sco O ; 
1456 1396 N M -2 6 rr : 0 0 0 sco O ; 
1454 1401 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 3 - -1 -3 - -13 -44 - -1 -3 - 2 1 - 1 1 - 13 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
1442 1396 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
1456 1273 N M -2 -1 rr : 0 0 0 sco O ; 
1456 1396 N M -2 1 rr : 0 0 0 sco O ; 
1456 1273 N M -2 123 rr : 0 0 0 sco O ; 
2282 1799 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
2286 1803 N M 1 -13 - 0 -4 - 2 2 - 35 29 - 4 3 - -4 -1 - -45 -6 - -4 0 - 2 -1 - 1 -1 - 45 6 - 1 2 - -1 0 - -35 -29 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
2277 1812 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
1776 1582 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1790 1588 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1776 1582 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1817 1599 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1847 1612 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1817 1599 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1873 1623 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1903 1636 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1873 1623 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1930 1648 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1960 1661 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1930 1648 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1986 1672 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2016 1685 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1986 1672 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2043 1696 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2073 1709 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2043 1696 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2099 1720 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2129 1733 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2099 1720 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2156 1744 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2186 1757 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2156 1744 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2212 1769 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2242 1782 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2212 1769 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2269 1793 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2283 1799 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2269 1793 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1826 971 N M 0 -2 - -6 1 - 0 2 - 6 -1 - C : 0 0 0 sco L ; 
1821 970 N M 7 11 - 1 2 - -3 0 - -44 -2 - -4 0 - 4 -2 - 39 -22 - 2 -1 - 0 2 - -1 1 - -39 22 - -1 -2 - 1 0 - 44 2 - -1 2 - 0 -1 - -7 -11 - 2 -1 - C : 0 0 0 sco L ; 
1823 958 N M -2 13 - -2 0 - 0 -1 - 2 -13 - 2 1 - C : 0 0 0 sco L ; 
2325 849 N M 1 -2 rr : 0 0 0 sco O ; 
2310 852 N M -1 -2 rr : 0 0 0 sco O ; 
2325 849 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
2284 859 N M 1 -2 rr : 0 0 0 sco O ; 
2255 866 N M -1 -2 rr : 0 0 0 sco O ; 
2284 859 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
2229 872 N M 1 -2 rr : 0 0 0 sco O ; 
2199 879 N M -1 -2 rr : 0 0 0 sco O ; 
2229 872 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2173 886 N M 1 -2 rr : 0 0 0 sco O ; 
2144 893 N M -1 -2 rr : 0 0 0 sco O ; 
2173 886 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
2118 899 N M 1 -2 rr : 0 0 0 sco O ; 
2088 906 N M -1 -2 rr : 0 0 0 sco O ; 
2118 899 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2062 913 N M 1 -2 rr : 0 0 0 sco O ; 
2033 920 N M -1 -2 rr : 0 0 0 sco O ; 
2062 913 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
2008 926 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1978 934 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2008 926 N M -1 -2 - -30 8 - 1 2 - 30 -8 - C : 0 0 0 sco O ; 
1952 940 N M 1 -2 rr : 0 0 0 sco O ; 
1922 947 N M -1 -2 rr : 0 0 0 sco O ; 
1952 940 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
1897 953 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1867 961 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1897 953 N M -1 -2 - -30 8 - 1 2 - 30 -8 - C : 0 0 0 sco O ; 
1842 967 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1827 971 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1842 967 N M -1 -2 - -15 4 - 1 2 - 15 -4 - C : 0 0 0 sco L ; 
1702 1567 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
1706 1571 N M 1 -13 - 0 -4 - 2 2 - 35 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
1697 1580 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
1464 1468 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1478 1474 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1464 1468 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1507 1486 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1539 1499 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1507 1486 N M -1 2 - 32 13 - 1 -2 - -32 -13 - C : 0 0 0 sco O ; 
1567 1511 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1600 1524 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1567 1511 N M -1 2 - 33 13 - 1 -2 - -33 -13 - C : 0 0 0 sco O ; 
1628 1536 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1660 1549 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1628 1536 N M -1 2 - 32 13 - 1 -2 - -32 -13 - C : 0 0 0 sco O ; 
1688 1561 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1703 1567 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1688 1561 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
1520 1078 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
1516 1078 N M 9 10 - 2 2 - -4 0 - -45 4 - -4 1 - 4 -3 - 36 -27 - 2 -2 - 0 3 - -1 1 - -36 27 - -1 -2 - 1 0 - 45 -4 - -1 2 - 0 -1 - -9 -10 - 2 -1 - C : 0 0 0 sco L ; 
1516 1066 N M 0 13 - -2 0 - 0 -1 - 0 -13 - 2 1 - C : 0 0 0 sco L ; 
1743 991 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1729 997 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1743 991 N M -1 -2 - -14 6 - 1 2 - 14 -6 - C : 0 0 0 sco L ; 
1703 1007 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1673 1019 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1703 1007 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
1647 1029 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1617 1040 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1647 1029 N M -1 -2 - -30 11 - 1 2 - 30 -11 - C : 0 0 0 sco O ; 
1591 1050 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1562 1062 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1591 1050 N M -1 -2 - -29 12 - 1 2 - 29 -12 - C : 0 0 0 sco O ; 
1536 1072 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1521 1078 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1536 1072 N M -1 -2 - -15 6 - 1 2 - 15 -6 - C : 0 0 0 sco L ; 
1653 1213 N M -2 -2 - -4 4 - 2 2 - 4 -4 - C : 0 0 0 sco L ; 
1648 1215 N M 10 7 - 4 1 - -4 1 - -42 15 - -3 1 - 2 -2 - 28 -35 - 1 -3 - 1 2 - 0 2 - -28 35 - -2 -1 - 0 -1 - 42 -15 - 1 2 - -1 0 - -10 -7 - 1 -2 - C : 0 0 0 sco L ; 
1645 1202 N M 4 13 - -2 2 - 0 -1 - -4 -13 - 2 -1 - C : 0 0 0 sco L ; 
1772 1129 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1760 1138 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1772 1129 N M -1 -2 - -12 9 - 1 2 - 12 -9 - C : 0 0 0 sco L ; 
1730 1159 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1696 1183 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1730 1159 N M -1 -2 - -34 24 - 1 2 - 34 -24 - C : 0 0 0 sco O ; 
1666 1204 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1653 1213 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1666 1204 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1734 1444 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
1738 1448 N M 2 -13 - 0 -3 - 2 3 - 31 32 - 2 2 - -3 -1 - -43 -10 - -3 0 - 2 -1 - 1 -1 - 43 10 - 0 2 - -31 -32 - 1 -1 - -2 13 - -2 0 - C : 0 0 0 sco L ; 
1728 1457 N M 10 -9 - 2 0 - -1 1 - -10 9 - -1 -1 - C : 0 0 0 sco L ; 
1610 1372 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1623 1380 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1610 1372 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
1654 1398 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1690 1419 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1654 1398 N M -1 2 - 36 21 - 1 -2 - -36 -21 - C : 0 0 0 sco O ; 
1721 1437 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1735 1444 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1721 1437 N M -1 2 - 14 7 - 1 -2 - -14 -7 - C : 0 0 0 sco L ; 
1598 1293 N M -4 7 rr : 0 0 0 sco O ; 
1595 1298 N M 15 -5 - 4 0 - -1 3 - -15 50 - -2 7 - -2 -7 - -14 -50 - -1 -4 - 3 1 - 2 2 - 14 50 - -4 1 - 0 -1 - 15 -50 - 4 1 - -2 1 - -15 5 - -1 -4 - C : 0 0 0 sco L ; 
1582 1293 N M 14 5 - 0 4 - -1 0 - -14 -5 - 1 -4 - C : 0 0 0 sco L ; 
1598 1240 N M -4 -2 rr : 0 0 0 sco O ; 
1598 1293 N M -4 2 rr : 0 0 0 sco O ; 
1598 1240 N M -4 53 rr : 0 0 0 sco O ; 
1788 1276 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1787 1276 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1787 1276 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1788 1126 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1787 1126 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1787 1126 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1788 1471 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1787 1472 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1787 1471 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1617 1355 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1616 1355 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1616 1355 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1617 1246 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
1616 1246 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1616 1246 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1346 1182 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
1340 1183 N M 11 8 - 3 2 - -3 0 - -43 13 - -3 1 - 2 -2 - 29 -34 - 2 -3 - 0 2 - 0 2 - -29 34 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -11 -8 - 1 -2 - C : 0 0 0 sco L ; 
1338 1170 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
1435 1124 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1422 1133 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1435 1124 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1402 1146 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1379 1161 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1402 1146 N M -1 -2 - -23 15 - 1 2 - 23 -15 - C : 0 0 0 sco O ; 
1359 1173 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1346 1182 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1359 1173 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1392 1414 N M -2 2 - 5 4 - 2 -2 - -5 -4 - C : 0 0 0 sco L ; 
1395 1419 N M 4 -13 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 13 - -2 -1 - C : 0 0 0 sco L ; 
1384 1425 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
1293 1339 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1306 1349 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1293 1339 N M -1 2 - 13 10 - 1 -2 - -13 -10 - C : 0 0 0 sco L ; 
1329 1366 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1356 1387 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1329 1366 N M -1 2 - 27 21 - 1 -2 - -27 -21 - C : 0 0 0 sco O ; 
1380 1405 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1392 1414 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1380 1405 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
1298 1271 N M -4 7 rr : 0 0 0 sco O ; 
1295 1276 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -12 -43 - -1 -5 - 4 2 - 1 2 - 12 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
1285 1271 N M 12 5 - 0 4 - -1 0 - -1 0 - -12 -5 - 2 -4 - C : 0 0 0 sco L ; 
1296 1211 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
1298 1211 N M -4 -2 rr : 0 0 0 sco O ; 
1298 1211 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
1298 1271 N M -4 2 rr : 0 0 0 sco O ; 
1298 1261 N M -4 10 rr : 0 0 0 sco O ; 
1471 1259 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1470 1259 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1470 1259 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1471 1451 N M -1 -9 - -4 -7 - -6 -5 - -7 -2 - -8 2 - -6 5 - -4 7 - -1 9 - 1 9 - 4 7 - 6 5 - 8 2 - 7 -2 - 6 -5 - 4 -7 - 1 -9 - C : 0 0 0 sco O ; 
1470 1451 N M -1 -9 - 0 1 - -4 -7 - 1 0 - -6 -5 - -7 -2 - -8 2 - 1 0 - -6 5 - -4 7 - 0 -1 - -1 9 - 1 9 - 4 7 - 0 -1 - 6 5 - -1 0 - 8 2 - 7 -2 - 6 -5 - -1 1 - 4 -7 - 1 -9 - 2 0 - -1 9 - 0 1 - -4 7 - -6 5 - -7 2 - -1 0 - -8 -2 - -6 -5 - -1 0 - -4 -7 - 0 -1 - -1 -9 - 1 -9 - 4 -7 - 1 -1 - 6 -5 - 8 -2 - 1 0 - 7 2 - 6 5 - 0 1 - 4 7 - 1 9 - -2 0 - C : 0 0 0 sco L ; 
1470 1451 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1313 1326 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1312 1326 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1312 1326 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1313 1217 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 8 - 4 5 - 6 5 - 7 1 - 7 -1 - 6 -5 - 4 -5 - 2 -8 - C : 0 0 0 sco O ; 
1312 1218 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 5 - 0 -1 - 6 5 - -1 0 - 7 1 - 7 -1 - 6 -5 - -1 1 - 4 -5 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 5 - -6 5 - -1 0 - -7 1 - -7 -1 - -6 -5 - -1 0 - -4 -5 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1312 1217 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1471 1109 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1470 1109 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1470 1109 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1788 984 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1787 985 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1787 984 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1788 1584 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1787 1585 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1787 1584 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2367 845 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
2366 846 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2366 845 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
2367 1820 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
2366 1821 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2366 1820 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
2356 1542 N M -2 5 rr : 0 0 0 sco O ; 
2354 1546 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2343 1542 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2356 1498 N M -2 -1 rr : 0 0 0 sco O ; 
2356 1542 N M -2 1 rr : 0 0 0 sco O ; 
2356 1498 N M -2 44 rr : 0 0 0 sco O ; 
2352 1446 N M -2 6 rr : 0 0 0 sco O ; 
2350 1451 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
2339 1446 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2352 1332 N M -2 -1 rr : 0 0 0 sco O ; 
2352 1446 N M -2 1 rr : 0 0 0 sco O ; 
2352 1332 N M -2 114 rr : 0 0 0 sco O ; 
2356 1242 N M -2 5 rr : 0 0 0 sco O ; 
2354 1246 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2343 1242 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2356 1152 N M -2 -1 rr : 0 0 0 sco O ; 
2356 1242 N M -2 1 rr : 0 0 0 sco O ; 
2356 1152 N M -2 90 rr : 0 0 0 sco O ; 
2356 1096 N M -2 6 rr : 0 0 0 sco O ; 
2354 1101 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
2343 1096 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2356 1015 N M -2 -1 rr : 0 0 0 sco O ; 
2356 1096 N M -2 1 rr : 0 0 0 sco O ; 
2356 1015 N M -2 81 rr : 0 0 0 sco O ; 
2145 1213 N M -2 6 rr : 0 0 0 sco O ; 
2143 1218 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
2132 1213 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2145 1128 N M -2 -1 rr : 0 0 0 sco O ; 
2145 1213 N M -2 1 rr : 0 0 0 sco O ; 
2145 1128 N M -2 85 rr : 0 0 0 sco O ; 
2294 1584 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
2296 1588 N M 5 -12 - 1 -3 - 1 3 - 25 37 - 3 3 - -4 -2 - -41 -18 - -3 -1 - 2 -1 - 2 0 - 41 18 - -1 2 - -1 0 - -25 -37 - 2 -1 - 0 1 - -5 12 - -2 -1 - C : 0 0 0 sco L ; 
2285 1594 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
2174 1488 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2187 1498 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2174 1488 N M -1 2 - 13 10 - 1 -2 - -13 -10 - C : 0 0 0 sco L ; 
2205 1512 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2225 1529 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2205 1512 N M -1 2 - 20 17 - 1 -2 - -20 -17 - C : 0 0 0 sco O ; 
2243 1543 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2264 1560 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2243 1543 N M -1 2 - 21 17 - 1 -2 - -21 -17 - C : 0 0 0 sco O ; 
2282 1574 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2294 1584 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2282 1574 N M -1 2 - 12 10 - 1 -2 - -12 -10 - C : 0 0 0 sco L ; 
2203 1097 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
2198 1098 N M 10 8 - 4 1 - -4 1 - -43 13 - -3 1 - 2 -2 - 30 -34 - 2 -3 - 0 2 - 0 2 - -30 34 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
2196 1085 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
2327 1020 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2314 1028 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2327 1020 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
2283 1048 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2248 1070 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2283 1048 N M -1 -2 - -35 22 - 1 2 - 35 -22 - C : 0 0 0 sco O ; 
2217 1089 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2203 1097 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2217 1089 N M -1 -2 - -14 8 - 1 2 - 14 -8 - C : 0 0 0 sco L ; 
2144 1424 N M -4 8 rr : 0 0 0 sco O ; 
2141 1430 N M 14 -6 - 4 -1 - -1 4 - -14 51 - -2 7 - -2 -7 - -15 -51 - -1 -4 - 3 1 - 2 2 - 15 51 - -4 1 - 0 -1 - 14 -51 - 4 1 - -1 1 - -14 6 - -2 -4 - C : 0 0 0 sco L ; 
2127 1424 N M 15 6 - 1 4 - -1 0 - -1 0 - -15 -6 - 1 -4 - C : 0 0 0 sco L ; 
2144 1372 N M -4 -2 rr : 0 0 0 sco O ; 
2144 1424 N M -4 2 rr : 0 0 0 sco O ; 
2144 1372 N M -4 52 rr : 0 0 0 sco O ; 
2372 1304 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
2371 1304 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2371 1304 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2372 1154 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
2371 1154 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2371 1154 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2372 1500 N M -1 -7 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
2371 1500 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2371 1500 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2162 1378 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2161 1378 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2161 1378 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2036 1203 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
2030 1204 N M 10 8 - 3 2 - -3 0 - -43 13 - -4 2 - 3 -3 - 30 -34 - 2 -3 - 0 2 - 0 2 - -30 34 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
2028 1191 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
2124 1146 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2111 1154 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2124 1146 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
2091 1167 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2069 1182 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2091 1167 N M -1 -2 - -22 15 - 1 2 - 22 -15 - C : 0 0 0 sco O ; 
2049 1194 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2036 1203 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2049 1194 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
2082 1435 N M -2 2 - 4 4 - 2 -2 - -4 -4 - C : 0 0 0 sco L ; 
2084 1440 N M 4 -13 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 13 - -2 -1 - C : 0 0 0 sco L ; 
2073 1446 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
1983 1360 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1995 1370 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1983 1360 N M -1 2 - 12 10 - 1 -2 - -12 -10 - C : 0 0 0 sco L ; 
2019 1388 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2046 1408 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2019 1388 N M -1 2 - 27 20 - 1 -2 - -27 -20 - C : 0 0 0 sco O ; 
2069 1426 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2082 1435 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2069 1426 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
1988 1293 N M -4 6 rr : 0 0 0 sco O ; 
1985 1297 N M 12 -4 - 4 -1 - -1 4 - -12 42 - -2 7 - -2 -7 - -12 -42 - -1 -4 - 3 1 - 2 2 - 12 42 - -4 1 - 0 -1 - 12 -42 - 4 1 - -2 1 - -12 4 - -1 -4 - C : 0 0 0 sco L ; 
1974 1293 N M 12 4 - 0 4 - -1 0 - -12 -4 - 1 -4 - C : 0 0 0 sco L ; 
1986 1232 N M 0 50 - 0 11 - 0 -61 - C : 0.502 0.502 0.502 sco O ; 
1988 1232 N M -4 -2 rr : 0 0 0 sco O ; 
1988 1232 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
1988 1293 N M -4 2 rr : 0 0 0 sco O ; 
1988 1282 N M -4 11 rr : 0 0 0 sco O ; 
2161 1280 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2160 1281 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2160 1280 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2003 1347 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -5 4 - -4 6 - -2 8 - 2 7 - 4 6 - 5 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2002 1347 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -5 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 5 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -5 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 5 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2002 1347 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2003 1243 N M -2 -9 - -4 -8 - -6 -5 - -7 -1 - -8 1 - -5 5 - -4 8 - -2 9 - 2 8 - 4 8 - 5 5 - 8 1 - 7 -1 - 6 -5 - 4 -8 - 2 -8 - C : 0 0 0 sco O ; 
2002 1243 N M -2 -9 - 0 1 - -4 -8 - 1 0 - -6 -5 - -7 -1 - -8 1 - 1 0 - -5 5 - -4 8 - 0 -1 - -2 9 - 2 8 - 4 8 - 5 5 - -1 -1 - 8 1 - 7 -1 - 6 -5 - -1 1 - 4 -8 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 8 - -6 5 - -1 0 - -7 1 - -8 -1 - -5 -5 - -1 0 - -4 -8 - 0 -1 - -2 -8 - 2 -9 - 4 -8 - 1 0 - 5 -5 - 0 -1 - 8 -1 - 7 1 - 1 0 - 6 5 - 0 1 - 4 8 - 2 9 - -2 0 - C : 0 0 0 sco L ; 
2002 1243 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2161 1130 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2160 1131 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2160 1130 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2372 1013 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2371 1013 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2371 1013 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2372 1613 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2371 1613 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2371 1613 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2162 1487 N M -1 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2161 1487 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
2161 1487 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2145 1328 N M -2 5 rr : 0 0 0 sco O ; 
2143 1332 N M 13 -4 - 3 -1 - -1 3 - -15 43 - -1 4 - -1 -4 - -10 -44 - -1 -3 - 2 1 - 1 1 - 10 44 - -2 1 - 0 -1 - 15 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2132 1327 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2148 1266 N M -2 -1 rr : 0 0 0 sco O ; 
2145 1328 N M -2 1 rr : 0 0 0 sco O ; 
2148 1266 N M -2 0 - -3 62 - 2 0 - 3 -62 - C : 0 0 0 sco L ; 
LH 
pagesave restore

(%%[ Page: 1 ]%%)  =

Pscript_Win_Driver_Incr dup /terminate get exec
savelevel0 restore 
(%%[ LastPage ]%%)  =
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 2185 w @beginspecial 25 @llx 303 @lly 588
@urx 765 @ury 1656 @rhi @setspecial
%%BeginDocument: nfigures/dag2-2.epsi



% 000000000000000007f0000000003f8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000031c0000000018e000000000fe0000000003f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000030e000000001870000000006380000000018e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000030e0000000018700000000061c000000001870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003060000000018300000000061c000000001870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003060000000018300000000060c000000001830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003060000000018300000000060c000000001830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003060000000018300000000060c000000001830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000030c0000000018600000000060c000000001830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000031c0000000018e000000000618000000001860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003f8000000001fc0000000006380000000018e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000300000000001800000000007f0000000001fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000030007000000180010000000600000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000300048000001800700000006001c0000001800380000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003000c8000001800100000006003e00000018006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003000cc00000180010000000600230000001800440000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000003000cc00000180010000000600410000001800040000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000030008400000180010000000600410000001800040000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000380084000001c0010000000600010000001800040000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000007c0084000003e0010000000700010000001c00080000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000008400000000010000000f80020000003e001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000084000000000100000000000200000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000008400000000010000000000040000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000008400000000010000000000040000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000c400000000010000000000080000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000cc00000000010000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000004c00000000010000000000108000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000780000000007c0000000003f0000000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000003f0000000000780000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000001ff0000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000dc000000003018000000001c58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000a8000000001ef00000000600c000000006004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000001550000000055500000000c004000000005016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000202800000006bac0000000800200000000c002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000055540000000d5540000000800200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000088880000000eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555400000010002000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000002020000001baba00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000088880000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000020220000001abaa00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000002220000001baba00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000020220000001abaa00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555400000010002000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000002020000001baba00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000088880000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000020220000001abaa00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000002220000001baba00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000020220000001abaa00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555400000010002000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000002020000001baba00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000088880000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000020220000001abaa00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000155540000001555600000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000001554000
% 0000000000000000002220000001baba0000001000200000000800100000000000000000000000000000000000000000000000000000000000000000000000000000002a202800
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000000000555555400
% 00000000000000000888a0000001eeee00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000002888888a00
% 0000000000000000155540000001555600000010002000000001011000000000000000000000000000000000000000000000000000000000000000000000000000055555555500
% 0000000000000000020220000001abaa00000010002000000008001000000000000000000000000000000000000000000000000000000000000000000000000000a20202020200
% 000000000000000015554000000155540000001000200000000c445000000000000000000000000000000000000000000000000000000000000000000000000015555557f55500
% 00000000000000000888a0000001eeee000000180020000000080010000000000000000000000000000000000000000000000000000000000000000000000002a888888ff88880
% 000000000000000015554000000155540000000800200000000010200000000000000000000000000000000000000000000000000000000000000000000000555555555ff55540
% 0000000000000000002020000000baba0000000800600000000400200000000000000000000000000000000000000000000000000000000000000000000002a02020203ff02000
% 0000000000000000155540000000d5540000000400400000000444400000000000000000000000000000000000000000000000000000000000000000000055555555555ffd5540
% 0000000000000000088880000000eeec0000000601800000000300c00000000000000000000000000000000000000000000000000000000000000000000a88888888889ff88880
% 000000000000000005554000000055540000000183000000000183800000000000000000000000000000000000000000000000000000000000000000015555555555555ff55540
% 00000000000000000a02800000003bb800000000fc00000000007e0000000000000000000000000000000000000000000000000000000000000000002a0202020202021ff20200
% 00000000000000000555000000000dc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555555557ff55540
% 000000000000000000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8888888888888b888888880
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000555555555555557d555d55540
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a02220222022202a2022a02280
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155555555555555f555555d55500
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a888888888888bf8888888888880
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000555555555555555555555555d55500
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a820202020202078202020202820200
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001555555555555557d5555555555d55400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8888888888888888888888888888a000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155555555555555f5555555555555d54000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000282020202020203e20202020202020aa0000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555555555555555555555555c00000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088888888888888f888888888888888a8800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001555555555555557d55555555555555500800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a20202020202020202020202020202a000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155555555555555f55555555555555540000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000288888888888889e88888888888888aa00000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055555555555555555555555555555554000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa220222022202fa02220222022202a80000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001555555555555557d555555555555555000000000800000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a88888888888888888888888888888a0000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155555555555557f555555555555555400000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a0202020202021e0202020202020228000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000555555555555555555555555555555540000000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8888888888888f888888888888888a800000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155555555555555755555555555555550000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a02020202020212020202020202022a00000000000000000800000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000555555555555557d5555555555555554000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000288888888888889c88888888888888a80000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555555555555555555555555000000000000000000000800000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000a0202020202021f820202020202020a8000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000001555555555555557555555555555555500000000000000000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000002a8888888888889888888888888888aa000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000555555555555557d55555555555555540000000000000000000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000aa20222022202238222022202220222800000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000055555555555555d55555555555555550000000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000a8888888888889f888888888888888a80000000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000000000015555555555555575555555555555555000000000000000000000000000000800000
% 00000000000000000000000000000000000000000000000000000000000000000000000002a20202020202070202020202020202a0000000000000000000000000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000555555555555557d555555555555555400000000000000000000000000000000800000
% 00000000000000000000000000000000000000000000000000000000000000000000000a88888888888888888888888888888a8000000000000000000000000000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000055555555555555d555555555555555500000000000000000000000000000000000800000
% 000000000000000000000000000000000000000000000000000000000000000000000a2020202020203e202020202020202a000000000000000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000000155555555555555755555555555555550000000000000000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000002a888888888888f8888888888888888a00000000000000000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000055555555555555fd5555555555555554000000000000000000000000000000000000000800000
% 0000000000000000000000000000000000000000000000000000000000000000aa0202020202020202020202020202a80000000000000000000000000000000000000000800000
% 00000000000000000000000000000000000000000000000000000000000000155555555555555d5555555555555555000000000000000000000000000000000000000000800000
% 00000000000000000000000000000000000000000000000000000000000000a888888888888be888888888888888a000000000000000000000000000000000000000000cb00000
% 0000000000000000000000000000000000000000000000000000000000001555555555555555555555555555555400000000000000000000000000000000000000000007f00000
% 000000000000000000000000000000000000000000000000000000000002a022202220222f2220222022202222a000000000000000000000000000000000000000000004a00000
% 000000000000000000000000000000000000000000000000000000000055555555555555fd55555555555555540000000000000000000000000000000000000000000006200000
% 000000000000000000000000000000000000000000000000000000000a88888888888888888888888888888a800000000000000000000000000000000000000000000002200000
% 0000000000000000000000000000000000000000000000000000000155555555555557d55555555555555550000000000000000000000000000000000000000000000002600000
% 0000000000000000000000000000000000000000000000000000000a0202020202023e020202020202020a00000000000000000000000000000000000000000000000002400000
% 000000000000000000000000000000000000000000000000000001555555555555555555555555555555400000000000000000000000000000000000000000000000000fdc0000
% 00000000000000000000000000000000000000000000000000002888888888c888f888888888888888aa00000000000000000000000000000000000000000000000001ffef0000
% 00000000000000000000000000000000000000000000000000055555555555d55f5555555555555555400000000000000000000000000000000000000000000000001755d50000
% 00000000000000000000000000000000000000000000000000a82020202027602020202020202020a800000000000000000000000000000000000000000000000003fabbbae000
% 00000000000000000000000000000000000000000000000015555555555f5d7f5555555555555555000000000000000000000000000000000000000000000000001d5555d54000
% 0000000000000000000000000000000000000000000000028888888888bff8c888888888888888a000000000000000000000000000000000000000000000000007eeeeeffef000
% 00000000000000000000000000000000000000000000001555555555557fd575555555555555540000000000000000000000000000000000000000000000000055555557f55000
% 00000000000000000000000000000000000000000000028202020202027fffe20202020202028000000000000000000000000000000000000000000000000007abababaffba800
% 00000000000000000000000000000000000000000000555555555555557ff55555555555555400000000000000000000000000000000000000000000000000dd5555555ffd5800
% 0000000000000000000000000000000000000000000a8888888888888fffe888888888888a800000000000000000000000000000000000000000000000000feeeeeeeeeffeec00
% 000000000000000000000000000000000000000001555555555555555d7fd5555555555550000000000000000000000000000000000000000000000000017555555555fffd5400
% 00000000000000000000000000000000000000002a2220222022202e207fe0222022202a000000000000000000000000000000000000000000000000001fbabbbabbbbbffabc00
% 000000000000000000000000000000000000000555555555555555fd557fd5555555554000000000000000000000000000000000000000000000000001d555555555d557fd5400
% 00000000000000000000000000000000000000288888888888888988888e88888888a8000000000000000000000000000000000000000000000000003eeeeeeeeeffeeeffeec00
% 0000000000000000000000000000000000000555555555555555d55555575555555500000000000000000000000000000000000000000000000000035555555555755555555400
% 000000000000000000000000000000000000a20202020202021f02020202020202a8000000000000000000000000000000000000000000000000007fababababababababebac00
% 0000000000000000000000000000000000155555555555555575555555575555550000000000000000000000000000000000000000000000000005d555555555f5555555555800
% 0000000000000000000000000000000002a888888888888898888888888a888aa000000000000000000000000000000000000000000000000000feeeeeeeeeefeeeeeeeeeee800
% 000000000000000000000000000000005555555555555557f555555555575554000000000000000000000000000000000000000000000000000555555555555555555555555000
% 00000000000000000000000000000002a02020202020203c202020202022228000000000000000000000000000000000000000000000000001fabababababebababababafab000
% 00000000000000000000000000000055555555555555555555555555555750000000000000000000000000000000000000000000000000001d5555555555f55555555555554000
% 00000000000000000000000000000a88888888888888f88888888888888a0000000000000000000000000000000000000000000000000003eeeeeeeeeeeeeeeeeeeeeeeeeec000
% 00000000000000000000000000015555555555555557d55555555555555200000000000000000000000000000000000000000000000000175555555555d5555555555555570000
% 000000000000000000000000002a02020202020202020202020202022a0200000000000000000000000000000000000000000000000003ebababababbfabababababababfe0000
% 0000000000000000000000000555555555555555575555555555555540020000000000000000000000000000000000000000000000005d55555555557555555555555555d00000
% 000000000000000000000000a888888888888888f8888888888888a80002000000000000000000000000000000000000000000000007eeeeeeeeeefeeeeeeeeeeeeeeefe400000
% 0000000000000000000000055555555555555555555555555555550000020000000000000000000000000000000000000000000000755555555555f55555555555555560400000
% 0000000000000000000000a220222022202220e2202220222022a0000002000000000000000000000000000000000000000000000fbbbabbbabbbebbbabbbabbbabbbe00400000
% 0000000000000000000001555555555555555f555555555555550000000200000000000000000000000000000000000000000001d555555555555555555555555555c000400000
% 0000000000000000000002888888888888889888888888888aa0000000020000000000000000000000000000000000000000001feeeeeeeeeefeeeeeeeeeeeeeeefc0000400000
% 00000000000000000000055555555555555d555555555555540000000002000000000000000000000000000000000000000003555555555555d555555555555557000000400000
% 000000000000000000000a020202020203e202020202020a80000000000200000000000000000000000000000000000000003fabababababababababababababf8000000400000
% 0000000000000000000015555555555557555555555555500000000000020000000000000000000000000000000000000001d55555555557d55555555555555d00000000400000
% 0000000000000000000028888888888b8888888888888a00000000000002000000000000000000000000000000000000000eeeeeeeeeeefeeeeeeeeeeeeeeff000000000400000
% 000000000000000000005555555d557d5555555555554000000000000032c000000000000000000000000000000000000015555555555555555555555555560000000000400000
% 000000000000000000002020203821e020202020202a000000000000001fc00000000000000000000000000000000000003ababababafabababababababbe00000000006580000
% 000000000000000000005557f57d55555555555555400000000000000012800000000000000000000000000000000000005555557557d55555555555555c000000000003ffe000
% 00000000000000000000088ff98f8888888888888800000000000000001880000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeefc0000000000002703800
% 00000000000000000000555fff5d55555555555500000000000000000009d6000000000000000000000000000000000000555f5777555555555555555400000000000002d00c00
% 00000000000000000000821ffe060202020202a00000000000000000000fab800000000000000000000000000000000001abbfafbfababababababaf8000000000000003100600
% 00000000000000000000555fffff5555555554000000000000000000001d55c00000000000000000000000000000000001557ffd75555555555555d8000000000000000f200300
% 00000000000000000000089ff8888888888a8000000000000000000001efeee00000000000000000000000000000000001eeffeefeeeeeeeeeeeff000000000000000019200100
% 0000000000000000000055dffd555555555400000000000000000000055755700000000000000000000000000000000001557ffff5555555555570000000000000000061a00180
% 0000000000000000000021aff02220222a80000000000000000000003abfbab00000000000000000000000000000000002bbfffbbabbbabbbabe000000000000000001c0e00080
% 000000000000000000005757f5555555500000000000000000000000d557d5580000000000000000000000000000000001577ff55555555555c000000000000000000700c00080
% 000000000000000000002888888888aa000000000000000000000007eeffeee80000000000000000000000000000000002feffeeeeeeeeeefc0000000000000000000c00f80040
% 000000000000000000001555d5555540000000000000000000000015555ff5500000000000000000000000000000000003557fd555555557400000000000000000003003fc0040
% 000000000000000000000202820228000000000000000000000000ebabbffba80000000000000000000000000000000001abafababababfc00000000000000000000e003fc0040
% 000000000000000000008555d55500000000000000000000000001d5557ff554000000000000000000000000000000001d55575555555d80000000000000000000018007fe0040
% 00000000000000000001828888a80000000000000000000000001eeeeefffeec0000000000000000000000000000000071eeeeeeeeeef800000000000000000000060007fe0040
% 000000000000000000060155d500000000000000000000000000755555fff55000000000000000000000000000000003c0555755555500000000000000000000001c0007fe0040
% 0000000000000000000c00aaa000000000000000000000000003bababebffab80000000000000000000000000000000000fabababbf00000000000000000000000300037fe0040
% 000000000000000000380000800000000000000000000000000d5555555ff55800000000000000000000000000000000005557555c000000000000000000000000c00063fc0080
% 000000000000000000600000800000000000000000000000007eeeeeeeefeef000000000000000000000000000000380003eeeefe0000000000000000000000003800083fc0080
% 0000000000000000000000008000000000000000000000000155555f5555555000000000000000000000000000000e00001557540000000000000000000000000e000000f00180
% 0000000000000000000000008000000000000000000000000fababbbabababe0000000000000000000000000000078000007afc000000000000000000000000018000000200100
% 000000000000079e000000008000000000000000000000001d5555f5555555c0000000000000000000000000000040000001de0000000000000000000000000070000000200300
% 000000000000580300000000800000000000000000000001eeeeeeeeeeefef800000000000000000000000000000000000000200000000000000000000000001c0000000200600
% 000000000001b006b00000008000000000000000000000075555555555555400000000000000000000000000003000000000020000000000000000000000000300018000201800
% 0000000000070006e000000080000000000000000000003bbabbfabbbabbb80000000000000000000000400001c000000000020000000000000000000000000c00070000207000
% 00000000000c000bc00000049800000000000000000000d5555755555555c0000000000000000000001e38000700000000000200000000000000000000000038000c000021c000
% 000000000030001920000007f000000000000000000003eeeefeeeeeeeef0000000000000000000001600600180000000000020000000000000000000000006000300000230000
% 0000000000e00030f00000021000000000000000000015555575555555510000000000000000000007c00280000000000000024000000000000000000000018000e000002c0000
% 0000000001800063d0000002300000000000000000007bababababababe1000000000000000000000c0003840000000000001fc000000000000000000000070000800000380000
% 0000000006003e4e1000000ffc000000000000000001d5555d5555555501000000000000000000003000079c0000000000001280000000000000000000000c0000000000e00000
% 000000001c00fff01000003fef80000000000000000eeeeefeeeeeeefc0100000000000000000000e0000ce00000000000001fc000000000000000000000300000000001a00000
% 000000007000ff8010000075754000000000000000755557d55555556001000000000000000000018000184000000000000078f800000000000000000000e00000000006200000
% 00000000c001ff80080000fbfac000000000000001fababebabababb80010000000000000000000600006060000000000007c98c0000000000000000000380180000001c200000
% 000000030001ff80180001d5d5400000000000000d5555555555555c00012000000000000000001c01f8ffe000000000001d0904000000000000000000060039c0000070200000
% 0000000e0001ff80100003eeeef00000000000003eefeeeeeeeeeef0000fe000000000000000003003fdc020000000000030050200000000000000000018002f000000c0200000
% 000000180001ff8010000357f55000000000000155575f5555555700000d600000000000000000c007fc00200000000000c0050300000000000000000070004c00000301fc0000
% 000000600000ff00100007affba8000000000007abafbbabababae0000044000000000000000038007fe00200000000003800601000000000000000000c0008600000e01240000
% 000001c000007e001000055ffd5800000000001d555d7555555550000007fc000000000000000e0007fe00200000000006000f0180000000000000000300010700003800880000
% 0000030000001800300006fffee800000000006eeefefeeeeeefc000000e4700000000000000180007fe00200000000018003f8080000000000000000e07c33c00006001fc0000
% 00000c00000008002000055ffd500000000001557d7ff5555556000000fec180000000000000600007fe00400000000070003fc08000000000000000180fe7c00001800f8f0000
% 0000380000000801c00006bffab80000000002bbfebbbabbbab8000001828040000000000001c00007fc004000000000c0007fe08000000000000000601ffe0000070018d8c000
% 00006000000008034000055ffd58000000000555ff55555555c000000602802000000000000300000ffc00400000000300007fe08000000000000001c01ff000001c0014544000
% 000180000000080c000006effee8000000000eefffeeeeeeef0000001c03802000000000000c000018f000c00000000e00007fe04000000000000003003ff00000300060503000
% 000700000000083000000557f550000000000557ff55555554000000300780300000000000380000202000800000001800007fe0800000000000000c003ff00000c000c1711000
% 000c0000000008e0000007ababa8000000000babffabababe0000000c01fe0100000000000600000002007800000006000007fc08000000000000038001ff00003800080f00800
% 0030000000000b8000000555d558000000001d57ff55555580000003801fe008000000000180000000200d00000001c000003fc080000000000000e0001ff0000e0001c7fc4c00
% 00e0000000000e00000006eeeee8000000001eeffeeeeefc0000000e003ff008000000000700000c002030000000030000000f008000000000000180002fe00018000103fc0400
% 038000000000180000000555d550000000001555ff55557000000018003ff008000000000c0000180020c00000000c0000000201800000000000060000c7c00060000117fe1400
% 0600000000006800000006babab8000000001abafababb8000000060003ff00800000000300000700023800000003800000002010000000000001c0001810001c0000107fe0400
% 180000000001880000000555d55800000000155555555c00000001c0003ff00800000000e00000c0002e0000000060000008020300000000000030000001000700000147fe4400
% 7000000000070800000006eeeee8000000000eeefeeef00000000300001fe008000000018000000000380000000180000030020e000000000000c0000001000c00000207fe0400
% c0000000001c080000000555d5500000000005555555400000000c00000fe008000000060000000000600000000700000060023200000000000380002001003000000303fd0400
% 8000000000700800000007ababa8000000000babbbae000000003800000780080000001c0002000001a00000000c0000018002e00000000000060000600100e000000201f80400
% 8000000000c0490000000555d558000000000555555800000000600000010018000000300006300006200000003000000300038000000000001800018001018000000044f44400
% 8000000003007f00000006eeeee80000000006eefec000000001800000010010000000c0000ec0001c20000000e000000e000e0000000000007000070001060000000200200400
% 800f80000c00690000000555d55000000000015555000000000700000401003000000380001b8000702000000180000018001a000000000000c000040001180000000210201400
% 803fc00038002200000006bbbab80000000000fbbc000000000c0000180100200000020000318001c0200000060000000000620000000000030000000001700000000200200400
% 803fe000e000220000000555d55800000000005dd000000000300000300101e0000002000060c003002400001c00000000018200000000000e0010000001c00000000044644400
% 807fe00380002200000006eeeee80000000000001000000000e00000c0010600000002000047800c01fc0000300000000007020000000000380011800003000000000200200400
% 807fe00e0000160000000555d550000000000000100000000180000180011c00000002003cf80038012c0000c0000000001c02000000000060002b00000d000000000301210400
% 807fe0180000fe00000007afbba800000000000010000000060000030001700000000200ffc000e0018800038000010c007002000000000180004c000039000000000200200400
% 807fe0600001558000000557f558000000000000100000001c0000040001c00000000200ff000380008800060000039800c00200000000070000cc000061000000000044644400
% 803fc08000061ce0000006eefee800000000000010000000300000000003000000000201ff80060000980004000002e0030002400000000c000186000181000000000200200400
% 801fc0800000182000000557755000000000000010000000c0000000000d000000000201ff80180000900004000004c00e001fc00000003000031e00070fe00000000210301400
% 8002008000180810000006babab8000000000000fe000003800000000031000000000201ff80600003f8000400000c6038001280000000e001f6f0001c05a00000000200200400
% 8002008000147e58000005577558000000000000920000060000000000e1000000000201ff81c0000c54000400001870e0001c800000018003ff00003004600000000044644400
% 800200800020ff08000006efeee8000000000000440000180000c6000381000000000201ff01000018618004001e33c180008a800000020007f80000c004400000000200200400
% 800200800021ff80000005555550000000000000440000700001cc000e01000000000200fe0100003161c004007f3e0600015dd00000020007fc00038006400000000301210400
% 800200800041ff84000007abeba8000000000000440000c00001700018092000000002003c01000040204004007ff01800020b08000002000ffc000e0002e00000000200200400
% 800200800045ffc400000555d5580000000000006c00008000026000600fe0000000020008010000c5fc400400ff807000055550000002000ffc00180017d40000000044644400
% 800200800041ff84000006eeeee80000000000007800008000063001800d6000000002000801000083fc300400ffc1c000088d88000002000ffc0060002b8a0000000201fc0400
% 800200800051ff9400000557f5500000000000072f000080000c380700044000000002000801000107fc100400ffc30000155754000002000ffc01c00055d50000000211241400
% 801240800040ff04000006bffab800000000000c398000800f19c01c000e4000000002000801000107fe100400ff8400002226220000020007fc070000a3a080000002008c0400
% 801fc08000447e440000055ffd5800000000001c74c000803fde007000554000000002000801000147fe500400ff840000155f540000020007f80c000155554000000044cc4400
% 801fc08000401804000006fffee8000000000030106000803ff800c0028e8800000002000801000107fe0804007f04000028bf8a0000020003f80800028fc88000000200880400
% 8008c080004109040000055ffd500000000000617d2000807fe003000557d400000002000801000107ff0004001e040000157fd50000020001f00800015ff54000000301d90400
% 8008808000400804000007bffba8000000000041fe1000807fe00c000a02820000000200c901000107fc08040008040000227fe20000020000600800021ff22000000200500400
% 800d808000444c440000055ffd58000000000045fe5000807fe038001557d400000002007f01000147fc48040008040000157ff50000020000600800015ff54000000044544400
% 800d808000400804000006effee8000000000083ff1000807fe0600008898800000002007f01000100f00804000804000028ffe8000002000060080000bff8a000000200700400
% 800580800050181400000557f550000000000013ff1000803fc040001557d5000000020062010001103018040008040000157ff50000020000600800057ff54000000210301400
% 800f808000400804000006babab8000000000083ff0800803fc04000203fe0800000020066010001002008040008040000207fe00000020000600800003ff02000000200f00400
% 803fc08000444c440000055555580000000000c7ff4800800f004000155ff5000000020026010001446448040088040000157fd50000020000640800055ff54000000047fc4400
% 803fc08000400804000006efeee8000000000081fe0800800400400008bff88000000200360100010020080400ef840000288f880000020003fc0800008fe8a000000203fc0400
% 807fe08000410904000005555550000000000081ff00008004004000157ff50000000200340100010121000400ff0400001555550000020003f808000557d54000000307ff0400
% 807fe08000400804000007ababa80000000000807808008004004000223ff280000002001c01000100200804004b04000022060200000200011808000202822000000207fe0400
% 807fe08000444c440000055555580000000000c45448008004004000157ff500000002003c01000144644804006304000015555500000200011808000555d54000000047fe4400
% 807fe18000400804000006efeee80000000000801008008004004000289fe88000000200fe010001002008040063040000288c880000020001900800008988a000000207fe0400
% 803fe080005008140000055555500000000000101018008044404000155ff50000000200ff01000100300004006204000015555500000200019008000555554000000213fc1400
% 803fc08000400804000006bbbab8000000000080100800807fc040002027a08000000201ff8100010020080400260400002224220000020000b008000023202000000201f80400
% 801f808000444c440000055555580000000000c4544800803f8040001555550000000201ff8100014464480400360400001555550000020000f008000555554000000044f44400
% 8003008000400804000006efeee80000000000801008008021804000288a888000000201ff830001002008040034040000288c880000020001f00800008da8a000000200000400
% c00080800041090400000555555000000000008111000080318040001557550000000201ff83000101210004001c0400001555550000020003f808000557f54000000301410400
% 4000008000400804000007ababa800000000008010080080318040002202028000000201ff02000100200804003e0400002206020000020007fc08000206222000000200400400
% 2000018000444c440000055555580000000000c454480080110040001557550000000200ff02000144644804007f0400001555550000020007fc08000555554000000044444400
% 1800010000400804000006efeee8000000000080100800801b004000288a8880000003003c0300010020080400ff840000288c88000002000ffc0800008cc8a000000200400400
% 0c00030000501814000005555550000000000010101000801b0040001557550000000300060300011030180400ff840000155555000002000ffc08000557554000000210501400
% 07000d8000400804000006bbbab8000000000080100800801a0040002022208000000180000200010020080400ffcc00002024200000020007fc08000022a02000000200400400
% 00fef8c000444c440000055555580000000000c4544800800a00400015575500000000c0000600014464480400ffc400001555550000020007fc08000557d54000000044444400
% 0000006000400804000006efeee8000000000080100800800f004000088a888000000060000400010020080400ff840000288c880000020007f82800008a88a000000200400400
% 0000003000410904000005555550000000000081110000803fc040001557550000000030000c00010121000400ff8400001555550000020001f038000557f54000000301410400
% 0000000800400804000007ababa8000000000080100800803fc04000220202800000000e003c000100200804007f0400002206020000020000181800020ff22000000200400400
% 0000000000444c440000055555580000000000c4544800807fe040001557550000000003ffc6000144644802001f8400001555550000020000001000055ff54000000044444400
% 0000000000404904000006efeee8000000000080100800807fe04000288a88800000000000030001002008030000c40000288c880000030000001000009ff8a000000200400400
% 0000000000507f14000005555550000000000010101800807fe0c00015575500000000000000c0010030000180002c00001555550000010000001000055ffd4000000210401400
% 0000000001406904000006bbbab8000000000080100800807fe0c00020222080000000000000600100200800c0001800002224220000008000003000003ff02000000200400400
% 00000000314466440000055555580000000000c4544800803fc040001557550000000000000000014464480070003000001555550000004000006000055ff54000000044444400
% 000000000ec02204000006efeee8000000000080100800801f804000288a88800000000000000001002408001e01e00000288c88000000300000f000008fe8a000000200400400
% 0000000006c12304000005555550000000000081110000c00fc0400015575500000000000000000101fd000003ff0020001555550000001c00018c000557554000000301410400
% 0000000006601604000007ababa8000000000080100800600070c000220202800000000000000001016c0800000000380022060200000007c01f06000203022000000200400400
% 00000000186454440000055d75580000000000c454480020001080001557550000000000000000cd45cc48000000000e00155555000000007ff003000557554000000044444400
% 000000000e501404000006efeee80000000000801008003000018000288a8880000000000000006f008808000000000300288c880000000000000080008b88a000000200400400
% 0000000001d81c140000055575500000000000101010000c0003000015575500000000000000003b1098180000000000c01555d500000000000000000557554000000210501400
% 00000000007c7e04000006befab80000000000801008000600060000202220800000000000000039009008000000000020203fa000000000000000000023202000000200400400
% 00000000004cff440000055555580000000000c4fe480001e03c1000155755000000000000000061c4d44800000000000015755500000000000000002557754000000044444400
% 000000000040ff84000006eeeee8000000000080920800003fc00c00088a88800000000000000071c0f00800000000000028a9880000000000000006209fe8a000000200400400
% 000000000041ff8400000557d550000000000081450000000000070015575500000000000000001f41f9000000000000001555550000000000000003355ff54000000301410400
% 000000000041ff84000007ababa800000000008044080000000001c0220202800000000000000003a3fc080000000000002313020000000000000000fa0a622000000200400400
% 000000000045ffc400000557d5580000000000c4444800000000006015575500000000000000000177fc480000000000003fd7550000000000000000cd5d754000000044444400
% 000000000041ff84000006efeee80000000000806c08000000000018289fc880000000000000000117fe080000000000002eda880000000000000001848cc8a000000202480400
% 000000000050ff140000055ff55000000000001028180000000000001557d500000000000000000107fe00000000000000177f550000000000000003c75dd54000000213f81400
% 0000000000407e04000006bffab80000000000802808000000000000203aa080000000000000000107fe080000000000002e3f2200000000000000007326e02000000203580400
% 0000000000445c440000055ffd580000000000c47c48000000000000155dd500000000000000000147fe480000000000001f7fd500000000000000000fd7d54000000045544400
% 000000000060000c000006fffee80000000000807c0800000000000038888880000000000000000107fe080000000000002bffc8000000000000000003cf88a000000201100400
% 00000000002101000000055ffd50000000000081ff000000000000001dddd500000000000000000103fd10000000000000157ff500000000000000000557d54000000301110400
% 0000000000200008000007affba8000000000081fe0800000000000027270280000000000000000103fc10000000000000227fe200000000000000000207e22000000201a00400
% 00000000001444780000055ff5580000000000c7ff4800000000000015555500000000000000000144f750000000000000157ff50000000000000000055ff54000000044e44400
% 0000000000180030000006efeee8000000000083ff080000000000002e8f8880000000000000000180003000000000000028ffe80000000000000000009ff8a000000200a00400
% 000000000004107800000555d550000000000013ff100000000000001f5ff5000000000000000000501020000000000000157fd50000000000000000055ff54000000210f01400
% 00000000000700c6000006babab8000000000083ff0800000000000020ffe0800000000000000000400062000000000000203fa00000000000000000003ff82000000203fc0400
% 000000000001c58300000555d5580000000000c5fe48000000000000157ff50000000000000000004444c1c00000000000155f550000000000000000055fff4000000047fc4400
% 0000000000003c00000006eeeee8000000000080fe0800000000000008bff8800000000000000000180180780000000000288a880000000000000000009ff8e000000207fe0400
% 000000000000000000000555d55000000000008179c0000000000000157ff50000000000000000000707000e00000000001557550000000000000000055ff54000000307ff0400
% 0000000000000000000007afbba80000000000800010000000000000223ff280000000000000000003f80000000000000022020200000000000000000207e22000000207fe0400
% 00000000000000001c000557f5580000000000444450000000000000155ff500000000000000000000000000000000000015575500000000000000000155554000000047fe4400
% 0000000000000000060006eefee80000000000400011800000000000289fe8800000000000000000000000000400000000288ac80000000000000000028888a000000203fc0400
% 000000000000000003000557755000000000007000307000000000001557d5000000000000000000000000000780000000155fd500000000000000000155554300000211fc1400
% 0000000000000000018006bbbab800000000002000201c00000000002023208000000000000000000000000000e00000002232a200000000000000000022208180000200f00400
% 00000000000000000040055775580000000000144440070000000000155555000000000000000000000000000038000000155dd5000000000000000001555500c0000044644400
% 0000000000000000000006efeee800000000000c018000000000000028898880000000000000000000000000000000000028888800000000000000000088880030000200200400
% 00000000000000000000055555500000000000070700000000000000155555000000000000000000000000000000000000155dd500000000000000000015540000000301210400
% 0000000000000000000017abeba8000000000001fc00000300000000220b22800000000000000000000000000000100000220b020000000000000000000a080000000200200400
% 000000000000000000031d55d55800000000000000000001c0000000155ff50000000000000000000000000000000e000015555500000000000000000005400000000044644400
% 00000000000000000000feeeeee80000000000000000000070000000288de880000000000000000000000000000001c000288d8800000000000000000000000001800201fc0400
% 000000000000000000006d55d550000000000000000000000e00000015555500000000000000000000000000000000700015575500000000000000000000000000c00211341400
% 0000000000000000000066babab80000000000000000000000000000202460800000000000000000000000000000000002202620000000000000000000000000006002008c0400
% 000000000000000000018757f558000000000000000000000000000015555500000000000000000000000000000000000315575500000000000000000000000000300044cc4400
% 00000000000000000000e7effee800000000000000000000000c0000088e88800000000000000000000000000000000032e88a8800000000000000000000000000080200880400
% 000000000000000000001ddffd5000000000000000000000000380001557d500000000000000000000000000000000001e755f5500000000000000000000000000000301d90400
% 0000000000000000000007fffba8000000000000000000000000e000220282800000000000000000000000000000000002323f8200000000000000000000000000000200500400
% 0000000000000000000005fffd5800000000000000000000000038001557d50000000000000000000000000000000000061d7fd500000000000000000000000000008444544400
% 0000000000000000000006fffee8000000000000000000000000000028898880000000000000000000000000000000000c2effe800000000000000000000000000006600700400
% 00000000000000000000055ffd500000000000000000000000000000955555000000000000000000000000000000000003ff7ff500000000000000000000000000003e10201400
% 0000000000000000000006bffab80000000000000000000000000018e0232080000000000000000000000000000000000023ffe200000000000000000000000000001b00200400
% 000000000000000000000557f558000000000000000000000000000fb557d5000000000000000000000000000000000000157ff5000000000000000000000000000039c4644400
% 0000000000000000000006eeeee80000000000000000000000000001b89fe880000000000000000000000000000000000028ffc800000000000000000000000000006280f80400
% 000000000000000000000355557000000000000000000000000000031d5ff5000000000000000000000000000000000000157fd500000000000000000000000000003f43fd0400
% 0000000000000000000001ababbc0000000000000000000000000003233ff2800000000000000000000000000000000000220f0270000000000000000000000000000763fc0400
% 0000000000000000000001d555438000000000000000000000000001fffff50000000000000000000000000000000000001555551c0000000000000000000000000001e7fe4400
% 0000000000000000000000eeeec0800000000000000000000000000028fff880000000000000000000000000000000000028888803800000000000000000000000000237fe0400
% 00000000000000000000007555000000000000000000000000000000157ff50000000000000000000000000000000000001555550000000000000000000000000000021ffe1400
% 00000000000000000000001ebf000300000000000000000000000000203fe080000000000000000000000000000000000020202000000000000000000000000000000207fe0400
% 000000000000000000000005d80001c0000000000000000000000000155ff500000000000000000000000000000000000015555500030000000000000000000000000047fc4400
% 00000000000000000000000000000038000000000000000000000000088f888000000000000000000000000000000000002888880001c000000000000000000000000203fc0400
% 0000000000000000000000000000000c00000000000000000000000015555500000000000000000000000000000000000015555500007000000000000000000000000301f10400
% 0000000000000000000000000000000000000000000000000000000022020280000000000000000000000000000000000022020200000c00000000000000000000000200000400
% 0000000000000000000000000000000010000000000000000000000015575500000000000000000000000000000000000015555400000000000000000000000000000044444400
% 000000000000000000000000000000001e0000000000000000000000288a8880000000000000000000000000000000000008888a00000000000000000000000000000200400400
% 000000000000000000000000000000000380000000000000000000001557550000000000000000000000000000000000001555540000001c000000000000000000000210401400
% 000000000000000000000000000000000040000000000000000000002022208000000000000000000000000000000000000a202800000007000000000000000000000200400400
% 0000000000000000000000000000000000000000000000000000000015575500000000000000000000000000000000000005555000000000e00000000000000000000044444400
% 00000000000000000000000000000000000100000000000000000000288a888000000000000000000000000000000000000288a000000000300000000000000000000200400400
% 000000000000000000000000000000000000e000000000000000000015575500000000000000000000000000000000000000554000000000000000000000000000000301410400
% 00000000000000000000000000000000000038000000000000000000220202800000000000000000000000000000000000002a0000000000000000000000000000000200400400
% 0000000000000000000000000000000000000e00000000000000000015575500000000000000000000000000000000000000000000000000007000000000000000000044444400
% 00000000000000000000000000000000000000000000000000000000288a8880000000000000000000000000000000000000000000000000001c00000000000000000200400400
% 0000000000000000000000000000000000000000000000000000000015575500000000000000000000000000000000000000000000000000000380000000000000000210501400
% 000000000000000000000000000000000000001e000000000000000020222080000000000000000000000000000000000000000000000000000080000000000000000200400400
% 0000000000000000000000000000000000000003800000000000000015575500000000000000000000000000000000000000000000000000000000000000000000000044444400
% 00000000000000000000000000000000000000006000000000000000088a8880000000000000000000000000000000000000000000000000000000000000000000000200400400
% 0000000000000000000000000000000000000000000000000000000015575500000000000000000000000000000000000000000000000000000001c00000000000000301410400
% 0000000000000000000000000000000000000000000000000000000022020280000000000000000000000000000000000000000000000000000000700000000000000200400400
% 000000000000000000000000000000000000000000e0000000000000155755000000000000000000000000000000000000000000000000000000001c0000000000000044444400
% 0000000000000000000000000000000000000000001c000000000000288a8880000000000000000000000000000000000000000000000000000000020000000000000200400400
% 0000000000000000000000000000000000000000000700000000000015575500000000000000000000000000000000000000000000000000000000000000000000000210401400
% 0000000000000000000000000000000000000000000000000000000020222080000000000000000000000000000000000000000000000000000000000800000000000200400400
% 0000000000000000000000000000000000000000000000000000000015575500000000000000000000000000000000000000000000000000000000000700000000000044444400
% 000000000000000000000000000000000000000000000e0000000000288a88800000000000000000000000000000000000000000000000000000000001c0000000000200400400
% 0000000000000000000000000000000000000000000001c00000000015575500000000000000000000000000000000000000000000000000000000000070000000000301410400
% 0000000000000000000000000000000000000000000000700000000022020280000000000000000000000000000000000000000000000000000000000000000000000200400400
% 0000000000000000000000000000000000000000000000000000000015575500000000000000000000000000000000000000000000000000000000000000000000000044444400
% 00000000000000000000000000000000000000000000000000000000288a8880000000000000000000000000000000000000000000000000000000000000200000000200400400
% 00000000000000000000000000000000000000000000000060000000155755000000000000000000000000000000000000000000000000000000000000001c0000000210501400
% 0000000000000000000000000000000000000000000000001c00000020222080000000000000000000000000000000000000000000000000000000000000070000000200400400
% 000000000000000000000000000000000000000000000000070000001577550000000000000000000000000000000000000000000000000000000000000000c000000044444400
% 00000000000000000000000000000000000000000000000000800000089fc880000000000000000000000000000000000000000000000000000000000000000000000204480400
% 000000000000000000000000000000000000000000000000000000001555d500000000000000000000000000000000000000000000000000000000000000000000000303f90400
% 00000000000000000000000000000000000000000000000000070000221282800000000000000000000000000000000000000000000000000000000000000001c0000202100400
% 0000000000000000000000000000000000000000000000000001c000155dd500000000000000000000000000000000000000000000000000000000000000000070000046544400
% 000000000000000000000000000000000000000000000000000070002889888000000000000000000000000000000000000000000000000000000000000000001c000201100400
% 00000000000000000000000000000000000000000000000000000800155d5500000000000000000000000000000000000000000000000000000000000000000003000211201400
% 00000000000000000000000000000000000000000000000000000001a02f2080000000000000000000000000000000000000000000000000000000000000000000000201200400
% 00000000000000000000000000000000000000000000000000000031d5555500000000000000000000000000000000000000000000000000000000000000000000003045e44400
% 0000000000000000000000000000000000000000000000000000001e688e8880000000000000000000000000000000000000000000000000000000000000000000063a00e00400
% 00000000000000000000000000000000000000000000000000000002355f550000000000000000000000000000000000000000000000000000000000000000000003ef01c10400
% 000000000000000000000000000000000000000000000000000000062e3fc280000000000000000000000000000000000000000000000000000000000000000000006303f00400
% 00000000000000000000000000000000000000000000000000000006177fd50000000000000000000000000000000000000000000000000000000000000000000000c1c7f44400
% 00000000000000000000000000000000000000000000000000000001ffffc88000000000000000000000000000000000000000000000000000000000000000000001c2cff80400
% 0000000000000000000000000000000000000000000000000000000015fff500000000000000000000000000000000000000000000000000000000000000000000003ffffc1400
% 00000000000000000000000000000000000000000000000000000000207ff08000000000000000000000000000000000000000000000000000000000000000000000021ffc0400
% 00000000000000000000000000000000000000000000000000000000157fd52000000000000000000000000000000000000000000000000000000000000000000000004ffc4400
% 0000000000000000000000000000000000000000000000000000000008ffc89f00000000000000000000000000000000000000000000000000000000000000000000020ff80400
% 00000000000000000000000000000000000000000000000000000000157fd500c00000000000000000000000000000000000000000000000000000000000000000000307f90400
% 00000000000000000000000000000000000000000000000000000000220e028000f000000000000000000000000000000000000000000000000000000000000000000203f00400
% 0000000000000000000000000000000000000000000000000000000015555500000f00000000000000000000000000000000000000000000000000000000000000000044c44400
% 0000000000000000000000000000000000000000000000000000000028888880000003000000000000000000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000015555500000000f80000000000000000000000000000000000000000000000000000000000000210801400
% 0000000000000000000000000000000000000000000000000000000020222080000000040000000000000000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000015555500000000001f80000000000000000000000000000000000000000000000000000000000044c44400
% 0000000000000000000000000000000000000000000000000000000008888a000000000000f0000000000000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000005555400000000000000780000000000000000000000000000000000000000000000000000000301810400
% 00000000000000000000000000000000000000000000000000000000020208000000000000000fc000000000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000001555000000000000000000100000000000000000000000000000000000000000000000000000044c44400
% 0000000000000000000000000000000000000000000000000000000000a8a0000000000000000000fc000000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000040000000000000000000007000000000000000000000000000000000000000000000000000210901400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000044c44400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000000000000000000000000301810400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000000000000000000000044c44400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000210801400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000044c44400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000200800400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000301810400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000200400400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000044444400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000200400400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f800000000000000000000000000210501400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200400400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000044444400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000200400400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000000000301410400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000000000000000000204580400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047fc4400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f80000000000000000202500400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000212101400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000201100400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000000000045744400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000201200400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc000000000301a10400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200a00400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc000000044e44400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000200400400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078001a13f01400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007801e07f80400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000109cffc4400
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa6ffc0400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b1ffd0400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013fffc0400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f4ffc4400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000307f80400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000113f01400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144444400
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000c00
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081010000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0001800
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044445000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030006000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010104000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070f0000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d80000
save
countdictstack
mark
newpath
/showpage {} def

[{

save 
/version23-manualfeedpatch where { pop false } { true }ifelse
 % we don't do an explicit 'get' since product and version MAY
 % be in systemdict or statusdict - this technique gets the lookup
 % without failure
statusdict begin
  product (LaserWriter) eq        % true if LaserWriter
  version cvr 23.0 eq             % true if version 23
end

and  % only install this patch if both are true
and  % true only if patch is not installed and is for this printer
     % save object and boolean on stack
dup { exch restore }if
% either true OR saveobject false
dup
{
  /version23-manualfeedpatch true def
  /oldversion23-showpage /showpage load def
  /showpage       % this showpage will wait extra time if manualfeed is true
  {%
     statusdict /manualfeed known
     {% manualfeed known in statusdict
        statusdict /manualfeed get
        {% if true then we loop for 5 seconds
           usertime 5000 add       % target usertime
           { % loop
             dup usertime sub 0 lt
             { exit }if
           }loop
           pop             % pop the usertime off the stac
        }if
     }if
     oldversion23-showpage
  }bind def
}if
not{ restore }if

} stopped cleartomark
/currentpacking where{pop/oldpack currentpacking def/setpacking where{pop
false setpacking}if}if/$brkpage 64 dict def $brkpage begin/prnt{dup type
/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
currentpoint/toy exch def/tox exch def 1 setgray newpath tox toy 2 sub moveto
0 ty rlineto tx 0 rlineto 0 ty neg rlineto closepath fill tox toy moveto 0
setgray show}bind def/nl{currentpoint exch pop lmargin exch moveto 0 -10
rmoveto}def/=={/cp 0 def typeprint nl}def/typeprint{dup type exec}readonly def
/lmargin 72 def/rmargin 72 def/tprint{dup length cp add rmargin gt{nl/cp 0 def
}if dup length cp add/cp exch def prnt}readonly def/cvsprint{=string cvs
tprint( )tprint}readonly def/integertype{cvsprint}readonly def/realtype{
cvsprint}readonly def/booleantype{cvsprint}readonly def/operatortype{(--)
tprint =string cvs tprint(-- )tprint}readonly def/marktype{pop(-mark- )tprint}
readonly def/dicttype{pop(-dictionary- )tprint}readonly def/nulltype{pop
(-null- )tprint}readonly def/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def/fonttype{pop(-fontid- )tprint}
readonly def/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype{dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}
ifelse}readonly def/arraytype{dup rcheck{dup xcheck{({)tprint{typeprint}forall
(})tprint}{([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}
ifelse}readonly def/packedarraytype{dup rcheck{dup xcheck{({)tprint{typeprint}
forall(})tprint}{([)tprint{typeprint}forall(])tprint}ifelse}{pop
(-packedarray- )tprint}ifelse}readonly def/courier/Courier findfont 10
scalefont def end errordict/handleerror{systemdict begin $error begin $brkpage
begin newerror{/newerror false store vmstatus pop pop 0 ne{grestoreall}if
showpage initgraphics courier setfont lmargin 720 moveto(ERROR: )prnt
errorname prnt nl(OFFENDING COMMAND: )prnt/command load prnt $error/ostack
known{nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if
systemdict/showpage get exec(%%[ Error: )print errorname =print
(; OffendingCommand: )print/command load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put/currentpacking where
{pop/setpacking where{pop oldpack setpacking}if}if
userdict /Pscript_Win_Driver_Incr 200 dict dup begin put
/FatalErrorIf{{initgraphics findfont exch scalefont setfont counttomark 3 div
cvi{moveto show}repeat showpage quit}{cleartomark}ifelse}bind def
/VM? {vmstatus exch sub exch pop gt { [
(This job requires more memory than is available in this printer.) 100 500
(Try one or more of the following, and then print again:) 100 485
(In the PostScript dialog box, click Optimize For Portability.) 115 470
(In the Device Options dialog box, make sure the Available Printer Memory is accurate.) 115 455
(Reduce the number of fonts in the document.) 115 440
(Print the document in parts.) 115 425
12 /Times-Roman showpage
(%%[ PrinterError: Low Printer VM ]%%) =
true FatalErrorIf}if} bind def
30000  VM?
/|/def load def/,/load load |/~/exch , |/?/ifelse , |/!/pop , |/`/begin , |/^
/index , |/@/dup , |/+/translate , |/$/roll , |/U/userdict , |/M/moveto , |/-
/rlineto , |/&/currentdict , |/:/gsave , |/;/grestore , |/F/false , |/T/true ,
|/N/newpath , |/E/end , |/Ac/arc , |/An/arcn , |/A/ashow , |/D/awidthshow , |
/C/closepath , |/V/div , |/O/eofill , |/L/fill , |/I/lineto , |/-C/rcurveto ,
|/-M/rmoveto , |/+S/scale , |/Ji/setfont , |/Lc/setlinecap , |/Lj/setlinejoin
, |/Lw/setlinewidth , |/S/show , |/LH/showpage , |/K/stroke , |/W/widthshow ,
|/R/rotate , |/b{bind |}bind |/bd{bind |}bind |/xd{~ |}bd/ld{, |}bd/lw/Lw ld
/lc/Lc ld/lj/Lj ld/sg/setgray ld/L2? F/languagelevel where{! languagelevel 2
ge{! T}if}if |/g{@ not{U/DefIf_save save put}if U/DefIf_bool 2 ^ put}b
/DefIf_El{if U/DefIf_bool get not @{U/DefIf_save get restore}if}b/e{DefIf_El !
}b/self & |/reinitialize{[/TextInit/GraphInit/UtilsInit counttomark{@ where{
self eq}{F}?{cvx exec}{!}?}repeat cleartomark}b/initialize{`{/ADO_mxRot ~ |
/TextInitialised? F | reinitialize E}{U/Pscript_Win_Data 200 dict @ ` put
/ADO_mxRot ~ |/TextInitialised? F | reinitialize}?}b/terminate{!{& self eq{
exit}{E}?}loop E}b/suspend/terminate , |/resume{` Pscript_Win_Data `}b/snap{
transform 0.25 sub round 0.25 add ~ 0.25 sub round 0.25 add ~ itransform}b
/dsnap{dtransform round ~ round ~ idtransform}b<04>cvn{}|/setjn{{statusdict
/jobname known{statusdict/jobname 3 -1 $ put}if}stopped cleartomark}b/solid{[]
0 setdash}b/setdsh{0 setdash}b/colspRefresh{}b/rp{4 2 $ M 1 ^ 0 - 0 ~ - neg 0
-}b/rr{1 ^ 0 - 0 ~ - neg 0 - C}b
L2? not g{/rf{N rp L}b/fx{1 1 dtransform @ 0 ge{1 sub 1}{1 add -0.25}? 3 -1 $
@ 0 ge{1 sub 1}{1 add -0.25}? 3 1 $ 4 1 $ idtransform 4 -2 $ idtransform}b/BZ{
4 -2 $ snap + +S fx rf}b/rs{N rp C K}b/rc{N rp clip N}b/sg{setgray}b/sco{
setrgbcolor}b/sgco{{sg}{sco}?}b}e
L2? g{/colspA/DeviceGray |/colspABC/DeviceRGB |/setAorABC{{colspA}{colspABC}?
setcolorspace}b/rf/rectfill , |/fx{1 1 dtransform @ 0 ge{1 sub 0.5}{1 add -0.5
}? 3 -1 $ @ 0 ge{1 sub 0.5}{1 add -0.5}? 3 1 $ 4 1 $ idtransform 4 -2 $
idtransform}b/BZ{4 -2 $ snap + +S fx rf}b/rs/rectstroke , |/rc/rectclip , |/sg
{@ @ setcolor}b/sco{setcolor}b/colspRefresh{colspABC setcolorspace}b/sgco{{sg
}{sco}?}b/UtilsInit{F setglobal}b/definecolorrendering{/ColorRendering
defineresource !}b/findcolorrendering{@/ColorRendering resourcestatus{! !
/ColorRendering findresource T}{! F}?}b/selectcolorrendering{@/ColorRendering
resourcestatus{! !/ColorRendering}{!/DefaultColorRendering/ColorRendering}?
findresource setcolorrendering}b}e
end

[ 1.000 0 0 1.000 0 0 ] false Pscript_Win_Driver_Incr dup /initialize get exec

[{0 
/languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/JobTimeout  4 -1 roll put setuserparams}{statusdict/setjobtimeout get exec}ifelse 
} stopped cleartomark
[{240 
/languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse 
} stopped cleartomark
[{
statusdict /manualfeed false put
} stopped cleartomark
[{

} stopped cleartomark
[{
letter
} stopped cleartomark
1 setlinecap 1 setlinejoin 
/mysetup [ 0.240 0 0 -0.240 19.000 784.000 ] | 

userdict begin /savelevel0 save def end
savelevel0 restore 
[{

} stopped cleartomark
[{

} stopped cleartomark
/mysetup [ 0.240 0 0 -0.240 19.000 784.000 ] | 
userdict begin /savelevel0 save def end
userdict begin /savelevel1 save def end
savelevel1 restore 
userdict begin /pagesave save def end mysetup concat colspRefresh : 1.000 1.000 1.000 sco 0 0 2550 3300 rf ; 

pagesave restore
Pscript_Win_Driver_Incr begin
/SavedCTM null |/CTMsave{/SavedCTM SavedCTM currentmatrix |}b/CTMrestore{
SavedCTM setmatrix}b/mp null |/ADO_mxRot null |/GDIHMatrix null |
/GDIHPatternDict 22 dict | GDIHPatternDict `/PatternType 1 |/PaintType 2 |
/Reps L2?{1}{5}? |/XStep 8 Reps mul |/YStep XStep |/BBox[0 0 XStep YStep]|
/TilingType 1 |/PaintProc{` 1 Lw[]0 setdash PaintData , exec E}b/FGnd null |
/BGnd null |/HS_Horizontal{horiz}b/HS_Vertical{vert}b/HS_FDiagonal{fdiag}b
/HS_BDiagonal{biag}b/HS_Cross{horiz vert}b/HS_DiagCross{fdiag biag}b/MaxXYStep
XStep YStep gt{XStep}{YStep}? |/horiz{Reps{0 4 M XStep 0 - 0 8 +}repeat 0 -8
Reps mul + K}b/vert{Reps{4 0 M 0 YStep - 8 0 +}repeat 0 -8 Reps mul + K}b/biag
{Reps{0 0 M MaxXYStep @ - 0 YStep neg M MaxXYStep @ - 0 8 +}repeat 0 -8 Reps
mul + 0 YStep M 8 8 - K}b/fdiag{Reps{0 0 M MaxXYStep @ neg - 0 YStep M
MaxXYStep @ neg - 0 8 +}repeat 0 -8 Reps mul + MaxXYStep @ M 8 -8 - K}b E
/makehatch{GDIHPatternDict/PaintData 3 -1 $ put CTMsave GDIHMatrix setmatrix
GDIHPatternDict matrix mp CTMrestore ~ U ~ 2 ^ put}b/h0{/h0/HS_Horizontal
makehatch}b/h1{/h1/HS_Vertical makehatch}b/h2{/h2/HS_FDiagonal makehatch}b/h3{
/h3/HS_BDiagonal makehatch}b/h4{/h4/HS_Cross makehatch}b/h5{/h5/HS_DiagCross
makehatch}b/GDIBWPatternDict 17 dict @ `/PatternType 1 |/PaintType L2?{1}{2}?
|/RepsV L2?{1}{6}? |/RepsH L2?{1}{5}? |/BBox[0 0 RepsH 1]|/TilingType 1 |
/XStep 1 |/YStep 1 |/Height 8 RepsV mul |/Width 8 |/mx[Width 0 0 Height neg 0
Height]|/FGnd null |/BGnd null |/SetBGndFGnd L2?{{BGnd null ne{BGnd aload !
sgco BBox aload ! 2 ^ sub ~ 3 ^ sub ~ rf}if FGnd null ne{FGnd aload ! sgco}if}
}{{}}? b/PaintProc{` SetBGndFGnd RepsH{Width Height F mx PaintData imagemask
Width 0 +}repeat E}b E |/GDIBWPatternMx null |/pfprep{save 4 1 $
/PatternOfTheDay 4 1 $ GDIBWPatternDict `/PaintData ~ |/BGnd ~ |/FGnd ~ | E
CTMsave GDIBWPatternMx setmatrix GDIBWPatternDict matrix mp CTMrestore ~ !}b
/hrf null |/prf{pfprep ~ 6 1 $ 5 hrf restore}b/GraphInit{GDIHMatrix null eq{
/SavedCTM matrix | : ADO_mxRot concat 0 0 snap + : 0.48 @ GDIHPatternDict `
YStep mul ~ XStep mul ~ dsnap YStep V ~ XStep V ~ E +S/GDIHMatrix matrix
currentmatrix readonly | ; : 0.24 -0.24 +S GDIBWPatternDict ` Width Height E
dsnap +S/GDIBWPatternMx matrix currentmatrix readonly | ; ;}if}b/cirp{360 0 An
C}b/ellp{CTMsave + +S 0.5 0 M 0 0 0.5 360 0 An C CTMrestore}b/rrp{/rad ~ |/y2
~ |/x2 ~ |/y1 ~ |/x1 ~ | x2 x1 add 2 V y1 M x1 y1 x1 y2 rad arct x1 y2 x2 y2
rad arct x2 y2 x2 y1 rad arct x2 y1 x1 y1 rad arct C}b/RRp{CTMsave + +S/dyS ~
|/dxS ~ | dxS 2 V 0 M 0 0 0 dyS 0.5 arct 0 dyS dxS dyS 0.5 arct dxS dyS dxS 0
0.5 arct dxS 0 0 0 0.5 arct C CTMrestore}b

L2? not g{/arct{arcto ! ! ! !}b/GDIpattfill{@ ` BGnd null ne PaintType 2 eq
and{: BGnd aload ! sgco fEOFill{O}{L}? ; FGnd aload ! U/fGray 2 ^ put{2}{4}?
-1 $}if E @ patterncalc : 4 ^/PaintType get 2 eq{fGray{6 -1 $ sg}{8 -3 $ sco}?
}if fEOFill{eoclip}{clip}? N patternfill ; N}b/hrf{/fGray 1 ^ 6 eq | -4 $ N rp
C/fEOFill F | GDIpattfill}b/hfMain{/fEOFill ~ |/fGray ~ | GDIpattfill}b/hf{T
hfMain}b/hfW{F hfMain}b/hs{currentpoint strokepath M hfW}b/pfMain{/fEOFill ~ |
pfprep GDIpattfill restore N}b/pf{T pfMain}b/pfW{F pfMain}b/ps{currentpoint
strokepath M pfW}b/mpstr 1 string |/mp{~ @ length 12 add dict copy `
/PatternCTM matrix currentmatrix |/PatternMatrix ~ |/PatWidth XStep mpstr
length mul |/PatHeight YStep |/FontType 3 |/Encoding 256 array | 3 string 0 1
255{Encoding ~ @ 3 ^ cvs cvn put}for !/FontMatrix matrix |/FontBBox BBox |
/BuildChar{! @ ` XStep 0 FontBBox aload ! setcachedevice/PaintProc , E : exec
;}b & E ~ @ 3 -1 $ definefont}b/patterncalc{` : PatternCTM setmatrix
PatternMatrix concat BBox aload ! ! ! + pathbbox ; PatHeight V ceiling 4 1 $
PatWidth V ceiling 4 1 $ PatHeight V floor 4 1 $ PatWidth V floor 4 1 $ 2 ^
sub cvi abs ~ 3 ^ sub cvi abs ~ 4 2 $ PatHeight mul ~ PatWidth mul ~ E}b
/patternfill{5 -1 $ @ ` Ji PatternCTM setmatrix PatternMatrix concat 0 2 ^ 2 ^
M 0 1 mpstr length 1 sub{1 ^ mpstr 3 1 $ put}for ! 2 ^{currentpoint 5 ^{mpstr
S}repeat YStep add M}repeat ! ! ! ! E}b}e

L2? g{/mp/makepattern , |/hrf{6 eq setAorABC setpattern rectfill}b/hf{
setAorABC setpattern O}b/hfW{setAorABC setpattern L}b/hs{setAorABC setpattern
K}b/pf{pfprep setpattern O restore N}b/pfW{pfprep setpattern L restore N}b/ps{
pfprep setpattern K restore N}b}e

end reinitialize
userdict begin /pagesave save def end mysetup concat colspRefresh 

1403 1131 N M -17 3 - -14 10 - -10 14 - -3 17 - 0 98 - 0 98 - 3 17 - 10 14 - 14 10 - 17 3 - 17 -3 - 14 -10 - 9 -14 - 4 -17 - 0 -98 - 0 -98 - -4 -17 - -9 -14 - -14 -10 - -17 -3 - C : 0.910 0.910 0.910 sco O ; 
1403 1132 N M -17 3 - 1 0 - -14 10 - -10 14 - 0 -1 - -3 17 - 0 98 - 0 98 - 3 17 - 10 14 - 0 -1 - 14 10 - -1 0 - 17 3 - 17 -3 - 14 -10 - -1 1 - 9 -14 - 4 -17 - 0 -98 - 0 -98 - -4 -17 - 0 1 - -9 -14 - 1 0 - -14 -10 - -17 -3 - 0 -2 - 17 3 - 1 0 - 14 10 - 0 1 - 9 14 - 4 17 - 0 98 - 0 98 - -4 17 - 0 1 - -9 14 - -14 10 - -1 0 - -17 3 - -17 -3 - -14 -10 - -1 0 - -10 -14 - 0 -1 - -3 -17 - 0 -98 - 0 -98 - 3 -17 - 10 -14 - 1 -1 - 14 -10 - 17 -3 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
1403 1132 N M 0 -2 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
2306 1023 N M -19 3 - -8 5 - -7 6 - -6 7 - -4 8 - -4 18 - 0 442 - 0 443 - 4 18 - 4 8 - 6 7 - 7 6 - 8 4 - 19 4 - 18 -4 - 9 -4 - 7 -6 - 5 -7 - 5 -8 - 4 -18 - 0 -443 - 0 -442 - -4 -18 - -5 -8 - -5 -7 - -7 -6 - -9 -5 - -18 -3 - C : 0.910 0.910 0.910 sco O ; 
2306 1024 N M -19 3 - 1 0 - -8 5 - -7 6 - -6 7 - -4 8 - 0 -1 - -4 18 - 0 442 - 0 443 - 4 18 - 4 8 - 6 7 - 0 -1 - 7 6 - 8 4 - -1 0 - 19 4 - 18 -4 - 9 -4 - 7 -6 - -1 1 - 5 -7 - 5 -8 - 4 -18 - 0 -443 - 0 -442 - -4 -18 - 0 1 - -5 -8 - -5 -7 - 1 0 - -7 -6 - -9 -5 - -18 -3 - 0 -2 - 18 3 - 1 0 - 9 5 - 7 6 - 0 1 - 5 7 - 5 8 - 4 18 - 0 442 - 0 443 - -4 18 - 0 1 - -5 8 - -5 7 - -7 6 - -9 4 - -1 0 - -18 4 - -19 -4 - -8 -4 - -7 -6 - -1 0 - -6 -7 - -4 -8 - 0 -1 - -4 -18 - 0 -443 - 0 -442 - 4 -18 - 4 -8 - 6 -7 - 1 -1 - 7 -6 - 8 -5 - 19 -3 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
2306 1024 N M 0 -2 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
1019 1165 N M -19 4 - -8 4 - -7 6 - -6 7 - -4 8 - -4 19 - 0 266 - 0 266 - 4 19 - 4 8 - 6 7 - 7 6 - 8 4 - 19 4 - 18 -4 - 8 -4 - 7 -6 - 6 -7 - 5 -8 - 3 -19 - 0 -266 - 0 -266 - -3 -19 - -5 -8 - -6 -7 - -7 -6 - -8 -4 - -18 -4 - C : 0.651 0.651 0.651 sco O ; 
1019 1166 N M -19 4 - 1 0 - -8 4 - -7 6 - -6 7 - -4 8 - 0 -1 - -4 19 - 0 266 - 0 266 - 4 19 - 4 8 - 6 7 - 0 -1 - 7 6 - 8 4 - -1 0 - 19 4 - 18 -4 - 8 -4 - 7 -6 - -1 1 - 6 -7 - 5 -8 - 3 -19 - 0 -266 - 0 -266 - -3 -19 - 0 1 - -5 -8 - -6 -7 - 1 0 - -7 -6 - -8 -4 - -18 -4 - 0 -2 - 18 4 - 1 0 - 8 4 - 7 6 - 0 1 - 6 7 - 5 8 - 3 19 - 0 266 - 0 266 - -3 19 - 0 1 - -5 8 - -6 7 - -7 6 - -8 4 - -1 0 - -18 4 - -19 -4 - -8 -4 - -7 -6 - -1 0 - -6 -7 - -4 -8 - 0 -1 - -4 -19 - 0 -266 - 0 -266 - 4 -19 - 4 -8 - 6 -7 - 1 -1 - 7 -6 - 8 -4 - 19 -4 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
1019 1166 N M 0 -2 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
706 1157 N M -16 3 - -13 9 - -9 13 - -4 16 - 0 105 - 0 104 - 4 16 - 9 13 - 13 9 - 16 4 - 16 -4 - 13 -9 - 9 -13 - 3 -16 - 0 -104 - 0 -105 - -3 -16 - -9 -13 - -13 -9 - -16 -3 - C : 0.910 0.910 0.910 sco O ; 
706 1158 N M -16 3 - 1 0 - -13 9 - -9 13 - 0 -1 - -4 16 - 0 105 - 0 104 - 4 16 - 9 13 - 0 -1 - 13 9 - -1 0 - 16 4 - 16 -4 - 13 -9 - -1 1 - 9 -13 - 3 -16 - 0 -104 - 0 -105 - -3 -16 - 0 1 - -9 -13 - 1 0 - -13 -9 - -16 -3 - 0 -2 - 16 3 - 1 0 - 13 9 - 0 1 - 9 13 - 3 16 - 0 105 - 0 104 - -3 16 - 0 1 - -9 13 - -13 9 - -1 0 - -16 4 - -16 -4 - -13 -9 - -1 0 - -9 -13 - 0 -1 - -4 -16 - 0 -104 - 0 -105 - 4 -16 - 9 -13 - 1 -1 - 13 -9 - 16 -3 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
706 1158 N M 0 -2 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
32 1239 N M 0 -1 - -2 1 - 0 1 - 2 -1 - C : 0 0 0 sco L ; 
32 1239 N M 4 8 - 6 7 - 0 -1 - 7 6 - 8 5 - 19 5 - -1 0 - 19 1 - 18 -4 - 8 -4 - 6 -5 - -1 1 - 4 -7 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 7 - -6 5 - -8 4 - -1 0 - -18 4 - -19 -1 - -19 -5 - -8 -5 - -7 -6 - -1 0 - -6 -7 - -4 -8 - 2 -1 - C : 0 0 0 sco L ; 
131 1243 N M 0 -9 - 0 1 - 2 -1 - 0 9 - -2 0 - C : 0 0 0 sco L ; 
128 1224 N M 0 -1 - 2 -1 - 0 1 - -2 1 - C : 0 0 0 sco L ; 
131 1235 N M 2 -1 - -3 -11 - -2 1 - 3 11 - C : 0 0 0 sco L ; 
1081 903 N M -10 -15 - -13 -9 - -16 -3 - -17 3 - -177 71 - -177 72 - -15 9 - -9 14 - -3 16 - 3 17 - 9 14 - 14 9 - 16 4 - 17 -3 - 177 -72 - 177 -71 - 14 -10 - 10 -13 - 3 -17 - -3 -16 - C : 0.404 0.404 0.404 sco O ; 
1080 903 N M -10 -15 - 0 1 - -13 -9 - -16 -3 - 1 0 - -17 3 - -177 71 - -177 72 - -15 9 - -9 14 - 1 0 - -3 16 - 0 -1 - 3 17 - 9 14 - 14 9 - -1 -1 - 16 4 - 17 -3 - 177 -72 - 177 -71 - 14 -10 - -1 0 - 10 -13 - 0 1 - 3 -17 - -3 -16 - 2 0 - 3 16 - 0 1 - -3 17 - -1 0 - -10 13 - -14 10 - -177 71 - -177 72 - -17 3 - -16 -4 - -14 -9 - -1 -1 - -9 -14 - -3 -17 - 3 -16 - 0 -1 - 9 -14 - 1 0 - 15 -9 - 177 -72 - 177 -71 - 17 -3 - 16 3 - 1 1 - 13 9 - 10 15 - -2 0 - C : 0.149 0.149 0.149 sco L ; 
1080 903 N M 2 0 - -2 0 - C : 0.149 0.149 0.149 sco L ; 
2369 466 N M -3 -10 - -5 -9 - -6 -8 - -8 -6 - -9 -4 - -10 -3 - -10 -1 - -11 1 - -950 202 - -949 202 - -11 3 - -9 5 - -7 7 - -6 7 - -5 9 - -3 10 - -1 10 - 1 11 - 3 10 - 5 9 - 7 8 - 8 6 - 9 4 - 10 3 - 10 1 - 10 -1 - 950 -202 - 950 -202 - 10 -3 - 9 -5 - 8 -6 - 6 -8 - 5 -9 - 3 -10 - 1 -10 - -2 -11 - C : 0.651 0.651 0.651 sco O ; 
2368 466 N M -3 -10 - 0 1 - -5 -9 - -6 -8 - -8 -6 - -9 -4 - -10 -3 - -10 -1 - 1 0 - -11 1 - -950 202 - -949 202 - -11 3 - -9 5 - -7 7 - -6 7 - 1 0 - -5 9 - -3 10 - -1 10 - 0 -1 - 1 11 - 3 10 - 5 9 - 7 8 - 8 6 - -1 -1 - 9 4 - 10 3 - 10 1 - 10 -1 - 950 -202 - 950 -202 - 10 -3 - -1 0 - 9 -5 - 8 -6 - 6 -8 - 0 1 - 5 -9 - 3 -10 - 1 -10 - -2 -11 - 2 0 - 2 11 - 0 1 - -1 10 - -3 10 - -5 9 - -1 0 - -6 8 - -8 6 - -9 5 - -10 3 - -950 202 - -950 202 - -10 1 - -1 0 - -10 -1 - -10 -3 - -9 -4 - -8 -6 - -7 -8 - -5 -9 - 0 -1 - -3 -10 - -1 -11 - 1 -10 - 3 -10 - 5 -9 - 0 -1 - 6 -7 - 7 -7 - 9 -5 - 1 0 - 11 -3 - 949 -202 - 950 -202 - 11 -1 - 10 1 - 10 3 - 9 4 - 1 1 - 8 6 - 6 8 - 5 9 - 3 10 - -2 0 - C : 0.502 0.502 0.502 sco L ; 
2368 466 N M 2 0 - -2 0 - C : 0.502 0.502 0.502 sco L ; : 372 59 381 139 rc pagesave restore
Pscript_Win_Driver_Incr begin
/bullets{{/bullet}repeat}b/ANSIEncoding[/grave/acute/circumflex/tilde/macron
/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi 18
bullets StandardEncoding 32 95 getinterval aload ! 3 bullets/quotesinglbase
/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron
/guilsinglleft/OE 4 bullets/quoteleft/quoteright/quotedblleft/quotedblright
/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe 2 bullets
/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered
/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]| ANSIEncoding @ 39/quotesingle put 96/grave
put/ANSIEncodingOld ANSIEncoding 256 array copy | ANSIEncodingOld @[138 153
154 169 172 174 177 178 179 181 185 188 189 190 208 215 221 222 240 247 253
254]{/bullet put @}forall 166/bar put 176/ring put

/TextInit{TextInitialised? not{/Pscript_Windows_Font & |/TextInitialised? T |
/fM[1 0 0 -1 0 0]|/mFM matrix |/iMat[1 0 0.212557 neg 1 0 0]|}if}b/xUP null |
/yUP null |/uW null |/xSP null |/ySP null |/sW null |/copyfont{1 ^ length add
dict `{1 ^/FID ne{|}{! !}?}forall & E}b/rF{3 copyfont @ `/Encoding
ANSIEncoding &/CharStrings known{CharStrings/Eth known not{! ANSIEncodingOld}
if}if | E}b/mF{findfont ~{@/Encoding get @ StandardEncoding eq{! T}{{
ISOLatin1Encoding}stopped{! F}{eq}?{T}{@ ` T 32 1 127{Encoding 1 ^ get
StandardEncoding 3 -1 $ get eq and}for E}?}?}{F}?{rF}{3 copyfont}? `
/OrigFontType ~ |/OrigFontName ~ | & E 2 ^ ~ definefont fM 5 4 -1 $ put fM 4 0
put fM makefont Pscript_Windows_Font 3 1 $ put}b/xF{scalefont
Pscript_Windows_Font 3 1 $ put}b/xMF{mFM astore makefont Pscript_Windows_Font
3 1 $ put}b/xF2/scalefont , |/xMF2{mFM astore makefont}b/sLT{: Lw -M
currentpoint snap M 0 - 0 Lc K ;}b/sSU{N/uW ~ |/yUP ~ |/xUP ~ |}b/sU{xUP yUP
uW sLT}b/sST{N/sW ~ |/ySP ~ |/xSP ~ |}b/sT{xSP ySP sW sLT}b/sR{: + R 0 0 M}b
/sRxy{: matrix astore concat 0 0 M}b/eR/; , |

end reinitialize
userdict begin /pagesave save def end mysetup concat colspRefresh 
: 0 0 0 sco 1 Lc 1 Lj solid 372 59 381 139 rc 0 0 0 sco %%IncludeFont: Times-Roman
(F0) cvn
0.889 
 (Times-Roman) cvn /Type1 
T 
(Times-Roman) cvn
mF 
(F0_86_126) cvn
F0
86 0 0 126 0 0 
xMF 
F0_86_126
Ji 
499 59 M 
12.184 0 (P)A 
; : 455 113 312 112 rc 0 0 0 sco (F0_68_101) cvn
F0
68 0 0 101 0 0 
xMF 
F0_68_101
Ji 
559 113 M 
10.000 0 (1)A 
; : 564 64 381 139 rc 0 0 0 sco F0_86_126
Ji 
691 64 M 
12.184 0 (P)A 
; : 648 118 312 112 rc 0 0 0 sco F0_68_101
Ji 
752 118 M 
10.000 0 (2)A 
; : 187 59 381 139 rc 0 0 0 sco F0_86_126
Ji 
314 59 M 
12.184 0 (P)A 
; : 270 112 312 112 rc 0 0 0 sco F0_68_101
Ji 
374 112 M 
10.000 0 (0)A 
; 
709 229 N M -12 2 - -10 7 - -7 10 - -2 12 - 0 95 - 0 95 - 2 12 - 7 10 - 10 7 - 12 2 - 13 -2 - 10 -7 - 7 -10 - 2 -12 - 0 -95 - 0 -95 - -2 -12 - -7 -10 - -10 -7 - -13 -2 - C : 1.000 1.000 1.000 sco O ; 
709 230 N M -12 2 - 1 0 - -10 7 - -7 10 - 0 -1 - -2 12 - 0 95 - 0 95 - 2 12 - 7 10 - 0 -1 - 10 7 - -1 0 - 12 2 - 13 -2 - 10 -7 - -1 1 - 7 -10 - 2 -12 - 0 -95 - 0 -95 - -2 -12 - 0 1 - -7 -10 - 1 0 - -10 -7 - -13 -2 - 0 -2 - 13 2 - 1 0 - 10 7 - 0 1 - 7 10 - 2 12 - 0 95 - 0 95 - -2 12 - 0 1 - -7 10 - -10 7 - -1 0 - -13 2 - -12 -2 - -10 -7 - -1 0 - -7 -10 - 0 -1 - -2 -12 - 0 -95 - 0 -95 - 2 -12 - 7 -10 - 1 -1 - 10 -7 - 12 -2 - 0 2 - C : 0 0 0 sco L ; 
709 230 N M 0 -2 - 0 2 - C : 0 0 0 sco L ; 
526 234 N M -12 3 - -10 7 - -7 10 - -3 12 - 0 95 - 0 94 - 3 13 - 7 10 - 10 7 - 12 2 - 12 -2 - 11 -7 - 6 -10 - 3 -13 - 0 -94 - 0 -95 - -3 -12 - -6 -10 - -11 -7 - -12 -3 - C : 0.404 0.404 0.404 sco O ; 
526 235 N M -12 3 - 1 0 - -10 7 - -7 10 - 0 -1 - -3 12 - 0 95 - 0 94 - 3 13 - 7 10 - 0 -1 - 10 7 - -1 0 - 12 2 - 12 -2 - 11 -7 - -1 1 - 6 -10 - 3 -13 - 0 -94 - 0 -95 - -3 -12 - 0 1 - -6 -10 - 1 0 - -11 -7 - -12 -3 - 0 -2 - 12 3 - 1 0 - 11 7 - 0 1 - 6 10 - 3 12 - 0 95 - 0 94 - -3 13 - 0 1 - -6 10 - -11 7 - -1 0 - -12 2 - -12 -2 - -10 -7 - -1 0 - -7 -10 - 0 -1 - -3 -13 - 0 -94 - 0 -95 - 3 -12 - 7 -10 - 1 -1 - 10 -7 - 12 -3 - 0 2 - C : 0.149 0.149 0.149 sco L ; 
526 235 N M 0 -2 - 0 2 - C : 0.149 0.149 0.149 sco L ; 
341 239 N M -12 3 - -10 6 - -7 11 - -3 12 - 0 95 - 0 94 - 3 13 - 7 10 - 10 6 - 12 3 - 13 -3 - 10 -6 - 6 -10 - 3 -13 - 0 -94 - 0 -95 - -3 -12 - -6 -11 - -10 -6 - -13 -3 - C : 0.651 0.651 0.651 sco O ; 
341 240 N M -12 3 - 1 0 - -10 6 - -7 11 - 0 -1 - -3 12 - 0 95 - 0 94 - 3 13 - 7 10 - 0 -1 - 10 6 - -1 0 - 12 3 - 13 -3 - 10 -6 - -1 1 - 6 -10 - 3 -13 - 0 -94 - 0 -95 - -3 -12 - 0 1 - -6 -11 - 1 0 - -10 -6 - -13 -3 - 0 -2 - 13 3 - 1 0 - 10 6 - 0 1 - 6 11 - 3 12 - 0 95 - 0 94 - -3 13 - 0 1 - -6 10 - -10 6 - -1 0 - -13 3 - -12 -3 - -10 -6 - -1 0 - -7 -10 - 0 -1 - -3 -13 - 0 -94 - 0 -95 - 3 -12 - 7 -11 - 1 -1 - 10 -6 - 12 -3 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
341 240 N M 0 -2 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
912 229 N M -12 2 - -11 7 - -6 10 - -3 12 - 0 95 - 0 95 - 3 12 - 6 10 - 11 7 - 12 2 - 12 -2 - 10 -7 - 7 -10 - 3 -12 - 0 -95 - 0 -95 - -3 -12 - -7 -10 - -10 -7 - -12 -2 - C : 0.910 0.910 0.910 sco O ; 
912 230 N M -12 2 - 1 0 - -11 7 - -6 10 - 0 -1 - -3 12 - 0 95 - 0 95 - 3 12 - 6 10 - 0 -1 - 11 7 - -1 0 - 12 2 - 12 -2 - 10 -7 - -1 1 - 7 -10 - 3 -12 - 0 -95 - 0 -95 - -3 -12 - 0 1 - -7 -10 - 1 0 - -10 -7 - -12 -2 - 0 -2 - 12 2 - 1 0 - 10 7 - 0 1 - 7 10 - 3 12 - 0 95 - 0 95 - -3 12 - 0 1 - -7 10 - -10 7 - -1 0 - -12 2 - -12 -2 - -11 -7 - -1 0 - -6 -10 - 0 -1 - -3 -12 - 0 -95 - 0 -95 - 3 -12 - 6 -10 - 1 -1 - 11 -7 - 12 -2 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
912 230 N M 0 -2 - 0 2 - C : 0.102 0.102 0.102 sco L ; : 758 64 381 139 rc 0 0 0 sco F0_86_126
Ji 
885 64 M 
12.184 0 (P)A 
; : 841 118 312 112 rc 0 0 0 sco F0_68_101
Ji 
945 118 M 
10.000 0 (3)A 
; 
2351 756 N M -3 -9 - -5 -9 - -6 -7 - -8 -6 - -8 -4 - -10 -3 - -9 -1 - -11 1 - -297 67 - -298 67 - -9 4 - -9 5 - -7 6 - -6 8 - -4 8 - -3 10 - -1 9 - 1 10 - 4 10 - 4 9 - 7 7 - 7 6 - 9 4 - 9 3 - 10 1 - 10 -2 - 298 -67 - 298 -67 - 9 -3 - 9 -5 - 7 -6 - 6 -8 - 4 -8 - 3 -10 - 1 -10 - -2 -10 - C : 0.404 0.404 0.404 sco O ; 
2350 756 N M -3 -9 - 0 1 - -5 -9 - -6 -7 - -8 -6 - -8 -4 - -10 -3 - -9 -1 - 1 0 - -11 1 - -297 67 - -298 67 - -9 4 - -9 5 - -7 6 - -6 8 - 1 0 - -4 8 - -3 10 - -1 9 - 0 -1 - 1 10 - 4 10 - 4 9 - 7 7 - 7 6 - -1 -1 - 9 4 - 9 3 - 10 1 - 10 -2 - 298 -67 - 298 -67 - 9 -3 - -1 0 - 9 -5 - 7 -6 - 6 -8 - 0 1 - 4 -8 - 3 -10 - 1 -10 - -2 -10 - 2 0 - 2 10 - 0 1 - -1 10 - -3 10 - -4 8 - -1 0 - -6 8 - -7 6 - -9 5 - -9 3 - -298 67 - -298 67 - -10 2 - -1 0 - -10 -1 - -9 -3 - -9 -4 - -7 -6 - -7 -7 - 0 -1 - -4 -9 - -4 -10 - -1 -10 - 1 -9 - 3 -10 - 4 -8 - 0 -1 - 6 -8 - 7 -6 - 9 -5 - 1 0 - 9 -4 - 298 -67 - 297 -67 - 11 -1 - 9 1 - 10 3 - 8 4 - 1 1 - 8 6 - 6 7 - 5 9 - 3 9 - -2 0 - C : 0.149 0.149 0.149 sco L ; 
2350 756 N M 2 0 - -2 0 - C : 0.149 0.149 0.149 sco L ; 
434 983 N M -10 1 - -9 2 - -9 5 - -7 6 - -6 7 - -5 9 - -3 9 - -1 10 - 0 227 - 0 228 - 1 10 - 3 9 - 5 8 - 6 8 - 7 6 - 9 4 - 9 3 - 10 1 - 10 -1 - 9 -3 - 9 -4 - 7 -6 - 6 -8 - 5 -8 - 2 -9 - 1 -10 - 0 -228 - 0 -227 - -1 -10 - -2 -9 - -5 -9 - -6 -7 - -7 -6 - -9 -5 - -9 -2 - -10 -1 - C : 0.404 0.404 0.404 sco O ; 
434 984 N M -10 1 - -9 2 - 1 0 - -9 5 - -7 6 - -6 7 - -5 9 - -3 9 - 0 -1 - -1 10 - 0 227 - 0 228 - 1 10 - 3 9 - 5 8 - 6 8 - 0 -1 - 7 6 - 9 4 - 9 3 - -1 0 - 10 1 - 10 -1 - 9 -3 - 9 -4 - 7 -6 - -1 1 - 6 -8 - 5 -8 - 2 -9 - 1 -10 - 0 -228 - 0 -227 - -1 -10 - -2 -9 - 0 1 - -5 -9 - -6 -7 - 1 0 - -7 -6 - -9 -5 - -9 -2 - -10 -1 - 0 -2 - 10 1 - 9 2 - 1 0 - 9 5 - 7 6 - 0 1 - 6 7 - 5 9 - 2 9 - 1 10 - 0 227 - 0 228 - -1 10 - -2 9 - 0 1 - -5 8 - -6 8 - -7 6 - -9 4 - -9 3 - -1 0 - -10 1 - -10 -1 - -9 -3 - -9 -4 - -7 -6 - -1 0 - -6 -8 - -5 -8 - -3 -9 - 0 -1 - -1 -10 - 0 -228 - 0 -227 - 1 -10 - 3 -9 - 5 -9 - 6 -7 - 1 -1 - 7 -6 - 9 -5 - 9 -2 - 10 -1 - 0 2 - C : 0.149 0.149 0.149 sco L ; 
434 984 N M 0 -2 - 0 2 - C : 0.149 0.149 0.149 sco L ; 
244 1114 N M -16 3 - -13 9 - -9 13 - -4 16 - 0 105 - 0 104 - 4 16 - 9 13 - 13 9 - 16 4 - 16 -4 - 13 -9 - 9 -13 - 3 -16 - 0 -104 - 0 -105 - -3 -16 - -9 -13 - -13 -9 - -16 -3 - C : 0.910 0.910 0.910 sco O ; 
244 1115 N M -16 3 - 1 0 - -13 9 - -9 13 - 0 -1 - -4 16 - 0 105 - 0 104 - 4 16 - 9 13 - 0 -1 - 13 9 - -1 0 - 16 4 - 16 -4 - 13 -9 - -1 1 - 9 -13 - 3 -16 - 0 -104 - 0 -105 - -3 -16 - 0 1 - -9 -13 - 1 0 - -13 -9 - -16 -3 - 0 -2 - 16 3 - 1 0 - 13 9 - 0 1 - 9 13 - 3 16 - 0 105 - 0 104 - -3 16 - 0 1 - -9 13 - -13 9 - -1 0 - -16 4 - -16 -4 - -13 -9 - -1 0 - -9 -13 - 0 -1 - -4 -16 - 0 -104 - 0 -105 - 4 -16 - 9 -13 - 1 -1 - 13 -9 - 16 -3 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
244 1115 N M 0 -2 - 0 2 - C : 0.102 0.102 0.102 sco L ; 
1716 1136 N M -17 4 - -14 9 - -10 14 - -3 17 - 0 179 - 0 178 - 3 17 - 10 14 - 14 10 - 17 3 - 17 -3 - 14 -10 - 9 -14 - 4 -17 - 0 -178 - 0 -179 - -4 -17 - -9 -14 - -14 -9 - -17 -4 - C : 0.651 0.651 0.651 sco O ; 
1716 1137 N M -17 4 - 1 0 - -14 9 - -10 14 - 0 -1 - -3 17 - 0 179 - 0 178 - 3 17 - 10 14 - 0 -1 - 14 10 - -1 0 - 17 3 - 17 -3 - 14 -10 - -1 1 - 9 -14 - 4 -17 - 0 -178 - 0 -179 - -4 -17 - 0 1 - -9 -14 - 1 0 - -14 -9 - -17 -4 - 0 -2 - 17 4 - 1 0 - 14 9 - 0 1 - 9 14 - 4 17 - 0 179 - 0 178 - -4 17 - 0 1 - -9 14 - -14 10 - -1 0 - -17 3 - -17 -3 - -14 -10 - -1 0 - -10 -14 - 0 -1 - -3 -17 - 0 -178 - 0 -179 - 3 -17 - 10 -14 - 1 -1 - 14 -9 - 17 -4 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
1716 1137 N M 0 -2 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
2097 1148 N M -17 4 - -14 9 - -9 14 - -4 17 - 0 108 - 0 108 - 4 17 - 9 14 - 14 10 - 17 3 - 17 -3 - 14 -10 - 9 -14 - 4 -17 - 0 -108 - 0 -108 - -4 -17 - -9 -14 - -14 -9 - -17 -4 - C : 0.651 0.651 0.651 sco O ; 
2097 1149 N M -17 4 - 1 0 - -14 9 - -9 14 - 0 -1 - -4 17 - 0 108 - 0 108 - 4 17 - 9 14 - 0 -1 - 14 10 - -1 0 - 17 3 - 17 -3 - 14 -10 - -1 1 - 9 -14 - 4 -17 - 0 -108 - 0 -108 - -4 -17 - 0 1 - -9 -14 - 1 0 - -14 -9 - -17 -4 - 0 -2 - 17 4 - 1 0 - 14 9 - 0 1 - 9 14 - 4 17 - 0 108 - 0 108 - -4 17 - 0 1 - -9 14 - -14 10 - -1 0 - -17 3 - -17 -3 - -14 -10 - -1 0 - -9 -14 - 0 -1 - -4 -17 - 0 -108 - 0 -108 - 4 -17 - 9 -14 - 1 -1 - 14 -9 - 17 -4 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
2097 1149 N M 0 -2 - 0 2 - C : 0.502 0.502 0.502 sco L ; 
2302 1883 N M -2 5 rr : 0 0 0 sco O ; 
2300 1887 N M 12 -5 - 3 -2 - -1 4 - -11 44 - -1 3 - -1 -3 - -14 -43 - -1 -3 - 2 1 - 1 1 - 14 43 - -2 1 - 0 -1 - 11 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
2288 1883 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
2298 1738 N M -2 -1 rr : 0 0 0 sco O ; 
2302 1883 N M -2 1 rr : 0 0 0 sco O ; 
2298 1738 N M -2 0 - 4 145 - 2 0 - -4 -145 - C : 0 0 0 sco L ; 
2318 1945 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2317 1945 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2317 1945 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2298 690 N M -2 6 rr : 0 0 0 sco O ; 
2296 695 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 3 - -1 -3 - -13 -44 - -1 -3 - 2 1 - 1 1 - 13 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
2284 690 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
2298 484 N M -2 -1 rr : 0 0 0 sco O ; 
2298 690 N M -2 1 rr : 0 0 0 sco O ; 
2298 484 N M -2 206 rr : 0 0 0 sco O ; 
1023 1670 N M -2 5 rr : 0 0 0 sco O ; 
1021 1674 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1009 1670 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
1023 1547 N M -2 -1 rr : 0 0 0 sco O ; 
1023 1670 N M -2 1 rr : 0 0 0 sco O ; 
1023 1547 N M -2 123 rr : 0 0 0 sco O ; 
1023 861 N M -2 6 rr : 0 0 0 sco O ; 
1021 866 N M 12 -5 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
1009 861 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
1023 743 N M -2 -1 rr : 0 0 0 sco O ; 
1023 861 N M -2 1 rr : 0 0 0 sco O ; 
1023 743 N M -2 118 rr : 0 0 0 sco O ; 
433 1415 N M -2 5 rr : 0 0 0 sco O ; 
431 1419 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
420 1415 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
433 1371 N M -2 -1 rr : 0 0 0 sco O ; 
433 1415 N M -2 1 rr : 0 0 0 sco O ; 
433 1371 N M -2 44 rr : 0 0 0 sco O ; 
429 1319 N M -2 5 rr : 0 0 0 sco O ; 
427 1323 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
416 1319 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
429 1204 N M -2 -1 rr : 0 0 0 sco O ; 
429 1319 N M -2 1 rr : 0 0 0 sco O ; 
429 1204 N M -2 115 rr : 0 0 0 sco O ; 
433 1115 N M -2 5 rr : 0 0 0 sco O ; 
431 1119 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
420 1115 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
433 1025 N M -2 -1 rr : 0 0 0 sco O ; 
433 1115 N M -2 1 rr : 0 0 0 sco O ; 
433 1025 N M -2 90 rr : 0 0 0 sco O ; 
433 969 N M -2 5 rr : 0 0 0 sco O ; 
431 973 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
420 969 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
433 888 N M -2 -1 rr : 0 0 0 sco O ; 
433 969 N M -2 1 rr : 0 0 0 sco O ; 
433 888 N M -2 81 rr : 0 0 0 sco O ; 
249 1086 N M -2 6 rr : 0 0 0 sco O ; 
247 1091 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
236 1086 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
249 1001 N M -2 -1 rr : 0 0 0 sco O ; 
249 1086 N M -2 1 rr : 0 0 0 sco O ; 
249 1001 N M -2 85 rr : 0 0 0 sco O ; 
249 1290 N M -2 6 rr : 0 0 0 sco O ; 
247 1295 N M 13 -5 - 3 -1 - -1 3 - -13 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 13 -44 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
236 1290 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
249 1167 N M -2 -1 rr : 0 0 0 sco O ; 
249 1290 N M -2 1 rr : 0 0 0 sco O ; 
249 1167 N M -2 123 rr : 0 0 0 sco O ; 
1073 738 N M 0 -2 - -6 1 - 0 2 - 6 -1 - C : 0 0 0 sco L ; 
1068 737 N M 7 11 - 2 2 - -4 0 - -44 -3 - -3 0 - 3 -2 - 39 -21 - 3 -1 - -1 2 - -1 1 - -39 21 - -1 -2 - 1 0 - 44 3 - -1 2 - 0 -1 - -7 -11 - 2 -1 - C : 0 0 0 sco L ; 
1070 725 N M -2 13 - -2 0 - 0 -1 - 2 -13 - 2 1 - C : 0 0 0 sco L ; 
2290 482 N M 1 -2 rr : 0 0 0 sco O ; 
2274 485 N M -1 -2 rr : 0 0 0 sco O ; 
2290 482 N M 0 -2 - -16 3 - 0 2 - 16 -3 - C : 0 0 0 sco L ; 
2247 491 N M 1 -2 rr : 0 0 0 sco O ; 
2216 497 N M -1 -2 rr : 0 0 0 sco O ; 
2247 491 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2189 503 N M 1 -2 rr : 0 0 0 sco O ; 
2158 509 N M -1 -2 rr : 0 0 0 sco O ; 
2189 503 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
2131 515 N M 1 -2 rr : 0 0 0 sco O ; 
2100 522 N M -1 -2 rr : 0 0 0 sco O ; 
2131 515 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
2073 527 N M 1 -2 rr : 0 0 0 sco O ; 
2042 534 N M -1 -2 rr : 0 0 0 sco O ; 
2073 527 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
2015 539 N M 1 -2 rr : 0 0 0 sco O ; 
1984 546 N M -1 -2 rr : 0 0 0 sco O ; 
2015 539 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1958 552 N M 1 -2 rr : 0 0 0 sco O ; 
1926 558 N M -1 -2 rr : 0 0 0 sco O ; 
1958 552 N M 0 -2 - -32 6 - 0 2 - 32 -6 - C : 0 0 0 sco O ; 
1900 564 N M 1 -2 rr : 0 0 0 sco O ; 
1869 570 N M -1 -2 rr : 0 0 0 sco O ; 
1900 564 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1842 576 N M 1 -2 rr : 0 0 0 sco O ; 
1811 583 N M -1 -2 rr : 0 0 0 sco O ; 
1842 576 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1784 588 N M 1 -2 rr : 0 0 0 sco O ; 
1753 595 N M -1 -2 rr : 0 0 0 sco O ; 
1784 588 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1726 600 N M 1 -2 rr : 0 0 0 sco O ; 
1695 607 N M -1 -2 rr : 0 0 0 sco O ; 
1726 600 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1668 613 N M 1 -2 rr : 0 0 0 sco O ; 
1637 619 N M -1 -2 rr : 0 0 0 sco O ; 
1668 613 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1610 625 N M 1 -2 rr : 0 0 0 sco O ; 
1579 631 N M -1 -2 rr : 0 0 0 sco O ; 
1610 625 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1552 637 N M 1 -2 rr : 0 0 0 sco O ; 
1521 644 N M -1 -2 rr : 0 0 0 sco O ; 
1552 637 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1494 649 N M 1 -2 rr : 0 0 0 sco O ; 
1463 656 N M -1 -2 rr : 0 0 0 sco O ; 
1494 649 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1436 661 N M 1 -2 rr : 0 0 0 sco O ; 
1405 668 N M -1 -2 rr : 0 0 0 sco O ; 
1436 661 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1378 674 N M 1 -2 rr : 0 0 0 sco O ; 
1347 680 N M -1 -2 rr : 0 0 0 sco O ; 
1378 674 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1320 686 N M 1 -2 rr : 0 0 0 sco O ; 
1289 692 N M -1 -2 rr : 0 0 0 sco O ; 
1320 686 N M 0 -2 - -31 6 - 0 2 - 31 -6 - C : 0 0 0 sco O ; 
1262 698 N M 1 -2 rr : 0 0 0 sco O ; 
1231 705 N M -1 -2 rr : 0 0 0 sco O ; 
1262 698 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1204 710 N M 1 -2 rr : 0 0 0 sco O ; 
1173 717 N M -1 -2 rr : 0 0 0 sco O ; 
1204 710 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1146 722 N M 1 -2 rr : 0 0 0 sco O ; 
1115 729 N M -1 -2 rr : 0 0 0 sco O ; 
1146 722 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
1088 735 N M 1 -2 rr : 0 0 0 sco O ; 
1073 738 N M -1 -2 rr : 0 0 0 sco O ; 
1088 735 N M 0 -2 - -15 3 - 0 2 - 15 -3 - C : 0 0 0 sco L ; 
2242 1938 N M 0 2 - 6 1 - 0 -2 - -6 -1 - C : 0 0 0 sco L ; 
2247 1941 N M -3 -13 - -1 -3 - 3 1 - 41 20 - 3 2 - -3 0 - -45 5 - -3 1 - 1 -2 - 1 -1 - 45 -5 - 1 2 - -1 0 - -41 -20 - 1 -2 - 0 1 - 3 13 - -2 1 - C : 0 0 0 sco L ; 
2240 1952 N M 7 -12 - 2 0 - 0 1 - -7 12 - -2 -1 - C : 0 0 0 sco L ; 
1030 1729 N M -1 2 rr : 0 0 0 sco O ; 
1045 1732 N M 1 2 rr : 0 0 0 sco O ; 
1030 1729 N M 0 2 - 15 3 - 0 -2 - -15 -3 - C : 0 0 0 sco L ; 
1072 1736 N M -1 2 rr : 0 0 0 sco O ; 
1103 1742 N M 1 2 rr : 0 0 0 sco O ; 
1072 1736 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1130 1746 N M -1 2 rr : 0 0 0 sco O ; 
1161 1752 N M 1 2 rr : 0 0 0 sco O ; 
1130 1746 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1188 1756 N M -1 2 rr : 0 0 0 sco O ; 
1219 1762 N M 1 2 rr : 0 0 0 sco O ; 
1188 1756 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1245 1766 N M -1 2 rr : 0 0 0 sco O ; 
1276 1772 N M 1 2 rr : 0 0 0 sco O ; 
1245 1766 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1303 1776 N M -1 2 rr : 0 0 0 sco O ; 
1334 1782 N M 1 2 rr : 0 0 0 sco O ; 
1303 1776 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1361 1786 N M -1 2 rr : 0 0 0 sco O ; 
1392 1792 N M 1 2 rr : 0 0 0 sco O ; 
1361 1786 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1419 1796 N M -1 2 rr : 0 0 0 sco O ; 
1450 1802 N M 1 2 rr : 0 0 0 sco O ; 
1419 1796 N M 0 2 - 31 6 - 0 -2 - -31 -6 - C : 0 0 0 sco O ; 
1476 1806 N M -1 2 rr : 0 0 0 sco O ; 
1507 1811 N M 1 2 rr : 0 0 0 sco O ; 
1476 1806 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1534 1816 N M -1 2 rr : 0 0 0 sco O ; 
1565 1821 N M 1 2 rr : 0 0 0 sco O ; 
1534 1816 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1592 1826 N M -1 2 rr : 0 0 0 sco O ; 
1623 1831 N M 1 2 rr : 0 0 0 sco O ; 
1592 1826 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1649 1836 N M -1 2 rr : 0 0 0 sco O ; 
1680 1841 N M 1 2 rr : 0 0 0 sco O ; 
1649 1836 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1707 1846 N M -1 2 rr : 0 0 0 sco O ; 
1738 1851 N M 1 2 rr : 0 0 0 sco O ; 
1707 1846 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1765 1856 N M -1 2 rr : 0 0 0 sco O ; 
1796 1861 N M 1 2 rr : 0 0 0 sco O ; 
1765 1856 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1823 1866 N M -1 2 rr : 0 0 0 sco O ; 
1854 1871 N M 1 2 rr : 0 0 0 sco O ; 
1823 1866 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1880 1876 N M -1 2 rr : 0 0 0 sco O ; 
1911 1881 N M 1 2 rr : 0 0 0 sco O ; 
1880 1876 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1938 1886 N M -1 2 rr : 0 0 0 sco O ; 
1969 1891 N M 1 2 rr : 0 0 0 sco O ; 
1938 1886 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
1996 1896 N M -1 2 rr : 0 0 0 sco O ; 
2027 1901 N M 1 2 rr : 0 0 0 sco O ; 
1996 1896 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2054 1906 N M -1 2 rr : 0 0 0 sco O ; 
2085 1911 N M 1 2 rr : 0 0 0 sco O ; 
2054 1906 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2111 1916 N M -1 2 rr : 0 0 0 sco O ; 
2142 1921 N M 1 2 rr : 0 0 0 sco O ; 
2111 1916 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2169 1926 N M -1 2 rr : 0 0 0 sco O ; 
2200 1931 N M 1 2 rr : 0 0 0 sco O ; 
2169 1926 N M 0 2 - 31 5 - 0 -2 - -31 -5 - C : 0 0 0 sco O ; 
2227 1936 N M -1 2 rr : 0 0 0 sco O ; 
2242 1938 N M 1 2 rr : 0 0 0 sco O ; 
2227 1936 N M 0 2 - 15 2 - 0 -2 - -15 -2 - C : 0 0 0 sco L ; 
953 1707 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
957 1711 N M 1 -13 - 0 -4 - 2 2 - 35 28 - 4 3 - -4 -1 - -44 -5 - -4 0 - 2 -1 - 1 -1 - 44 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
949 1720 N M 8 -10 - 2 0 - 0 1 - -8 10 - -2 -1 - C : 0 0 0 sco L ; 
434 1493 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
448 1499 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
434 1493 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
472 1509 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
500 1521 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
472 1509 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
524 1531 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
552 1542 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
524 1531 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
576 1552 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
604 1563 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
576 1552 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
628 1573 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
656 1585 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
628 1573 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
680 1595 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
708 1606 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
680 1595 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
732 1616 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
760 1627 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
732 1616 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
784 1637 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
812 1649 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
784 1637 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
836 1659 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
864 1670 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
836 1659 N M -1 2 - 28 11 - 1 -2 - -28 -11 - C : 0 0 0 sco O ; 
888 1680 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
916 1692 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
888 1680 N M -1 2 - 28 12 - 1 -2 - -28 -12 - C : 0 0 0 sco O ; 
940 1701 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
954 1707 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
940 1701 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
487 875 N M 0 -2 - -5 1 - 0 2 - 5 -1 - C : 0 0 0 sco L ; 
483 874 N M 7 11 - 2 2 - -4 0 - -45 -2 - -3 0 - 3 -2 - 39 -22 - 2 -1 - 0 2 - -1 1 - -39 22 - -1 -2 - 1 0 - 45 2 - -1 2 - 0 -1 - -7 -11 - 2 -1 - C : 0 0 0 sco L ; 
484 862 N M -1 13 - -2 0 - 0 -1 - 1 -13 - 2 1 - C : 0 0 0 sco L ; 
997 756 N M 1 -2 rr : 0 0 0 sco O ; 
981 760 N M -1 -2 rr : 0 0 0 sco O ; 
997 756 N M 0 -2 - -16 4 - 0 2 - 16 -4 - C : 0 0 0 sco L ; 
955 766 N M 1 -2 rr : 0 0 0 sco O ; 
925 773 N M -1 -2 rr : 0 0 0 sco O ; 
955 766 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
899 779 N M 1 -2 rr : 0 0 0 sco O ; 
868 786 N M -1 -2 rr : 0 0 0 sco O ; 
899 779 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
842 792 N M 1 -2 rr : 0 0 0 sco O ; 
812 799 N M -1 -2 rr : 0 0 0 sco O ; 
842 792 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
785 805 N M 1 -2 rr : 0 0 0 sco O ; 
755 812 N M -1 -2 rr : 0 0 0 sco O ; 
785 805 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
729 819 N M 1 -2 rr : 0 0 0 sco O ; 
699 826 N M -1 -2 rr : 0 0 0 sco O ; 
729 819 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
672 832 N M 1 -2 rr : 0 0 0 sco O ; 
642 839 N M -1 -2 rr : 0 0 0 sco O ; 
672 832 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
616 845 N M 1 -2 rr : 0 0 0 sco O ; 
585 852 N M -1 -2 rr : 0 0 0 sco O ; 
616 845 N M 0 -2 - -31 7 - 0 2 - 31 -7 - C : 0 0 0 sco O ; 
559 858 N M 1 -2 rr : 0 0 0 sco O ; 
529 865 N M -1 -2 rr : 0 0 0 sco O ; 
559 858 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
503 871 N M 1 -2 rr : 0 0 0 sco O ; 
487 875 N M -1 -2 rr : 0 0 0 sco O ; 
503 871 N M 0 -2 - -16 4 - 0 2 - 16 -4 - C : 0 0 0 sco L ; 
370 1458 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
372 1462 N M 4 -12 - 1 -3 - 1 3 - 27 36 - 3 3 - -4 -2 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 12 - -2 -1 - C : 0 0 0 sco L ; 
361 1469 N M 11 -8 - 2 2 - -1 0 - -11 8 - -1 -2 - C : 0 0 0 sco L ; 
236 1359 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
248 1368 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
236 1359 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
269 1383 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
292 1401 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
269 1383 N M -1 2 - 23 18 - 1 -2 - -23 -18 - C : 0 0 0 sco O ; 
313 1416 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
336 1434 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
313 1416 N M -1 2 - 23 18 - 1 -2 - -23 -18 - C : 0 0 0 sco O ; 
357 1449 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
370 1458 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
357 1449 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
298 969 N M -2 -2 - -5 4 - 2 2 - 5 -4 - C : 0 0 0 sco L ; 
292 971 N M 11 7 - 3 1 - -3 1 - -42 15 - -4 2 - 3 -3 - 28 -35 - 1 -3 - 1 2 - 0 2 - -28 35 - -2 -1 - 0 -1 - 42 -15 - 1 2 - -1 0 - -11 -7 - 1 -2 - C : 0 0 0 sco L ; 
290 958 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
404 893 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
391 902 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
404 893 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
366 921 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
336 942 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
366 921 N M -1 -2 - -30 21 - 1 2 - 30 -21 - C : 0 0 0 sco O ; 
311 960 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
298 969 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
311 960 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
449 1177 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
448 1178 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
448 1177 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
449 1027 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
448 1028 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
448 1027 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
449 1373 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 8 - 4 5 - 6 5 - 7 1 - 7 -1 - 6 -5 - 4 -5 - 2 -8 - C : 0 0 0 sco O ; 
448 1374 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 5 - 0 -1 - 6 5 - -1 0 - 7 1 - 7 -1 - 6 -5 - -1 1 - 4 -5 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 5 - -6 5 - -1 0 - -7 1 - -7 -1 - -6 -5 - -1 0 - -4 -5 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
448 1373 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
186 1308 N M -2 2 - 4 4 - 2 -2 - -4 -4 - C : 0 0 0 sco L ; 
188 1313 N M 4 -13 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 13 - -2 -1 - C : 0 0 0 sco L ; 
177 1319 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
87 1233 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
99 1243 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
87 1233 N M -1 2 - 12 10 - 1 -2 - -12 -10 - C : 0 0 0 sco L ; 
123 1260 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
150 1281 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
123 1260 N M -1 2 - 27 21 - 1 -2 - -27 -21 - C : 0 0 0 sco O ; 
174 1299 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
186 1308 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
174 1299 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
92 1165 N M -4 7 rr : 0 0 0 sco O ; 
89 1170 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -12 -43 - -1 -5 - 4 2 - 1 2 - 12 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
79 1165 N M 12 5 - 0 4 - -1 0 - -1 0 - -12 -5 - 2 -4 - C : 0 0 0 sco L ; 
90 1105 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
92 1105 N M -4 -2 rr : 0 0 0 sco O ; 
92 1105 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
92 1165 N M -4 2 rr : 0 0 0 sco O ; 
92 1155 N M -4 10 rr : 0 0 0 sco O ; 
265 1153 N M -1 -7 - -5 -6 - -5 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 5 -4 - 5 -6 - 1 -7 - C : 0 0 0 sco O ; 
264 1153 N M -1 -7 - 0 1 - -5 -6 - 1 0 - -5 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 5 -4 - -1 1 - 5 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -5 6 - -5 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 5 4 - 0 1 - 5 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
264 1153 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
265 1349 N M -1 -8 - -5 -6 - -5 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 5 -4 - 5 -6 - 1 -7 - C : 0 0 0 sco O ; 
264 1349 N M -1 -8 - 0 1 - -5 -6 - 1 0 - -5 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 5 -4 - -1 1 - 5 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -5 6 - -5 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 5 4 - 0 1 - 5 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
264 1349 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
107 1218 N M -2 -8 - -4 -7 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 7 - -2 8 - 2 8 - 4 6 - 6 5 - 7 1 - 7 -1 - 6 -5 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
106 1218 N M -2 -8 - 0 1 - -4 -7 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 7 - 0 -1 - -2 8 - 2 8 - 4 6 - 0 -1 - 6 5 - -1 0 - 7 1 - 7 -1 - 6 -5 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 5 - -1 0 - -7 1 - -7 -1 - -6 -5 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -8 - 4 -7 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 7 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
106 1218 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
107 1111 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
106 1112 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
106 1111 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
265 1003 N M -1 -7 - -5 -6 - -5 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 8 -2 - 5 -4 - 5 -6 - 1 -7 - C : 0 0 0 sco O ; 
264 1003 N M -1 -7 - 0 1 - -5 -6 - 1 0 - -5 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 5 -4 - -1 1 - 5 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -5 6 - -5 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 5 4 - 0 1 - 5 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
264 1003 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
449 886 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
448 886 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
448 886 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
449 1486 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
448 1486 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
448 1486 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1038 753 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1037 753 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1037 753 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1038 1728 N M -1 -7 - -4 -6 - -6 -4 - -7 -2 - -8 2 - -6 4 - -4 6 - -1 7 - 1 7 - 4 6 - 6 4 - 8 2 - 7 -2 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1037 1728 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -2 - -8 2 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 2 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -7 2 - -1 0 - -8 -2 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1037 1728 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2313 470 N M -1 -8 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
2312 470 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
2312 470 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1028 1449 N M -2 6 rr : 0 0 0 sco O ; 
1026 1454 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
1015 1449 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1028 1406 N M -2 -1 rr : 0 0 0 sco O ; 
1028 1449 N M -2 1 rr : 0 0 0 sco O ; 
1028 1406 N M -2 43 rr : 0 0 0 sco O ; 
1024 1354 N M -2 5 rr : 0 0 0 sco O ; 
1022 1358 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1010 1354 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
1024 1239 N M -2 -1 rr : 0 0 0 sco O ; 
1024 1354 N M -2 1 rr : 0 0 0 sco O ; 
1024 1239 N M -2 115 rr : 0 0 0 sco O ; 
1028 1149 N M -2 6 rr : 0 0 0 sco O ; 
1026 1154 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 4 - -1 -4 - -12 -44 - -1 -3 - 2 1 - 1 1 - 12 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
1015 1149 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1028 1060 N M -2 -1 rr : 0 0 0 sco O ; 
1028 1149 N M -2 1 rr : 0 0 0 sco O ; 
1028 1060 N M -2 89 rr : 0 0 0 sco O ; 
1028 1004 N M -2 5 rr : 0 0 0 sco O ; 
1026 1008 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1015 1004 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1028 922 N M -2 -1 rr : 0 0 0 sco O ; 
1028 1004 N M -2 1 rr : 0 0 0 sco O ; 
1028 922 N M -2 82 rr : 0 0 0 sco O ; 
711 1129 N M -2 5 rr : 0 0 0 sco O ; 
709 1133 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
698 1129 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
711 1043 N M -2 -1 rr : 0 0 0 sco O ; 
711 1129 N M -2 1 rr : 0 0 0 sco O ; 
711 1043 N M -2 86 rr : 0 0 0 sco O ; 
711 1333 N M -2 5 rr : 0 0 0 sco O ; 
709 1337 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
698 1333 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
711 1210 N M -2 -1 rr : 0 0 0 sco O ; 
711 1333 N M -2 1 rr : 0 0 0 sco O ; 
711 1210 N M -2 123 rr : 0 0 0 sco O ; 
958 1503 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
962 1507 N M 0 -13 - 0 -4 - 2 2 - 35 28 - 4 3 - -4 -1 - -44 -5 - -4 0 - 2 -1 - 1 -1 - 44 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - 0 13 - -2 1 - C : 0 0 0 sco L ; 
953 1516 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
720 1405 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
734 1411 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
720 1405 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
762 1422 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
795 1436 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
762 1422 N M -1 2 - 33 14 - 1 -2 - -33 -14 - C : 0 0 0 sco O ; 
823 1447 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
855 1461 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
823 1447 N M -1 2 - 32 14 - 1 -2 - -32 -14 - C : 0 0 0 sco O ; 
883 1472 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
916 1486 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
883 1472 N M -1 2 - 33 14 - 1 -2 - -33 -14 - C : 0 0 0 sco O ; 
944 1497 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
959 1503 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
944 1497 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
776 1014 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
772 1014 N M 8 10 - 2 2 - -4 0 - -44 4 - -3 0 - 3 -2 - 35 -27 - 2 -2 - 0 3 - -1 1 - -35 27 - -1 -2 - 1 0 - 44 -4 - -1 2 - 0 -1 - -8 -10 - 2 -1 - C : 0 0 0 sco L ; 
771 1002 N M 1 13 - -2 0 - 0 -1 - -1 -13 - 2 1 - C : 0 0 0 sco L ; 
999 928 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
984 933 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
999 928 N M -1 -2 - -15 5 - 1 2 - 15 -5 - C : 0 0 0 sco L ; 
958 943 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
929 955 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
958 943 N M -1 -2 - -29 12 - 1 2 - 29 -12 - C : 0 0 0 sco O ; 
903 965 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
873 977 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
903 965 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
847 987 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
817 999 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
847 987 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
791 1009 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
777 1014 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
791 1009 N M -1 -2 - -14 5 - 1 2 - 14 -5 - C : 0 0 0 sco L ; 
909 1150 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
903 1151 N M 11 7 - 4 1 - -4 1 - -42 15 - -3 1 - 2 -2 - 28 -35 - 1 -3 - 1 2 - 0 2 - -28 35 - -2 -1 - 0 -1 - 42 -15 - 1 2 - -1 0 - -11 -7 - 1 -2 - C : 0 0 0 sco L ; 
901 1138 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
1028 1065 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1015 1074 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1028 1065 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
986 1095 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
951 1120 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
986 1095 N M -1 -2 - -35 25 - 1 2 - 35 -25 - C : 0 0 0 sco O ; 
922 1141 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
909 1150 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
922 1141 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
989 1381 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
993 1385 N M 3 -13 - 0 -3 - 2 3 - 31 32 - 3 2 - -4 -1 - -44 -11 - -3 0 - 2 -1 - 1 -1 - 44 11 - 0 2 - -31 -32 - 1 -1 - -3 13 - -2 0 - C : 0 0 0 sco L ; 
983 1393 N M 10 -8 - 2 0 - -1 1 - -10 8 - -1 -1 - C : 0 0 0 sco L ; 
865 1309 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
879 1317 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
865 1309 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
910 1335 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
946 1355 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
910 1335 N M -1 2 - 36 20 - 1 -2 - -36 -20 - C : 0 0 0 sco O ; 
977 1373 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
990 1381 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
977 1373 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
854 1229 N M -4 7 rr : 0 0 0 sco O ; 
851 1234 N M 14 -5 - 4 -1 - -1 4 - -14 51 - -2 7 - -2 -7 - -14 -51 - -1 -4 - 3 1 - 2 2 - 14 51 - -4 1 - 0 -1 - 14 -51 - 4 1 - -2 1 - -14 5 - -1 -4 - C : 0 0 0 sco L ; 
838 1229 N M 14 5 - 0 4 - -1 0 - -14 -5 - 1 -4 - C : 0 0 0 sco L ; 
854 1177 N M -4 -2 rr : 0 0 0 sco O ; 
854 1229 N M -4 2 rr : 0 0 0 sco O ; 
854 1177 N M -4 52 rr : 0 0 0 sco O ; 
1044 1212 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1043 1213 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1043 1212 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1044 1062 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1043 1063 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1043 1062 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1044 1408 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1043 1409 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1043 1408 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
873 1291 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
872 1292 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
872 1291 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
873 1183 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
872 1184 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
872 1183 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
727 1195 N M -2 -7 - -4 -6 - -5 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 5 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
726 1196 N M -2 -7 - -4 -6 - 1 0 - -5 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 5 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -5 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 5 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
726 1195 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
727 1391 N M -2 -7 - -4 -6 - -5 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 8 - 4 5 - 6 4 - 7 2 - 8 -2 - 5 -4 - 4 -5 - 2 -8 - C : 0 0 0 sco O ; 
726 1392 N M -2 -7 - -4 -6 - 1 0 - -5 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 5 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 5 -4 - -1 1 - 4 -5 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 5 - -5 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -5 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 5 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
726 1391 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
727 1045 N M -2 -7 - -4 -6 - -5 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 8 -1 - 5 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
726 1046 N M -2 -7 - -4 -6 - 1 0 - -5 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 5 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -5 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 5 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
726 1045 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1044 920 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1043 921 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1043 920 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1044 1520 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1043 1521 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1043 1520 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
2302 1674 N M -2 5 rr : 0 0 0 sco O ; 
2300 1678 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
2288 1674 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
2302 1551 N M -2 -1 rr : 0 0 0 sco O ; 
2302 1674 N M -2 1 rr : 0 0 0 sco O ; 
2302 1551 N M -2 123 rr : 0 0 0 sco O ; 
2302 865 N M -2 6 rr : 0 0 0 sco O ; 
2300 870 N M 12 -5 - 3 -2 - -1 4 - -12 44 - -1 3 - -1 -3 - -13 -44 - -1 -3 - 2 1 - 1 1 - 13 44 - -2 1 - 0 -1 - 12 -44 - 2 1 - -1 0 - -12 5 - -1 -2 - C : 0 0 0 sco L ; 
2288 865 N M 13 5 - 0 2 - -1 0 - -13 -5 - 1 -2 - C : 0 0 0 sco L ; 
2302 747 N M -2 -1 rr : 0 0 0 sco O ; 
2302 865 N M -2 1 rr : 0 0 0 sco O ; 
2302 747 N M -2 118 rr : 0 0 0 sco O ; 
1723 1425 N M -2 5 rr : 0 0 0 sco O ; 
1721 1429 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1710 1425 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1723 1381 N M -2 -1 rr : 0 0 0 sco O ; 
1723 1425 N M -2 1 rr : 0 0 0 sco O ; 
1723 1381 N M -2 44 rr : 0 0 0 sco O ; 
1719 1329 N M -2 5 rr : 0 0 0 sco O ; 
1717 1333 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 3 - -1 -3 - -13 -43 - -1 -3 - 2 1 - 1 1 - 13 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1705 1329 N M 13 4 - 0 2 - -1 0 - -13 -4 - 1 -2 - C : 0 0 0 sco L ; 
1719 1214 N M -2 -1 rr : 0 0 0 sco O ; 
1719 1329 N M -2 1 rr : 0 0 0 sco O ; 
1719 1214 N M -2 115 rr : 0 0 0 sco O ; 
1723 1125 N M -2 5 rr : 0 0 0 sco O ; 
1721 1129 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1710 1125 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1723 1035 N M -2 -1 rr : 0 0 0 sco O ; 
1723 1125 N M -2 1 rr : 0 0 0 sco O ; 
1723 1035 N M -2 90 rr : 0 0 0 sco O ; 
1723 979 N M -2 5 rr : 0 0 0 sco O ; 
1721 983 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
1710 979 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1723 898 N M -2 -1 rr : 0 0 0 sco O ; 
1723 979 N M -2 1 rr : 0 0 0 sco O ; 
1723 898 N M -2 81 rr : 0 0 0 sco O ; 
1406 1104 N M -2 5 rr : 0 0 0 sco O ; 
1404 1108 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
1393 1104 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
1406 1019 N M -2 -1 rr : 0 0 0 sco O ; 
1406 1104 N M -2 1 rr : 0 0 0 sco O ; 
1406 1019 N M -2 85 rr : 0 0 0 sco O ; 
1406 1308 N M -2 6 rr : 0 0 0 sco O ; 
1404 1313 N M 13 -5 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 5 - -1 -2 - C : 0 0 0 sco L ; 
1393 1308 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
1406 1185 N M -2 -1 rr : 0 0 0 sco O ; 
1406 1308 N M -2 1 rr : 0 0 0 sco O ; 
1406 1185 N M -2 123 rr : 0 0 0 sco O ; 
2233 1711 N M 0 2 - 5 2 - 0 -2 - -5 -2 - C : 0 0 0 sco L ; 
2237 1715 N M 1 -13 - -1 -4 - 3 2 - 35 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -35 -28 - 1 -2 - 0 1 - -1 13 - -2 1 - C : 0 0 0 sco L ; 
2228 1724 N M 9 -10 - 2 0 - 0 1 - -9 10 - -2 -1 - C : 0 0 0 sco L ; 
1727 1493 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1741 1500 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1727 1493 N M -1 2 - 14 7 - 1 -2 - -14 -7 - C : 0 0 0 sco L ; 
1767 1511 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1798 1524 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1767 1511 N M -1 2 - 31 13 - 1 -2 - -31 -13 - C : 0 0 0 sco O ; 
1824 1535 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1854 1548 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1824 1535 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1880 1559 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1911 1572 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1880 1559 N M -1 2 - 31 13 - 1 -2 - -31 -13 - C : 0 0 0 sco O ; 
1937 1583 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1967 1596 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1937 1583 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
1993 1608 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2024 1621 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1993 1608 N M -1 2 - 31 13 - 1 -2 - -31 -13 - C : 0 0 0 sco O ; 
2050 1632 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2080 1645 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2050 1632 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2106 1656 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2137 1669 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2106 1656 N M -1 2 - 31 13 - 1 -2 - -31 -13 - C : 0 0 0 sco O ; 
2163 1680 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2193 1693 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2163 1680 N M -1 2 - 30 13 - 1 -2 - -30 -13 - C : 0 0 0 sco O ; 
2219 1705 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2234 1711 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2219 1705 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
1776 882 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
1772 882 N M 7 11 - 1 2 - -3 0 - -45 -2 - -4 0 - 4 -2 - 39 -22 - 2 -1 - 0 2 - -1 1 - -39 22 - -1 -2 - 1 0 - 45 2 - -1 2 - 0 -1 - -7 -11 - 2 -1 - C : 0 0 0 sco L ; 
1773 870 N M -1 13 - -2 0 - 0 -1 - 1 -13 - 2 1 - C : 0 0 0 sco L ; 
2277 760 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2262 764 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2277 760 N M -1 -2 - -15 4 - 1 2 - 15 -4 - C : 0 0 0 sco L ; 
2235 770 N M 1 -2 rr : 0 0 0 sco O ; 
2205 777 N M -1 -2 rr : 0 0 0 sco O ; 
2235 770 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2180 784 N M 1 -2 rr : 0 0 0 sco O ; 
2150 791 N M -1 -2 rr : 0 0 0 sco O ; 
2180 784 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2125 797 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2095 805 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2125 797 N M -1 -2 - -30 8 - 1 2 - 30 -8 - C : 0 0 0 sco O ; 
2069 811 N M 1 -2 rr : 0 0 0 sco O ; 
2039 818 N M -1 -2 rr : 0 0 0 sco O ; 
2069 811 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
2014 824 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1985 832 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2014 824 N M -1 -2 - -29 8 - 1 2 - 29 -8 - C : 0 0 0 sco O ; 
1958 838 N M 1 -2 rr : 0 0 0 sco O ; 
1928 845 N M -1 -2 rr : 0 0 0 sco O ; 
1958 838 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
1902 852 N M 1 -2 rr : 0 0 0 sco O ; 
1873 859 N M -1 -2 rr : 0 0 0 sco O ; 
1902 852 N M 0 -2 - -29 7 - 0 2 - 29 -7 - C : 0 0 0 sco O ; 
1847 865 N M 1 -2 rr : 0 0 0 sco O ; 
1817 872 N M -1 -2 rr : 0 0 0 sco O ; 
1847 865 N M 0 -2 - -30 7 - 0 2 - 30 -7 - C : 0 0 0 sco O ; 
1792 879 N M 1 -2 rr : 0 0 0 sco O ; 
1776 882 N M -1 -2 rr : 0 0 0 sco O ; 
1792 879 N M 0 -2 - -16 3 - 0 2 - 16 -3 - C : 0 0 0 sco L ; 
1653 1478 N M 0 2 - 5 3 - 0 -2 - -5 -3 - C : 0 0 0 sco L ; 
1657 1483 N M 0 -14 - -1 -4 - 3 2 - 36 28 - 3 3 - -3 -1 - -45 -5 - -4 0 - 2 -1 - 1 -1 - 45 5 - 1 2 - -1 0 - -36 -28 - 1 -2 - 0 1 - 0 14 - -2 1 - C : 0 0 0 sco L ; 
1648 1491 N M 9 -9 - 2 0 - 0 1 - -9 9 - -2 -1 - C : 0 0 0 sco L ; 
1415 1380 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1429 1386 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1415 1380 N M -1 2 - 14 6 - 1 -2 - -14 -6 - C : 0 0 0 sco L ; 
1457 1398 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1490 1411 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1457 1398 N M -1 2 - 33 13 - 1 -2 - -33 -13 - C : 0 0 0 sco O ; 
1518 1423 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1550 1436 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1518 1423 N M -1 2 - 32 13 - 1 -2 - -32 -13 - C : 0 0 0 sco O ; 
1579 1448 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1611 1461 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1579 1448 N M -1 2 - 32 13 - 1 -2 - -32 -13 - C : 0 0 0 sco O ; 
1639 1472 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1654 1478 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1639 1472 N M -1 2 - 15 6 - 1 -2 - -15 -6 - C : 0 0 0 sco L ; 
1471 990 N M 0 -2 - -5 2 - 0 2 - 5 -2 - C : 0 0 0 sco L ; 
1467 990 N M 9 9 - 3 2 - -5 0 - -45 5 - -3 0 - 3 -2 - 36 -28 - 2 -2 - 0 3 - -1 1 - -36 28 - -1 -2 - 1 0 - 45 -5 - -1 2 - 0 -1 - -9 -9 - 2 -1 - C : 0 0 0 sco L ; 
1467 977 N M 0 14 - -2 0 - 0 -1 - 0 -14 - 2 1 - C : 0 0 0 sco L ; 
1694 903 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1679 909 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1694 903 N M -1 -2 - -15 6 - 1 2 - 15 -6 - C : 0 0 0 sco L ; 
1653 919 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1624 930 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1653 919 N M -1 -2 - -29 11 - 1 2 - 29 -11 - C : 0 0 0 sco O ; 
1598 940 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1568 952 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1598 940 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
1542 962 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1512 974 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1542 962 N M -1 -2 - -30 12 - 1 2 - 30 -12 - C : 0 0 0 sco O ; 
1487 984 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1472 990 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1487 984 N M -1 -2 - -15 6 - 1 2 - 15 -6 - C : 0 0 0 sco L ; 
1604 1125 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
1598 1126 N M 11 8 - 4 1 - -4 1 - -42 15 - -3 1 - 2 -2 - 28 -35 - 1 -3 - 1 2 - 0 2 - -28 35 - -2 -1 - 0 -1 - 42 -15 - 1 2 - -1 0 - -11 -8 - 1 -2 - C : 0 0 0 sco L ; 
1596 1114 N M 3 12 - -2 2 - 0 -1 - -3 -12 - 2 -1 - C : 0 0 0 sco L ; 
1723 1040 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1710 1049 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1723 1040 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1681 1071 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1646 1095 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1681 1071 N M -1 -2 - -35 24 - 1 2 - 35 -24 - C : 0 0 0 sco O ; 
1617 1116 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1604 1125 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1617 1116 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
1685 1356 N M 0 2 - 4 3 - 0 -2 - -4 -3 - C : 0 0 0 sco L ; 
1688 1360 N M 3 -13 - 0 -3 - 2 3 - 31 32 - 3 2 - -4 -1 - -44 -11 - -3 0 - 2 -1 - 1 -1 - 44 11 - 0 2 - -31 -32 - 1 -1 - -3 13 - -2 0 - C : 0 0 0 sco L ; 
1678 1368 N M 10 -8 - 2 0 - -1 1 - -10 8 - -1 -1 - C : 0 0 0 sco L ; 
1561 1284 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1574 1292 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1561 1284 N M -1 2 - 13 8 - 1 -2 - -13 -8 - C : 0 0 0 sco L ; 
1605 1310 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1641 1330 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1605 1310 N M -1 2 - 36 20 - 1 -2 - -36 -20 - C : 0 0 0 sco O ; 
1672 1348 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1686 1356 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1672 1348 N M -1 2 - 14 8 - 1 -2 - -14 -8 - C : 0 0 0 sco L ; 
1549 1204 N M -4 8 rr : 0 0 0 sco O ; 
1546 1210 N M 15 -6 - 4 0 - -1 3 - -15 51 - -2 7 - -2 -7 - -14 -51 - -1 -5 - 4 2 - 1 2 - 14 51 - -4 1 - 0 -1 - 15 -51 - 4 1 - -2 1 - -15 6 - -1 -4 - C : 0 0 0 sco L ; 
1534 1204 N M 14 6 - -1 4 - -1 0 - -14 -6 - 2 -4 - C : 0 0 0 sco L ; 
1549 1152 N M -4 -2 rr : 0 0 0 sco O ; 
1549 1204 N M -4 2 rr : 0 0 0 sco O ; 
1549 1152 N M -4 52 rr : 0 0 0 sco O ; 
1739 1187 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1738 1188 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1738 1187 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1739 1037 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1738 1038 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1738 1037 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1739 1383 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1738 1384 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1738 1383 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1568 1266 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1567 1267 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1567 1266 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1568 1158 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1567 1159 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1567 1158 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1297 1093 N M -2 -2 - -5 3 - 2 2 - 5 -3 - C : 0 0 0 sco L ; 
1291 1094 N M 11 8 - 3 2 - -3 0 - -43 13 - -4 2 - 3 -3 - 29 -33 - 2 -3 - 0 2 - 0 2 - -29 33 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -11 -8 - 1 -2 - C : 0 0 0 sco L ; 
1289 1082 N M 3 12 - -2 2 - 0 -1 - -3 -12 - 2 -1 - C : 0 0 0 sco L ; 
1386 1036 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1372 1045 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1386 1036 N M -1 -2 - -14 9 - 1 2 - 14 -9 - C : 0 0 0 sco L ; 
1353 1057 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
1330 1072 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
1353 1057 N M -1 -2 - -23 15 - 1 2 - 23 -15 - C : 0 0 0 sco O ; 
1310 1085 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1297 1093 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
1310 1085 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
1343 1326 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
1345 1330 N M 4 -12 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 12 - -2 -1 - C : 0 0 0 sco L ; 
1334 1337 N M 11 -8 - 2 2 - -1 0 - -11 8 - -1 -2 - C : 0 0 0 sco L ; 
1244 1251 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1256 1260 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1244 1251 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
1280 1278 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1307 1299 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1280 1278 N M -1 2 - 27 21 - 1 -2 - -27 -21 - C : 0 0 0 sco O ; 
1331 1317 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1343 1326 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1331 1317 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
1249 1183 N M -4 7 rr : 0 0 0 sco O ; 
1246 1188 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -12 -43 - -1 -5 - 4 2 - 1 2 - 12 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
1236 1183 N M 12 5 - 0 4 - -1 0 - -1 0 - -12 -5 - 2 -4 - C : 0 0 0 sco L ; 
1247 1123 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
1249 1123 N M -4 -2 rr : 0 0 0 sco O ; 
1249 1123 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
1249 1183 N M -4 2 rr : 0 0 0 sco O ; 
1249 1173 N M -4 10 rr : 0 0 0 sco O ; 
1422 1171 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1421 1171 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1421 1171 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1422 1363 N M -1 -9 - -4 -7 - -6 -5 - -8 -2 - -7 2 - -6 5 - -4 7 - -1 9 - 1 8 - 4 8 - 6 4 - 7 2 - 8 -2 - 6 -4 - 4 -8 - 1 -8 - C : 0 0 0 sco O ; 
1421 1363 N M -1 -9 - 0 1 - -4 -7 - 1 0 - -6 -5 - -8 -2 - 1 0 - -7 2 - -6 5 - -4 7 - 0 -1 - -1 9 - 1 8 - 4 8 - 0 -1 - 6 4 - 7 2 - -1 0 - 8 -2 - 6 -4 - -1 1 - 4 -8 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 8 - -6 4 - -1 0 - -8 2 - -7 -2 - -6 -4 - -1 0 - -4 -8 - 0 -1 - -1 -8 - 1 -9 - 4 -7 - 1 -1 - 6 -5 - 7 -2 - 8 2 - 1 0 - 6 5 - 0 1 - 4 7 - 1 9 - -2 0 - C : 0 0 0 sco L ; 
1421 1363 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1264 1237 N M -2 -7 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 7 - 2 8 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -8 - C : 0 0 0 sco O ; 
1263 1238 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -2 -8 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1263 1237 N M 0 1 - 2 -1 - -2 0 - C : 0 0 0 sco L ; 
1264 1129 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1263 1130 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
1263 1129 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1422 1021 N M -1 -8 - -4 -6 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 6 - -1 8 - 1 7 - 4 6 - 6 4 - 7 1 - 8 -1 - 6 -4 - 4 -6 - 1 -7 - C : 0 0 0 sco O ; 
1421 1021 N M -1 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 8 - 1 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 8 -1 - 6 -4 - -1 1 - 4 -6 - 1 -7 - 2 0 - -1 7 - 0 1 - -4 6 - -6 4 - -1 0 - -8 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -7 - 1 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 8 - -2 0 - C : 0 0 0 sco L ; 
1421 1021 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1739 896 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1738 896 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1738 896 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1739 1496 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
1738 1496 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
1738 1496 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2318 757 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2317 758 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2317 757 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2318 1732 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2317 1733 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2317 1732 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2307 1454 N M -2 5 rr : 0 0 0 sco O ; 
2305 1458 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2294 1454 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2307 1410 N M -2 -1 rr : 0 0 0 sco O ; 
2307 1454 N M -2 1 rr : 0 0 0 sco O ; 
2307 1410 N M -2 44 rr : 0 0 0 sco O ; 
2303 1358 N M -2 5 rr : 0 0 0 sco O ; 
2301 1362 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
2290 1358 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2303 1243 N M -2 -1 rr : 0 0 0 sco O ; 
2303 1358 N M -2 1 rr : 0 0 0 sco O ; 
2303 1243 N M -2 115 rr : 0 0 0 sco O ; 
2307 1154 N M -2 5 rr : 0 0 0 sco O ; 
2305 1158 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2294 1154 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2307 1064 N M -2 -1 rr : 0 0 0 sco O ; 
2307 1154 N M -2 1 rr : 0 0 0 sco O ; 
2307 1064 N M -2 90 rr : 0 0 0 sco O ; 
2307 1008 N M -2 5 rr : 0 0 0 sco O ; 
2305 1012 N M 13 -4 - 3 -1 - -1 3 - -13 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 13 -43 - 2 1 - -1 0 - -13 4 - -1 -2 - C : 0 0 0 sco L ; 
2294 1008 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2307 927 N M -2 -1 rr : 0 0 0 sco O ; 
2307 1008 N M -2 1 rr : 0 0 0 sco O ; 
2307 927 N M -2 81 rr : 0 0 0 sco O ; 
2096 1125 N M -2 5 rr : 0 0 0 sco O ; 
2094 1129 N M 12 -4 - 3 -2 - -1 4 - -12 43 - -1 4 - -1 -4 - -12 -43 - -1 -3 - 2 1 - 1 1 - 12 43 - -2 1 - 0 -1 - 12 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
2083 1125 N M 12 4 - 0 2 - -1 0 - -12 -4 - 1 -2 - C : 0 0 0 sco L ; 
2096 1040 N M -2 -1 rr : 0 0 0 sco O ; 
2096 1125 N M -2 1 rr : 0 0 0 sco O ; 
2096 1040 N M -2 85 rr : 0 0 0 sco O ; 
2245 1496 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
2247 1500 N M 4 -12 - 0 -3 - 2 3 - 26 36 - 2 3 - -3 -2 - -41 -17 - -3 -1 - 2 -1 - 2 0 - 41 17 - -1 2 - -1 0 - -26 -36 - 2 -1 - 0 1 - -4 12 - -2 -1 - C : 0 0 0 sco L ; 
2236 1506 N M 11 -7 - 2 2 - -1 0 - -11 7 - -1 -2 - C : 0 0 0 sco L ; 
2125 1400 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2137 1409 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2125 1400 N M -1 2 - 12 9 - 1 -2 - -12 -9 - C : 0 0 0 sco L ; 
2155 1424 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2176 1440 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2155 1424 N M -1 2 - 21 16 - 1 -2 - -21 -16 - C : 0 0 0 sco O ; 
2194 1455 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
2215 1471 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
2194 1455 N M -1 2 - 21 16 - 1 -2 - -21 -16 - C : 0 0 0 sco O ; 
2233 1486 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2245 1496 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2233 1486 N M -1 2 - 12 10 - 1 -2 - -12 -10 - C : 0 0 0 sco L ; 
2154 1009 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
2149 1010 N M 10 8 - 3 2 - -3 0 - -43 12 - -4 2 - 3 -3 - 30 -33 - 2 -3 - 0 2 - 0 2 - -30 33 - -2 -1 - 0 -1 - 43 -12 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
2147 997 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
2278 932 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2265 940 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2278 932 N M -1 -2 - -13 8 - 1 2 - 13 -8 - C : 0 0 0 sco L ; 
2234 959 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2198 981 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2234 959 N M -1 -2 - -36 22 - 1 2 - 36 -22 - C : 0 0 0 sco O ; 
2168 1001 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2154 1009 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2168 1001 N M -1 -2 - -14 8 - 1 2 - 14 -8 - C : 0 0 0 sco L ; 
2094 1336 N M -4 7 rr : 0 0 0 sco O ; 
2091 1341 N M 15 -5 - 4 0 - -1 3 - -15 51 - -2 7 - -2 -7 - -14 -51 - -1 -4 - 3 1 - 2 2 - 14 51 - -4 1 - 0 -1 - 15 -51 - 4 1 - -2 1 - -15 5 - -1 -4 - C : 0 0 0 sco L ; 
2078 1336 N M 14 5 - 0 4 - -1 0 - -14 -5 - 1 -4 - C : 0 0 0 sco L ; 
2094 1284 N M -4 -2 rr : 0 0 0 sco O ; 
2094 1336 N M -4 2 rr : 0 0 0 sco O ; 
2094 1284 N M -4 52 rr : 0 0 0 sco O ; 
2323 1216 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2322 1217 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2322 1216 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2323 1066 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2322 1067 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2322 1066 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2323 1412 N M -2 -7 - -4 -6 - -6 -4 - -7 -2 - -7 2 - -6 4 - -4 6 - -2 7 - 2 7 - 4 6 - 6 4 - 7 2 - 7 -2 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2322 1413 N M -2 -7 - -4 -6 - 1 0 - -6 -4 - -7 -2 - 1 0 - -7 2 - -6 4 - -4 6 - -2 7 - 0 -1 - 2 7 - 4 6 - 0 -1 - 6 4 - 7 2 - -1 0 - 7 -2 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -7 2 - -1 0 - -7 -2 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 1 0 - 7 2 - 6 4 - 0 1 - 4 6 - 2 7 - -2 1 - C : 0 0 0 sco L ; 
2322 1412 N M 0 1 - 2 -1 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2113 1292 N M -1 -7 - -4 -5 - -6 -4 - -8 -1 - -7 1 - -6 4 - -4 5 - -1 7 - 1 6 - 4 6 - 6 3 - 7 2 - 8 -2 - 6 -3 - 4 -6 - 1 -6 - C : 0 0 0 sco O ; 
2112 1292 N M -1 -7 - 0 1 - -4 -5 - 1 0 - -6 -4 - -8 -1 - -7 1 - 1 0 - -6 4 - -4 5 - 0 -1 - -1 7 - 1 6 - 4 6 - 0 -1 - 6 3 - 7 2 - -1 0 - 8 -2 - 6 -3 - -1 1 - 4 -6 - 1 -6 - 2 0 - -1 6 - 0 1 - -4 6 - -6 3 - -1 0 - -8 2 - -7 -2 - -6 -3 - -1 0 - -4 -6 - 0 -1 - -1 -6 - 1 -7 - 4 -5 - 1 -1 - 6 -4 - 7 -1 - 8 1 - 1 0 - 6 4 - 0 1 - 4 5 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2112 1292 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1986 1115 N M -2 -2 - -4 3 - 2 2 - 4 -3 - C : 0 0 0 sco L ; 
1981 1116 N M 10 8 - 3 2 - -3 0 - -43 13 - -4 2 - 3 -3 - 30 -34 - 2 -3 - 0 2 - 0 2 - -30 34 - -2 -1 - 0 -1 - 43 -13 - 1 2 - -1 0 - -10 -8 - 1 -2 - C : 0 0 0 sco L ; 
1979 1103 N M 3 13 - -2 2 - 0 -1 - -3 -13 - 2 -1 - C : 0 0 0 sco L ; 
2075 1057 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2062 1066 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2075 1057 N M -1 -2 - -13 9 - 1 2 - 13 -9 - C : 0 0 0 sco L ; 
2042 1079 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco O ; 
2019 1093 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco O ; 
2042 1079 N M -1 -2 - -23 14 - 1 2 - 23 -14 - C : 0 0 0 sco O ; 
2000 1106 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1986 1115 N M -1 0 - -1 -2 - 1 0 - 1 2 - C : 0 0 0 sco L ; 
2000 1106 N M -1 -2 - -14 9 - 1 2 - 14 -9 - C : 0 0 0 sco L ; 
2033 1347 N M -2 2 - 4 3 - 2 -2 - -4 -3 - C : 0 0 0 sco L ; 
2035 1351 N M 4 -12 - 1 -3 - 1 3 - 27 36 - 2 2 - -3 -1 - -42 -16 - -3 -1 - 2 -1 - 2 0 - 42 16 - -1 2 - -1 0 - -27 -36 - 2 -1 - 0 1 - -4 12 - -2 -1 - C : 0 0 0 sco L ; 
2024 1358 N M 11 -8 - 2 2 - -1 0 - -11 8 - -1 -2 - C : 0 0 0 sco L ; 
1933 1272 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
1946 1281 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
1933 1272 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
1969 1299 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco O ; 
1997 1320 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco O ; 
1969 1299 N M -1 2 - 28 21 - 1 -2 - -28 -21 - C : 0 0 0 sco O ; 
2020 1338 N M -1 0 - -1 2 - 1 0 - 1 -2 - C : 0 0 0 sco L ; 
2033 1347 N M 1 0 - -1 2 - -1 0 - 1 -2 - C : 0 0 0 sco L ; 
2020 1338 N M -1 2 - 13 9 - 1 -2 - -13 -9 - C : 0 0 0 sco L ; 
1939 1204 N M -4 7 rr : 0 0 0 sco O ; 
1936 1209 N M 12 -5 - 4 -1 - -1 4 - -12 43 - -2 7 - -2 -7 - -13 -43 - -1 -4 - 3 1 - 2 2 - 13 43 - -4 1 - 0 -1 - 12 -43 - 4 1 - -1 1 - -12 5 - -2 -4 - C : 0 0 0 sco L ; 
1924 1204 N M 13 5 - 1 4 - -1 0 - -1 0 - -13 -5 - 1 -4 - C : 0 0 0 sco L ; 
1937 1144 N M 0 50 - 0 10 - 0 -60 - C : 0.502 0.502 0.502 sco O ; 
1939 1144 N M -4 -2 rr : 0 0 0 sco O ; 
1939 1144 N M -4 0 - 0 50 - 4 0 - 0 -50 - C : 0 0 0 sco L ; 
1939 1204 N M -4 2 rr : 0 0 0 sco O ; 
1939 1194 N M -4 10 rr : 0 0 0 sco O ; 
2112 1192 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2111 1192 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2111 1192 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
1953 1258 N M -1 -7 - -4 -6 - -6 -4 - -7 -1 - -8 1 - -6 4 - -4 6 - -1 7 - 1 8 - 4 6 - 6 4 - 8 1 - 7 -1 - 6 -4 - 4 -6 - 1 -8 - C : 0 0 0 sco O ; 
1952 1258 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -8 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 6 - 0 -1 - 6 4 - -1 0 - 8 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 6 - -6 4 - -1 0 - -7 1 - -8 -1 - -6 -4 - -1 0 - -4 -6 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 8 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
1952 1258 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
1953 1154 N M -1 -9 - -4 -7 - -6 -5 - -7 -2 - -8 2 - -6 5 - -4 7 - -1 9 - 1 9 - 4 7 - 6 5 - 8 2 - 7 -2 - 6 -5 - 4 -7 - 1 -9 - C : 0 0 0 sco O ; 
1952 1154 N M -1 -9 - 0 1 - -4 -7 - 1 0 - -6 -5 - -7 -2 - -8 2 - 1 0 - -6 5 - -4 7 - 0 -1 - -1 9 - 1 9 - 4 7 - 0 -1 - 6 5 - -1 0 - 8 2 - 7 -2 - 6 -5 - -1 1 - 4 -7 - 1 -9 - 2 0 - -1 9 - 0 1 - -4 7 - -6 5 - -7 2 - -1 0 - -8 -2 - -6 -5 - -1 0 - -4 -7 - 0 -1 - -1 -9 - 1 -9 - 4 -7 - 1 -1 - 6 -5 - 8 -2 - 1 0 - 7 2 - 6 5 - 0 1 - 4 7 - 1 9 - -2 0 - C : 0 0 0 sco L ; 
1952 1154 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2112 1042 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2111 1042 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2111 1042 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2323 925 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2322 925 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2322 925 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2323 1525 N M -2 -8 - -4 -6 - -6 -4 - -7 -1 - -7 1 - -6 4 - -4 6 - -2 8 - 2 7 - 4 6 - 6 4 - 7 1 - 7 -1 - 6 -4 - 4 -6 - 2 -7 - C : 0 0 0 sco O ; 
2322 1525 N M -2 -8 - 0 1 - -4 -6 - 1 0 - -6 -4 - -7 -1 - -7 1 - 1 0 - -6 4 - -4 6 - 0 -1 - -2 8 - 2 7 - 4 6 - 0 -1 - 6 4 - -1 0 - 7 1 - 7 -1 - 6 -4 - -1 1 - 4 -6 - 2 -7 - 2 1 - -2 7 - -4 6 - -6 4 - -1 0 - -7 1 - -7 -1 - -6 -4 - -1 0 - -4 -6 - -2 -7 - 0 -1 - 2 -8 - 4 -6 - 1 -1 - 6 -4 - 7 -1 - 7 1 - 1 0 - 6 4 - 0 1 - 4 6 - 2 8 - -2 0 - C : 0 0 0 sco L ; 
2322 1525 N M 2 0 - 0 1 - -2 -1 - C : 0 0 0 sco L ; 
2113 1398 N M -1 -7 - -4 -6 - -6 -4 - -8 -2 - -7 2 - -6 4 - -4 6 - -1 7 - 1 8 - 4 5 - 6 5 - 7 1 - 8 -1 - 6 -5 - 4 -5 - 1 -8 - C : 0 0 0 sco O ; 
2112 1398 N M -1 -7 - 0 1 - -4 -6 - 1 0 - -6 -4 - -8 -2 - 1 0 - -7 2 - -6 4 - -4 6 - 0 -1 - -1 7 - 1 8 - 4 5 - 0 -1 - 6 5 - -1 0 - 7 1 - 8 -1 - 6 -5 - -1 1 - 4 -5 - 1 -8 - 2 0 - -1 8 - 0 1 - -4 5 - -6 5 - -1 0 - -8 1 - -7 -1 - -6 -5 - -1 0 - -4 -5 - 0 -1 - -1 -8 - 1 -7 - 4 -6 - 1 -1 - 6 -4 - 7 -2 - 8 2 - 1 0 - 6 4 - 0 1 - 4 6 - 1 7 - -2 0 - C : 0 0 0 sco L ; 
2112 1398 N M 2 0 - -2 0 - C : 0 0 0 sco L ; 
2096 1239 N M -2 6 rr : 0 0 0 sco O ; 
2094 1244 N M 12 -4 - 3 -2 - -1 4 - -14 43 - -1 4 - -1 -4 - -10 -44 - -1 -3 - 2 1 - 1 1 - 10 44 - -2 1 - 0 -1 - 14 -43 - 2 1 - -1 0 - -12 4 - -1 -2 - C : 0 0 0 sco L ; 
2083 1239 N M 12 5 - 0 2 - -1 0 - -12 -5 - 1 -2 - C : 0 0 0 sco L ; 
2099 1178 N M -2 -1 rr : 0 0 0 sco O ; 
2096 1239 N M -2 1 rr : 0 0 0 sco O ; 
2099 1178 N M -2 0 - -3 61 - 2 0 - 3 -61 - C : 0 0 0 sco L ; 
298 1033 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
298 1033 N M -1 -2 - -164 89 - -1 1 - 2 1 - 164 -89 - C : 0 0 0 sco L ; 
134 1227 N M -2 1 rr : 0 0 0 sco O ; 
134 1121 N M -2 106 rr : 0 0 0 sco O ; 
236 958 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
236 958 N M -1 -2 - -204 121 - -1 1 - 2 1 - 204 -121 - C : 0 0 0 sco L ; 
32 1243 N M -2 1 rr : 0 0 0 sco O ; 
32 1078 N M -2 165 rr : 0 0 0 sco O ; 
238 960 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0 0 0 sco L ; 
238 960 N M 10 -6 - 10 -4 - 17 -2 - 1 0 - 16 6 - 6 5 - 0 1 - 5 6 - 8 15 - 3 18 - -2 0 - -3 -18 - 0 1 - -8 -15 - -5 -6 - 1 0 - -6 -5 - -16 -6 - -17 2 - 1 0 - -10 4 - -10 6 - -1 -2 - C : 0 0 0 sco L ; 
314 999 N M -3 19 - 0 1 - -2 -1 - 3 -19 - 2 0 - C : 0 0 0 sco L ; 
302 1036 N M 0 1 - -2 -1 - 0 -1 - 2 1 - C : 0 0 0 sco L ; 
311 1019 N M -2 -1 - -9 17 - 2 1 - 9 -17 - C : 0 0 0 sco L ; 
801 1307 N M 0 -1 - -2 1 - 0 1 - 2 -1 - C : 0 0 0 sco L ; 
801 1307 N M 4 8 - 5 7 - 0 -1 - 7 6 - 8 5 - 19 6 - -1 0 - 20 0 - 18 -4 - 7 -4 - 6 -5 - -1 1 - 5 -7 - 2 -8 - 2 0 - -2 8 - 0 1 - -5 7 - -6 5 - -7 4 - -1 0 - -18 4 - -20 0 - -19 -6 - -8 -5 - -7 -6 - -1 0 - -5 -7 - -4 -8 - 2 -1 - C : 0 0 0 sco L ; 
900 1311 N M 0 -9 - 0 1 - 2 -1 - 0 9 - -2 0 - C : 0 0 0 sco L ; 
897 1292 N M 0 -1 - 2 -1 - 0 1 - -2 1 - C : 0 0 0 sco L ; 
900 1303 N M 2 -1 - -3 -11 - -2 1 - 3 11 - C : 0 0 0 sco L ; 
1067 1101 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1067 1101 N M -1 -2 - -165 90 - -1 1 - 2 1 - 165 -90 - C : 0 0 0 sco L ; 
902 1295 N M -2 1 rr : 0 0 0 sco O ; 
902 1190 N M -2 105 rr : 0 0 0 sco O ; 
1004 1027 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1004 1027 N M -1 -2 - -203 121 - -1 1 - 2 1 - 203 -121 - C : 0 0 0 sco L ; 
801 1311 N M -2 1 rr : 0 0 0 sco O ; 
801 1147 N M -2 164 rr : 0 0 0 sco O ; 
1007 1028 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0 0 0 sco L ; 
1007 1028 N M 10 -6 - 9 -4 - 18 -1 - 1 0 - 15 5 - 6 5 - 0 1 - 6 6 - 8 16 - 3 17 - -2 0 - -3 -17 - 0 1 - -8 -16 - 1 0 - -6 -6 - -6 -5 - -15 -5 - -18 1 - 1 0 - -9 4 - -10 6 - -1 -2 - C : 0 0 0 sco L ; 
1083 1067 N M -3 19 - 0 1 - -2 -1 - 3 -19 - 2 0 - C : 0 0 0 sco L ; 
1070 1105 N M 0 1 - -2 -1 - 0 -1 - 2 1 - C : 0 0 0 sco L ; 
1080 1087 N M -2 -1 - -10 18 - 2 1 - 10 -18 - C : 0 0 0 sco L ; 
1192 1255 N M 0 -1 - -2 1 - 0 1 - 2 -1 - C : 0 0 0 sco L ; 
1192 1255 N M 3 8 - 6 7 - 0 -1 - 7 6 - 8 5 - 19 6 - -1 0 - 20 0 - 18 -4 - 7 -4 - 6 -5 - -1 1 - 4 -7 - 3 -8 - 2 0 - 0 1 - -3 8 - -4 7 - -6 5 - -7 4 - -1 0 - -18 4 - -20 0 - -19 -6 - -8 -5 - -7 -6 - -1 0 - -6 -7 - -3 -8 - 2 -1 - C : 0 0 0 sco L ; 
1291 1259 N M -1 -9 - 0 1 - 2 -1 - 1 9 - -2 0 - C : 0 0 0 sco L ; 
1287 1240 N M 0 -1 - 2 -1 - 0 1 - -2 1 - C : 0 0 0 sco L ; 
1290 1251 N M 2 -1 - -3 -11 - -2 1 - 3 11 - C : 0 0 0 sco L ; 
1457 1049 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1457 1049 N M -1 -2 - -164 90 - -1 1 - 2 1 - 164 -90 - C : 0 0 0 sco L ; 
1293 1243 N M -2 1 rr : 0 0 0 sco O ; 
1293 1138 N M -2 105 rr : 0 0 0 sco O ; 
1395 975 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1395 975 N M -1 -2 - -203 121 - -1 1 - 2 1 - 203 -121 - C : 0 0 0 sco L ; 
1192 1259 N M -2 1 rr : 0 0 0 sco O ; 
1192 1095 N M -2 164 rr : 0 0 0 sco O ; 
1398 977 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0 0 0 sco L ; 
1398 977 N M 10 -7 - 9 -4 - 18 -1 - 1 0 - 15 5 - 6 5 - 0 1 - 6 7 - 8 15 - 2 17 - -2 0 - -2 -17 - 0 1 - -8 -15 - -6 -7 - 1 0 - -6 -5 - -15 -5 - -18 1 - 1 0 - -9 4 - -10 7 - -1 -2 - C : 0 0 0 sco L ; 
1473 1015 N M -2 19 - 0 1 - -2 -1 - 2 -19 - 2 0 - C : 0 0 0 sco L ; 
1461 1053 N M 0 1 - -2 -1 - 0 -1 - 2 1 - C : 0 0 0 sco L ; 
1471 1035 N M -2 -1 - -10 18 - 2 1 - 10 -18 - C : 0 0 0 sco L ; 
1487 1279 N M 0 -1 - -2 1 - 0 1 - 2 -1 - C : 0 0 0 sco L ; 
1487 1279 N M 3 8 - 6 7 - 0 -1 - 7 6 - 8 5 - 19 5 - -1 0 - 20 1 - 17 -4 - 8 -4 - 6 -5 - -1 1 - 4 -7 - 2 -8 - 2 0 - -2 8 - 0 1 - -4 7 - -6 5 - -8 4 - -1 0 - -17 4 - -20 -1 - -19 -5 - -8 -5 - -7 -6 - -1 0 - -6 -7 - -3 -8 - 2 -1 - C : 0 0 0 sco L ; 
1585 1283 N M 0 -9 - 0 1 - 2 -1 - 0 9 - -2 0 - C : 0 0 0 sco L ; 
1582 1264 N M 0 -1 - 2 -1 - 0 1 - -2 1 - C : 0 0 0 sco L ; 
1585 1275 N M 2 -1 - -3 -11 - -2 1 - 3 11 - C : 0 0 0 sco L ; 
1752 1073 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1752 1073 N M -1 -2 - -164 90 - -1 1 - 2 1 - 164 -90 - C : 0 0 0 sco L ; 
1588 1267 N M -2 1 rr : 0 0 0 sco O ; 
1588 1162 N M -2 105 rr : 0 0 0 sco O ; 
1690 998 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
1690 998 N M -1 -2 - -203 122 - -1 1 - 2 1 - 203 -122 - C : 0 0 0 sco L ; 
1487 1283 N M -2 1 rr : 0 0 0 sco O ; 
1487 1119 N M -2 164 rr : 0 0 0 sco O ; 
1693 1000 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0 0 0 sco L ; 
1693 1000 N M 9 -6 - 10 -4 - 18 -1 - 1 0 - 15 5 - 6 5 - 0 1 - 6 6 - 7 16 - 3 17 - -2 0 - -3 -17 - 0 1 - -7 -16 - 1 0 - -6 -6 - -6 -5 - -15 -5 - -18 1 - 1 0 - -10 4 - -9 6 - -1 -2 - C : 0 0 0 sco L ; 
1768 1039 N M -3 19 - 0 1 - -2 -1 - 3 -19 - 2 0 - C : 0 0 0 sco L ; 
1756 1077 N M 0 1 - -2 -1 - 0 -1 - 2 1 - C : 0 0 0 sco L ; 
1765 1059 N M -2 -1 - -9 18 - 2 1 - 9 -18 - C : 0 0 0 sco L ; 
1858 1287 N M 0 -1 - -2 1 - 0 1 - 2 -1 - C : 0 0 0 sco L ; 
1858 1287 N M 4 8 - 7 7 - 0 -1 - 8 6 - 10 5 - -1 0 - 22 5 - 24 1 - 21 -4 - 9 -4 - 7 -6 - -1 1 - 5 -6 - 3 -8 - 2 0 - 0 1 - -3 8 - -5 6 - -7 6 - -9 4 - -1 0 - -21 4 - -24 -1 - -22 -5 - -10 -5 - -8 -6 - -7 -7 - -1 0 - -4 -8 - 2 -1 - C : 0 0 0 sco L ; 
1976 1291 N M 0 -9 - 0 1 - 2 -1 - 0 9 - -2 0 - C : 0 0 0 sco L ; 
1972 1272 N M 0 -1 - 2 -1 - 0 1 - -2 1 - C : 0 0 0 sco L ; 
1976 1283 N M 2 -1 - -4 -11 - -2 1 - 4 11 - C : 0 0 0 sco L ; 
2294 879 N M -1 0 - 1 2 - 1 0 - -1 -2 - C : 0 0 0 sco L ; 
2294 879 N M 10 -6 - 10 -4 - 17 -2 - 1 0 - 15 6 - 7 5 - 0 1 - 5 6 - 8 15 - 3 18 - -2 0 - -3 -18 - 0 1 - -8 -15 - -5 -6 - 1 0 - -7 -5 - -15 -6 - -17 2 - 1 0 - -10 4 - -10 6 - -1 -2 - C : 0 0 0 sco L ; 
2370 918 N M -3 19 - 0 1 - -2 -1 - 3 -19 - 2 0 - C : 0 0 0 sco L ; 
2358 956 N M 0 1 - -2 -1 - 0 -1 - 2 1 - C : 0 0 0 sco L ; 
2367 938 N M -2 -1 - -9 18 - 2 1 - 9 -18 - C : 0 0 0 sco L ; 
2293 882 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2293 882 N M -1 -2 - -437 258 - -1 1 - 2 1 - 437 -258 - C : 0 0 0 sco L ; 
1856 1291 N M -2 1 rr : 0 0 0 sco O ; 
1856 1139 N M -2 152 rr : 0 0 0 sco O ; 
2356 956 N M 1 0 - -1 -2 - -1 0 - 1 2 - C : 0 0 0 sco L ; 
2356 956 N M -1 -2 - -375 215 - -1 1 - 2 1 - 375 -215 - C : 0 0 0 sco L ; 
1981 1283 N M -2 1 rr : 0 0 0 sco O ; 
1981 1170 N M -2 113 rr : 0 0 0 sco O ; 
LH 
pagesave restore

(%%[ Page: 1 ]%%)  =

Pscript_Win_Driver_Incr dup /terminate get exec
savelevel0 restore 
(%%[ LastPage ]%%)  =
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 888 1677 a FN(\(a\))2020 b(\(b\))0 1988
y(Figure)34 b(3:)48 b Fu(Possible)33 b(mappings)g(of)f(threads)h(of)f
(the)g(dag)g(in)f(Figure)i(2)e(onto)h(processors)j Fr(P)3060
2002 y FH(0)3100 1988 y Fr(;)15 b(:)g(:)g(:)h(;)f(P)3359
2002 y FH(3)3430 1988 y Fu(by)32 b(\(a\))g(w)o(ork-)0
2101 y(stealing)c(schedulers,)h(and)e(\(b\))f(depth-\002rst)i
(schedulers.)39 b(If,)26 b(say)-6 b(,)27 b(the)g Fr(i)2310
2068 y Fq(th)2405 2101 y Fu(thread)h(\(going)g(from)d(left)i(to)f
(right\))h(accesses)0 2214 y(the)j Fr(i)171 2181 y Fq(th)271
2214 y Fu(block)h(or)f(element)h(of)f(an)g(array)-6 b(,)33
b(then)e(scheduling)i(consecuti)n(v)o(e)f(threads)g(on)e(the)h(same)f
(processor)i(pro)o(vides)0 2326 y(better)25 b(cache)f(locality)i(and)e
(lo)n(wer)f(scheduling)k(o)o(v)o(erheads.)0 2612 y FJ(3)143
b(The)35 b Fp(DFDeques)45 b FJ(Scheduling)33 b(Algorithm)0
2835 y FN(W)-8 b(e)35 b(\002rst)g(describe)g(the)g(programming)e(model)
h(for)h(the)g(multithreaded)e(computations)g(that)h(are)i(e)o(x)o
(ecuted)0 2956 y(by)d(the)h FL(DFDeques)41 b FN(scheduling)33
b(algorithm.)55 b(W)-8 b(e)34 b(then)f(list)g(the)g(data)h(structures)f
(used)h(by)f(the)g(scheduler)l(,)0 3076 y(follo)n(wed)24
b(by)g(a)h(description)f(of)h(the)f FL(DFDeques)33 b
FN(scheduling)24 b(algorithm.)0 3371 y Fs(3.1)119 b(Pr)n(ogramming)29
b(model)0 3559 y FN(As)g(with)g(depth-\002rst)h(schedulers,)g(our)f
(scheduling)g(algorithm)f(applies)h(to)g(pure,)i FE(nested-parallel)f
FN(compu-)0 3679 y(tations,)e(which)h(can)g(be)g(modeled)f(by)g
(series-parallel)h(dags)g([10)o(].)43 b(Our)29 b(model)f(assumes)g
(binary)h(forks)f(and)0 3800 y(joins;)36 b(the)d(e)o(xample)g(dag)g(in)
g(Figure)h(2)f(represents)g(such)g(a)h(nested-parallel)f(computation.)
55 b(Such)33 b(nested-)0 3920 y(parallel)22 b(computations)e(are)j
(equi)n(v)n(alent)e(to)h(the)g(subset)f(of)i(fully)e(strict)h
(computations)e(that)i(are)h(supported)e(by)0 4040 y(Cilk')-5
b(s)20 b(space-ef)n(\002cient)i(w)o(ork-stealing)e(scheduler)i([12)o(,)
g(26)o(].)30 b(Nested)21 b(parallelism)f(can)i(be)f(used)g(to)g(e)o
(xpress)g(a)0 4161 y(lar)n(ge)g(v)n(ariety)f(of)h(parallel)f(programs,)
h(including)e(recursi)n(v)o(e,)i(di)n(vide-and-conquer)e(programs)h
(and)h(programs)0 4281 y(with)j(nested-parallel)g(loops.)146
4402 y(Although)i(we)i(describe)f(and)h(analyze)g(our)f(algorithm)f
(for)i(nested-parallel)f(computations,)f(in)h(practice)0
4522 y(it)d(can)h(be)g(e)o(xtended)f(to)g(e)o(x)o(ecute)g(programs)g
(with)g(other)g(styles)g(of)h(parallelism.)k(F)o(or)c(e)o(xample,)e
(the)i(Pthreads)0 4642 y(scheduler)31 b(described)h(in)f(Section)h(5)f
(supports)f(computations)g(with)h(arbitrary)g(synchronizations,)h(such)
f(as)0 4763 y(mute)o(x)o(es)k(and)h(condition)f(v)n(ariables.)65
b(Ho)n(we)n(v)o(er)l(,)38 b(our)e(analytical)g(space)h(bound)e(does)i
(not)e(apply)h(to)g(such)0 4883 y(general)25 b(computations.)146
5003 y(A)j(thread)f(is)f FE(activ)o(e)h FN(if)g(it)g(has)g(been)g
(created)h(b)n(ut)f(has)g(not)g(yet)g(terminated.)37
b(A)27 b(parent)g(thread)g(w)o(aiting)f(to)0 5124 y(synchronize)31
b(with)g(a)h(child)f(thread)h(is)f(said)h(to)f(be)h FE(suspended)r
FN(.)51 b(W)-8 b(e)33 b(say)e(an)h(acti)n(v)o(e)f(thread)h(is)f
FE(ready)h FN(to)f(be)0 5244 y(scheduled)24 b(if)g(it)f(is)h(not)f
(suspended,)g(and)h(is)g(not)f(currently)h(being)g(e)o(x)o(ecuted)f(by)
g(a)i(processor)-5 b(.)30 b(Each)24 b(action)f(in)1925
5589 y(6)p eop
%%Page: 7 10
7 9 bop 1418 840 a @beginspecial 385 @llx 608 @lly 584
@urx 765 @ury 1008 @rhi @setspecial
%%BeginDocument: figures/dag3.epsi
% 0000000000000000000000000000000000000000000000fc00
% 0000000000000000000000000000000000000000000003ff80
% 000000000000000000000000000000000000000000000e01c0
% 000000000000000000000000000000000000000000001c0060
% 00000000000000000000000000000000000000000000300030
% 00000000000000000000000000000000000000000000301018
% 00000000000000000000000000000000000000000000603018
% 0000000000000000000000000000000000000000000040100c
% 00000000000000000000000000000000000000000000c0100c
% 00000000000000000000000000000000000000000007c01004
% 000000000000000000000000000000000000000001ffc01004
% 0000000000000000000000000000000000000000ffc0c01004
% 000000000000000000000000000000000000003ff000c01004
% 0000000000000000000000000000000000001ff80000c0100c
% 000000000000000000000000000000000007fe00000040100c
% 0000000000000000000000000000000003ff0000000060780c
% 000000000000000fc000000000000000ffc000000000600018
% 000000000000003ff80000000000007fe00000000000300030
% 00000000000000e01c00000000001ff8000000000000180070
% 00000000000001c006000000000ffc000000000000000e00e0
% 0000000000000303c300080003ff0000000000000000078780
% 000000000000030461807801ff80000000000000000001ff00
% 000000000000060c2181f07fe0000000000000000000001000
% 000000000000040020c7bff000000000000000000000001000
% 0000000000000c0020de3c0000000000000000000000001000
% 0000000000000c004058180000000000000000000000001000
% 0000000000000c00805ffc0000000000000000000000019200
% 0000000000000c0180403c000000000000000000000001fe00
% 0000000000000c030040000000000000000000000000009400
% 0000000000000c0610c000000000000000000000000000cc00
% 0000000000000407e0c000000000000000000000000000cc00
% 000000000000060000c0000000000000000000000000004800
% 0000000000000e000180000000000000000000000000004800
% 0000000000003b000300000000000000000000000000007800
% 00000000000071800700000000000000000000000000007800
% 000000000001c0e00e0000000000000000000000000001f800
% 0000000000038078780000000000000000000000000007ff00
% 00000000000e001ff0000000000000000000000000001c0380
% 00000000001c000200000000000000000000000000003800c0
% 00000000007000020000000000000000000000000001e00060
% 0000000001e00002000000000000000000000000001fe00030
% 000000000380000200000000000000000000000000fcc01c30
% 000000000e0000324000000000000000000000000fc0803018
% 000000001c00003fc0000000000000003e0006007c01806018
% 00000000700000128000000000000000ff800e07e001804008
% 00000060e0000019800000000000000381c03a7e000180f808
% 00000063800000198000000000000003006073f00001808c08
% 000000e70000000900000000000000060031c7000001808408
% 000001bc00000009000000000000000c003383000001808418
% 000003380000000f000000000000000c0fde01800000808418
% 000007380000003f0000000000000008085fff800000c04418
% 0000063c000000ffe00000000000001810c800000000c07830
% 00fc0de0000003807000000000000018008800000000600060
% 03ff9f800000070018000000000000180088000000003000e0
% 0e01fc0000000c010c000000000000180188000000001c01c0
% 1c00700000000c0306000000000000180108000000000f0f00
% 3038300000001805060000000000001801080000000003fe00
% 304c18000000100d0300000000000018031800000000002000
% 60041800000030090300000000000008031800000000002000
% 40040c0000003011010000000000000c023000000000002000
% c0080c00000030310100000000000006003000000000032400
% c01c04000000303fc10000000000000600600000000003fc00
% c006040000003001010000000000000380e000000000012800
% c0020400000030010300000000000001e38000000000019800
% c0020400000010010300000000000000ff0000000000019800
% c0040c00000018000300000000000000080000000000009000
% 40780c00000018000600000000000000080000000000009000
% 60000c0000000c000c0000000000000008000000000001f800
% 60001a00000006001c00000000000000c9000000000007ff00
% 30003300000003803800000000000000ff00000000001c0380
% 18007180000001e1e0000000000000004a00000000003800c0
% 0e00e0e00000007fc000000000000000660000000000607060
% 0787807000000004000000000000000066000000000060c830
% 01ff0038000000040000000000000000240000000000c08c30
% 0000001c000000040000000000000000240000000000808418
% 000000060000000400000000000000003c0000000001808418
% 000000030000000400000000000000003f800000000180c408
% 000000018000000400000000000000007ff000000001807c08
% 00000000e00000648000000000000001c03800000001800c08
% 000000007000007f8000000000000003800c00000001800808
% 00000000380000250000000000000006000600000001801018
% 000000001c00003300000000000000060f0300000000806018
% 0000000006000033000000000000000c198300000000c08018
% 00000000031800120000000000000008108180000000c00030
% 0000000001d800120000000000000018198180000000600060
% 0000000000fc001e00000000000000180f00800000003000e0
% 000000000076007e00000000000000180e00800000001c01c0
% 00000000007601ffc0000000000000180b00800000000f0f00
% 0000000000e30700e00000000000001811808000000003fe00
% 0000000000f18e003000000000000018108180000000001000
% 00000000003d981f1800000000000008188180000000001000
% 000000000007d8100c0000000000000c0f0180000000019200
% 000000000001f0300c0000000000000c00030000000001fe00
% 00000000000060380600000000000006000600000000009400
% 000000000000603e0600000000000003000e0000000000cc00
% 00000000000060030200000000000001c01d8000000000cc00
% 00000000000060010200000000000000f0f1e0000000004800
% 000000000000600102000000000000003fe078000000004800
% 0000000000006001020000000000000000001e000000007800
% 000000000000602206c0000000000000000003800000007800
% 000000000000207c06f0000000000000000000e00000003000
% 0000000000003000063e0000000000000000003c000001f800
% 00000000000030000c078000000000000000000f020007ff00
% 00000000000018001801e0000000000000000003c7001c0380
% 0000000000000c0038003c000000000000000000f3803800c0
% 000000000000070070000f0000000000000000003fc0600060
% 00000000000003c3c00003e000000000000000000ee0620e30
% 00000000000000ff8000007800000000000000000e70c60930
% 00000000000000000000001e00000000000000001c38821998
% 000000000000000000000007c0000000000000001ffd821098
% 000000000000000000000000f00000000000000001ff821088
% 0000000000000000000000003c00000000000000000f821088
% 0000000000000000000000000f800000000000000001821088
% 00000000000000000000000001e00000000000000001821088
% 00000000000000000000000000780000000000000001821098
% 000000000000000000000000001f0000000000000000820918
% 0000000000000000000000000003c000000000000000cf0718
% 0000000000000000000000000000f000000000000000c00030
% 00000000000000000000000000001e00000000000000600060
% 000000000000000000000000000007800000000000003000e0
% 000000000000000000000000000001f00000000000001c01c0
% 0000000000000000000000000000003c0000000000000f0f00
% 0000000000000000000000000000000f00000000000003fe00
% 00000000000000000000000000000003e00000000000002000
% 00000000000000000000000000000000780000000000002000
% 000000000000000000000000000000001e0000000000002000
% 0000000000000000000000000000000007c000000000002000
% 0000000000000000000000000000000000f000000000032400
% 00000000000000000000000000000000003c0000000003fc00
% 00000000000000000000000000000000000f80000000012800
% 000000000000000000000000000000000001e0000000019800
% 00000000000000000000000000000000000078000000019800
% 0000000000000000000000000000000000000f000000009000
% 00000000000000000000000000000000000003c00000009000
% 00000000000000000000000000000000000000f8000003f000
% 000000000000000000000000000000000000001e01000ffe00
% 00000000000000000000000000000000000000078380380700
% 0000000000000000000000000000000000000001f1c0700180
% 00000000000000000000000000000000000000003d60c000c0
% 00000000000000000000000000000000000000000f30c00060
% 00000000000000000000000000000000000000001c19820260
% 00000000000000000000000000000000000000003fef060630
% 000000000000000000000000000000000000000000ff020230
% 00000000000000000000000000000000000000000007020210
% 00000000000000000000000000000000000000000003020210
% 00000000000000000000000000000000000000000003020210
% 00000000000000000000000000000000000000000003020210
% 00000000000000000000000000000000000000000003020230
% 00000000000000000000000000000000000000000001020230
% 00000000000000000000000000000000000000000001820230
% 000000000000000000000000000000000000000000018f0f60
% 00000000000000000000000000000000000000000000c000c0
% 000000000000000000000000000000000000000000006001c0
% 00000000000000000000000000000000000000000000380380
% 000000000000000000000000000000000000000000001e1e00
% 0000000000000000000000000000000000000000000007fc00
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
573 737.53 573 736.2 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
573 736.2 575.98 737.28 573 726.91 570.02 737.28 4 Y
N
573 758 573 737.53 2 L
7 X
V
2 Z
0 X
N
518 695.54 518 694.2 2 L
0 Z
N
518 694.2 520.98 695.29 518 684.91 515.02 695.29 4 Y
N
518 716 518 695.54 2 L
7 X
V
2 Z
0 X
N
551.36 625.45 552.59 624.94 2 L
0 Z
N
552.59 624.94 552.74 628.1 561.16 621.35 550.44 622.61 4 Y
N
452 667 551.36 625.45 2 L
7 X
V
2 Z
0 X
N
572 636.61 572 635.27 2 L
0 Z
N
572 635.27 574.98 636.36 572 625.98 569.02 636.36 4 Y
N
572 657.07 572 636.61 2 L
7 X
V
2 Z
0 X
N
550.62 658.04 551.82 657.46 2 L
0 Z
N
551.82 657.46 552.15 660.61 560.18 653.4 549.55 655.25 4 Y
N
526 670 550.62 658.04 2 L
7 X
V
2 Z
0 X
N
573 672.54 573 671.2 2 L
0 Z
N
573 671.2 575.98 672.29 573 661.91 570.02 672.29 4 Y
N
573 693 573 672.54 2 L
7 X
V
2 Z
0 X
N
572 703.54 572 702.2 2 L
0 Z
N
572 702.2 574.98 703.29 572 692.91 569.02 703.29 4 Y
N
572 724 572 703.54 2 L
7 X
V
2 Z
0 X
N
537.11 717.09 535.83 716.73 2 L
0 Z
N
535.83 716.73 537.67 714.15 526.87 714.24 536.08 719.89 4 Y
N
562 724 537.11 717.09 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 10.5 10.5 520.5 676.5 G
0 X
90 450 10.5 10.5 520.5 676.5 A
0 16 Q
(8) 516 672 T
447 685.54 447 684.2 2 L
0 Z
N
447 684.2 449.98 685.29 447 674.91 444.02 685.29 4 Y
N
447 706 447 685.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 10.5 10.5 446.5 666.5 G
0 X
90 450 10.5 10.5 446.5 666.5 A
(5) 443 663 T
413.72 715.21 412.6 714.49 2 L
0 Z
N
412.6 714.49 415.11 712.57 404.76 709.49 411.91 717.58 4 Y
N
440 732 413.72 715.21 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 8.5 10.5 518.5 709.5 G
0 X
90 450 8.5 10.5 518.5 709.5 A
7 X
90 450 10.5 10.5 572.5 685.5 G
0 X
90 450 10.5 10.5 572.5 685.5 A
7 X
90 450 10.5 10.5 572.5 651.5 G
0 X
90 450 10.5 10.5 572.5 651.5 A
7 X
90 450 10.5 10.5 571.5 618.5 G
0 X
90 450 10.5 10.5 571.5 618.5 A
(11) 564 613 T
(7) 517 704 T
(9) 569 682 T
(10) 564 647 T
448 721.54 448 720.2 2 L
0 Z
N
448 720.2 450.98 721.29 448 710.91 445.02 721.29 4 Y
N
448 742 448 721.54 2 L
7 X
V
2 Z
0 X
N
470.39 739.78 469.08 739.58 2 L
0 Z
N
469.08 739.58 470.61 736.8 459.89 738.14 469.69 742.68 4 Y
N
574 756 470.39 739.78 2 L
7 X
V
2 Z
0 X
N
428.3 677.58 429.31 676.7 2 L
0 Z
N
429.31 676.7 430.45 679.66 436.32 670.59 426.54 675.17 4 Y
N
406 697 428.3 677.58 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 10.5 10.5 573.5 752.5 G
0 X
90 450 10.5 10.5 573.5 752.5 A
7 X
90 450 10.5 10.5 572.5 717.5 G
0 X
90 450 10.5 10.5 572.5 717.5 A
7 X
90 450 10.5 10.5 449.5 736.5 G
0 X
90 450 10.5 10.5 449.5 736.5 A
7 X
90 450 10.5 10.5 397.5 700.5 G
0 X
90 450 10.5 10.5 397.5 700.5 A
(1) 569 748 T
(3) 394 697 T
(2) 446 733 T
(6) 569 712 T
7 X
90 450 10.5 10.5 447.5 702.5 G
0 X
90 450 10.5 10.5 447.5 702.5 A
(4) 444 699 T
0 0 0 1 0 0 0 K
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 0 1036 a FN(Figure)28 b(4:)37 b Fu(The)26
b(serial,)i(depth-\002rst)h(e)o(x)o(ecution)f(order)g(for)e(a)h
(nested-parallel)j(computation.)41 b(The)26 b Fr(i)3281
1003 y Fq(th)3377 1036 y Fu(node)i(e)o(x)o(ecuted)0 1149
y(is)e(labelled)j Fr(i)d Fu(in)h(this)g(dag.)38 b(The)26
b(lo)n(wer)h(the)f(label)i(of)e(a)h(thread')-5 b(s)28
b(current)g(node)g(\(action\),)h(the)e(higher)h(is)e(its)h(priority)h
(in)0 1262 y Ft(DFDeques)7 b Fu(.)0 1535 y FN(a)25 b(thread)g(may)f
(allocate)h(an)g(arbitrary)g(amount)f(of)h(space)g(on)f(the)h(thread)g
(stack,)g(or)f(on)h(the)g(shared)g(heap.)146 1655 y(Ev)o(ery)d
(nested-parallel)g(computation)e(has)i(a)h(natural)f(serial)g(e)o(x)o
(ecution)e(order)l(,)j(which)f(we)g(call)g(its)g FE(depth-)0
1776 y(\002rst)i(order)p FN(.)30 b(When)25 b(a)g(child)f(thread)h(is)f
(fork)o(ed,)g(it)h(is)f(e)o(x)o(ecuted)g(before)h(its)f(parent)g(in)g
(a)h(depth-\002rst)g(e)o(x)o(ecution)0 1896 y(\(e.g.,)37
b(see)d(Figure)h(4\).)60 b(Thus,)36 b(the)e(depth-\002rst)g(order)g(is)
g(identical)g(to)g(the)g(unique)g(serial)g(e)o(x)o(ecution)f(order)0
2017 y(for)d(an)o(y)f(stack-based)g(language)h(\(such)f(as)h(C\),)g
(when)g(the)f(thread)h(forks)g(are)g(replaced)g(by)g(simple)e(function)
0 2137 y(calls.)h(Algorithm)20 b FL(DFDeques)29 b FN(prioritizes)20
b(ready)h(threads)g(according)g(to)g(their)g(serial,)h(depth-\002rst)f
(e)o(x)o(ecution)0 2257 y(order;)k(an)g(earlier)g(serial)g(e)o(x)o
(ecution)e(order)i(translates)f(to)h(a)g(higher)f(priority)-6
b(.)0 2552 y Fs(3.2)119 b(Scheduling)33 b(data)c(structur)n(es)0
2740 y FN(Although)19 b(the)g(dag)h(for)h(a)f(computation)e(is)i(re)n
(v)o(ealed)g(as)g(the)g(e)o(x)o(ecution)e(proceeds,)j(dynamically)e
(maintaining)0 2860 y(the)27 b(relati)n(v)o(e)f(thread)h(priorities)f
(for)h(nested-parallel)g(computations)e(is)h(straightforw)o(ard)h([10])
g(and)g(ine)o(xpen-)0 2981 y(si)n(v)o(e)22 b(in)h(practice)g([41].)30
b(In)24 b(algorithm)d FL(DFDeques)8 b FN(,)23 b(the)g(ready)h(threads)f
(are)h(stored)e(in)h(doubly-ended)f(queues)0 3101 y(or)35
b FE(deques)g FN([20].)60 b(Each)35 b(of)g(these)g(deques)f(supports)f
(popping)h(from)g(and)h(pushing)e(onto)h(its)g(top,)j(as)d(well)0
3222 y(as)29 b(popping)f(from)g(the)h(bottom)f(of)h(the)f(deque.)43
b(At)29 b(an)o(y)g(time)f(during)g(the)h(e)o(x)o(ecution,)f(a)h
(processor)g FE(o)n(wns)g FN(at)0 3342 y(most)d(one)h(deque,)h(and)f(e)
o(x)o(ecutes)f(threads)h(from)g(it.)37 b(A)27 b(single)f(deque)h(has)g
(at)h(most)d(one)j(o)n(wner)e(at)h(an)o(y)g(time.)0 3462
y(Ho)n(we)n(v)o(er)l(,)21 b(unlik)o(e)f(traditional)h(w)o(ork)g
(stealing,)g(the)g(number)g(of)h(deques)f(is)g(not)g(limited,)f(and)i
(may)f(e)o(xceed)g(the)0 3583 y(number)27 b(of)h(processors.)39
b(All)27 b(the)g(deques)h(are)g(arranged)g(in)g(a)g(global)f(list)f
FF(R)i FN(of)g(deques.)39 b(The)28 b(list)e(supports)0
3703 y(adding)j(of)h(a)g(ne)n(w)f(deque)h(to)g(the)f(immediate)g(right)
g(of)h(another)f(deque,)i(deletion)e(of)h(a)g(deque,)h(and)f(\002nding)
0 3824 y(the)25 b FI(m)232 3787 y Fq(th)327 3824 y FN(dequeue)g(from)g
(the)f(left)h(end)g(of)g FF(R)p FN(.)0 4119 y Fs(3.3)119
b(The)30 b Fo(DFDeques)41 b Fs(scheduling)31 b(algorithm)0
4306 y FN(The)d(processors)g(e)o(x)o(ecute)f(the)h(code)g(in)f(Figure)i
(5)f(for)g(algorithm)e FL(DFDeques)8 b FN(\()p FI(K)f
FN(\);)30 b(here)e FI(K)36 b FN(is)27 b(the)h FE(memory)0
4427 y(threshold)r FN(,)21 b(a)f(user)n(-de\002ned)h(runtime)f
(parameter)-5 b(.)29 b(Each)20 b(processor)h(treats)f(its)f(o)n(wn)h
(deque)g(as)h(a)g(re)o(gular)f(LIFO)0 4547 y(stack,)i(and)g(is)g
(assigned)f(a)h(memory)g(quota)f(of)h FI(K)30 b FN(bytes)21
b(from)h(which)f(to)h(allocate)g(heap)g(and)g(stack)g(data.)30
b(This)0 4667 y(memory)d(threshold)h FI(K)35 b FN(is)28
b(equi)n(v)n(alent)f(to)g(the)i(per)n(-thread)f(memory)g(quota)g(in)f
(depth-\002rst)h(schedulers)g([41];)0 4788 y(ho)n(we)n(v)o(er)l(,)34
b(in)f(algorithm)f FL(DFDeques)8 b FN(,)36 b(the)d(memory)g(quota)g(of)
g FI(K)41 b FN(bytes)33 b(can)h(be)g(used)f(by)g(a)h(processor)f(to)0
4908 y(e)o(x)o(ecute)24 b(multiple)f(threads)i(from)f(one)h(deque.)146
5029 y(The)30 b(e)o(x)o(ecution)e(starts)g(with)h(a)h(single)e(deque)i
(in)e(the)i(system,)f(containing)f(the)h(initial)f(\(root\))i(thread.)
44 b(A)0 5149 y(thread)29 b(e)o(x)o(ecutes)f(without)g(preemption)g(on)
h(a)g(processor)g(until)f(it)g(forks)h(a)h(child)e(thread,)i(suspends)e
(w)o(aiting)0 5269 y(for)c(a)g(child)f(to)g(terminate,)g(terminates,)g
(or)h(the)f(processor)h(runs)f(out)g(of)h(its)f(memory)g(quota.)30
b(If)24 b(a)g(terminating)1925 5589 y(7)p eop
%%Page: 8 11
8 10 bop 0 514 a Fn(while)23 b Fu(\()p Fm(9)f Fu(threads\))91
627 y Fn(if)h Fu(\()p Ft(currS)h Fu(=)h Fl(N)t(U)t(L)t(L)t
Fu(\))e Ft(currS)h Fu(:=)f(steal\(\);)582 b(#)23 b Fk(perform)i(steal)f
(if)g(no)f(curr)m(ent)i(stac)n(k)91 740 y Fn(if)e Fu(\()p
Ft(currT)h Fu(=)h Fl(N)t(U)t(L)t(L)t Fu(\))e Ft(currT)h
Fu(:=)f(pop)p 1227 740 28 4 v 34 w(from)p 1437 740 V
33 w(top\()p Ft(currS)p Fu(\);)48 b(#)23 b Fk(g)o(et)h(ne)o(w)f(thr)m
(ead)i(fr)l(om)e(top)h(of)f(curr)m(ent)i(stac)n(k)91
853 y Fu(e)o(x)o(ecute)g Ft(currT)e Fu(until)i(it)e(forks,)h(suspends,)
182 966 y(terminates,)h(or)e(memory)h(quota)h(e)o(xhausted:)182
1079 y Fn(case)f Fu(\(fork\):)273 1192 y(push)p 448 1192
V 34 w(to)p 552 1192 V 34 w(top\()p Ft(currT)p Fu(,)g
Ft(currS)p Fu(\);)684 b(#)23 b Fk(place)i(curr)m(ent)g(thr)m(ead)g(on)e
(top)h(of)g(curr)m(ent)h(stac)n(k)273 1305 y Ft(currT)e
Fu(:=)h(ne)n(wly)f(fork)o(ed)i(child)g(thread;)356 b(#)23
b Fk(be)l(gin)i(e)n(xecuting)i(ne)o(wly)c(fork)o(ed)i(c)o(hild)f(thr)m
(ead)182 1418 y Fn(case)g Fu(\(suspend\):)273 1530 y
Ft(currT)f Fu(:=)j Fl(N)t(U)t(L)t(L)s Fu(;)1076 b(#)23
b Fk(give)h(up)g(curr)m(ent)h(thr)m(ead;)g(it)e(will)h(be)f(wok)o(en)h
(later)182 1643 y Fn(case)g Fu(\(memory)g(quota)h(e)o(xhausted\):)273
1756 y(push)p 448 1756 V 34 w(to)p 552 1756 V 34 w(top\()p
Ft(currT)p Fu(,)f Ft(currS)p Fu(\);)684 b(#)23 b Fk(place)i(curr)m(ent)
g(thr)m(ead)g(on)e(top)h(of)g(curr)m(ent)h(stac)n(k)273
1869 y Ft(currT)e Fu(:=)j Fl(N)t(U)t(L)t(L)s Fu(;)1076
b(#)23 b Fk(give)h(up)g(curr)m(ent)h(thr)m(ead)273 1982
y Ft(currS)e Fu(:=)j Fl(N)t(U)t(L)t(L)s Fu(;)1081 b(#)23
b Fk(give)h(up)g(curr)m(ent)h(stac)n(k)182 2095 y Fn(case)f
Fu(\(terminate\):)273 2208 y Fn(if)f Ft(currT)h Fu(w)o(ak)o(es)g(up)f
(suspended)k(parent)e Ft(T)1660 2175 y Fj(0)364 2321
y Ft(currT)e Fu(:=)h Ft(T)759 2288 y Fj(0)782 2321 y
Fu(;)1102 b(#)23 b Fk(be)l(gin)i(e)n(xecuting)i(ne)o(wly)c(wok)o(en)h
(par)m(ent)h(thr)m(ead)273 2434 y Fn(else)f Ft(currT)f
Fu(:=)j Fl(N)t(U)t(L)t(L)t Fu(;)911 b(#)23 b Fk(give)h(up)g(curr)m(ent)
h(thr)m(ead)91 2547 y Fn(if)e Fu(\(\(is)p 294 2547 V
34 w(empty\()p Ft(currS)p Fu(\)\))j Fn(and)c Fu(\()p
Ft(currT)p Fu(=)k Fl(N)t(U)t(L)t(L)t Fu(\)\))182 2660
y Ft(currS)d Fu(:=)j Fl(N)t(U)t(L)t(L)t Fu(;)1171 b(#)23
b Fk(give)h(up)g(and)g(delete)h(curr)m(ent)g(\(empty\))f(stac)n(k)0
2772 y Fn(end)o(while)1561 b Fu(#)23 b Fk(r)m(epeat)i(until)f(end)g(of)
g(par)o(allel)h(computation)0 2998 y Fn(pr)n(ocedur)n(e)f
Fu(steal\(\):)1241 b(#)23 b Fk(r)m(eturns)i(a)e(ne)o(w)g(deque)i(with)e
(the)h(stolen)h(thr)m(ead)g(in)e(it)0 3111 y Fu(set)h(memory)f(quota)i
(to)f(K;)0 3224 y Fn(while)f Fu(\()p Fm(9)f Fu(threads\))91
3337 y Fr(m)g Fu(:=)i(random)g(number)h(in)e([)p Fi(1)15
b Fr(:)g(:)g(:)i(p)p Fu(];)91 3450 y Ft(S)22 b Fu(:=)h
Fr(m)343 3417 y Fq(th)414 3450 y Fu(deque)h(in)g Fm(R)p
Fu(;)1060 b(#)23 b Fk(pic)n(k)i(deque)f(to)g(steal)g(fr)l(om)91
3563 y Ft(T)e Fu(:=)h(pop)p 408 3563 V 35 w(from)p 619
3563 V 33 w(bot\()p Ft(S)p Fu(\);)1011 b(#)23 b Fk(attempt)i(to)e
(steal)i(a)e(thr)m(ead)91 3676 y Fn(if)g Fu(\()p Ft(T)g
Fm(6)p Fi(=)h Fl(N)t(U)t(L)t(L)t Fu(\))1296 b(#)23 b
Fk(attempt)i(succeeded)182 3789 y Fu(create)g(ne)n(w)d(deque)j
Ft(S)899 3756 y Fj(0)945 3789 y Fu(containing)i Ft(T)273
3902 y Fu(and)d(become)g(its)g(o)n(wner;)182 4015 y(place)g
Ft(S)462 3982 y Fj(0)508 4015 y Fu(to)g(immediate)g(right)h(of)e
Ft(S)f Fu(in)i Fm(R)p Fu(;)182 4127 y Fn(r)n(etur)o(n)f
Ft(S)520 4094 y Fj(0)543 4127 y Fu(;)0 4240 y Fn(end)o(while)1561
b Fu(#)23 b Fk(r)m(epeat)i(until)f(steal)h(is)e(successful)k(or)c
(computation)j(ends)0 4546 y FN(Figure)d(5:)29 b Fu(Pseudocode)24
b(for)d(the)h Ft(DFDeques)7 b Fu(\()p Fr(K)g Fu(\))22
b(scheduling)i(algorithm)f(e)o(x)o(ecuted)g(by)f(each)g(of)f(the)h
Fr(p)e Fu(processors;)25 b Fr(K)0 4659 y Fu(is)f(the)g(memory)g
(threshold.)33 b Ft(currS)24 b Fu(is)g(the)g(processor')-5
b(s)27 b(current)f(deque.)31 b Ft(currT)24 b Fu(is)g(the)g(current)i
(thread)f(being)g(e)o(x)o(ecuted;)0 4772 y(changing)36
b(its)e(v)n(alue)g(denotes)i(a)d(conte)o(xt)i(switch.)60
b(Memory)33 b(management)j(of)d(the)h(deques)h(is)f(not)g(sho)n(wn)g
(here)g(for)0 4885 y(bre)n(vity)-6 b(.)1925 5589 y FN(8)p
eop
%%Page: 9 12
9 11 bop 955 1020 a @beginspecial 44 @llx 429 @lly 485
@urx 655 @ury 1224 @rhi @setspecial
%%BeginDocument: figures/deques.epsi
% 0000000000000000000000000000000000000000000ff000000000000000000003fc000000000000000000007f8000000003fc0000000000
% 0000000000000000000000000000000000000000000638000000000000000000018e0000000000000000000031c0000000018e0000000000
% 000000000000000000000000000000000000000000060c000000000000000000018300000000000000000000306000000001830000000000
% 000000000000000000000000000000000000000000060c000000000000000000018300000000000000000000306000000001830000000000
% 000000000000000000000000000000000000000000060c000000000000000000018300000000000000000000306000000001830000000000
% 000000000000000000000000000000000000000000061800000000000000000001860000000000000000000030c000000001860000000000
% 00000000000000000000000000000000000000000007f0000000000f9f00000001fc000000000000000000003f8000000001fc0000000000
% 0000000000000000000000000000000000000000000600e0000000000000000001803800000003e7c0000000300780000001800800000000
% 000000000000000000000000000000000000000000060090000000000000000001804c0000000000000000003008c0000001801800000000
% 0f8f3ce7703c1b3e000000000000000000000000000601980000000000000000018004000000000000000000301840000001800800000000
% 18c6186f98c67dc2000000000000000000000000000601080000000000000000018004000000000000000000300040000001800800000000
% 30e3184318871842000000000000000000000000000601080000000000000000018008000000000000000000300040000001800800000000
% 30631cc319ff1870000000000000000000000000000f8108000000000000000003e01c0000000000000000007c0080000003e00800000000
% 30619c8319801838000000000000000000000000000001080000000000000000000006000000000000000000000100000000000800000000
% 3061b6831980181e000000000000000000000000000001080000000000000000000002000000000000000000000300000000000800000000
% 3061a78319c01807000000000000000000000000000001080000000000000000000002000000000000000000000600000000000800000000
% 3840e70319e31843000000000000000000000000000000900000000000000000000004000000000000000000000c20000000000800000000
% 18c0c30318fe1863000000000000000000000000000000700000000000000000000078000000000000000000000fc0000000003c00000000
% 0f8042073c7c3c7c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000018000000000180000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000007300000000007000000000000000000000000000000000f8000000000000
% 000000000000000000000000000000000000000000000000000060000000000000e000000003c0000000001c000000000000000000000000
% 0000000000000000000000000000000000000000000000000000001c0000000c002000000000000000000000000000001800e00000000000
% 0000000000000000000000000000000000000000000008000000000400000018000000000060070000000300700000003000200000000000
% 00000000000000000000000000000000000000000000080000060000000000000000000000c0010000000600100000000000000000000000
% 0000000000000000000000000000000000000000000008000004000000000000000600000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000080000000000c0000000000600000000000000000000000000000000040000000000
% 00000000000000000000000000000000000000000000ff0000000000c00000c0000600000000002000000000020000018000060000000000
% 00000000000000000000000000000000000000000000420000000000c0000180000200000600003000000000038000030000070000000000
% 0000000000000000000000000000000000000000000066000030000040000000003fc0000c00003000003000038000000000010000000000
% 000000000000000000000000000000000000000000006e0000300007f8000000001080000000001000006000008000000000010000000000
% 000000000000000000000000000000000000000000006e000000000210000000001b80000000001000000000008000000000010000000000
% 000000000000000000000000000000000000000000002c000000000370000000001b8000000001fe000000000ff0000000001fe000000000
% 000000000000000000000000000000000000000000003c000000000370000300001980000000009c0000000005a0000600000b4000000000
% 000000000000000000000000000000000000000000003c000000000370000300000b0000180000dc0000400007e0000600000cc000000000
% 000000000000000000000000000000000000000000003c000060000160000100000f0000180000dc0000c0000660000200000cc000000000
% 00000000000000000000000000000000000000000000180000000001e0000100000f0000080000cc0000c0000660000000000cc000000000
% 00000000000000000000000000000000000000000000180000000001e0000000000f00000800004800000000024000000000048000000000
% 00000000000000000000000000000000000000000000180000000001e000000000060000000000780000000003c000000000078000000000
% 00000000000000000000000000000000000000000000000000200000c000000000060000000000780000000003c000020000078000000000
% 00000000000000180000000000000000000000000000000000200000c000010000060000000000780000400003c000020000078000000000
% 00000000000000180000000000000000000000000000000000200000c0000100000200000800003000004000018000020000030000000000
% 0000000000000000000000000000000000000000000008000000000000000100000200000800003000004000018000000000030000000000
% 0000000000000400000000000000000000000000001ffffc000000000000000007ffff000800003000000000ffffe0000007ffff00000000
% 0000000000000c00000000000000000000000000001008040000000000000000040001000000000000000000808020000004020100000000
% 1e7dc1e07ce38fb8ee07c0000000000000000000001000040020000040000000040001000000001000000000808020020004020100000000
% 631986308e618c39f308f8000000000000000000001000040020000040000100040201000000001000004000800020020004000100000000
% 438d043906618c18631860000000000000c00000001000040000000000000100040201000800000000004000800020000004000100000000
% ff860ffb00618c18631860000000000000800000001008040000000000000000040001000800000000000000800020000004000100000000
% c0060c0300618c18631c60000000000003e00000001008040000000000000000040001000000000000000000800020000004000100000000
% c0070c0300618c18630cc0000000000001800000001008040000000000000000040001000000000000000000808020000004020100000000
% e00b8e0380618c18630780000000000003000000001000040020000040000000040001000000001000000000808020020004020100000000
% f1998f1bc6618c18630800000000000003000000001000040020000040000100040201000000001000004000800020020004000100000000
% 7f11c7f1fc738e98630f80000000000003000000001000040000000000000100040201000800000000004000800020000004000100000000
% 3e31e3e0f83dc73ce78fe0000000000003000000001008040000000000000000040001000800000000000000800020000004000100000000
% 0000000000000000000810000000000006000000001008040000000000000000040001000000000000000000800020000004000100000000
% 000000000000000000101000000000000603c000001008040000000000000000040001000000000000000000808020000004020100000000
% 000000000000000000303000000000000604c000001000040020000040000000040001000000001000000000808020020004020100000000
% 000000000000000000386000000000000608c000001000040020000040000100040201000000001000004000800020020004000100000000
% 0000000000000000000f80000000000000188000001000040000000000000100040201000800000000004000800020000004000100000000
% 0000000000000000000000000000000000118000001008040000000000000000040001000800000000000000800020000004000100000000
% 000000c000000000700000000000000000118000001ffffc000000000000000007ffff000000000000000000ffffe0000007ffff00000000
% 000003c000000000700000000000000000134000000008000000000000000000000000000000000000000000008000000000020000000000
% 000000c0000000003000000000000000001d8000000000000020000040000000000000000000001000000000008000020000020000000000
% 000020c000000000300000000000000000000000000000000020000040000100000200000000001000004000000000020000000000000000
% 000060c000000000300000000000000000000000000000000000000000000100000200000800000000004000000000000000000000000000
% 00007cdc1b1e0783f0f800000000000000000000000008000000000000000000000000000800000000000000000000000000000000000000
% 000060e67de318c6310800000000000000000000000008000000000000000000000000000000000000000000008000000000000000000000
% 000060c6184398c4310800000000000000000000000000000020000040000000000000000000001000000000008000020000020000000000
% 000060c618ff80cc31c000000000000000000000000000000020000040000100000200000000001000004000008000020000020000000000
% 000060c618c007cc30e0000000000000000000000000000000200000400001000002000008003ffff8004000000000020000000000000000
% 000060c618c00ccc307800000000000000000000000000000000000000000100000200000800200008004000000000000000000000000000
% 000060c618e018cc301c00000000000000000000000008000000000000000000000000000800200008000000000000000000000000000000
% 000060c618f198ce310c00000000000000000000000008000000000000000000000000000000200008000000008000000000000000000000
% 000074c6187f19c6798c00000000000000000000000000000020000040000000000000000000201008000000008000020000020000000000
% 000039cf3c3e0ee3f9f000000000000000000000000000000020000040000100000200000000201008004000008000020000020000000000
% 0000000000000000000000000000000000000000000000000020000040000100000200000800201008004000000000020000000000000000
% 0000000000000000000000000000000000000000000000000000000000000100000200000800200008004000000000000000000000000000
% 0000000000000000000000000000000000000000000008000000000000000000000000000800200008000000000000000000000000000000
% 0000000000000000000000000000000000000000000008000000000000000000000000000000200008000000008000000000000000000000
% 0000000000000000000000000000000000000000000000000020000040000000000000000000201008000000008000020000020000000000
% 0000000000000000000000000000000000000000000000000020000040000100000200000000201008004000008000020000020000000000
% 0000000000000000000000000000000000000000000000000020000040000100000200000800201008004000000000020000000000000000
% 0000000000000000000000000000000000000000000000000000000000000100000200000800200008004000000000000000000000000000
% 0000000000000000000000000000000000000000000008000000000000000000000000000800200008000000000000000000000000000000
% 0000000000000000000000000000000000000000000008000000000000000000000000000000200008000000008000000000000000000000
% 0000000000000000000000000000000000000000000000000020000040000000000000000000201008000000008000020000020000000000
% 0000000000000000000000000000000000000000000000000020000040000100000200000000201008004000008000020000020000000000
% 0000000000000000000000000000000000000000001ffffc00200000400001000002000008007ffff800400000000002000ffffe00000000
% 0000000000000000000000000000000000000000001000040000000000000100000200000800200008004000000000000008000200000000
% 0000000000000000000000000000000000000000001008040000000000000000000000000800200008000000000000000008000200000000
% 0000000000000000000000000000000000000000001008040000000000000000000000000000200008000000008000000008000200000000
% 0000000000000000000000000000000000000000001000040020000040000000000000000000201008000000008000020008020200000000
% 0000000000000000000000000000000000000000001000040020000040000100000200000000201008004000000000020008020200000000
% 0000000000000000000000000000000080000000001000040000000000000100000200000800200008004000000000000008000200000000
% 0000000000000000000000000000000180000000001000040000000000000000000000000800200008000000000000000008000200000000
% 00000000000000000000000000000001f0f83f00001008040000000000000000000000000000200008000000000000000008000200000000
% 00000000000000000000000000000001818cf980001008040000000000000000000000000000200008000000008000000008000200000000
% 00000000000000000000000000000001830e30c0001000040020000040000000000000000000201008000000008000020008020200000000
% 00000000000000000000000000000001830630c0001000040020000040000100000200000000201008004000000000020008020200000000
% 00000000000000000000000000000001830630c0001000040000000000000100000200000800200008004000000000000008000200000000
% 00000000000000000000000000000001830630c0001000040000000000000000000000000800200008000000000000000008000200000000
% 00000000000000000000000000000001830630c0001008040000000000000000000000000000200008000000000000000008000200000000
% 0000000000000000000000000000000183843080001008040000000000000000000000000000200008000000008000000008000200000000
% 00000000000000000000000000000001d18c3180001000040020000040000000000000000000201008000000008000020008020200000000
% 00000000000000000000000000000000e0f83f00001000040020000040000100000200000000201008004000000000020008020200000000
% 0000000000000000000000000000000000003000003ffffc00000000000001000002000008007ffff8004001ffffc000001ffffe00000000
% 0000000000000000000000000000000000003000001000040000000000000000000000000800200008000001000040000008000200000000
% 0000000000000000000000000000000000003000001008040000000000000000000000000000200008000001000040000008000200000000
% 0000000000000000000000000000000000003000001008040000000000000000000000000000200008000001008040000008020200000000
% 000000000000000000000000000000000000fc00001000040020000040000000000000000000201008000001008040020008020200000000
% 0000000000000000000000000000000000000000001000040020000040000100000200000000201008004001000040020008020200000000
% 0000000000000000000000000000000000000000001000040000000000000100000200000800200008004001000040000008000200000000
% 0000000000000000000000000000000000000000001000040000000000000000000000000800200008000001000040000008000200000000
% 0000000000000000000000000000000000000000001008040000000000000000000000000000200008000001008040000008000200000000
% 0380000000000000000000000000000000000000001008040020000040000000000000000000201008000001008040020008020200000000
% 0380000000000000000000000000000000000000001000040020000040000100000200000000201008004001008040020008020200000000
% 0180000000000000000000000000000000000000001000040020000040000100000200000800201008004001000040020008020200000000
% 0180000000000000000000000000000000000000001000040000000000000100000200000800200008004001000040000008000200000000
% 0180000000000000000000000000000000000000001000040000000000000000000000000800200008000001000040000008000200000000
% 1f83c0fce383c1f0000000000000000000000000001008040000000000000000000000000000200008000001008040000008000200000000
% 318c618c618c6210000000000000000000000000001008040020000040000000000000000000201008000001008040020008020200000000
% 2188730c61887210000000000000000000000000001000040020000040000100000200000000201008004001008040020008020200000000
% 619ff60c619ff380000000000000000000000000001000040020000040000100000200000800201008004001000040020008020200000000
% 6198060c619801c0000000000000000000000000003ffffc000000ffffe001000002000008007ffff8004003ffffc000001ffffe00000000
% 6198060c619800f0000000000000000000000000001000040000008000200000000000000800200008000001000040000008000200000000
% 619c060c619c0038000000000000000000000000001008040000008000200000000000000000200008000001008040000008000200000000
% 719e370c619e3218000000000000000000000000001008040020008040200000000000000000201008000001008040020008020200000000
% 33cfe39c738fe318000000000000000000000000001000040020008040200100000200000000201008004001008040020008020200000000
% 1fc7c1fc3dc7c3e0000000000000000000000000001000040020008040200100000200000800201008004001000040020008020200000000
% 0000000c00000000000000000000000000000000001000040000008000200100000200000800200008004001000040000008000200000000
% 0000000c00000000000000000000000000000000001000040000008000200000000000000800200008000001000040000008000200000000
% 0000000c00000000000000000000000000000000001008040000008000200000000000000000200008000001008040000008000200000000
% 0000000c00000000000000000000000000000000001008040020008040200000000000000000201008000001008040020008020200000000
% 0000001e00000000000000000000000000000000001000040020008040200100000200000000201008004001008040020008020200000000
% 0000000000000000000000000000000000000000001000040020008040200100000200000800201008004001000040020008020200000000
% 0000000000000000000000000000000000000000001000040000008000200100000200000800200008004001000040000008000200000000
% 0000000000000000000000000000000000000000001008040000008000200000000000000800200008000001000040000008000200000000
% 0000000000000000000000000000000000000000001008040000008000200000000000000000200008000001008040000008000200000000
% 0000000000000000000000000000000000000000001008040020008040200000000000000000201008000001008040020008020200000000
% 0000000000000000000000000000000000000000001000040020008040200100000200000000201008004001000040020008020200000000
% 0000000000000000000000000000000000000000001000040000008000200100000200000800200008004001000040000008020200000000
% 0000000000000000000000000600000000000000003ffffc000001ffffe0000007ffff0008007ffff8000003ffffc000001ffffe00000000
% 0000000000000000000000000e00000000000000001008040000008000200000040001000000200008000001000040000008000200000000
% 0000000000000000000000000600000000000000001008040000008000200000040001000000200008000001008040000008000200030000
% 0000000000000000000000000600000820000000001008040020008040200000040001000000201008000001008040020008020200020000
% 00000000000000000000000006000018600000000010000400200080402001000402010000002010080040010000400200080202000f8000
% 00000000000000000000000006f03e1f7c7c1bcf001000040000008000200100040201000800200008004001000040000008020200060000
% 0000000000000000000000000718631860c63cf38010000400000080002000000400010008002000080000010000400000080002000c0000
% 000000000000000000000000061cc398618718618010080400000080002000000400010000002000080000010000400000080002000c3800
% 000000000000000000000000060cc198618318618010080400000080002000000400010000002000080000010080400000080002000c1800
% 000000000000000000000000060cc198618318618010080400200080402000000400010000002010080000010080400200080202000c1000
% 000000000000000000000000060cc19861831861801000040020008040200100040201000000201008004001000040020008020200183000
% 000000000000000000000000060cc19861831861801000040000008000200100040201000800200008004001000040000008020200183600
% 0000000000000000000000000608e11861c21861801000040000008000200000040001000800200008000001000040000008000200183b00
% 0000000000000000000000000618631d74c61861801008040000008000200000040001000000200008000001000040000008000200183100
% 00000000000000000000000003e03e0e387c3efb801008040000008000200000040001000000200008000001008040000008000200002100
% 0000000000000000000000000000000000000000001008040020008040200000040001000000201008000001008040020008020200006300
% 0000000000000000000000000000000000000000001000040020008040200100040201000000201008004001000040020008020200004200
% 0000000000000000000000000000000000000000001000040000008000200100040201000800200008004001000040000008020200004c00
% 0000000000000000000000000000000000000000003ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00007800
% 0000000000000000000000000000000000000000000008000000000000000000000000000000000000000000008000000000000000000000
% 0000000000000000000000000000000000000000000008000020000040000000000000000000001000000000008000020000000000000000
% 0000000000000000000000000000000000000000000008000020000040000100000200000000001000004000008000020000020000000000
% 0000000000000000000000000000000000000000000000000020000040000100000200000800001000004000000000020000020000000000
% 0000000000000000000000000000000000000000000000000000000000000100000200000800000000004000000000000000020000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000800000000000000018000000000000000000000
% 00000000000000000000000000000000000000000000180000000000c0000000000000000000003000000000018000000000000000000000
% 00000000000000000000000000000000000000000000180000200000c0000000000600000000003000000000018000000000000000000000
% 00000000000000000000000000000000000000000000080000200000c0000000000600000000003000000000000000000000020000000000
% 0000000000000000000000000000000000000000000000000020000000000000000600000000000000000000000000060000020000000000
% 000000000000000000000000000000000000000000000000006000000000030000000000000000000000c000000000060000020000000000
% 000000000000000000000000000000000000000000000000006000000000030000000000180000000000c00000c000000000000000000000
% 000000000000000000000000000000000000000000000c000000000060000000000000001800001800000000004000000000040000000000
% 0000000000000000000000000000000000000000000006000000000020000000000300000000000800000000000000000000040000000000
% 00000000000000000000000000000000000000000000000000800000000000000001000000000000000000000000000c0000060000000000
% 00000000000000000000000000000000000000000000000000c0000000000600000000000000000000018000000000180000020000000000
% 0000000000000000000000000000000000000000000000000080000000000c00000000003000000000030000000c00000000020000000000
% 0000000000000000000000000000000000000000000000e00000000006000000000000006000000180000000000e000000007f8000000000
% 0000000000000000000000000000000000000000000000400c000000070000000000300000000001c0000000000030c00000210000000000
% 0000000000000000000000000000000000000000000000030c0000000018600000003800000000000618000000003c000000330000000000
% 000000000000000000000000000000000000000000000001c0000000001e0000000000c3000000000780000000001c000000330000000000
% 00000000000000000000000000000000000000000000000000000000000e0000000000f00000000003800000000000000000120000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000120000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000186000000000f001c000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000386000000001b801c000000000000000003000000000000000000000
% 000000000000000000000000000000000000000000000000000000001800000000030000c00000000000000001fe00000000000000000000
% 000000000000000000000000000000000000000000000000000000001800008000030000c000000000000000066300000000000000000000
% 000000000000000000000000000000000000000000000200000000001800018000030000c0000000000000000c6300000000100000000000
% 000000000000000000000000000000000000000000003e000000000018e1f1f00f8fe00fc1e07e71c1e0f8000c66000000001e0000000000
% 00000000000000000000000000000000000000000003fe000000000018e2118018c30018c630c630c63108000cc6000000001fe000000000
% 0000000000000000000000000000000000000000001ffe00000000001862118030e30010c4398630c43908000cf8000000001ff800000000
% 0000000000000000000000000000000000000000000fffffffff00001863818030630030cffb0630cff9c00008f0007ffffffffc00000000
% 00000000000000000000000000000000000000000003fe00000000001861c18030630030cc030630cc00e00000f0000000001fe000000000
% 000000000000000000000000000000000000000000003e00000000001860f18030630030cc030630cc00780001b8000000001e0000000000
% 000000000000000000000000000000000000000000000600000000001860398030630030ce030630ce001c00019800000000000000000000
% 000000000000000000000000000000000000000000000000000000001862198038430038cf1b8630cf190c00031800000000000000000000
% 00000000000000000000000000000000000000000000000000000000186319d018c30019e7f1ce39c7f18c00061800000000000000000000
% 000000000000000000000000000000000000000000000000000000003cf3e0e00f87c00fe3e0fe1ee3e1f0001f8c00000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000c00000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000600000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000660000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000600000000000003c0000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /ZapfChancery-MediumItalic FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
216.08 488.34 459.08 488.34 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
216.08 488.34 234.08 560.34 R
N
261.08 488.34 279.08 524.34 R
N
306.08 488.34 324.08 506.34 R
N
396.08 488.34 414.08 542.34 R
N
351.08 488.34 369.08 578.34 R
N
441.08 488.34 459.08 560.34 R
N
216.08 542.34 234.08 542.34 2 L
N
216.08 524.34 234.08 524.34 2 L
N
216.08 506.34 234.08 506.34 2 L
N
441.08 506.34 459.08 506.34 2 L
N
351.08 560.34 369.08 560.34 2 L
N
351.08 542.34 369.08 542.34 2 L
N
351.08 524.34 369.08 524.34 2 L
N
351.08 506.34 369.08 506.34 2 L
N
261.08 506.34 279.08 506.34 2 L
N
396.08 524.34 414.08 524.34 2 L
N
396.08 506.34 414.08 506.34 2 L
N
441.08 542.34 459.08 542.34 2 L
N
441.08 524.34 459.08 524.34 2 L
N
0 22 Q
(list of deques) 270 434.29 T
1 F
(R) 398.33 434.29 T
227.29 441 227.29 438.02 216.91 441 227.29 443.98 4 Y
0 Z
N
227.29 441 227.29 438.02 216.91 441 227.29 443.98 4 Y
V
252 441 227.54 441 2 L
2 Z
N
447.71 441 447.71 443.98 458.09 441 447.71 438.02 4 Y
0 Z
N
447.71 441 447.71 443.98 458.09 441 447.71 438.02 4 Y
V
423 441 447.46 441 2 L
2 Z
N
0 F
(top) 171.44 541.77 T
(bottom) 145 490.77 T
216.08 587.34 234.08 605.34 R
N
(e) 45 593.41 T
(x) 54.44 593.41 T
(ecuting) 65.11 593.41 T
(  threads) 49.52 572.11 T
(o) 46.47 635.11 T
(wners) 56.92 635.11 T
0 20 Q
(P) 215.96 640.81 T
0 16 Q
(0) 227.08 635.81 T
306.08 587.34 324.08 605.34 R
N
0 20 Q
(P) 305.96 640.81 T
0 16 Q
(3) 317.08 635.81 T
397.2 587.34 415.2 605.34 R
N
0 20 Q
(P) 397.08 640.81 T
0 16 Q
(2) 408.2 635.81 T
442.2 587.34 460.2 605.34 R
N
0 20 Q
(P) 442.08 640.81 T
0 16 Q
(1) 453.2 635.81 T
J
225.08 622.34 225.08 479.34 2 L
J
225.08 622.34 225.08 621.84 2 L
1 H
N
[0.993 4.965] 0.993 I
225.08 621.84 225.08 479.84 2 L
N
J
225.08 479.84 225.08 479.34 2 L
N
J
247.08 613.34 247.08 478.34 2 L
J
247.08 613.34 247.08 612.84 2 L
N
[0.978 4.891] 0.978 I
247.08 612.84 247.08 478.84 2 L
N
J
247.08 478.84 247.08 478.34 2 L
N
[1.034 5.17] 0.517 I
236.08 467.34 M
 230.01 467.34 225.08 473.16 225.08 480.34 D
N
[0.85 4.252] 0.425 I
247.08 476.34 M
 247.08 470.82 242.61 466.34 237.08 466.34 D
N
J
270.08 613.88 270.08 478.88 2 L
J
270.08 613.88 270.08 613.38 2 L
N
[0.978 4.891] 0.978 I
270.08 613.38 270.08 479.38 2 L
N
J
270.08 479.38 270.08 478.88 2 L
N
J
292.08 612.88 292.08 477.88 2 L
J
292.08 612.88 292.08 612.38 2 L
N
[0.978 4.891] 0.978 I
292.08 612.38 292.08 478.38 2 L
N
J
292.08 478.38 292.08 477.88 2 L
N
[1.034 5.17] 0.517 I
281.08 466.88 M
 275.01 466.88 270.08 472.7 270.08 479.88 D
N
[0.85 4.252] 0.425 I
292.08 475.88 M
 292.08 470.35 287.61 465.88 282.08 465.88 D
N
J
451.08 608.88 451.08 465.34 2 L
J
451.08 608.88 451.08 608.38 2 L
N
[0.997 4.984] 0.997 I
451.08 608.38 451.08 465.84 2 L
N
J
451.08 465.84 451.08 465.34 2 L
N
J
315.08 612.88 315.08 477.88 2 L
J
315.08 612.88 315.08 612.38 2 L
N
[0.978 4.891] 0.978 I
315.08 612.38 315.08 478.38 2 L
N
J
315.08 478.38 315.08 477.88 2 L
N
J
337.08 611.88 337.08 476.88 2 L
J
337.08 611.88 337.08 611.38 2 L
N
[0.978 4.891] 0.978 I
337.08 611.38 337.08 477.38 2 L
N
J
337.08 477.38 337.08 476.88 2 L
N
[1.034 5.17] 0.517 I
326.08 465.88 M
 320.01 465.88 315.08 471.7 315.08 478.88 D
N
[0.85 4.252] 0.425 I
337.08 474.88 M
 337.08 469.35 332.61 464.88 327.08 464.88 D
N
J
360.08 613.88 360.08 478.88 2 L
J
360.08 613.88 360.08 613.38 2 L
N
[0.978 4.891] 0.978 I
360.08 613.38 360.08 479.38 2 L
N
J
360.08 479.38 360.08 478.88 2 L
N
J
382.08 612.88 382.08 477.88 2 L
J
382.08 612.88 382.08 612.38 2 L
N
[0.978 4.891] 0.978 I
382.08 612.38 382.08 478.38 2 L
N
J
382.08 478.38 382.08 477.88 2 L
N
[1.034 5.17] 0.517 I
371.08 466.88 M
 365.01 466.88 360.08 472.7 360.08 479.88 D
N
[0.85 4.252] 0.425 I
382.08 475.88 M
 382.08 470.35 377.61 465.88 372.08 465.88 D
N
J
405.08 614.88 405.08 479.88 2 L
J
405.08 614.88 405.08 614.38 2 L
N
[0.978 4.891] 0.978 I
405.08 614.38 405.08 480.38 2 L
N
J
405.08 480.38 405.08 479.88 2 L
N
J
427.08 613.88 427.08 478.88 2 L
J
427.08 613.88 427.08 613.38 2 L
N
[0.978 4.891] 0.978 I
427.08 613.38 427.08 479.38 2 L
N
J
427.08 479.38 427.08 478.88 2 L
N
[1.034 5.17] 0.517 I
416.08 467.88 M
 410.01 467.88 405.08 473.7 405.08 480.88 D
N
[0.85 4.252] 0.425 I
427.08 476.88 M
 427.08 471.35 422.61 466.88 417.08 466.88 D
N
[0.982 4.91] 0.491 I
247.08 612.34 M
 247.08 621.31 253.32 628.58 261 628.58 D
N
[1.034 5.17] 0.517 I
260.08 627.34 M
 266.16 627.34 271.08 621.52 271.08 614.34 D
N
[1.12 5.599] 0.56 I
292.08 613.34 M
 292.08 621.07 297.46 627.34 304.08 627.34 D
N
[1.034 5.17] 0.517 I
305.08 628.34 M
 311.16 628.34 316.08 622.52 316.08 615.34 D
N
[1.12 5.599] 0.56 I
337.08 612.34 M
 337.08 620.07 342.46 626.34 349.08 626.34 D
N
[1.034 5.17] 0.517 I
350.08 626.34 M
 356.16 626.34 361.08 620.52 361.08 613.34 D
N
[1.166 5.828] 0.583 I
382.08 611.34 M
 382.08 619.62 387.46 626.34 394.08 626.34 D
N
[1.034 5.17] 0.517 I
394.08 626.34 M
 400.16 626.34 405.08 620.52 405.08 613.34 D
N
[1.12 5.599] 0.56 I
427.08 613.34 M
 427.08 621.07 432.46 627.34 439.08 627.34 D
N
[1.034 5.17] 0.517 I
441.08 627.34 M
 447.16 627.34 452.08 621.52 452.08 614.34 D
N
J
225.08 620.62 228.06 620.62 225.08 610.25 222.11 620.62 4 Y
0.5 H
0 Z
N
J
225.08 624.34 225.08 620.88 2 L
J
225.08 624.34 225.08 623.59 2 L
2 Z
N
[0.655 1.965] 0.655 I
225.08 623.59 225.08 621.62 2 L
N
J
225.08 621.62 225.08 620.88 2 L
N
J
270.08 617.62 273.06 617.62 270.08 607.25 267.11 617.62 4 Y
0 Z
N
J
270.08 621 270.08 617.88 2 L
J
270.08 621 270.08 620.25 2 L
2 Z
N
[0.542 1.625] 0.542 I
270.08 620.25 270.08 618.62 2 L
N
J
270.08 618.62 270.08 617.88 2 L
N
J
315.08 618.62 318.06 618.62 315.08 608.25 312.11 618.62 4 Y
0 Z
N
J
315.08 622.34 315.08 618.88 2 L
J
315.08 622.34 315.08 621.59 2 L
2 Z
N
[0.655 1.965] 0.655 I
315.08 621.59 315.08 619.62 2 L
N
J
315.08 619.62 315.08 618.88 2 L
N
J
452.08 615.62 455.06 615.62 452.08 605.25 449.11 615.62 4 Y
0 Z
N
J
452.08 619.34 452.08 615.88 2 L
J
452.08 619.34 452.08 618.59 2 L
2 Z
N
[0.655 1.965] 0.655 I
452.08 618.59 452.08 616.62 2 L
N
J
452.08 616.62 452.08 615.88 2 L
N
J
360.08 615.62 363.06 615.62 360.08 605.25 357.11 615.62 4 Y
0 Z
N
J
360.08 619.34 360.08 615.88 2 L
J
360.08 619.34 360.08 618.59 2 L
2 Z
N
[0.655 1.965] 0.655 I
360.08 618.59 360.08 616.62 2 L
N
J
360.08 616.62 360.08 615.88 2 L
N
J
405.08 615.62 408.06 615.62 405.08 605.25 402.11 615.62 4 Y
0 Z
N
J
405.08 619.34 405.08 615.88 2 L
J
405.08 619.34 405.08 618.59 2 L
2 Z
N
[0.655 1.965] 0.655 I
405.08 618.59 405.08 616.62 2 L
N
J
405.08 616.62 405.08 615.88 2 L
N
2 22 Q
(t) 177 589.43 T
2 17.6 Q
(a) 183.12 583.93 T
2 22 Q
(t) 471.08 492.34 T
2 17.6 Q
(b) 477.2 486.84 T
0 22 Q
(deques) 45 517.77 T
0 20 Q
(--) 264.08 643.34 T
(--) 354.08 642.34 T
J
450 470.29 452.98 470.29 450 459.91 447.02 470.29 4 Y
0 Z
N
J
450 474 450 470.54 2 L
J
450 474 450 473.25 2 L
2 Z
N
[0.655 1.965] 0.655 I
450 473.25 450 471.29 2 L
N
J
450 471.29 450 470.54 2 L
N
0 0 0 1 0 0 0 K
J
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 0 1216 a FN(Figure)29 b(6:)39 b Fu(The)27
b(list)h Fm(R)e Fu(of)h(deques)i(maintained)h(in)d(the)h(system)g(by)f
(algorithm)i Ft(DFDeques)7 b Fu(.)41 b(Each)27 b(deque)h(may)g(ha)n(v)o
(e)0 1329 y(one)h(\(or)f(no\))g(o)n(wner)h(processor)-5
b(.)45 b(The)28 b(dotted)h(line)g(traces)g(the)g(decreasing)i(order)e
(of)f(priorities)i(of)f(the)f(threads)i(in)e(the)0 1442
y(system;)d(thus)f Fr(t)508 1456 y Fq(a)572 1442 y Fu(in)f(this)i
(\002gure)e(has)h(the)g(highest)h(priority)-6 b(,)26
b(while)d Fr(t)2187 1457 y Fq(b)2244 1442 y Fu(has)h(the)g(lo)n(west)g
(priority)-6 b(.)0 1715 y FN(thread)33 b(w)o(ak)o(es)h(up)f(its)f(pre)n
(viously)g(suspended)g(parent,)k(the)d(processor)g(starts)g(e)o(x)o
(ecuting)f(the)h(parent)g(ne)o(xt;)0 1835 y(for)g(nested)g(parallel)f
(computations,)h(we)g(can)g(sho)n(w)f(that)h(the)f(processor')-5
b(s)33 b(deque)f(must)g(be)h(empty)f(at)h(this)0 1956
y(stage)27 b([40].)40 b(When)27 b(an)h(idle)f(processor)h(\002nds)f
(its)g(deque)h(empty)-6 b(,)27 b(it)g(deletes)g(the)h(deque.)39
b(When)27 b(a)h(processor)0 2076 y(deletes)36 b(its)f(deque,)k(or)d
(when)g(it)g(gi)n(v)o(es)e(up)i(o)n(wnership)f(of)h(its)f(deque)h(due)g
(to)g(e)o(xhaustion)e(of)j(its)e(memory)0 2197 y(quota,)26
b(it)f(uses)h(the)g Fh(steal\(\))f FN(procedure)h(to)g(obtain)f(a)h(ne)
n(w)g(deque.)35 b(The)26 b(main)f(dif)n(ference)i(from)e(pre)n(vious)0
2317 y(depth-\002rst)h(schedulers)h([10)o(,)g(41])g(is)f(in)g(this)g
(steal)g(procedure.)37 b(Ev)o(ery)26 b(in)l(v)n(ocation)g(of)g
Fh(steal\(\))g FN(resets)g(the)0 2437 y(processor')-5
b(s)24 b(memory)f(quota)h(to)g FI(K)32 b FN(bytes.)d(W)-8
b(e)25 b(call)g(an)f(iteration)f(of)i(the)f(loop)g(in)g(the)g
Fh(steal\(\))f FN(procedure)0 2558 y(a)i FE(steal)f(attempt)p
FN(.)146 2678 y(A)29 b(processor)f(e)o(x)o(ecutes)f(a)i(steal)f
(attempt)f(by)h(picking)f(a)i(random)e(number)h FI(m)h
FN(between)f(1)g(and)h FI(p)p FN(,)g(where)0 2798 y FI(p)d
FN(is)f(the)h(number)f(of)g(processors.)33 b(It)26 b(then)f(tries)h(to)
f(steal)g(the)h(bottom)e(thread)i(from)f(the)h FI(m)3208
2762 y Fq(th)3304 2798 y FN(deque)g(\(starting)0 2919
y(from)19 b(the)f(left)h(end\))g(in)f(the)h(global)f(list)g(of)h
(deques)f FF(R)p FN(.)30 b(A)18 b(steal)h(attempt)f(may)g(f)o(ail)h
(\(that)g(is,)g Fh(pop)p 3333 2919 30 4 v 35 w(from)p
3608 2919 V 35 w(bot\(\))0 3039 y FN(returns)31 b Fg(N)t(U)t(L)t(L)t
FN(\))f(if)g(tw)o(o)f(or)h(more)f(processors)g(tar)n(get)h(the)f(same)h
(deque)f(\(see)h(Section)g(4.1\),)g(or)g(if)g(the)f(deque)0
3160 y(is)f(empty)g(or)h(non-e)o(xistent.)41 b(If)29
b(the)g(steal)g(attempt)e(is)i(successful)f(\()p Fh(pop)p
2582 3160 V 35 w(from)p 2857 3160 V 35 w(bot\(\))g FN(returns)h(a)g
(thread\),)0 3280 y(the)k(stealing)g(processor)g(creates)h(a)f(ne)n(w)g
(deque)h(for)f(itself,)i(places)e(it)g(to)g(the)g(immediate)f(right)h
(of)h(the)f(tar)n(-)0 3400 y(get)27 b(deque,)g(and)f(starts)g(e)o(x)o
(ecuting)g(the)g(stolen)g(thread.)36 b(Otherwise,)27
b(it)f(repeats)h(the)f(steal)h(attempt.)35 b(Thus)26
b(the)0 3521 y(number)21 b(of)h(deques)f(in)h FF(R)g
FN(may)f(gro)n(w)g(during)g(the)g(e)o(x)o(ecution)g(be)o(yond)f(the)i
(number)f(of)h(processors;)g(ho)n(we)n(v)o(er)l(,)0 3641
y(at)i(an)o(y)g(timestep,)f(only)g(the)h(leftmost)f FI(p)h
FN(deques)g(are)g(potential)f(tar)n(gets)h(of)h(a)f(steal.)30
b(When)24 b(a)h(processor)f(steals)0 3762 y(the)i(last)f(thread)h(from)
f(a)h(deque)g(not)f(currently)h(associated)f(with)g(\(o)n(wned)g(by\))h
(an)o(y)f(processor)l(,)h(it)f(deletes)g(the)0 3882 y(deque.)146
4002 y(If)j(a)f(thread)h(contains)e(an)h(action)g(that)g(performs)g(a)g
(memory)g(allocation)f(of)h FI(m)h FN(units)e(such)h(that)f
FI(m)33 b(>)f(K)0 4123 y FN(\(where)c FI(K)34 b FN(is)27
b(the)g(memory)f(threshold\),)g(then)h FF(b)p FI(m=K)7
b FF(c)28 b FN(dummy)e(threads)h(must)e(be)j(fork)o(ed)f(in)g(a)g
(binary)g(tree)0 4243 y(of)22 b(depth)f FG(\002\(log)16
b FI(m=K)7 b FG(\))22 b FN(before)g(the)f(allocation)1701
4207 y FC(5)1738 4243 y FN(.)29 b(W)-8 b(e)22 b(do)g(not)f(sho)n(w)f
(this)h(e)o(xtension)f(in)h(Figure)h(5)f(for)h(bre)n(vity)-6
b(.)0 4363 y(Each)22 b(dummy)f(thread)i(e)o(x)o(ecutes)e(a)h(no-op.)30
b(Ho)n(we)n(v)o(er)l(,)21 b(processors)h(must)f(gi)n(v)o(e)g(up)h
(their)g(deques)g(and)g(perform)0 4484 y(a)k(steal)f(e)n(v)o(ery)f
(time)h(the)o(y)f(e)o(x)o(ecute)h(a)g(dummy)f(thread.)32
b(Once)26 b(all)f(the)g(dummy)f(threads)h(ha)n(v)o(e)g(been)g(e)o(x)o
(ecuted,)0 4604 y(a)i(processor)f(may)g(proceed)h(with)f(the)g(memory)f
(allocation.)35 b(This)26 b(transformation)f(tak)o(es)h(place)h(at)f
(runtime.)0 4725 y(The)d(addition)e(of)i(dummy)e(threads)i(ef)n(fecti)n
(v)o(ely)e(delays)h(lar)n(ge)h(allocations)f(of)h(space,)g(so)g(that)f
(higher)g(priority)0 4845 y(threads)28 b(may)g(be)h(scheduled)f
(instead.)41 b(In)28 b(practice,)i FI(K)36 b FN(is)28
b(typically)f(set)h(to)g(a)h(fe)n(w)f(thousand)g(bytes,)g(so)h(that)0
4965 y(the)c(runtime)e(o)o(v)o(erhead)i(due)f(to)h(the)f(dummy)g
(threads)g(is)h(ne)o(gligible)e(\(e.g.,)h(see)i(Section)e(5\).)p
0 5055 1560 4 v 116 5116 a FB(5)149 5146 y Fz(This)c(transformation)c
(dif)n(fers)j(slightly)g(from)f(depth-\002rst)g(schedulers)g([10)o(,)h
(41)o(],)h(which)e(allo)n(w)i(dummy)d(threads)i(to)g(be)g(fork)o(ed)0
5246 y(in)h(a)h(multi-w)o(ay)e(fork)g(of)h(constant)g(depth.)1925
5589 y FN(9)p eop
%%Page: 10 13
10 12 bop 146 100 a FN(W)-8 b(e)32 b(no)n(w)e(pro)o(v)o(e)f(a)j(lemma)e
(re)o(garding)f(the)i(order)g(of)g(threads)g(in)f FF(R)i
FN(maintained)d(by)i(algorithm)e FL(DFDe-)0 220 y(ques)8
b FN(;)24 b(this)g(order)h(is)f(sho)n(wn)g(pictorially)f(in)i(Figure)g
(6.)0 461 y FK(Lemma)g(3.1)49 b FM(Algorithm)23 b FL(DFDeques)i
FM(maintains)e(the)h(following)g(or)l(dering)g(of)g(thr)l(eads)g(in)g
(the)h(system.)-32 655 y(1.)48 b(Thr)l(eads)25 b(in)g(eac)o(h)f(deque)h
(ar)l(e)g(in)f(decr)l(easing)h(or)l(der)f(of)h(priorities)d(fr)l(om)i
(top)g(to)h(bottom.)-32 856 y(2.)48 b(A)34 b(thr)l(ead)e(curr)l(ently)h
(e)n(xecuting)g(on)g(a)g(pr)l(ocessor)f(has)h(higher)f(priority)g(than)
h(all)f(other)h(thr)l(eads)f(on)h(the)91 976 y(pr)l(ocessor')l(s)24
b(deque)o(.)-32 1177 y(3.)48 b(The)27 b(thr)l(eads)f(in)g(any)g(given)h
(deque)f(have)h(higher)e(priorities)g(than)h(thr)l(eads)f(in)h(all)g
(the)g(deques)h(to)f(its)f(right)91 1297 y(in)g FF(R)p
FM(.)0 1514 y(Pr)l(oof)p FN(:)77 b(By)29 b(induction)e(on)i(the)g
(timesteps.)42 b(The)29 b(base)g(case)g(is)g(the)g(start)f(of)i(the)e
(e)o(x)o(ecution,)h(when)g(the)g(root)0 1635 y(thread)21
b(is)f(the)g(only)g(thread)h(in)f(the)g(system.)28 b(Let)21
b(the)f(three)h(properties)f(be)h(true)f(at)h(the)f(start)h(of)f(an)o
(y)g(subsequent)0 1755 y(timestep.)42 b(An)o(y)28 b(of)h(the)g(follo)n
(wing)e(e)n(v)o(ents)h(may)h(tak)o(e)g(place)g(on)g(each)g(processor)g
(during)f(the)h(timestep;)h(we)0 1875 y(will)24 b(sho)n(w)g(that)g(the)
h(properties)f(continue)g(to)g(hold)g(at)h(the)g(end)g(of)g(the)f
(timestep.)146 1996 y(When)34 b(a)h(thread)f(forks)g(a)g(child)g
(thread,)i(the)e(parent)g(is)g(added)g(to)f(the)h(top)g(of)g(the)g
(processor')-5 b(s)33 b(deque,)0 2116 y(and)e(the)g(child)g(starts)g(e)
o(x)o(ecution.)48 b(Since)32 b(the)f(parent)g(has)h(a)f(higher)g
(priority)f(that)h(all)g(other)g(threads)g(in)g(the)0
2237 y(processor')-5 b(s)21 b(deque)g(\(by)g(induction\),)g(and)g
(since)g(the)g(child)g(thread)g(has)h(a)f(higher)g(priority)f
(\(earlier)i(depth-\002rst)0 2357 y(e)o(x)o(ecution)30
b(order\))i(than)f(its)g(parent,)i(properties)e(\(1\))g(and)h(\(2\))f
(continue)g(to)g(hold.)50 b(Further)l(,)33 b(since)e(the)h(child)0
2477 y(no)n(w)24 b(has)h(the)f(priority)g(immediately)f(higher)i(than)f
(its)g(parent,)h(property)f(\(3\))h(holds.)146 2598 y(When)38
b(a)g(thread)g FI(T)51 b FN(terminates,)40 b(the)e(processor)g(checks)f
(if)h FI(T)52 b FN(has)37 b(reacti)n(v)n(ated)g(a)h(suspended)f(parent)
0 2718 y(thread)26 b FI(T)332 2733 y Fq(p)372 2718 y
FN(.)34 b(In)26 b(this)f(case,)i(it)e(starts)g(e)o(x)o(ecuting)g
FI(T)1718 2733 y Fq(p)1758 2718 y FN(.)34 b(Since)26
b(the)g(computation)e(is)h(nested)h(parallel,)g(the)g(proces-)0
2838 y(sor')-5 b(s)30 b(deque)g(must)f(no)n(w)g(be)i(empty)e(\(since)i
(the)f(parent)g FI(T)2071 2853 y Fq(p)2141 2838 y FN(must)f(ha)n(v)o(e)
h(been)h(stolen)e(at)i(some)e(earlier)i(point)0 2959
y(and)25 b(then)g(suspended\).)30 b(Therefore,)c(all)f(3)f(conditions)g
(continue)g(to)g(hold.)31 b(If)25 b FI(T)39 b FN(did)25
b(not)f(w)o(ak)o(e)h(up)g(its)f(parent,)0 3079 y(the)33
b(processor)h(picks)f(the)g(ne)o(xt)g(thread)h(from)f(the)g(top)g(its)g
(deque.)57 b(If)34 b(the)g(deque)f(is)g(empty)-6 b(,)35
b(it)e(deletes)g(the)0 3200 y(deque)25 b(and)g(performs)f(a)h(steal.)31
b(Therefore)25 b(all)g(three)g(properties)f(continue)g(to)h(hold)f(in)g
(these)h(cases)g(too.)146 3320 y(When)f(a)g(thread)f(suspends)g(or)g
(is)g(preempted)h(due)f(to)g(e)o(xhaustion)f(of)i(the)f(processor')-5
b(s)23 b(memory)f(quota,)i(it)0 3440 y(is)e(put)g(back)h(on)f(the)h
(top)f(of)g(its)g(deque,)h(and)g(the)f(deque)h(retains)f(its)g
(position)f(in)h FF(R)p FN(.)30 b(Thus)22 b(all)h(three)g(properties)0
3561 y(continue)h(to)g(hold.)146 3681 y(When)31 b(a)h(processor)f
(steals)f(the)h(bottom)e(thread)j(from)e(another)h(deque,)i(it)d(adds)h
(the)g(ne)n(w)g(deque)g(to)f(the)0 3801 y(right)h(of)g(the)h(tar)n(get)
f(deque.)51 b(Since)32 b(the)f(stolen)g(thread)h(had)f(the)g(lo)n(west)
g(priority)f(in)h(the)h(tar)n(get)f(deque,)i(the)0 3922
y(properties)d(continue)g(to)g(hold.)47 b(Similarly)-6
b(,)30 b(remo)o(v)n(al)g(of)g(a)h(thread)g(from)f(the)g(tar)n(get)h
(deque)g(does)f(not)g(af)n(fect)0 4042 y(the)25 b(v)n(alidity)e(of)j
(the)f(three)g(properties)g(for)h(the)f(tar)n(get)g(deque.)32
b(A)25 b(thread)h(may)e(be)i(stolen)e(from)h(a)h(processor')-5
b(s)0 4163 y(deque)33 b(while)f(one)h(of)g(the)f(abo)o(v)o(e)g(e)n(v)o
(ents)f(tak)o(es)i(place)g(on)g(the)f(processor)h(itself;)j(this)31
b(does)i(not)f(af)n(fect)h(the)0 4283 y(v)n(alidity)23
b(of)i(our)f(ar)n(gument.)146 4403 y(Finally)-6 b(,)24
b(deletion)g(of)h(one)g(or)f(more)h(deques)g(from)f FF(R)i
FN(does)e(not)g(af)n(fect)h(the)g(three)g(properties.)p
3867 4403 34 42 v 0 4618 a FK(W)-7 b(ork)32 b(stealing)f(as)h(a)g
(special)f(case)h(of)g(algorithm)g FD(DFDeques)8 b FN(.)85
b(Consider)31 b(the)h(case)h(when)e(we)i(set)e(the)0
4738 y(memory)21 b(threshold)f FI(K)35 b FG(=)27 b FF(1)p
FN(.)j(Then,)22 b(for)g(nested-parallel)f(computations,)f(algorithm)g
FL(DFDeques)8 b FN(\()p FF(1)p FN(\))21 b(pro-)0 4858
y(duces)30 b(a)h(schedule)f(identical)g(to)g(the)g(one)g(produced)h(by)
f(the)g(pro)o(v)n(ably-ef)n(\002cient)f(w)o(ork-stealing)g(scheduler)0
4979 y(\223WS\224)35 b([13].)58 b(The)34 b(processors)g(in)f
FL(DFDeques)8 b FN(\()p FF(1)p FN(\))34 b(ne)n(v)o(er)f(gi)n(v)o(e)g
(up)g(a)i(deque)f(due)g(to)f(e)o(xhaustion)f(of)i(their)0
5099 y(memory)28 b(quota,)g(and)h(therefore,)h(as)e(with)g(the)g(w)o
(ork)g(stealer)l(,)i(there)e(are)h(ne)n(v)o(er)f(more)g(than)h
FI(p)f FN(deques)g(in)g(the)0 5220 y(system.)53 b(Further)l(,)35
b(in)d(both)g(algorithms,)g(when)h(a)g(processor')-5
b(s)31 b(deque)i(becomes)f(empty)-6 b(,)33 b(it)f(picks)g(another)0
5340 y(processor)37 b(uniformly)f(at)i(random,)h(and)f(steals)e(the)i
(bottommost)c(thread)k(from)f(that)g(processor')-5 b(s)36
b(deque.)1900 5589 y(10)p eop
%%Page: 11 14
11 13 bop 0 100 a FN(Similarly)-6 b(,)34 b(for)g(nested)f(parallel)h
(computations,)g(the)f(rule)h(for)g(w)o(aking)f(up)g(a)h(suspended)f
(parent)g(in)h FL(DFD-)0 220 y(eques)8 b FN(\()p FF(1)p
FN(\))31 b(is)g(equi)n(v)n(alent)e(to)i(the)g(corresponding)f(rule)h
(in)g(WS)2278 184 y FC(6)2316 220 y FN(.)g(Of)h(course,)h(the)e
(resulting)f(schedules)g(are)0 340 y(identical)c(pro)o(vided)f(we)h
(assume)g(the)h(same)f(cost)g(model)f(for)i(both)f(algorithms;)f(the)h
(model)g(could)g(be)g(either)0 461 y(the)f(atomic-access)f(model)g
(used)h(to)f(analyze)h(WS)h([13],)f(or)f(our)h(cost)g(model)f(from)g
(Section)h(4.1.)0 800 y FJ(4)143 b(Analysis)34 b(of)i(T)m(ime)f(and)g
(Space)f(Using)h(Algorithm)e Fp(DFDeques)0 1024 y FN(W)-8
b(e)38 b(no)n(w)e(pro)o(v)o(e)h(the)g(space)g(and)h(time)e(bounds)h
(for)g(nested-parallel)g(computations)e(implemented)h(using)0
1144 y(Algorithm)23 b FL(DFDeques)8 b FN(.)0 1439 y Fs(4.1)119
b(Cost)29 b(model)0 1627 y FN(W)-8 b(e)33 b(de\002ne)f(the)g(total)g
(number)f(of)i(unit)e(actions)h(in)f(a)i(parallel)f(computation)e(\(or)
j(the)f(number)g(of)g(nodes)f(in)0 1747 y(its)f(dag\))g(as)h(its)f
FE(w)o(ork)g FI(W)14 b FN(.)47 b(Further)l(,)32 b(let)f
FI(D)i FN(be)d(the)h FE(depth)f FN(of)h(the)f(computation,)g(that)g
(is,)i(the)e(length)g(of)g(the)0 1868 y(longest)e(path)g(in)h(its)f
(dag.)43 b(F)o(or)29 b(e)o(xample,)g(the)f(computation)f(represented)j
(in)e(Figure)h(4)g(has)g(w)o(ork)f FI(W)49 b FG(=)35
b(11)0 1988 y FN(and)22 b(depth)f FI(D)31 b FG(=)c(6)p
FN(.)j(W)-8 b(e)22 b(assume)f(that)h(an)g(allocation)f(of)h
FI(m)g FN(bytes)f(of)h(memory)f(\(for)i(an)o(y)e FI(m)28
b(>)g FG(0)p FN(\))22 b(has)f(a)i(depth)0 2109 y(of)i
FG(\002\(log)16 b FI(m)p FG(\))25 b FN(units)707 2072
y FC(7)744 2109 y FN(.)146 2229 y(F)o(or)i(this)e(analysis,)h(we)h
(assume)f(that)g(timesteps)f(\(clock)i(c)o(ycles\))f(are)h
(synchronized)f(across)g(all)h(the)f(pro-)0 2349 y(cessors.)35
b(If)27 b(multiple)d(processors)i(tar)n(get)g(a)h(non-empty)e(deque)h
(in)g(a)h(single)e(timestep,)g(we)i(assume)e(that)h(one)0
2470 y(of)e(them)f(succeeds)h(in)f(the)h(steal,)g(while)f(all)g(the)h
(others)f(f)o(ail)h(in)g(that)f(timestep.)29 b(If)24
b(the)g(deque)g(tar)n(geted)g(by)f(one)0 2590 y(or)f(more)f(steals)h
(is)f(empty)-6 b(,)21 b(all)h(of)f(those)h(steals)f(f)o(ail)g(in)h(a)g
(single)f(timestep.)28 b(When)22 b(a)g(steal)g(f)o(ails,)g(the)f
(processor)0 2710 y(attempts)i(another)i(steal)g(in)f(the)h(ne)o(xt)f
(timestep.)29 b(When)c(a)g(steal)f(succeeds,)h(the)g(processor)f
(inserts)g(the)h(ne)n(wly)0 2831 y(created)i(deque)g(into)e
FF(R)j FN(and)e(e)o(x)o(ecutes)g(the)g(\002rst)h(action)f(from)g(the)h
(stolen)e(thread)i(in)f(the)g(same)h(timestep.)34 b(At)0
2951 y(the)26 b(end)h(of)f(a)h(timestep,)f(if)g(a)h(processor')-5
b(s)26 b(current)g(thread)h(terminates)e(or)i(suspends,)f(and)g(it)g
(\002nds)g(its)g(deque)0 3072 y(to)j(be)g(empty)-6 b(,)29
b(it)g(immediately)e(deletes)i(its)g(deque)g(in)g(that)f(timestep.)43
b(Similarly)-6 b(,)29 b(when)g(a)h(processor)f(steals)0
3192 y(the)22 b(last)g(thread)g(from)g(a)g(deque)g(not)g(currently)f
(associated)h(with)f(an)o(y)h(processor)l(,)g(it)g(deletes)g(the)g
(deque)g(in)g(that)0 3312 y(timestep.)29 b(Thus,)24 b(at)h(the)f(start)
h(of)f(a)h(timestep,)e(if)i(a)g(deque)f(is)h(empty)-6
b(,)23 b(it)h(must)f(be)i(o)n(wned)f(by)g(a)h(processor)g(that)0
3433 y(is)f(b)n(usy)g(e)o(x)o(ecuting)g(a)h(thread.)146
3553 y(Our)h(cost)e(model)h(is)g(some)n(what)f(simplistic,)f(because)i
(it)g(ignores)g(the)g(cost)g(of)g(maintaining)e(the)i(globally)0
3673 y(ordered)32 b(set)f(of)h(deques)f FF(R)p FN(.)51
b(If)32 b(we)g(parallelize)f(the)g(scheduling)g(tasks)g(of)g(inserting)
f(and)i(deleting)e(deques)0 3794 y(in)g FF(R)h FN(\(by)f(performing)f
(them)h(lazily\),)h(we)g(can)f(account)g(for)h(all)f(their)g(o)o(v)o
(erheads)f(in)h(the)g(time)g(bound.)46 b(W)-8 b(e)0 3914
y(can)28 b(then)f(sho)n(w)f(that)h(in)f(the)h(e)o(xpected)g(case,)i
(the)e(computation)e(can)j(be)f(e)o(x)o(ecuted)g(in)g
FI(O)s FG(\()p FI(W)s(=p)22 b FG(+)i FI(D)j FF(\001)c
FG(log)17 b FI(p)p FG(\))0 4035 y FN(time)25 b(and)g
FI(S)432 4050 y FH(1)494 4035 y FG(+)e FI(O)s FG(\()p
FI(p)f FF(\001)g FG(log)17 b FI(p)22 b FF(\001)h FI(D)s
FG(\))i FN(space)h(on)f FI(p)h FN(processors,)f(including)f(the)h
(scheduling)g(o)o(v)o(erheads)f([40].)33 b(In)0 4155
y(practice,)26 b(the)f(insertions)f(and)i(deletions)e(of)i(deques)f
(from)g FF(R)h FN(can)g(be)g(either)f(serialized)h(and)f(protected)h
(by)f(a)0 4275 y(lock)f(\(for)i(small)d FI(p)p FN(\),)i(or)g(performed)
g(lazily)f(in)h(parallel)g(\(for)g(lar)n(ge)g FI(p)p
FN(\).)p 0 4365 1560 4 v 116 4426 a FB(6)149 4456 y Fz(In)31
b(WS,)g(the)g(rea)o(w)o(ak)o(ened)e(parent)h(is)h(placed)f(added)g(to)h
(the)g(current)e(processor')-5 b(s)30 b(deque)f(\(which)h(is)i
(empty\);)j(for)30 b(nested)0 4556 y(parallel)21 b(computations,)f(the)
i(child)g(must)g(terminate)f(at)h(this)h(point,)e(and)g(therefore,)f
(the)i(ne)o(xt)g(thread)e(e)o(x)o(ecuted)g(by)i(the)g(processor)0
4656 y(is)f(the)f(parent)g(thread.)116 4725 y FB(7)149
4755 y Fz(This)i(is)h(a)f(reasonable)e(assumption)g(in)i(systems)g
(with)f(binary)f(forks)h(that)h(zero)f(out)g(the)g(memory)f
Ff(as)i(soon)f(as)h Fz(it)g(is)h(allocated.)0 4855 y(The)g(zeroing)g
(then)g(requires)g(a)h(minimum)e(depth)h(of)g Fw(\002\(log)14
b Fy(m)p Fw(\))p Fz(;)26 b(it)f(can)e(be)h(performed)d(in)j(parallel)f
(by)g(forking)f(a)i(tree)g(of)f(height)0 4955 y Fw(\002\(log)14
b Fy(m)p Fw(\))p Fz(.)1900 5589 y FN(11)p eop
%%Page: 12 15
12 14 bop 0 100 a Fs(4.2)119 b(Space)31 b(bound)0 287
y FN(W)-8 b(e)35 b(no)n(w)f(analyze)h(the)f(space)h(bound)f(for)g(a)h
(parallel)g(computation)d(e)o(x)o(ecuted)i(by)g(algorithm)f
FL(DFDeques)8 b FN(.)0 408 y(The)26 b(analysis)g(uses)g(se)n(v)o(eral)g
(ideas)g(from)g(pre)n(vious)g(w)o(ork)g([3,)g(10,)g(41].)36
b(Because)27 b(more)g(than)f(one)g(processor)0 528 y(is)37
b(a)n(v)n(ailable)h(to)f(e)o(x)o(ecute)h(a)g(parallel)g(computation,)h
(some)e(nodes)h(may)f(be)h(e)o(x)o(ecuted)g(out)f(of)h(order)g(\(i.e.,)
0 648 y(prematurely\))30 b(with)g(respect)h(to)f(the)g(serial,)i
(depth-\002rst)e(schedule.)48 b(These)30 b(out-of-order)h(nodes)f(can)h
(cause)0 769 y(the)j(parallel)g(schedule)g(to)g(require)g(more)g(space)
h(than)e(a)i(serial)f(schedule.)58 b(By)35 b(bounding)d(the)i(number)g
(of)0 889 y(such)g(nodes,)j(we)e(can)g(bound)f(the)h(space)g
(requirement)f(of)h(the)g(parallel)g(schedule)f(in)g(terms)h(of)g(the)f
(serial)0 1010 y(space)25 b(requirement.)0 1276 y FK(4.2.1)99
b(De\002nitions)0 1463 y FN(Let)23 b FI(G)f FN(be)h(the)f(dag)h(that)f
(represents)h(the)f(parallel)h(computation)e(being)h(e)o(x)o(ecuted.)29
b(Depending)22 b(on)g(the)g(result-)0 1584 y(ing)i(parallel)h
(schedule,)g(we)g(classify)f(its)g(nodes)h(\(actions\))f(into)g(one)h
(of)g(tw)o(o)g(types:)30 b(hea)n(vy)25 b(and)g(light.)30
b(Ev)o(ery)0 1704 y(time)23 b(a)h(processor)g(performs)f(a)i(steal,)e
(the)h(\002rst)g(node)f(it)h(e)o(x)o(ecutes)f(from)g(the)h(stolen)f
(thread)h(is)f(called)h(a)g FE(heavy)0 1824 y FN(action.)30
b(All)25 b(remaining)e(nodes)i(in)f FI(G)h FN(are)h(labelled)e(as)h
FE(light)p FN(.)146 1945 y(W)-8 b(e)33 b(\002rst)f(assume)f(that)g(e)n
(v)o(ery)h(node)f(allocates)h(at)g(most)f FI(K)39 b FN(space;)c(we)d
(will)f(relax)i(this)e(assumption)e(in)0 2065 y(the)i(end.)48
b(Recall)31 b(that)f(a)h(processor)g(may)f(allocate)h(at)g(most)e
FI(K)38 b FN(space)31 b(between)g(consecuti)n(v)o(e)e(steals;)k(thus,)0
2186 y(it)28 b(may)g(allocate)h(at)f(most)g FI(K)35 b
FN(space)29 b(for)g(e)n(v)o(ery)f(hea)n(vy)h(node)f(it)g(e)o(x)o
(ecutes.)41 b(Therefore,)30 b(we)f(can)g(attrib)n(ute)e(all)0
2306 y(the)j(memory)f(allocated)g(by)h(light)e(nodes)h(to)h(the)f(last)
h(hea)n(vy)f(node)h(that)f(precedes)i(them.)44 b(This)29
b(results)g(in)h(a)0 2426 y(conserv)n(ati)n(v)o(e)23
b(vie)n(w)h(of)h(the)g(total)f(space)h(allocation.)146
2547 y(Let)f FI(s)349 2562 y Fq(p)416 2547 y FG(=)k FI(V)577
2562 y FH(1)616 2547 y FI(;)17 b(:)g(:)g(:)f(;)h(V)892
2562 y Fq(\034)959 2547 y FN(be)24 b(the)g(parallel)f(schedule)h(of)g
(the)g(dag)g(generated)g(by)f(algorithm)g FL(DFDeques)8
b FN(\()p FI(K)f FN(\).)0 2667 y(Here)24 b FI(V)274 2682
y Fq(i)326 2667 y FN(is)f(the)h(set)f(of)h(nodes)f(that)h(are)g(e)o(x)o
(ecuted)f(at)h(timestep)e FI(i)p FN(;)i FI(\034)36 b
FN(is)23 b(the)g FE(length)h FN(of)g(the)g(schedule)f
FI(s)3563 2682 y Fq(p)3603 2667 y FN(.)30 b(Let)24 b
FI(s)3861 2682 y FH(1)0 2787 y FN(be)f(the)g(serial,)h(depth-\002rst)f
(schedule)g(or)g(the)i(1)t Fg(D)t(F)r FE(-sc)o(hedule)i
FN(for)c(the)g(same)g(dag;)h(e.g.,)f(the)g(nodes)g(in)g(Figure)g(4)0
2908 y(are)j(numbered)e(according)h(to)f(their)h(order)g(of)g(e)o(x)o
(ecution)e(in)h(a)j(1)t Fg(D)t(F)r FN(-schedule)s(.)146
3028 y(W)-8 b(e)26 b(no)n(w)f(vie)n(w)f(an)i(intermediate)e(snapshot)g
(of)h(the)h(parallel)f(schedule)g FI(s)2730 3043 y Fq(p)2769
3028 y FN(.)33 b(At)25 b(an)o(y)f(timestep)g FG(1)29
b FF(\024)g FI(j)34 b FF(\024)c FI(\034)0 3149 y FN(during)f(the)h(e)o
(x)o(ecution)f(of)h FI(s)1016 3164 y Fq(p)1056 3149 y
FN(,)h(all)f(the)g(nodes)g(e)o(x)o(ecuted)f(so)h(f)o(ar)h(form)f(a)g
FE(pre\002x)h FN(of)f FI(s)3023 3164 y Fq(p)3063 3149
y FN(.)46 b(This)30 b(pre\002x)g(of)h FI(s)3764 3164
y Fq(p)3834 3149 y FN(is)0 3269 y(de\002ned)h(as)g FI(\033)495
3284 y Fq(p)575 3269 y FG(=)691 3203 y Fe(S)760 3222
y Fq(j)760 3292 y(i)p FH(=1)895 3269 y FI(V)952 3284
y Fq(i)980 3269 y FN(.)51 b(Let)31 b FI(\033)1275 3284
y FH(1)1347 3269 y FN(be)h(the)f FM(long)o(est)f FN(pre\002x)i(of)g
FI(s)2369 3284 y FH(1)2440 3269 y FN(containing)e(only)h(nodes)g(in)g
FI(\033)3529 3284 y Fq(p)3569 3269 y FN(,)j(that)d(is,)0
3389 y FI(\033)55 3404 y FH(1)141 3389 y FF(\022)46 b
FI(\033)319 3404 y Fq(p)359 3389 y FN(.)60 b(Then)35
b(the)f(pre\002x)h FI(\033)1162 3404 y FH(1)1237 3389
y FN(is)f(called)g(the)h FE(corresponding)f FN(serial)g(pre\002x)h(of)g
FI(\033)3084 3404 y Fq(p)3124 3389 y FN(.)60 b(The)35
b(nodes)f(in)g(the)0 3510 y(set)c FI(\033)196 3525 y
Fq(p)261 3510 y FF(\000)d FI(\033)420 3525 y FH(1)489
3510 y FN(are)k(called)f FE(premature)f FN(nodes,)h(since)g(the)o(y)f
(ha)n(v)o(e)g(been)h(e)o(x)o(ecuted)f(out)g(of)h(order)g(with)f
(respect)0 3630 y(to)g(the)j(1)t Fg(D)t(F)r FN(-schedule)g
FI(s)883 3645 y FH(1)923 3630 y FN(.)46 b(All)29 b(other)h(nodes)f(in)h
FI(\033)1811 3645 y Fq(p)1851 3630 y FN(,)h(that)f(is,)g(the)g(set)g
FI(\033)2557 3645 y FH(1)2596 3630 y FN(,)i(are)e(called)g
FE(non-premature)p FN(.)46 b(F)o(or)0 3751 y(e)o(xample,)38
b(Figure)f(7)f(sho)n(ws)f(a)i(simple)e(dag)i(with)e(a)i(parallel)f
(pre\002x)h FI(\033)2583 3766 y Fq(p)2660 3751 y FN(for)f(an)h
(arbitrary)f FI(p)p FN(-schedule)g FI(s)3835 3766 y Fq(p)3875
3751 y FN(,)0 3871 y(its)29 b(corresponding)f(serial)h(pre\002x)h
FI(\033)1285 3886 y FH(1)1325 3871 y FN(,)g(and)g(a)f(possible)f
(classi\002cation)h(of)g(nodes)g(as)g(hea)n(vy)h(or)f(light.)43
b(It)30 b(also)0 3991 y(highlights)23 b(the)h(premature)h(nodes)f(in)h
FI(\033)1414 4006 y Fq(p)1454 3991 y FN(.)146 4112 y(Whether)e(a)g
(node)f(is)g(hea)n(vy)g(or)h(light)e(is)h(determined)g(by)g(the)g
(parallel)h(schedule,)f(while)g(premature)h(nodes)0 4232
y(are)29 b(de\002ned)f(relati)n(v)o(e)f(to)h(a)g(gi)n(v)o(en)f
(pre\002x)h(\(snapshot\))g(of)g(the)g(parallel)f(schedule.)41
b(F)o(or)28 b(e)o(xample,)f(at)i(the)e(start)0 4352 y(and)g(at)h(the)f
(end)g(of)h(the)f(e)o(x)o(ecution)f(\(i.e.,)i(for)f(the)g(empty)g
(pre\002x)h(as)f(well)g(as)h(the)f(longest)f(pre\002x)i(of)g
FI(s)3601 4367 y Fq(p)3640 4352 y FN(\))g(there)0 4473
y(are)39 b(no)f(premature)g(nodes,)j(while)d(intermediate)f(pre\002x)o
(es)i(of)f FI(s)2355 4488 y Fq(p)2433 4473 y FN(may)g(contain)f
(premature)i(nodes.)70 b(The)0 4593 y(maximum)30 b(number)h(of)h
(premature)f(nodes)h(\(o)o(v)o(er)e(all)i(pre\002x)o(es)g(of)f(the)h
(parallel)f(schedule\))h(will)f(determine)0 4714 y(the)i(amount)f(of)h
(e)o(xtra)g(space)h(the)f(parallel)g(schedule)f(requires)h(when)g
(compared)g(with)g(the)i(1)t Fg(D)t(F)r FN(-schedule)0
4834 y(\(Lemma)42 b(4.3,)k(Section)c(4.2.2\);)50 b(in)41
b(contrast,)46 b(the)c(space)h(allocated)f(by)f(non-premature)h(nodes)g
(will)f(be)0 4954 y(bounded)30 b(by)g(the)g(space)h(usage)g(of)f(the)h
(serial)f(e)o(x)o(ecution.)46 b(Therefore,)33 b(by)d(bounding)f(the)h
(total)g(number)g(of)0 5075 y(premature)20 b(nodes)f(\(Lemma)h(4.2,)h
(Section)f(4.2.2\))f(we)h(can)h(bound)e(the)h(space)g(requirement)f(of)
h(the)g FI(p)p FN(-schedule)0 5195 y FI(s)46 5210 y Fq(p)86
5195 y FN(.)146 5315 y(A)j(ready)g(thread)g(being)f(present)g(in)h(a)g
(deque)f(is)g(equi)n(v)n(alent)f(to)h(its)g(\002rst)h(une)o(x)o(ecuted)
f(node)g(\(action\))h(being)1900 5589 y(12)p eop
%%Page: 13 16
13 15 bop 50 1208 a @beginspecial 7 @llx 408 @lly 589
@urx 774 @ury 1440 @rhi @setspecial
%%BeginDocument: figures/dag4.epsi
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c7c0000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c1ce000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00007800000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003800000800000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000000080000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000e0000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e000000000070000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff000000000000000000000000000000000000000001e00000000000010000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000001fff000000000000000000000000000000000000000003c00000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000003fff0000000000000000000000000000000000000001e0000000000000002000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000070e00000000000000000000000000000000000000003800000000003f8003000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000e03000000000000000000000000000000000000001f0000000000007fc001800
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000e038000000000000000000000000000000000000718000000000000ffe001800
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000e01c000000000000000000000000000000000001f00000000000000ffe000800
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000e01c0000000000000000000000000000000000f0000000000000000fff000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000e01c0000000000000000000000000000000001e0000000000000000fff000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000e01c00000000000000000000000000000000f000000000000000007fff000300
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000701c00000000000000000000000000000001e00000000000000007ffff000300
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000007038ff8000000000000000000000000000f000000000000000007f0ffe000180
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000003830f9c000000000000000000000000001c00000000000000007f007fe000180
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000001fe030e0000000000000000000000000f800000000000000007f0003fc000080
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000007803060000000000000000000000000c00000000000000003f00000f0000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000030600000000000000000000000f800000000000000003f00000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000030600000000000000000000000c00000000000000003f000000020000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000306000000000000000000000f800000000000000003f0000000020000060
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000030c000000000000000000008c00000000000000003f80000000020000060
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000003080000000000000000000f800000000000000003f800000000020000020
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000000000000000018c00000000000000003f8000000000020000030
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000007c00000000000000001f80000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000001c000000000000000001f800000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000007c00000000000000001f8000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000001c000000000000000001f80000000000000020000010
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc000000000000007c00000000000000001f800000000000000020000018
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000001fc000000000000000020000018
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c00000000000000001fc0000000000000000020000018
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000001fc00000000000000000020000018
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00000000000000000fc000000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000fc0000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00000000000000000fc00000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000fc000000000000000000000020000008
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000fe0000000000000000000000020000008
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000fe00000000000000000000000020000008
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000fe000000000000000000000000020000008
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c0000000000000000fe0000000000000000000000000020000008
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000007e00000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000007e000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000007e0000000000000000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000000000000007e00000000000000000000000000000020000008
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000007f000000000000000000000000000000020000008
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000000000000007f0000000000000000000000000000000020000008
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000007f00000000000000000000000000000000020000008
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000007f000000000000000000000000000000000020000008
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000003f0000000000000000000000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000780000000000000003f00000000000000000000000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000000000003f000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000003f0000000000000000000000000000000000000020000018
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000f8000000000000003f80000000000000000000000000000000000000020000018
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000003f800000000000000000000000000000000000000020000018
% 00000000000000000000000000000000000000000000000000000000000000000000000000000003c000000000000003f8000000000000000000000000000000000000000020000018
% 00000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000001f80000000000000000000000000000000000000000020000018
% 000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000001f800000000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000007c00000000000001f8000000000000000000000000000000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f80000000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000003e00000000000001f800000000000000000000000000000000000000000000020000030
% 000000000000000000000000000000000000000000000000000000000000000000000000000300000000000001fc000000000000000000000000000000000000000000000020000030
% 00000000000000000000000000000000000000000000000000000000000000000000000000e00000000000001fc0000000000000000000000000000000000000000000000020000030
% 00000000000000000000000000000000000000000000000000000000000000000000000003c0000000000001fc00000000000000000000000000000000000000000000000020000030
% 000000000000000000000000000000000000000000000000000000000000000000000000600000000000000fc000000000000000000000000000000000000000000000000020000020
% 000000000000000000000000000000000000000000000000000000000000000000000003e0000000000000fc0000000000000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000038000000000000fc000000000000000000000000000000000000000000000000003fc000000
% 0000000000000000000000000000000000000000000000000000000000000000000000f0000000000000fc000000000000000000000000000000000000000000000000000108000000
% 0000000000000000000000000000000000000000000000000000000000000000000001c000000000000fe0000000000000000000000000000000000000000000000000000198000060
% 0000000000000000000000000000000000000000000000000000000000000000000030000000000000fe00000000000000000000000000000000000000000000000000000198000040
% 00000000000000000000000000000000000000000000000000000000000000000001f000000000c00fe0000000000000000000000000000000000000000000000000000000900000c0
% 000000000000000000000000000000000000000000000000000000000000000000018000000001c0fe00000000000000000000000000000000000000000000000000000000900000c0
% 00000000000000000000000000000000000000000000000000000000000000000070000000000747e000000000000000000000000000000000000000000000000000000000f00000c0
% 000000000000000000000000000000000000000000000000000000000000000001e00000003f8e7e0000000000000000000000000000000000000000000000000000000003f8000000
% 000000000000000000000000000000000000000000000000000000000000000000000000007ff86000000000000000000000000000000000000000000000000000000000075c000000
% 00000000000000000000000000000000000000000000000000000000000000007800000000fff020000000000000000000000000000000000000000000000000000000000c26000000
% 0000000000000000000000000000000000000000000000000000000000000000e000000000ffe030000000000000000000000000000000000000000000000000000000000d56000180
% 00000000000000000000000000000000000000000000000000000000000000180000000000fffff0000000000000000000000000000000000000000000000000000000000803000100
% 00000000000000000000000000000000000000000000000000000000000000f80000000000fff000000000000000000000000000000000000000000000000000000000000d57000300
% 00000000000000000000000000000000000000000000000000000000000000c00000000000fff000000000000000000000000000000000000000000000000000000000000a23000300
% 0000000000000000000000000000000000000000000000000000000000003c000000000000fff000000000000000000000000000000000000000000000000000000000003d57000200
% 00000000000000000000000000000000000000000000000000000000000070000000000003ffe00000000000000000000000000000000000000000000000000000000001fc06000000
% 0000000000000000000000000000000000000000000000000000000000040000000000000f7fe0000000000000000000000000000000000000000000000000000000000f875e000000
% 00000000000000000000000000000000000000000000000000000000003c0000000000007c3fc0000000000000000000000000000000000000000000000000000000007c03fc000c00
% 000000000000000000000000000000000000000000000000000000000070000000000003e00f0000000000000000000000000000000000000000000000000000000003e000f0000c00
% 00000000000000000000000000000000000000000000000000000000060000000000000f0002000000000000000000000000000000000000000000000000000000001f000020001800
% 000000000000000000000000000000000000000000000000000000003e0000000000007c0002000000000000000000000000000000000000000000000000000000007c000020001800
% 0000000000000000000000000000000000000000000000000000000030000000000003e0000200000000000000000000000000000000000000000000000000000003e0000020003000
% 000000000000000000000000000000000000000000000000000000060000000000001f0000020000000000000000000000000000000000000000000000000000001f00000020000000
% 0000000000000000000000000000000000000000000000000000001e00000000000078000002000000000000000000000000000000000000000000000000000000f800000020000000
% 00000000000000000000000000000000000000000000000000000038000000000003e0000002000000000000000000000000000000000000000000000000000007c00000002000c000
% 0000000000000000000000000000000000000000000000000000070000000000001f0000000200000000000000000000000000000000000000000000000000003e0000000020018000
% 00000000000000000000000000000000000000000000000000001e00000000000078000000020000000000000000000000000000000000000000000000000000f80000000020030000
% 000000000000000000000000000000000000000000000000000018000000000003e0000000020000000000000000000000000000000000000000000000000007c00000000020060000
% 00000000000000000000000000000000000000000000000000030000000000001f0000000002000000000000000000000000000000000000000000000000003f000000000020000000
% 000000000000000000000000000000000000000000000000001f00000000000078000000000200000000000000000000000000000000000000000000000001f0000000000020000000
% 0000000000000000000000000000000000000000000000000008000000000003e000000000020000000000000000000000000000000000000000000000000fc0000000000020700000
% 000000000000000000000000000000000000000000000000038000000000001f0000000000020000000000000000000000000000000000000000000000007c00000000000020e00000
% 0000000000000000000000000000000000000000000000000f00000000000078000000000002000000000000000000000000000000000000000000000001f000000000000021800000
% 0000000000000000000000000000000000000000000000000c000000000003e000000000000200000000000000000000000000000000000000000000000f8000000000000020000000
% 0000000000000000000000000000000000000000000000008000000000001f0000000000000200000000000000000000000000000000000000000000003d0000000000000038000000
% 000000000000000000000000000000000000000000000003c0000000000078000000000000020000000000000000000000000000000000000000000001c00000000000000078000000
% 000000000000000000000000000000000000000000000007000000000003e000000000000002000000000000000000000000000000000000000000000f4000000000000000e0000000
% 00000000000000000000000000000000000000000000000000000000001f0000000000000002000000000000000000000000000000000000000000003e000000000000000c20000000
% 0000000000000000000000000000000000000000000000c0000000000078000000000000000200000000000000000000000000000000000000000001f0000000000000007c20000000
% 0000000000000000000000000000000000000000000007800000000003e000000000000000020000000000000000000000000000000000000000000780000000000000007020000000
% 000000000000000000000000000000000000000000000200000000001f0000000000000000020000000000000000000000000000000000000000003f000000000000001c0020000000
% 0000000000000000000000000000000000000000000060000000000078000000000000000002000000000000000000000000000000000000000000f0000000000000007c0020000000
% 00000000000000000000000000000000000000000001e00000000003e0000000000000000002000000000000000000000000000000000000000007c00000000000000c000020000000
% 0000000000000000000000000000000000000000000380000000001f0000000000000000003fc0000000000000000000000000000000000000001e000000000000007c000020000000
% 000000000000000000000000000000000000000000000000000000f8000000000000000000108000000000000000000000000000000000000000f80000000000003e000003fc000000
% 000000000000000000000000000000000000000000700000000003c0000000000000000000198000000000000000000000000000000000000003c00000000000063800000108000000
% 000000000000000000000000000000000000000001e0000000001f0000000000000000000019800000000000000000000000000000000000001f0000000000003e0000000198000000
% 0000000000000000000000000000000000000000000000000000f80000000000000000000009000000000000000000000000000000000000007800000000003e000000000198000000
% 0000000000000000000000000000000000000000180000000003c0000000000000000000000900000000000000000000000000000000000603e0000000000e38000000000090000000
% 000000000000000000000000000000000000000070000000301f00000000000000000000000f00000000000000000000000000000000000e0f00000000003e00000000000090000000
% 0000000000000000000000000000000000000000c000000070f800000000000000000000000f00000000000000000000000000000000001e3c000000003e00000000000000f0000000
% 000000000000000000000000000000000000000000000000d3c0000000000000000000000006000000000000000000000000000000000033e0000000063000000000000000f0000000
% 000000000000000000000000000000000000000c00001fc39f0000000000000000000000003f80000000000000000000000000000001fc67800000003e0000000000000003f8000000
% 000000000000000000000000000000000000003c00003fe71800000000000000000000000073c0000000000000000000000000000003aee1800000070000000000000000071c000000
% 000000000000000000000000000000000000007000007ffe08000000000000000000000000d56000000000000000000000000000000757c3c000001f00000000000000000c06000000
% 000000000000000000000000000000000000000000007ff80c000000000000000000000000c02000000000000000000000000000000601ffc000001000000000000000000c02000000
% 000000000000000000000000000000000000060000007ffffc000000000000000000000000d570000000000000000000000000000005558000000f0000000000000000000803000000
% 0000000000000000000000000000000000000e0000007ff800000000000000000000000000a030000000000000000000000000000004218000001c0000000000000000000803000000
% 00000000000000000000000000000000000038000001fff800000000000000000000000000d57000000000000000000000000000000555800000000000000000000000000803000000
% 00000000000000000000000000000000000010000003fff800000000000000000000000000803000000000000000000000000000000401800007800000000000000000000803000000
% 0000000000000000000000000000000000000000000e7ff000000000000000000000000003d56000000000000000000000000000001f5700000e000000000000000000003c06000000
% 0000000000000000000000000000000000070000001c3ff00000000000000000000000000762e000000000000000000000000000003b2700000800000000000000000000760e000000
% 00000000000000000000000000000000000e000000701fe00000000000000000000000001c3fc00000000000000000000000000000e1fe00018000000000000000000001c3fc000000
% 000000000000000000000000000000000008000000e00780000000000000000000000000380f000000000000000000000000000001c078000f800000000000000000000380f0000000
% 000000000000000000000000000000000000000003800100000000000000000000000000e00200000000000000000000000000000700080004000000000000000000000e0020000000
% 000000000000000000000000000000000180000007000100000000000000000000000001c00200000000000000000000000000000e000803c0000000000000000000001c0020000000
% 00000000000000000000000000000000070000001c00010000000000000000000000000700020000000000000000000000000000380008070000000000000000000000700020000000
% 00000000000000000000000000000000060000007800010000000000000000000000000e0002000000000000000000000000000070000fc00000000000000000000000e00020000000
% 0000000000000000000000000000000000000000e000010000000000000000000000003800020000000000000000000000000001c003cf000000000000000000000003800020000000
% 00000000000000000000000000000000e0000003c00001000000000000000000000000f00002000000000000000000000000000787c7c800000000000000000000000f000020000000
% 00000000000000000000000000000001c0000007000001000000000000000000000001c00002000000000000000000000007c7cfc7800800000000000000000000001c000020000000
% 000000000000000000000000000000030000001e00000100000000000000000000000780000200000000000000000003c7c7c03c000008000000000000000000000078000020000000
% 000000000000000000000000000000000000003800000100000000000000000000000e000002000000000000000000c7c00000700000080000000000000000000000e0000020000000
% 00000000000000000000000000000000000000e000000100000000000000000000003c000002000000000000000007c0000001e00000080000000000000000000003c0000020000000
% 00000000000000000000000000000070000001c00000010000000000000000000000700000020000000000000000e00000000380000008000000000000000000000700000020000000
% 000000000000000000000000000000e0000007000000010000000000000000000001c00000020000000000000003c00000000e00000008000000000000000000001c00000020000000
% 0000000000000000000000000000018000000e000000010000000000000000000003800000020000000000000000000000001c00000008000000000000000000003800000020000000
% 0000000000000000000000000000000000003800000001000000000000000000000e0000003fc0000000000000e00000000070000000ff00000000000000000000e000000020000000
% 000000000000000000000000000008000000700000001fe00000000000000000001c00000010800000000000038000000000e00000004200000000000000000001c0000003fc000000
% 000000000000000000000000000018000001c0000000084000000000000000000070000000198000000000000000000000038000000066000000000000000000070000000108000000
% 000000000000000000000000000070000183800000000cc0000000000000000000e00000001980000000000030000000000700000000660000000000000000000e0000000198000000
% 00000000000000000000000000006000018e000000000cc0000000000000000003800000000900000000000060000000001c0000000024000000000000000000380000000198000000
% 00000000000000000000000000000000039c0000000004800000000000000003070000000009000000000001c000000018380000000024000000000000000030700000000090000000
% 0000000000000000000000000002000006f000000000048000000000000000031c000000000f0000000000008000000018e0000000003c000000000000000031c00000000090000000
% 000000000000000000000000000e00000ce0000000000780000000000000000738000000000f0000000000000000000039c0000000003c0000000000000000738000000000f0000000
% 000000000000000000000000001c00001c70000000000780000000000000000de0000000000600000000000c000000006f0000000000180000000000000000de0000000000f0000000
% 0000000000000000000000000018000ff8f0000000001fc00000000000001fd9c0000000003f800000000018000000fece0000000001fc00000000000001fd9c0000000003f8000000
% 0000000000000000000000000000001ff780000000003fe000000000000038f8e00000000071c00000000030000001c7c700000000038e000000000000038f8e00000000071c000000
% 0000000000000000000000000080003ffe00000000007ff00000000000007571e000000000d5600000000060000003018f00000000060300000000000006031e000000000c06000000
% 0000000000000000000000000180003ff800000000007ff0000000000000603f0000000000e020000000000000000300f80000000006010000000000000601f0000000000c02000000
% 0000000000000000000000000300003ffc00000000007ff8000000000000555c0000000000d570000000000000000200e00000000004018000000000000401c0000000000803000000
% 0000000000000000000000000600003ffc00000000007ff8000000000000401800000000008030000000030000000200c0000000000401800000000000040180000000000803000000
% 0000000000000000000000000000003ffc00000000007ff800000000000055580000000000d570000000070000000200c0000000000401800000000000040180000000000803000000
% 0000000000000000000000000000003ffc00000000007ff800000000000062380000000000a230000000060000000200c0000000000401800000000000040180000000000803000000
% 0000000000000000000000002000003ff800000000007ff000000000000075700000000000d5600000000c000000030180000000000603000000000000060300000000000c06000000
% 000000000000000000000000e000001ff800000000003ff00000000000003070000000000060e00000000000000001838000000000030700000000000003070000000000060e000000
% 000000000000000000000000c000001ff000000000003fe00000000000003fe000000000007fc00000000000000001ff000000000003fe00000000000003fe000000000007fc000000
% 00000000000000000000000180000033c00000000000678000000000000067800000000000cf0000000000000000033c00000000000678000000000000067800000000000cf0000000
% 00000000000000000000000000000070800000000000e100000000000000e1000000000001c20000000030000000071000000000000e100000000000000e2000000000001c20000000
% 00000000000000000000000000000060800000000000c100000000000000c1000000000001820000000060000000061000000000000c100000000000000c2000000000001820000000
% 00000000000000000000000c000000c08000000000018100000000000001810000000000030200000000c00000000c1000000000001810000000000000182000000000003020000000
% 00000000000000000000001c000001808000000000030100000000000003010000000000060200000000c0000000181000000000003010000000000000302000000000006020000000
% 0000000000000000000000180000030080000000000601000000000000060100000000000c02000000000000000030100000000000601000000000000060200000000000c020000000
% 0000000000000000000000300000060080000000000c010000000000000c0100000000001802000000000000000060100000000000c010000000000000c02000000000018020000000
% 00000000000000000000000000000e0080000000001c010000000000001c01000000000038020000000000000000e0100000000001c010000000000001c02000000000038020000000
% 00000000000000000000000000000c00800000000018010000000000001801000000000030020000000300000000c01000000000018010000000000001802000000000030020000000
% 00000000000000000000018000001800800000000030010000000000003001000000000060020000000300000001801000000000030010000000000003002000000000060020000000
% 000000000000000000000180000030008000000000600100000000000060010000000000c00200000006000000030010000000000600100000000000060020000000000c0020000000
% 00000000000000000000030000066000800000000cc00100000000000cc001000000001980020000000600000066001000000000cc00100000000000cc002000000001980020000000
% 0000000000000000000003000007c000800000000f800100000000000f8001000000001f0002000000000000007c001000000000f800100000000000f8002000000001f00020000000
% 0000000000000000000002000007c000800000000f800100000000000f8001000000001f0002000000000000007c001000000000f800100000000000f8002000000001f00020000000
% 000000000000000000000000000dc000800000001b800100000000001b80010000000037000200000000000000dc001000000001b800100000000001b8002000000003700020000000
% 0000000000000000000000000008e00ff000000011c001000000000011c0010000000023803fc00000180000008e01fe000000011c01fe00000000011c002000000002380020000000
% 0000000000000000000008000018e0042000000031c01fe00000000031c00100000000638010800000180000018e0084000000031c008400000000031c03fc000000063803fc000000
% 00000000000000000000180007f980066000000ff30008400000000ff300010000001fe600198000001000007f9800cc000000ff3000cc00000000ff300108000001fe600108000000
% 0000000000000000000010000fff00066000001ffe000cc00000001c7e001fe0000038fc0019800000300000e3f000cc000001c7e000cc00000001c7e001980000038fc00198000000
% 0000000000000000000030001ffe00024000003ffc000cc0000000355c00084000007578000900000030000180e0004800000301c000480000000301c0019800000603800198000000
% 0000000000000000000020001ffc00024000003ff80004800000003228000cc00000623000090000000000018040004800000300800048000000030080009000000601000090000000
% 0000000000000000000000001ffe0003c000003ffc000480000000355c000cc000005558000f0000000000010060007800000200c000780000000200c0009000000401800090000000
% 0000000000000000000000001ffe0003c000003ffc000780000000200c00048000004018000f0000000000010060007800000200c000780000000200c000f0000004018000f0000000
% 0000000000000000000000001ffe00018000003ffc000780000000355c000480000055580006000000c000010060003000000200c000300000000200c000f0000004018000f0000000
% 00000000000000000000c0001ffe00018000003ffc000300000000202c000780000060380006000000c000010060003000000200c000300000000200c0006000000401800060000000
% 00000000000000000000c0001ffc000fe000003ff8001fc00000003558001fc000007570003f80000180000180c000fe000003018001fc00000003018001fc000006030003f8000000
% 00000000000000000000c0000ffc001ff000001ff8003fe000000018380038e0000030700071c00001800000c1c001c70000018380038e000000018380038e0000030700071c000000
% 00000000000000000000800007f8003ff800000ff0007ff00000000ff000757000001fe000d56000000000007f800301800000ff00060300000000ff000603000001fe000c06000000
% 00000000000000000000000001e0003ff8000003c0007ff000000003c00062300000078000e22000000000001e0003008000003c000601000000003c00060100000078000c02000000
% 0000000000000000000000000040003ffc00000100007ff800000000800055580000010000d570000000000004000200c0000008000401800000000800040180000020000803000000
% 0000000000000000000000000040003ffc00000100007ff8000000008000401800000100008030000600000004000200c0000008000401800000000800040180000020000803000000
% 0000000000000000000100000040003ffc00000100007ff800000000800055580000010000d570000c00000004000200c0000008000401800000000800040180000020000803000000
% 0000000000000000000100000040003ffc00000100007ff800000000800060380000010000a230000c00000004000200c0000008000401800000000800040180000020000803000000
% 0000000000000000000300000040003ff800000100007ff000000000800075700000010000d56000180000000400030180000008000603000000000800060300000020000c06000000
% 0000000000000000000300000040001ff800000100003ff00000000080003070000001000060e00000000000040001838000000800030700000000080003070000002000060e000000
% 0000000000000000000100000040000ff000000100001fe00000000080001fe000000100003fc00000000000040000ff000000080001fe00000000080001fe000003fc0003fc000000
% 00000000000000000000000000400003c0000001000007800000000ff000078000001fe0000f0000000000007f80003c000000ff0000780000000008000078000001080000f0000000
% 00000000000000000000000007f800008000001fe00001000000000420000100000008400002000060000000210000100000004200001000000000ff00002000000198000020000000
% 000000000000000000000000021000008000000840000100000000066000010000000cc000020000c00000003300001000000066000010000000004200002000000198000020000000
% 000000000000000000010000033000008000000cc0000100000000066000010000000cc000020000c00000003300001000000066000010000000006600002000000090000020000000
% 000000000000000000018000033000008000000cc0000100000000024000010000000480000200018000000012000010000000240000100000000066000020000000f0000020000000
% 00000000000000000001800001200000800000048000010000000003c00001000000078000020000000000001e0000100000003c0000100000000024000020000000f0000020000000
% 00000000000000000001800001e00000800000078000010000000003c00001000000078000020000000000001e0000100000003c000010000000003c00002000000060000020000000
% 00000000000000000001800007f000008000000fe00001000000000fe000010000001fc000020004000000007f000010000000fe00001000000000fe000020000001fc000020000000
% 0000000000000000000000000ff800008000001ff00001000000001e7000010000003ae00002000c00000000e3800010000001c700001000000001c70000200000038e000020000000
% 0000000000000000000000001ffc00008000003ff8000100000000355800010000007570000200180000000180c0001000000301800010000000030180002000000603000020000000
% 0000000000000000000000001ffc00008000003ff800010000000030080001000000601000020038000000018040001000000300800010000000030080002000000601000020000000
% 00000000000000000000c0001ffe00008000003ffc000100000000355c0001000000555800020010000000010060001000000200c000100000000200c0002000000401800020000000
% 00000000000000000000c0001ffe00008000003ffc000100000000222c0001000000603800020000000000010060001000000200c000100000000200c0002000000401800020000000
% 0000000000000000000060001ffe00008000003ffc000100000000355c0001000000555800020000000000010060001000000200c000100000000200c0002000000401800020000000
% 0000000000000000000060001ffe00008000003ffc000100000000200c0001000000401800020180000000010060001000000200c000100000000200c0002000000401800020000000
% 0000000000000000000020001ffc00008000003ff80001007c0000355800010000007570000203000000000180c0001000000301800010000000030180002000000603000020000000
% 0000000000000000000000000ffc00008000001ff800017c0c40001a38000100000032700002060000000000c1c0001000000183800010000000018380002000000307000020000000
% 00000000000000000000000007f800008000000ff80001700060000ff800010000001ff000020000000000007f800010000000ffc0001000000000ff000020000001fe000020000000
% 00000000000000000000000001f8000080000003dc00010000380003d8000100000007b800020000000000001f8000100000003cc00010000000003f8000200000007f000020000000
% 000000000000000000001800000c0000800000000c000f00001800000c00010000000018000230000000000001c0001000000000600010000000000180002000000003000020000000
% 000000000000000000000c0000060000800000000600390000000000060001000000000c000260000000000000c00010000000003000100000000000c0002000000001800020000000
% 000000000000000000000c000003000080000000030031000000000003000100000000060002c000000000000060001000000000180010000000000060002000000000c00020000000
% 000000000000000000000400000180008000000001800100000180000180010000000003000380000000000000300010000000000c0010000000000030002000000000600020000000
% 0000000000000000000000000001c0008000000000c301000000c00001c0010000000001800200000000000000180010000000000e0010000000000018002000000000300020000000
% 0000000000000000000000000000e0008000000000e71fe00000600000e0010000000001c00a000000000000000c00100000000007001000000000001c002000000000380020000000
% 0000000000000000000000000000600080000000007c08400000000000601fe000000000e03a000000000000000e0010000000000301fe00000000000e0020000000001c0020000000
% 000000000000000000000180000030008000000000300cc0000000000030084000000000607200000000000000070010000000000180840000000000060020000000000c0020000000
% 0000000000000000000000c0000018008000000000180cc00000040000180fdc000000003042000000000000000300100000000000c0cc000000000003002000000000060020000000
% 0000000000000000000000c000000c0ff000000000cc048000000700000c1fdf00000000183fc00000000000000181fe000000000060cc000000000001802000000000030020000000
% 000000000000000000000060000006242000000001c6048000000380000fa480000000001e108000000000000000c08400000000003148000000000000c3fc000000000183fc000000
% 000000000000000000000000000007e6600000000383178000000000000fe4801e0000003e39800000000000000060cc00000000003f4800000000000063080000000000c508000000
% 000000000000000000000000000003b6600000000303f7800000000f8f83b7800700000207f9800000000000000031cc00000000001df80000000000007f980000000000fd98000000
% 00000000000000000000000800000e32400000000001db0000000000000e37800018001e03b900000000000000003f48000000000071f80000000000003b9800000000007798000000
% 00000000000000000000000c00000e124000000000071b0000000000000e1300003e3e380e3900000000000000001dc8000000000070b0000000000000e3900000000001c690000000
% 0000000000000000000000060000039bc000000038070b000000000000039b00000000000e1f000000000000000071f800000000001cf0000000000000e1900000000001c290000000
% 000000000000000000000003000001cbc00000003001cc00000000000001cb0000000000039f000000000000000070f800000000000e7000000000000039f0000000000073f0000000
% 0000000000000000000000000000007fe00000006000ffc00000000000007fc00000000001ff80000000000000001cfe000000000003fc0000000000001dfc00000000003bf8000000
% 0000000000000000000000000000003ff0000000400038e000000000000038e0000000000071c0000000000000000fc70000000000038e000000000000078e00000000000f1c000000
% 0000000000000000000000006000003ff80000000000603000000000000060300000000000c06000000000000000030180000000000603000000000000060300000000000c06000000
% 0000000000000000000000003000003ff80000000000601000000000000060100000000000c02000000000000000030080000000000601000000000000060100000000000c02000000
% 0000000000000000000000001800003ffc00000600004018000000000000401800000000008030000000000000000200c0000000000401800000000000040180000000000803000000
% 0000000000000000000000000800003ffc00000600004018000000000000401800000000008030000000000000000200c0000000000401800000000000040180000000000803000000
% 0000000000000000000000000000003ffc00000c00004018000000000000401800000000008030000000000000000200c0000000000401800000000000040180000000000803000000
% 0000000000000000000000000180003ffc00001800004018000000000000401800000000008030000000000000000200c0000000000401800000000000040180000000000803000000
% 00000000000000000000000001c0003ffc0000000000603000000000000060300000000000c06000000000000000030180000000000603000000000000060300000000000c06000000
% 00000000000000000000000000e0001fff000000000030700000000000003078000000000060e0000000000000000183c000000000030700000000000003078000000000060e000000
% 0000000000000000000000000020000ff3c0006000001fe00000000000001fef00000000003fc00000000000000000ff780000000001fe00000000000001fef00000000003fc000000
% 00000000000000000000000000000003c0f000c0000007800000000000000783c0000000000f0000000000000000003c1e00000000007800000000000000783c0000000000f0000000
% 00000000000000000000000000060000003c01c0000001000000000000000000f00000000002000000000000000000000780000000001000000000000000000f000000000020000000
% 00000000000000000000000000070000000781800000010000000000000000003c00000000020000000000000000000001e00000000010000000000000000003c00000000020000000
% 0000000000000000000000000001c0000001e0000000010000000000000000000f00000000020000000000000000000000780000000010000000000000000000f00000000020000000
% 0000000000000000000000000000c0000000780000000100000000000000000001e00000000200000000000000000000000f00000000100000000000000000001e0000000020000000
% 0000000000000000000000000000000000001e0000001fe00000000000000000007800000002000000000000000000000003c000000010000000000000000000078000000020000000
% 00000000000000000000000000000c0000000f80000008400000000000000000001e0000003fc00000000000000000000000f00000001000000000000000000001e000000020000000
% 00000000000000000000000000000780000038f000000cc000000000000000000007800000108000000000000000000000003c000000100000000000000000000078000003fc000000
% 000000000000000000000000000001800000703c00000cc000000000000000000001e00000198000000000000000000000000f000001fe000000000000000000001e00000108000000
% 000000000000000000000000000000180000000f00000480000000000000000000003c00001980000000000000000000000001e00000840000000000000000000003c0000198000000
% 0000000000000000000000000000001e00000003c0000480000000000000000000000f00000900000000000000000000000000780000cc0000000000000000000000f0000198000000
% 00000000000000000000000000000003001f0000f00007800000000000000000000003c00009000000000000000000000000001e0000cc00000000000000000000003c000090000000
% 000000000000000000000000000000001f1c00001e3007800000000000000000000000f0000f000000000000000000000000000780004800000000000000000000000f000090000000
% 000000000000000000000000000000000000000007b8030000000000000000000000003c000f0000000000000000000000000001e00048000000000000000000000003c000f0000000
% 000000000000000000000000000000000000000001fc03000000000000000000000000078c0600000000000000000000000000003c607800000000000000000000000078c0f0000000
% 000000000000000000000000000000000000000000660300000000000000000000000001ee0600000000000000000000000000000f70780000000000000000000000001ee060000000
% 000000000000000000000000000000000000000000431fc00000000000000000000000007f3f800000000000000000000000000003f9fc00000000000000000000000007f3f8000000
% 000000000000000000000000000000000000000000c1b8e000000000000000000000000019f1c00000000000000000000000000000cf8e000000000000000000000000019f1c000000
% 000000000000000000000000000000000000000000ffe03000000000000000000000000010c06000000000000000000000000000008603000000000000000000000000010c06000000
% 0000000000000000000000000000000000000000000fe01000000000000000000000000030c02000000000000000000000000000018601000000000000000000000000030c02000000
% 0000000000000000000000000000000000000000000040180000000000000000000000003f80300000000000000000000000000001fc0180000000000000000000000003f803000000
% 00000000000000000000000000000000000000000000401800000000000000000000000003803000000000000000000000000000001c01800000000000000000000000003803000000
% 00000000000000000000000000000000000000000000401800000000000000000000000000803000000000000000000000000000000401800000000000000000000000000803000000
% 00000000000000000000000000000000000000000000401800000000000000000000000000803000000000000000000000000000000401800000000000000000000000000803000000
% 00000000000000000000000000000000000000000000603f00000000000000000000000000c06000000000000000000000000000000603e00000000000000000000000000c06000000
% 000000000000000000000000000000000000000000003073c000000000000000000000000060e0000000000000000000000000000003077c000000000000000000000000060e000000
% 000000000000000000000000000000000000000000001fe0f80000000000000000000000003fc0000000000000000000000000000001fe0f00000000000000000000000003fc000000
% 0000000000000000000000000000000000000000000007801e0000000000000000000000000f000000000000000000000000000000007803e0000000000000000000000000f0000000
% 00000000000000000000000000000000000000000000000007c00000000000000000000000020000000000000000000000000000000000007800000000000000000000000020000000
% 00000000000000000000000000000000000000000000000000f80000000000000000000000020000000000000000000000000000000000001f00000000000000000000000020000000
% 000000000000000000000000000000000000000000000000001e00000000000000000000000200000000000000000000000000000000000003e0000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000007c000000000000000000000020000000000000000000000000000000000000078000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000f80000000000000000000002000000000000000000000000000000000000001f000000000000000000000020000000
% 00000000000000000000000000000000000000000000000000001e00000000000000000000020000000000000000000000000000000000000003e00000000000000000000020000000
% 000000000000000000000000000000000000000000000000000007c0000000000000000000020000000000000000000000000000000000000000780000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000f80000000000000000000200000000000000000000000000000000000000001f0000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000001e00000000000000000002000000000000000000000000000000000000000003e000000000000000000020000000
% 00000000000000000000000000000000000000000000000000000007c00000000000000000020000000000000000000000000000000000000000007800000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000f00000000000000000020000000000000000000000000000000000000000001f00000000000000000020000000
% 000000000000000000000000000000000000000000000000000000003e00000000000000000200000000000000000000000000000000000000000003c0000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000007c0000000000000000200000000000000000000000000000000000000000000f8000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000f00000000000000002000000000000000000000000000000000000000000001f000000000000000020000000
% 00000000000000000000000000000000000000000000000000000000003e00000000000000020000000000000000000000000000000000000000000003c00000000000000020000000
% 000000000000000000000000000000000000000000000000000000000007c0000000000000020000000000000000000000000000000000000000000000f80000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000f00000000000000200000000000000000000000000000000000000000000001f0000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000003e00000000000002000000000000000000000000000000000000000000000003c000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000780000000000002000000000000000000000000000000000000000000000000f800000000000020000000
% 00000000000000000000000000000000000000000000000000000000000001f00000000000020000000000000000000000000000000000000000000000001e00000000000020000000
% 000000000000000000000000000000000000000000000000000000000000003e00000000000200000000000000000000000000000000000000000000000007c0000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000780000000000200000000000000000000000000000000000000000000000000f8000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000001f00000000002000000000000000000000000000000000000000000000000001e000000000020000000
% 00000000000000000000000000000000000000000000000000000000000000003e00000000020000000000000000000000000000000000000000000000000007c00000000020000000
% 00000000000000000000000000000000000000000200000000000000000000000780000000020000000000000000000000000000000000000000000000000000f80000000020000000
% 000000000000000000000000000000000000000006000000000000000000000001f00000003fc0000000000000000000000000000000000000000000000000001e0000000020000000
% 000000000004f00fc04f00009e0270f809f1e01f0fde3e09c3e0000000000000003e00000010800000000000000000000000000000000000000000000000000007c0000003fc000000
% 00000000001df818e1df8003bf9ef99c3f3e303386060e7be670000000000000000780000019800000000000000000000000000000000000000000000000000000f800000108000000
% 00000fffc00f1c3070f1c001e387b20e1c1c38618606061ec8380000000000000001f00000198000000000000000000000000000000000000000000000000000001e00000198000000
% 3f800fffc00c0c6038c0c00181c7060e181818618606061c183800000000000000003c00000900000000000000000000000000000000000000000000000000000007c0000198000000
% 7fc00000000c0c6038c0c00181c607fe18181841860606181ff800000000000000000f80600900000000000000000000000000000000000000000000000000000000f0000090000000
% ffe00000000c0c6018c0c00180c6060018181807860606181800000000000000000001f0700f000000000000000000000000000000000000000000000000000000003e018090000000
% ffe00000000c0c6018c0c7f180c60600181818198606061818000000000000000000003cf80f0000000000000000000000000000000000000000000000000000000007c1c0f0000000
% fff00000000c0c6018c0c7f180c60600181818618606061818000000000000000000000f8c3f8000000000000000000000000000000000000000000000000000000000f3e3f8000000
% fff00fffc00c0c7018c0c00180c60701181818c1860606181c04000000000000000000018671c0000000000000000000000000000000000000000000000000000000003e371c000000
% fff00fffc00c0c7010c0c00181860703181818c1860606181c0c0000000000000000000103c06000000000000000000000000000000000000000000000000000000000061c06000000
% fff00000000c0c3830c0c00181860386181818c186070e180e180000000000000000000301c02000000000000000000000000000000000000000000000000000000000040c02000000
% ffe00000000c0c1c60c0c001e30703fc181818fff767ff9c0ff000000000000000000003ff8030000000000000000000000000000000000000000000000000000000000c0803000000
% 7fe00000001fbe0fc1fbe001fe1fc1f83f7e7c7de383e67f07e000000000000000000000018030000000000000000000000000000000000000000000000000000000000ff803000000
% 3fc00000000000000000000180000000000000000000000000000000000000000000000000803000000000000000000000000000000000000000000000000000000000000803000000
% 0f000000000000000000000180000000000000000000000000000000000000000000000000803f00000000000000000000000000000000000000000000000000000000000803000000
% 00000000000000000000000180000000000000000000000000000000000000000000000000c06ffc000000000000000000000000000000000000000000000000000000000c06000000
% 0000000000000000000000018000000000000000000000000000000000000000000000000060e03ff0000000000000000000000000000000000000000000000000000000060e000000
% 000000000000000000000001c00000000000000000000000000000000000000000000000003fc000ffc0000000000000000000000000000000000000000000000000000003fc000000
% 000000000000000000000007f00000000000000000000000000000000000000000000000000f000003ff000000000000000000000000000000000000000000000000000000f0000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc000000000000000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff00000000000000000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fc000000000000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff00000000000000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fc000000000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff00000000000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fc000000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000000000000000020000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000000020000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000000000000020000000
% 0000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000020000000
% 000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000000000020000000
% 000000000009e0270f809f1e03e0fde3e09c3e00000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000020000000
% 00000000003bf9ef99c3f3e306706060e7be670000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000000020000000
% 3f801fff801e387b20e1c1c38c30606061ec8380000000000000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000020000000
% 71c01fff80181c7060e181818c30606061c1838000000000000000000000000000000000000000000000000000000000000000000000000007fe000000000000000000000020000000
% d560000000181c607fe18181883060606181ff80000000000000000000000000000000000000000000000000000000000000000000000000000ff80000000000000000000020000000
% c020000000180c606001818180f060606181800000000000000000000000000000000000000000000000000000000000000000000000000000003fe000000000000000000020000000
% d570000000180c60600181818330606061818000000000000000000000000000000000000000000000000000000000000000000000000000000000ff800000000000000003fc000000
% a230000000180c60600181818c3060606181800000000000000000000000000000000000000000000000000000000000000000000000000000000003fe000000000000000108000000
% d5701fff80180c6070118181983060606181c040000000000000000000000000000000000000000000000000000000000000000000000000000000000ff80000000000000198000000
% 80301fff8018186070318181983060606181c0c000000000000000000000000000000000000000000000000000000000000000000000000000000000003fe000000000000198000000
% d5600000001818603861818198306070e180e180000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc0000000000090000000
% 60e00000001e30703fc181819ffe767ff9c0ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff000000000090000000
% 3fc00000001fe1fc1f83f7e7cfbc383e67f07e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc00000000f0000000
% 0f0000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff0000800f0000000
% 0000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc00e03f8000000
% 000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff0f871c000000
% 0000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff9ec06000000
% 00000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000387c02000000
% 00000000007f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101803000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff803000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200803000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000803000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c06000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060e000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
247.61 539.53 249.86 541.48 254.41 531.68 245.36 537.58 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
229 561 247.45 539.72 2 L
4 X
V
2 Z
0 X
N
499.61 538.53 501.86 540.48 506.41 530.68 497.36 536.58 4 Y
0 Z
N
481 560 499.45 538.72 2 L
4 X
V
2 Z
0 X
N
562 428.29 564.98 428.29 562 417.91 559.02 428.29 4 Y
0 Z
N
562 458 562 428.54 2 L
2 Z
N
562 704.28 564.98 704.28 562 693.91 559.02 704.28 4 Y
0 Z
N
562 754 562 704.53 2 L
2 Z
N
562 470.29 564.98 470.29 562 459.91 559.02 470.29 4 Y
0 Z
N
562 500 562 470.54 2 L
2 Z
N
562 517.29 564.98 517.29 562 506.91 559.02 517.29 4 Y
0 Z
N
562 529 562 517.54 2 L
2 Z
N
562 542.29 564.98 542.29 562 531.91 559.02 542.29 4 Y
0 Z
N
562 573 562 542.54 2 L
2 Z
N
562 626.29 564.98 626.29 562 615.91 559.02 626.29 4 Y
0 Z
N
562 644 562 626.54 2 L
2 Z
N
562 591.29 564.98 591.29 562 580.91 559.02 591.29 4 Y
0 Z
N
562 611 562 591.54 2 L
2 Z
N
562 660.29 564.98 660.29 562 649.91 559.02 660.29 4 Y
0 Z
N
562 689 562 660.54 2 L
2 Z
N
443 516.29 445.98 516.29 443 505.91 440.02 516.29 4 Y
0 Z
N
443 528 443 516.54 2 L
2 Z
N
443 546.29 445.98 546.29 443 535.91 440.02 546.29 4 Y
0 Z
N
443 577 443 546.54 2 L
2 Z
N
443 592.29 445.98 592.29 443 581.91 440.02 592.29 4 Y
0 Z
N
443 612 443 592.54 2 L
2 Z
N
444 627.29 446.98 627.29 444 616.91 441.02 627.29 4 Y
0 Z
N
444 645 444 627.54 2 L
2 Z
N
506 542.29 508.98 542.29 506 531.91 503.02 542.29 4 Y
0 Z
N
506 573 506 542.54 2 L
2 Z
N
506 591.29 508.98 591.29 506 580.91 503.02 591.29 4 Y
0 Z
N
506 611 506 591.54 2 L
2 Z
N
387 543.29 389.98 543.29 387 532.91 384.02 543.29 4 Y
0 Z
N
387 574 387 543.54 2 L
2 Z
N
387 592.29 389.98 592.29 387 581.91 384.02 592.29 4 Y
0 Z
N
387 612 387 592.54 2 L
2 Z
N
310 471.29 312.98 471.29 310 460.91 307.02 471.29 4 Y
0 Z
N
310 501 310 471.54 2 L
2 Z
N
310 518.29 312.98 518.29 310 507.91 307.02 518.29 4 Y
0 Z
N
310 530 310 518.54 2 L
2 Z
N
310 543.29 312.98 543.29 310 532.91 307.02 543.29 4 Y
0 Z
N
310 574 310 543.54 2 L
2 Z
N
310 627.29 312.98 627.29 310 616.91 307.02 627.29 4 Y
0 Z
N
310 645 310 627.54 2 L
2 Z
N
310 592.29 312.98 592.29 310 581.91 307.02 592.29 4 Y
0 Z
N
310 612 310 592.54 2 L
2 Z
N
310 661.29 312.98 661.29 310 650.91 307.02 661.29 4 Y
0 Z
N
310 690 310 661.54 2 L
2 Z
N
255 546.29 257.98 546.29 255 535.91 252.02 546.29 4 Y
0 Z
N
255 576 255 546.54 2 L
2 Z
N
255 589.29 257.98 589.29 255 578.91 252.02 589.29 4 Y
0 Z
N
255 612 255 589.54 2 L
2 Z
N
191 519.29 193.98 519.29 191 508.91 188.02 519.29 4 Y
0 Z
N
191 530 191 519.54 2 L
2 Z
N
191 547.29 193.98 547.29 191 536.91 188.02 547.29 4 Y
0 Z
N
191 575 191 547.54 2 L
2 Z
N
191 591.29 193.98 591.29 191 580.91 188.02 591.29 4 Y
0 Z
N
191 613 191 591.54 2 L
2 Z
N
191 626.29 193.98 626.29 191 615.91 188.02 626.29 4 Y
0 Z
N
191 646 191 626.54 2 L
2 Z
N
136 592.29 138.98 592.29 136 581.91 133.02 592.29 4 Y
0 Z
N
136 613 136 592.54 2 L
2 Z
N
136 543.29 138.98 543.29 136 532.91 133.02 543.29 4 Y
0 Z
N
136 573 136 543.54 2 L
2 Z
N
321.92 695.83 322.67 692.95 311.88 693.23 321.18 698.71 4 Y
0 Z
N
562 758 322.16 695.89 2 L
4 X
V
2 Z
0 X
N
547.87 416.85 548.36 419.78 558.11 415.15 547.38 413.91 4 Y
0 Z
N
306 457 547.62 416.89 2 L
4 X
V
2 Z
0 X
N
550.45 460.99 551.5 463.77 560.15 457.32 549.39 458.21 4 Y
0 Z
N
442 502 550.21 461.08 2 L
4 X
V
2 Z
0 X
N
566 693 498 669 445 648 3 Y
4 X
V
455.49 652.16 456.59 649.39 445.84 648.33 454.39 654.92 4 Y
0 Z
0 X
N
566 693 498 669 455.72 652.25 3 L
2 Z
N
551.76 506.75 553.02 509.45 561.18 502.38 550.51 504.05 4 Y
0 Z
N
506 528 551.54 506.86 2 L
4 X
V
2 Z
0 X
N
516.47 618.14 518.09 615.64 507.76 612.49 514.85 620.64 4 Y
0 Z
N
561 647 516.68 618.27 2 L
4 X
V
2 Z
0 X
N
546.16 592.72 548.46 590.83 539.58 584.7 543.86 594.61 4 Y
0 Z
N
562 612 546.32 592.91 2 L
4 X
V
2 Z
0 X
N
554.61 538.53 556.86 540.48 561.41 530.68 552.36 536.58 4 Y
0 Z
N
536 560 554.45 538.72 2 L
4 X
V
2 Z
0 X
N
538 572.04 540.64 572.04 538 562.81 535.36 572.04 4 Y
1 H
0 Z
N
538 588 538 572.54 2 L
4 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 561.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 561.5 576.5 A
7 X
90 450 5.4 5.4 561.5 612.5 G
0 X
90 450 5.4 5.4 561.5 612.5 A
7 X
90 450 5.4 5.4 561.5 529.5 G
0 X
90 450 5.4 5.4 561.5 529.5 A
7 X
90 450 5.4 5.4 538.5 558.5 G
0 X
90 450 5.4 5.4 538.5 558.5 A
7 X
90 450 5.4 5.4 538.5 584.5 G
0 X
90 450 5.4 5.4 538.5 584.5 A
491.16 592.72 493.46 590.83 484.58 584.7 488.86 594.61 4 Y
0 Z
N
507 612 491.32 592.91 2 L
4 X
V
2 Z
0 X
N
484 570.04 486.64 570.04 484 560.81 481.36 570.04 4 Y
1 H
0 Z
N
484 586 484 570.54 2 L
4 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 506.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 506.5 576.5 A
7 X
90 450 5.4 5.4 506.5 529.5 G
0 X
90 450 5.4 5.4 506.5 529.5 A
7 X
90 450 5.4 5.4 483.5 558.5 G
0 X
90 450 5.4 5.4 483.5 558.5 A
7 X
90 450 5.4 5.4 483.5 584.5 G
0 X
90 450 5.4 5.4 483.5 584.5 A
7 X
90 450 5.4 5.4 506.5 612.5 G
0 X
90 450 5.4 5.4 506.5 612.5 A
7 X
90 450 5.4 5.4 561.5 646.5 G
0 X
90 450 5.4 5.4 561.5 646.5 A
7 X
90 450 5.4 5.4 561.5 502.5 G
0 X
90 450 5.4 5.4 561.5 502.5 A
432.76 506.75 434.02 509.45 442.18 502.38 431.51 504.05 4 Y
0 Z
N
387 528 432.54 506.86 2 L
7 X
V
2 Z
0 X
N
397.47 618.14 399.09 615.64 388.76 612.49 395.85 620.64 4 Y
0 Z
N
442 647 397.68 618.27 2 L
4 X
V
2 Z
0 X
N
427.16 592.72 429.46 590.83 420.58 584.7 424.86 594.61 4 Y
0 Z
N
443 612 427.32 592.91 2 L
4 X
V
2 Z
0 X
N
436.61 539.53 438.86 541.48 443.41 531.68 434.36 537.58 4 Y
0 Z
N
418 561 436.45 539.72 2 L
4 X
V
2 Z
0 X
N
420 571.04 422.64 571.04 420 561.81 417.36 571.04 4 Y
1 H
0 Z
N
420 587 420 571.54 2 L
4 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 442.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 442.5 576.5 A
7 X
90 450 5.4 5.4 442.5 612.5 G
0 X
90 450 5.4 5.4 442.5 612.5 A
7 X
90 450 5.4 5.4 442.5 529.5 G
0 X
90 450 5.4 5.4 442.5 529.5 A
7 X
90 450 5.4 5.4 419.5 558.5 G
0 X
90 450 5.4 5.4 419.5 558.5 A
7 X
90 450 5.4 5.4 419.5 584.5 G
0 X
90 450 5.4 5.4 419.5 584.5 A
372.16 592.72 374.46 590.83 365.58 584.7 369.86 594.61 4 Y
0 Z
N
388 612 372.32 592.91 2 L
4 X
V
2 Z
0 X
N
380.61 537.53 382.86 539.48 387.41 529.68 378.36 535.58 4 Y
0 Z
N
362 559 380.45 537.72 2 L
4 X
V
2 Z
0 X
N
365 571.04 367.64 571.04 365 561.81 362.36 571.04 4 Y
1 H
0 Z
N
365 587 365 571.54 2 L
4 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 387.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 387.5 576.5 A
7 X
90 450 5.4 5.4 387.5 529.5 G
0 X
90 450 5.4 5.4 387.5 529.5 A
7 X
90 450 5.4 5.4 364.5 558.5 G
0 X
90 450 5.4 5.4 364.5 558.5 A
7 X
90 450 5.4 5.4 364.5 584.5 G
0 X
90 450 5.4 5.4 364.5 584.5 A
7 X
90 450 5.4 5.4 387.5 612.5 G
0 X
90 450 5.4 5.4 387.5 612.5 A
4 X
90 450 5.4 5.4 442.5 646.5 G
0 X
90 450 5.4 5.4 442.5 646.5 A
7 X
90 450 5.4 5.4 442.5 502.5 G
0 X
90 450 5.4 5.4 442.5 502.5 A
4 X
90 450 5.4 5.4 561.5 691.5 G
0 X
90 450 5.4 5.4 561.5 691.5 A
7 X
90 450 5.4 5.4 561.5 457.5 G
0 X
90 450 5.4 5.4 561.5 457.5 A
296.45 461.99 297.5 464.77 306.15 458.32 295.39 459.21 4 Y
0 Z
N
188 503 296.21 462.08 2 L
4 X
V
2 Z
0 X
N
203.58 650.93 204.61 648.14 193.85 647.32 202.54 653.72 4 Y
0 Z
N
314 692 203.81 651.02 2 L
4 X
V
2 Z
0 X
N
299.76 506.75 301.02 509.45 309.18 502.38 298.51 504.05 4 Y
0 Z
N
254 528 299.54 506.86 2 L
4 X
V
2 Z
0 X
N
264.47 618.14 266.09 615.64 255.76 612.49 262.85 620.64 4 Y
0 Z
N
309 647 264.68 618.27 2 L
4 X
V
2 Z
0 X
N
294.16 592.72 296.46 590.83 287.58 584.7 291.86 594.61 4 Y
0 Z
N
310 612 294.32 592.91 2 L
4 X
V
2 Z
0 X
N
303.61 538.53 305.86 540.48 310.41 530.68 301.36 536.58 4 Y
0 Z
N
285 560 303.45 538.72 2 L
4 X
V
2 Z
0 X
N
287 571.04 289.64 571.04 287 561.81 284.36 571.04 4 Y
1 H
0 Z
N
287 587 287 571.54 2 L
4 X
V
2 Z
0 X
N
4 X
90 450 5.4 5.4 309.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 309.5 576.5 A
4 X
90 450 5.4 5.4 309.5 612.5 G
0 X
90 450 5.4 5.4 309.5 612.5 A
7 X
90 450 5.4 5.4 309.5 529.5 G
0 X
90 450 5.4 5.4 309.5 529.5 A
4 X
90 450 5.4 5.4 286.5 558.5 G
0 X
90 450 5.4 5.4 286.5 558.5 A
4 X
90 450 5.4 5.4 286.5 584.5 G
0 X
90 450 5.4 5.4 286.5 584.5 A
239.16 592.72 241.46 590.83 232.58 584.7 236.86 594.61 4 Y
0 Z
N
255 612 239.32 592.91 2 L
4 X
V
2 Z
0 X
N
232 571.04 234.64 571.04 232 561.81 229.36 571.04 4 Y
1 H
0 Z
N
232 587 232 571.54 2 L
4 X
V
2 Z
0 X
N
4 X
90 450 5.4 5.4 254.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 254.5 576.5 A
7 X
90 450 5.4 5.4 254.5 529.5 G
0 X
90 450 5.4 5.4 254.5 529.5 A
4 X
90 450 5.4 5.4 231.5 558.5 G
0 X
90 450 5.4 5.4 231.5 558.5 A
4 X
90 450 5.4 5.4 231.5 584.5 G
0 X
90 450 5.4 5.4 231.5 584.5 A
4 X
90 450 5.4 5.4 254.5 612.5 G
0 X
90 450 5.4 5.4 254.5 612.5 A
4 X
90 450 5.4 5.4 309.5 646.5 G
0 X
90 450 5.4 5.4 309.5 646.5 A
7 X
90 450 5.4 5.4 309.5 502.5 G
0 X
90 450 5.4 5.4 309.5 502.5 A
177.76 508.75 179.02 511.45 187.18 504.38 176.51 506.05 4 Y
0 Z
N
132 530 177.54 508.86 2 L
4 X
V
2 Z
0 X
N
145.47 620.14 147.09 617.64 136.76 614.49 143.85 622.64 4 Y
0 Z
N
190 649 145.68 620.27 2 L
4 X
V
2 Z
0 X
N
175.16 592.72 177.46 590.83 168.58 584.7 172.86 594.61 4 Y
0 Z
N
191 612 175.32 592.91 2 L
4 X
V
2 Z
0 X
N
184.61 538.53 186.86 540.48 191.41 530.68 182.36 536.58 4 Y
0 Z
N
166 560 184.45 538.72 2 L
4 X
V
2 Z
0 X
N
167 570.04 169.64 570.04 167 560.81 164.36 570.04 4 Y
1 H
0 Z
N
167 586 167 570.54 2 L
4 X
V
2 Z
0 X
N
90 450 5.4 5.4 190.5 576.5 G
0.5 H
90 450 5.4 5.4 190.5 576.5 A
90 450 5.4 5.4 190.5 612.5 G
90 450 5.4 5.4 190.5 612.5 A
7 X
90 450 5.4 5.4 190.5 529.5 G
0 X
90 450 5.4 5.4 190.5 529.5 A
90 450 5.4 5.4 167.5 558.5 G
90 450 5.4 5.4 167.5 558.5 A
90 450 5.4 5.4 167.5 584.5 G
90 450 5.4 5.4 167.5 584.5 A
120.16 592.72 122.46 590.83 113.58 584.7 117.86 594.61 4 Y
0 Z
N
136 612 120.32 592.91 2 L
4 X
V
2 Z
0 X
N
127.61 539.53 129.86 541.48 134.41 531.68 125.36 537.58 4 Y
0 Z
N
109 561 127.44 539.72 2 L
4 X
V
2 Z
0 X
N
113 586 113 574 113 559 3 Y
4 X
V
113 570.04 115.64 570.04 113 560.81 110.36 570.04 4 Y
1 H
0 Z
0 X
N
113 586 113 574 113 570.54 3 L
2 Z
N
90 450 5.4 5.4 135.5 576.5 G
0.5 H
90 450 5.4 5.4 135.5 576.5 A
90 450 5.4 5.4 135.5 529.5 G
90 450 5.4 5.4 135.5 529.5 A
90 450 5.4 5.4 112.5 558.5 G
90 450 5.4 5.4 112.5 558.5 A
90 450 5.4 5.4 112.5 584.5 G
90 450 5.4 5.4 112.5 584.5 A
90 450 5.4 5.4 135.5 612.5 G
90 450 5.4 5.4 135.5 612.5 A
90 450 5.4 5.4 190.5 646.5 G
90 450 5.4 5.4 190.5 646.5 A
7 X
90 450 5.4 5.4 190.5 502.5 G
0 X
90 450 5.4 5.4 190.5 502.5 A
90 450 5.4 5.4 309.5 691.5 G
90 450 5.4 5.4 309.5 691.5 A
7 X
90 450 5.4 5.4 309.5 457.5 G
0 X
90 450 5.4 5.4 309.5 457.5 A
90 450 5.4 5.4 561.5 757.5 G
90 450 5.4 5.4 561.5 757.5 A
7 X
90 450 5.4 5.4 561.5 414.5 G
0 X
90 450 5.4 5.4 561.5 414.5 A
90 450 5.4 5.4 13.5 461.5 G
90 450 5.4 5.4 13.5 461.5 A
4 X
90 450 5.4 5.4 13.5 426.5 G
0 X
90 450 5.4 5.4 13.5 426.5 A
0 28 Q
(= non-premature) 27 457 T
(= premature) 26 420.91 T
1 F
(s) 335 752 T
0 22.4 Q
(p) 351.88 745 T
[3.503 4.504] 1.751 I
552 772 M
 461.97 752.49 371.47 730.33 284 700.36 D
 232.49 682.7 181.43 665.45 136 633.34 D
 107.61 613.28 71.46 584.77 94.17 547 D
 107.17 525.38 144.48 498.14 157.35 518 D
 171.1 539.23 199.55 570.38 216.4 548 D
 231.58 527.86 251.57 548.69 264 542.04 D
 300.29 522.6 330.56 561.96 340.03 591 D
 361.01 655.33 424.15 619.52 469 643.4 D
 504.03 662.05 570.28 652.21 582.67 690 D
 592.7 720.57 595.28 777.88 550 772 D
N
0 0 0 1 0 0 0 K
J
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 2107 w @beginspecial 45 @llx 408 @lly 593
@urx 773 @ury 1440 @rhi @setspecial
%%BeginDocument: figures/dag5.epsi
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffe0000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fd07c000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f8000f000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff444447800000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fe0000000e00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fd01010101600000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc000000000300000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fc4444444444700000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff00000000fe00100000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff011101111ff10180000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000003ff80180000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc44444444447ffc4580000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f8000000000003ffc0100000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff01010101010103ffc1100000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fe000000000000003ffc0300000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc44444444444445e7ffc4700000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc00000000000001fc3ff80600000000
% 00000000000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000007f0101010101010103c11ff90600000000
% 00000000000000000000000000000000000000000000000000000000000000000000738000000000000000000000000000000007f000000000000001c0000ff00c00000000
% 0000000000000000000000000000000000000000000000000000000000000000000030c0000000000000000000000000000000ff444444444444444fc44447c44c00000000
% 0000000000000000000000000000000000000000000000000000000000000000000070c000000000000000000000000000000fe0000000000000007c000000801800000000
% 0000000000000000000000000000000000000000000000000000000000000000000060c00000000000000000000000000001fe101010101010101010101010903000000000
% 0000000000000000000000000000000000000000000000000000000000000000000060c0000000000000000000000000001fc000000000000000f800000000806000000000
% 00000000000000000000000000000000000000000000000000000000000000000000e18000000000000000000000000003fc444444444444444fc444444444c4e000000000
% 00000000000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000003f80000000000000000e000000000080c000000000
% 00000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000003f9110111011101110e110111011101918000000000
% 00000000000000000000000000000000000000000000000000000000000000000000c00380000000000000000000007f0000000000000000fe000000000000830000000000
% 00000000000000000000000000000000000000000000000000000000000000000001c0018000000000000000000007f44444444444444447e4444444444444c60000000000
% 00000000000000000000000000000000000000000000000000000000000000000001c001800000000000000000007f000000000000000000000000000000009c0000000000
% 00000000000000000000000000000000000000000000000000000000000000000001800100000000000000000007f01010101010101017d010101010101010b80000000000
% 0000000000000000000000000000000000000000000000000000000000000000000180030000000000000000007f00000000000000007e0000000000000000f00000000000
% 00000000000000000000000000000000000000000000000000000000000000000007c003000000000000000007f44444444444444444744444444444444444e00000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000300000000000000007f000000000000000078000000000000000001800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000030000000000000007e10101010101010107f1010101010101010107800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000006000000000000007e00000000000000000f0000000000000000000e800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000600000000000003e444444444444444440444444444444444444478800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000040000000000007c00000000000000003e00000000000000000000f0800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000001f000000000003f01010101010101011f010101010101010101011c0800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000001000000000000000000000700800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000003f44444444444444447c4444444444444444444445e00800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000001f80000000000000003f8000000000000000000000f000800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000001f91101110111011101790111011101110111011107c000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000001800000000000000000000007f0000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000fc4444444444444445fc444444444444444444447ff00000800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000000f80000000000000000000fffe000000800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000007e101010101010101010101010101010101011fff800000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000001e000000000000000000fff00000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000003f4444444444444445fc44444444444444447fe0000000000000800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000001f00000000000000001c0000000000000000ff800000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000f8101010101010101c10101010101010103ff0000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000007c000000000000000fc0000000000000007fc00000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000003e4444444444444447c444444444444444ff0000000000000000000800000000000
% 00000000000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000fe00000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000f810101010101010f8101010101010101fe000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000fc00000000000000fe000000000000001fc0000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000007e444444444444444e444444444444445fc00000000000000000000000800000000000
% 00000000000000000000000000000000000000000000000000000000000000000003f00000000000000e0000000000000003fc000000000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000001f811101110111017f011101110111011f80000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000f800000000000001e000000000000001f800000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000007c444444444444444444444444444445f8000000000000000000000000000800000000000
% 00000000000000000000000000000000000000000000000000000000000000003e00000000000007c000000000000000fc0000000000000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000f01010101010107f101010101010101fc00000000000000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000007c000000000000070000000000000007e000000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000001e444444444444784444444444444447e0000000000000000000000000000000a10000000000
% 00000000000000000000000000000000000000000000000000000000000000f8000000000003f0000000000000007e00000000000000000000000000000001fd8000000000
% 00000000000000000000000000000000000000000000000000000000000007c101010101010f0101010101010103e00000000000000000000000000000000fb980007f8000
% 0000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000001f000000000000000000000000000000003cf0c00039c000
% 000000000000000000000000000000000000000000000000000000000000fc44444444447e4444444444444444f800000000000000000000000000000001fff0e000186000
% 000000000000000000000000000000000000000000000000000000000003c00000000001f00000000000000007c000000000000000000000000000000007c5e1e000386000
% 00000000000000000000000000000000000000000000000000000000001f10101010101190101010101010107e000000000000000000000000000000001f87e3b000306000
% 0000000000000000000000000000000000000000000000000000000000f80000000003c00000000000000003f000000000000000000000000000000001f707673000306000
% 0000000000000000000000000000000000000000000000000000000003c4444447447fc4444444444444445f800000000000000000000000000000000f8e0e4e100070c000
% 000000000000000000000000000000000000000000000000000000001f0000000700780000000000000000f8000000000000000000000000000000007c1c1e5c18007f8000
% 00000000000000000000000000000000000000000000000000000000f91101111d19011101110111011107c000000000000000000000000000000003f8383bf83800600000
% 00000000000000000000000000000000000000000000000000000003c00000fe39f800000000000000003e000000000000000000000000000000001f70707ff07800600020
% 0000000000000000000000000000000000000000000000000000000f444445c7e5c44444444444444445f000000000000000000000000000000001f8e0e0fff0f800e00060
% 0000000000000000000000000000000000000000000000000000007800000301c080000000000000000f800000000000000000000000000000000fc1c1c1fff9d800e000e0
% 000000000000000000000000000000000000000000000000000001f01010130090d0101010101010107c00000000000000000000000000000000ff838383bffb9800c00160
% 0000000000000000000000000000000000000000000000000000078000000200ffc000000000000003e000000000000000000000000000000007e70707073fff1800c00260
% 00000000000000000000000000000000000000000000000000001e4444444600c4444444444444445f000000000000000000000000000000003e0e0e0e0e3ffe1803e004c0
% 0000000000000000000000000000000000000000000000000000780000000200c000000000000000f800000000000000000000000000000003fc1c1c1c1c3ffc18000000c0
% 0000000000000000000000000000000000000000000000000003c10101010200c101010101010107e00000000000000000000000000000001f3838383839fffc38000000c0
% 000000000000000000000000000000000000000000000000000f000000001f01800000000000001f00000000000000000000000000000001f8707070707ffff87000001fe0
% 000000000000000000000000000000000000000000000000003c44444444fd83c4444444444444f80000000000000000000000000000000fe0e0e0e0e0fcfff8f000000180
% 00000000000000000000000000000000000000000000000000f000000003c0ff00000000000007c0000000000000000000000000000000fdc1c1c1c1c181cff1f000000180
% 00000000000000000000000000000000000000000000000003d010101017103c1010101010103e00000000000000000000000000000007c383838383880383c3a000000100
% 0000000000000000000000000000000000000000000000001e00000000000008000000000001f00000000000000000000000000000007f07070707077f0707876000000000
% 0000000000000000000000000000000000000000000000007c4444444784444c44444444444780000000000000000000000000000003fe0e0e0e0e0fee0e0e8e6000000000
% 000000000000000000000000000000000000000000000001e00000001f00000800000000003e0000000000000000000000000000001f1c1c1c1c1c1f1c1c1c9cc000000000
% 00000000000000000000000000000000000000000000000781110111791101190111011101f0000000000000000000000000000000f8383838383800383838b98000000000
% 00000000000000000000000000000000000000000000001e00000001e0000008000000000f80000000000000000000000000000007f0707070707310707070f18000000000
% 0000000000000000000000000000000000000000000000f4444444444444444c444444447c0000000000000000000000000000003ee0e0e0e0e0ef60e0e0e0e30000000000
% 0000000000000000000000000000000000000000000003c0000000600000000800000001e0000000000000000000000000000001f1c1c1c1c1c1fdc1c1c1c1c60000000000
% 000000000000000000000000000000000000000000000f10101013f0101010181010101f8000000000000000000000000000000f838383838383e3838383838c0000000000
% 000000000000000000000000000000000000000000003c0000001f00000000080000007c0000000000000000000000000000007f0707070707000707070707b80000000000
% 00000000000000000000000000000000000000000000f44444447c444444444c444447e0000000000000000000000000000001ee0e0e0e0e0e420e0e0e0e0ef00000000000
% 000000000000000000000000000000000000000000078000000000000000000800000f0000000000000000000000000000000f9c1c1c1c1c1fdc1c1c1c1c1fc00000000000
% 0000000000000000000000000000000000000000003f0101011901010101010901017c0000000000000000000000000000003c38383838383f38383838383f800000000000
% 000000000000000000000000000000000000000000f0000000780000000000080003e0000000000000000000000000000001f070707070707870707070707c800000000000
% 000000000000000000000000000000000000000007c4444447e444444444444c445f00000000000000000000000000000007e0e0e0e0e0e000e0e0e0e0e0f0800000000000
% 00000000000000000000000000000000000000003e0000000f0000000000000800780000000000000000000000000000001fc1c1c1c1c1d8c1c1c1c1c1c3c0800000000000
% 0000000000000000000000000000000000000001f01010100c1010101010101813e0000000000000000000000000000000738383838383fb83838383838f00800000000000
% 000000000000000000000000000000000000000f8000000000000000000000081e00000000000000000000000000000001c7070707070f0707070707073c00800000000000
% 000000000000000000000000000000000000007c4444444e444444444444444df8000000000000000000000000000000070e0e0e0e0e0c0e0e0e0e0e0ef000800000000000
% 00000000000000000000000000000000000003e00000007c000000000000000fc00000000000000000000000000000001c1c1c1c1c1c001c1c1c1c1c1fc000800000000000
% 0000000000000000000000000000000000001f11011103f1011101110111017c0000000000000000000000000000000078383838383c1838383838383f0000800000000000
% 000000000000000000000000000000000001f8000000030000000000000007e800000000000000000000000000000001f0707070707c7070707070707c0000800000000000
% 00000000000000000000000000000000000fc444444444444444444444447e0800000000000000000000000000000007e0e0e0e0e1f0e0e0e0e0e0e0f00000800000000000
% 0000000000000000000000000000000000fc000000038000000000000007e0080000000000000000000000000000001dc1c1c1c1c781c1c1c1c1c1c3c00000800000000000
% 0000000000000000000000000000000007f01010101f10101010101010fe00081800000000000000000000000000003b83838383808383838383838f000000800000000000
% 000000000000000000000000000000007e000000007c0000000000000fe000fffc000000000000000000000000000067070707070307070707070778000000800000000000
% 00000000000000000000000000000003f444444444e4444444444445fe00007fc70000000000000000000000000000ce0e0e0e0f0e0e0e0e0e0e0fe000000ff00000000000
% 0000000000000000000000000000001f00000000000000000000001fc00003ff838007f800000000000000000000019c1c1c1c3e1c1c1c1c1c1c1f80000004200000000000
% 000000000000000000000000000001f90101010171010101010101fc00001fe7c1c0039c0000000000000000000003b8383838f03838383838383e00000006600000000000
% 00000000000000000000000000000fc000000001e000000000001f800000f8e4e0c00186000000000000000000000370707071d0707070707070f000000006600000000000
% 00000000000000000000000000007c444444444fc44444444447f8000007f074706003860000000000000000000006e0e0f8e0e0e0e0e0e0e0e3c000000002400000000000
% 0000000000000000000000000003e0000000c01c00000000001f8000003e383c383003060000000000000000000007c1c1f9c1c1c1c1c1c1c1df0000000002400000000000
% 000000000000000000000000001f10101011d0101010101010f8000000fc1c3c1c300306000000000000000000000f8383fbc3838383838383f80000000003c00000000000
% 00000000000000000000000000f8000000034c00000000000fc00000078e0e1e0e18070c000000000000000000000f0707cf07070707070707e00000000003c00000000000
% 00000000000000000000000007c444447f4e7c44444444447e0000001f0707ff071807f8000000000000000000000e0fff8e0e0e0e0e0e0e0f00000000000fe00000000000
% 0000000000000000000000001e000000e39c600000000003e00000007b8383ff83880600000000000000000000000c1e3f1e1c1c1c1c1c1c7c00000000001c700000000000
% 000000000000000000000000f911011180f921110111011f00000003c1c1c3ffc1cc06003c00000000000000000018380e3f383838383839e0000000000030180000000000
% 000000000000000000000007c000000180603000000000780000000fe0e0e3ffe0e80e0046000000000000000000187807ff70707070707f80000000000030080000000000
% 00000000000000000000001e44444445007ff444444445e00000003c707073fff0780e008200000000000000000018f006e0e0e0e0e0e0fc000000000000200c0000000000
% 000000000000000000000078000000010060000000000f80000000f838383bfff8380c000200000000000000000011d007c1c1c1c1c1c3e0000000000000200c0000000000
% 0000000000000000000001f0101010110070101010103c00000003dc1c1c1fffdc180c00020000000000000000001b900783838383839f00000000000000200c0000000000
% 000000000000000000000f0000000001006000000000f0000000070e0e0e0fffce183e00040000000000000000001f10070707070707f800000000000000200c0000000000
% 000000000000000000003c444444447d80c444444447800000001f07070703ff87300000080000000000000000001e180e0e0e0e0e0fc00000000000000030180000000000
% 00000000000000000000f00000000070c1c00000000f000000007b83838383ff83e00000100000000000000000001c1c1c1c1c1c1cfc000000000000000018380000000000
% 00000000000000000001c101010101c17f810101011c00000001e1c1c1c1f1ffc1e00000200000000000000000000bbff83838383fe000000000000000070ff00000000000
% 000000000000000000070000000003801e000000007000000003e0e0e0e0e0fce1c00000400000000000000000000f71f0707070fe00000000000000000e03c00000000000
% 0000000000000000001e4444444446444444444444e00000000e70707073f07873800000840000000000000000001ce0e0e0e0ffe000000000000000003800800000000000
% 000000000000000000780000000000000400000003800000001c3838383f38383f000001fc0000000000000000003fc1e1c1c7fc0000000000000000007000800000000000
% 000000000000000000f0101010101010141010101f000000007c1c1c1c1c1c1c1c000000000000000000000000006383a383ff80000000000000000000c000800000000000
% 0000000000000000038000000000c000040000001c00000000ee0e0e0e0e0e0e380000000000000000000000000001ffffffc0000000000000000000000000800000000000
% 0000000000000000074444444447c4444444444478000000038707070707070fe000000000000000000000000000003fff8000000000000000000000000000800000000000
% 00000000000000000e000000000f00000400000060000000078383838383838bc00000000000000000000000000c0000200000000000000000000000180000800000000000
% 000000000000000039110111011d011105110111c00000000fc1c1c1c7c1c1cf00000000000000000000000000380000200000000000000000000000700000800000000000
% 00000000000000007000000000300000040000018000000038e0e0e0fee0e0fc00000000000000000000000000f00000200000000000000000000001e00000800000000000
% 0000000000000000c444444444044444444444470000000070707070787071f800000000000000000000000001c00000200000000000000000000003800000800000000000
% 000000000000000180000000000000000400000600000000f838383878383f8800000000000000000000000003000000200000000000000000000006000000800000000000
% 000000000000000710101010161010101410101c000000039c1c1c1c1c1c3e0800000000000000000000000000000000200000000000000000000000000000800000000000
% 000000000000000e000000001c00000004000038000000070e0e0e0c0e0ef00800000000000000000000000000000000200000000000000000000000000000800000000000
% 000000000000001c444444447c444444444444700000000f0707070f0707c008000000000000000000000000600000002000000000000000000000c0000000800000000000
% 000000000000003800000000e0000000040000600000001b838383bb83be00ff000000000000000000000001c0000003fc0000000000000000000380000000800000000000
% 000000000000007101010101c10101017f8101c000000031c1c1c1f1c1f000420000000000000000000000038000000108000000000000000000070000000ff00000000000
% 00000000000000e0000000000000000021000180000000e0e0e0e1e0e7800066f0000000000000000000000e00000001980000000000000000001c00000004200000000000
% 00000000000000c4444446404444444477444580000001f0707073f07c0000fff0000000000000000000001c00000001980000000000000000003800000006600000000000
% 0000000000000180000006300000000033000300000003b838383839f0000feea8000000000000000000000000000000900000000000000000000000000006600000000000
% 000000000000031010101e7010101010121013000000061c1c1c141f80007f755c000000000000000000600000000000900000000000000000c00000000002400000000000
% 000000000000060000001bc0000000001200060000000e0e0e0e6e3c0001eabeac000000000000000000630000000000f00000000000000000c60000000002400000000000
% 0000000000000c44444477c4444444445e44460000001f07071fe7f00007d57d5c000000000000000000e70000000000f00000000000000001ce0000000003c00000000000
% 0000000000000c00000071c0000000001e0004000000338383b78380001eaabaac007f80000000000001bc0000000000600000000000000003780000000003c00000000000
% 0000000000001911013fe3d1011101117f110c00000061c1ffe7c700007555ff560039c00000000003fb380000000007f000000000000007f670000000000fe00000000000
% 00000000000030000071de0000000000e3800c000000e0e0e3e3fc0001eaabffae00186000000000071f1c000000000e380000000000000e3e38000000001c700000000000
% 000000000000344444c07c444444444580c448000001f07180f7f80003d557ffd6003860000000000c063c00000000180c000000000000180c780000000030180000000000
% 000000000000600000c02000000000018040080000033839807c700007aaabffaa003060000000000c03e00000000018040000000000001807c00000000030080000000000
% 000000000000d01010803010101010110070180000061c1d007c60000d5557ffd70030600000000008038000000000100600000000000010070000000000200c0000000000
% 000000000000c000008030000000000100601800000e0e0f006ec0003aaaabffeb0070c00000000008030000000000100600000000000010060000000000200c0000000000
% 000000000001c444448034444444444500645800001f070700678000355557ffd5007f800000000008030000000000100600000000000010060000000000200c0000000000
% 000000000001800000803000000000010060180000338383006380006aaaabffeb8060000000000008030000000000100600000000000010060000000000200c0000000000
% 000000000003010101c061010101010180c118000071c1c180c10000d55557ffd5806001c00000000c060000000000180c000000000000180c000000000030180000000000
% 00000000000300000060e00000000000c1c0100000e0e0e0c1e30001aaaaabffab80e00260000000060e00000000000c1c0000000000000c1c000000000018380000000000
% 0000000000064444447fc444444444447fc4500000f070707ff30003555555ff5580e0002000000003fc000000000007f800000000000007f800000000000ff00000000000
% 0000000000060000000f0000000000001e00100001b838383e3a0006aaaaaabeaac0c0006000000000f0000000000001e000000000000001e0000000000003c00000000000
% 0000000000041010109210101010101114101000031c1c1d1c1e00075555575d55c0c000c00000000840000000000010400000000000001080000000000020800000000000
% 00000000000c0000018200000000000304001000060e0e0f0e0e000eaaaaaeaaaac3e003800000001840000000000030400000000000003080000000000060800000000000
% 00000000000c44444746444444444446444450000f0707070706001d55555d5d55c00000c000000030400000000000604000000000000060800000000000c0800000000000
% 0000000000080000070200000000000e040010001f83838f8786001aaaaabeaaaac000004000000070400000000000e040000000000000e0800000000001c0800000000000
% 0000000000190111071301110111011d0511100019c1c1cdc5c6003555555d5d55c000004000000060400000000000c040000000000000c080000000000180800000000000
% 00000000001800000c020000000000180400100030e0e0f8e4e6002aaaaabaaaaac0000040000000c040000000000180400000000000018080000000000300800000000000
% 00000000003444444c464444444444544444500070707050747600755555355d55400008800000008040000000000100400000000000010080000000000200800000000000
% 0000000000300000000200000000000004001000783838383c3e006aaaaa2aaaaac0001f000000000040000000000000400000000000000080000000000000800000000000
% 0000000000301010101210101010101014101800dc1c1c1c1c1e00d55554555d55400000000000000040000000000000400000000000000080000000000000800000000000
% 0000000000600000c00200000000018004001800ce0e0f8e0e0e00aaaaabaaaaaac000000000000c0040000000001800400000000000180080000000003000800000000000
% 000000000064445dc4464444444477c44444580187073787070601d55577555d554000000000019c0040000000033800400000000003380080000000067000800000000000
% 000000000040001f8002000000003f00040018018383bf83878601aaaafeaaaaaac00000000001f8004000000003f000400000000003f0008000000007e000800000000000
% 0000000000c1011f0103010101013f0105011803c1c1ffc1c5c60155557d555d55400000000001f0004000000003e000400000000003e0008000000007c000800000000000
% 0000000000c000370002000000006e0004001803e0e0eee0e4e203aaaafeaaaaaac0000000000370004000000006e000400000000006e000800000000dc000800000000000
% 0000000000c44467c47fc4444444474444445802707077707472035555df55ff554000000000023807f8000000047007f8000000000470008000000008e000800000000000
% 0000000001800063801080000000c7007f8018063838ff383c3a02aaabaeaaeaaac000000000063802100000000c700210000000000c700ff000000018e00ff00000000000
% 0000000001901ff610199010103fdc10311018061c3fdc1c1c1f03557fdd5577554000000001fe600330000003fcc0033000000003fcc00420000007f98004200000000000
% 00000000010038fc001980000071f800330008060e71fe0e7f8f06aae3faaaeeaac0000000038fc003300000071f800330000000071f80066000000e3f0006600000000000
% 000000000344603c444d444444c074447744480f07c077072707075580f5557555c0000000060380012000000c070001200000000c070006600000180e0006600000000000
% 00000000030060100009000000c020001200080f83c02383b38306ab806aaaaeaac0000000060100012000000c020001200000000c02000240000018040002400000000000
% 0000000007114019011f01110180311113110809c18031c1f3c305550075557d55c000000004018001e0000008030001e00000000803000240000010060002400000000000
% 0000000006004018000f0000008030001e000808e08030e0f2e106ab006aaabeaac000000004018001e0000008030001e000000008030003c0000010060003c00000000000
% 000000000444401c44464444448034445e44481870803070727105550075555d558000000004018000c0000008030000c000000008030003c0000010060003c00000000000
% 000000000c00401800060000008030000c000818388038383e3906ab006aaabaaa8000000004018000c0000008030000c00000000803000180000010060001800000000000
% 000000000c106030103f901010c070107f10181c1cc07c1c7f1d055580d555ff558000000006030003f800000c060007f00000000c060007f00000180c000fe00000000000
% 00000000080030700071c0000060e000e380081e0e60ee0ee38f86aac1eaabc7aa80000000030700071c0000060e000e38000000060e000e3800000c1c001c700000000000
% 000000001c445fe444c06444447fc44580c44817073fc70780c78d557fd55701d58000000001fe000c06000003fc00180c00000003fc00180c000007f80030180000000000
% 000000001800078000c02000000f000180400813838f838380438eaabeaaab00ab800000000078000c02000000f000180400000000f0001804000001e00030080000000000
% 0000000031010101018031010105010100610811c1c3c1c100618d5555555600d58000000000100008030000002000100600000000200010060000008000200c0000000000
% 0000000030000100008030000004000100600810e0e2e0e1006186aaaeaaaa00eb0000000000100008030000002000100600000000200010060000008000200c0000000000
% 0000000024444544448034444444444500644830707270710071855555555600d70000000000100008030000002000100600000000200010060000008000200c0000000000
% 0000000060000100008030000004000100601818383a3839007986aaaeaaaa00eb0000000000100008030000002000100600000000200010060000008000200c0000000000
% 000000007010111010c070101014101180d0181c1c1e1c1d80dd855555555701d7000000000010000c060000002000180c000000002000180c000000800030180000000000
% 00000000400001000060e00000040000c1c0181e0e0e0e0ec1cf06aaaeaaab83aa00000000001000060e00000020000c1c0000000020000c1c000000800018380000000000
% 00000000c4444544447fc444444444447fc45017070707077f870755555555ff560000000000100003fc000000200007f800000000200007f800000ff0000ff00000000000
% 00000000c0000100000f0000000400001e00101383bfc3839f8306aaffaaaabeae0000000001fe0000f0000003fc0001e000000000200001e0000004200003c00000000000
% 0000000081111ff101130111017f811105113011c1d1c1c1c5c307557555555d540000000000840000400000010800004000000003fc000080000006600000800000000000
% 0000000180000840000200000021000004003010e0f9e0e0e4e202aabbaaaaaaac0000000000cc000040000001980000400000000108000080000006600000800000000000
% 00000001c4444cc44446444444774444444460107079f070747603557755555d5c0000000000cc000040000001980000400000000198000080000002400000800000000000
% 0000000180000cc0000200000033000004006018383938383c3e03aabaaaaaaaac000000000048000040000000900000400000000198000080000003c00000800000000000
% 000000011010149010121010101210101410c01c1c1f1c1c1c1c03555f55555d58000000000078000040000000f00000400000000090000080000003c00000800000000000
% 000000010000078000020000001e00000400c01e0e0f0e0e0e1803aabeaaaaaab8000000000078000040000000f000004000000000f0000080000001800000800000000000
% 0000000344445fc444464444447fc4444445800f073f8707073001557f55555d580000000001fc000040000003f800004000000003f8000080000007f00000800000000000
% 00000003000038e0000200000071c0000403000f83f1c38387e001aae3aaaaaab000000000038e0000400000071c000040000000071c00008000000e380000800000000000
% 00000003010160310103010101c06101050e000dc1c061c1c5c001d580d5555d7000000000060300004000000c060000400000000c060000800000180c0000800000000000
% 00000002000060100002000000c02000041c000ce0c020e0ef0000eb806aaaaaa000000000060100004000000c020000400000000c02000080000018040000800000000000
% 000000024444401c444644444480344444780004708030707c0000d50075555d60000000000401800040000008030000400000000803000080000010060000800000000000
% 0000000600004018000200000080300007c0000638803839e400006b006aaaaae0000000000401800040000008030000400000000803000080000010060000800000000000
% 000000061010401810121010108030107f0000061c803c1f840000750075555dc0000000000401800040000008030000400000000803000080000010060000800000000000
% 0000000600004018000200000080300fe40000060e803e0e0400006b006aaaaac0000000000401800040000008030000400000000803000080000010060000800000000000
% 00000006444460344446444444c0647e0400000307c0670c0400003580d5555d8000000000060300004000000c060000400000000c060000800000180c0000800000000000
% 0000000600003070000200000060e0c00400000383e0e3980400003ac1eaaaab800000000003070000400000060e000040000000060e00008000000c1c0000800000000000
% 0000000701111ff101130111013fc38004000001c1ffc1d80400001d7fd5555f000000000001fe000040000003fc00004000000003fc000080000007f80000800000000000
% 00000006000007e000020000000f070004000000e0efe0f00400000abeaaaaab00000000000078000040000000f300004000000000f0000080000001e00000800000000000
% 00000006444444744446444444447c0004000000f07070700400000d5575555e000000000000000000400000000180004000000000060000800000000c0000800000000000
% 00000006000000000002000000001800040000007838382004000006aabaaaac00000000000003000040000000000000400000000003000080000000060000800000000000
% 00000006101010101012101010103000040000007c1c1420040000075555555c00000000000001800040000000000000400000000000000080000000000000800000000000
% 00000006000000040002000000006000040000003e0e0e6004000003aaa2aab800000000000000000040000000002000400000000000000080000000000000800000000000
% 0000000644444446444644444444e200040000001f07076004000001d555556800000000000000000040000000003000400000000000400080000000008000800000000000
% 0000000200000002000200000000c3007f8000000f8382c004000001aaaeabc80000000000000020004000000000100040000000000060008000000000c000800000000000
% 000000030101010101030101010181002100000007c1c1407f800000f556578800000000000000300040000000000007f80000000000200080000000004000800000000000
% 0000000300000000c0020000000180003300000003e0e0c0210000003eaa7e0800000000000000100040000000000602100000000000000080000000000000800000000000
% 000000034444444464464444444700603300000001f071e0330000000ffff008000000000000000000400000000003033000000000000c0080000000001800800000000000
% 0000000100000000203fc000000300301200000000f839a03300000000fe60ff000000000000000607f8000000000103300000000000060080000000000c00800000000000
% 0000000190101010009090101016001012000000001e1f00920000000000204200000000000000030210000000000005200000000000020ff000000000040ff00000000000
% 000000018000000007998000000600005e0000000007fe0792000000000000e60000000000000001033000000000003d200000000000000c20000000000014200000000000
% 00000001c44444444eddc444444c0003de0000000001f80ede000000000007e600000000000000000730000000000077e00000000000007e600000000000f6600000000000
% 000000008000000038c90000000c00076c00000000000038de00000000000ee400000000000000003d200000000001c7e0000000000000ee600000000001de600000000000
% 00000000c1110111395901110118001c6c000000000000384c000000000038e4000000000000000077200000000001c2c00000000000038e4000000000071a400000000000
% 00000000600000000e6f00000018001c2c0000000000000e6c0000000000387c0000000000000001c7e0000000000073c0000000000003864000000000070a400000000000
% 0000000064444444476f44444450000730000000000000072c00000000000e7c0000000000000001c3e0000000000039c0000000000000e7c00000000001cfc00000000000
% 000000003000000001ff800000300003ff00000000000001ff000000000007fe000000000000000073f800000000000ff000000000000077f00000000000efe00000000000
% 000000001810101010f1d01010300000e380000000000000e3800000000001c700000000000000003f1c00000000000e380000000000001e3800000000003c700000000000
% 000000001800000000c060000060000180c000000000000180c000000000030180000000000000000c060000000000180c000000000000180c000000000030180000000000
% 000000000c44444444c02444446000018040000000000001804000000000030080000000000000000c02000000000018040000000000001804000000000030080000000000
% 000000000c0000000080300000c0000100600000000000010060000000000200c00000000000000008030000000000100600000000000010060000000000200c0000000000
% 00000000070101010180310101c0000100600000000000010060000000000200c00000000000000008030000000000100600000000000010060000000000200c0000000000
% 0000000003000000008030000180000100600000000000010060000000000200c00000000000000008030000000000100600000000000010060000000000200c0000000000
% 0000000001c44444448034444700000100600000000000010060000000000200c00000000000000008030000000000100600000000000010060000000000200c0000000000
% 0000000000c0000000c060000300000180c000000000000180c000000000030180000000000000000c060000000000180c000000000000180c000000000030180000000000
% 00000000007010101060fc1016000000c1c0000000000000c1e00000000001838000000000000000060f00000000000c1c0000000000000c1e000000000018380000000000
% 0000000000300000003fc0000c0000007f800000000000007f800000000000ff000000000000000003fc000000000007f800000000000007f800000000000ff00000000000
% 00000000001c4444444f44e4580000001e000000000000001e0700000000003c000000000000000000f0380000000001e000000000000001e0700000000003c00000000000
% 00000000000c000000000060300000000400000000000000000000000000000800000000000000000000000000000000400000000000000000000000000000800000000000
% 00000000000701110111011760000000040000000000000000003800000000080000000000000000000001c000000000400000000000000000038000000000800000000000
% 000000000003c00000000007c0000000040000000000000000001800000000080000000000000000000000c000000000400000000000000000018000000000800000000000
% 000000000000e44444444447000000000400000000000000000001800000000800000000000000000000000c00000000400000000000000000001800000000800000000000
% 00000000000038000000001e380000007f80000000000000000001c00000000800000000000000000000000e00000000400000000000000000001c00000000800000000000
% 0000000000001f101010107018000000210000000000000000000000000000ff00000000000000000000000000000000400000000000000000000000000000800000000000
% 00000000000007c0000003c00180000033000000000000000000000e00000042000000000000000000000000700000004000000000000000000000e000000ff00000000000
% 00000000000000fc44447f0001c000003300000000000000000000060000006600000000000000000000000030000007f80000000000000000000060000004200000000000
% 000000000000001ff01ff000000000001200000000000000000000006000006600000000000000000000000003000002100000000000000000000006000006600000000000
% 0000000000000000ffff0000000e00001200000000000000000000007000002400000000000000000000000003800003300000000000000000000007000006600000000000
% 000000000000000000000000000000001e00000000000000000000000000002400000000000000000000000000000003300000000000000000000000000002400000000000
% 000000000000000000000000000070c01e00000000000000000000000380003c000000000000000000000000001c0001200000000000000000000000380002400000000000
% 000000000000000000000000000030e00c00000000000000000000000000003c00000000000000000000000000000001200000000000000000000000000003c00000000000
% 000000000000000000000000000000f00c0000000000000000000000001c30180000000000000000000000000000e181e0000000000000000000000001c303c00000000000
% 000000000000000000000000000003980c0000000000000000000000000c3818000000000000000000000000000061c1e0000000000000000000000000c381800000000000
% 0000000000000000000000000000010c7f000000000000000000000000003cfe000000000000000000000000000001e7f000000000000000000000000003cfe00000000000
% 00000000000000000000000000000306e380000000000000000000000000e7c70000000000000000000000000000073e380000000000000000000000000e7c700000000000
% 000000000000000000000000000003ff80c00000000000000000000000004301800000000000000000000000000002180c0000000000000000000000000430180000000000
% 0000000000000000000000000000003f8040000000000000000000000000c30080000000000000000000000000000618040000000000000000000000000c30080000000000
% 000000000000000000000000000000010060000000000000000000000000fe00c00000000000000000000000000007f0060000000000000000000000000fe00c0000000000
% 0000000000000000000000000000000100600000000000000000000000000e00c00000000000000000000000000000700600000000000000000000000000e00c0000000000
% 0000000000000000000000000000000100600000000000000000000000000200c00000000000000000000000000000100600000000000000000000000000200c0000000000
% 0000000000000000000000000000000100600000000000000000000000000200c00000000000000000000000000000100600000000000000000000000000200c0000000000
% 0000000000000000000000000000000180cc0000000000000000000000000301800000000000000000000000000000180f0000000000000000000000000030180000000000
% 00000000000000000000000000000000c1ce00000000000000000000000001838000000000000000000000000000000c1c3000000000000000000000000018380000000000
% 000000000000000000000000000000007f8070000000000000000000000000ff00000000000000000000000000000007f8380000000000000000000000000ff00000000000
% 000000000000000000000000000000001e00300000000000000000000000003c00000000000000000000000000000001e001c0000000000000000000000003c00000000000
% 0000000000000000000000000000000000000180000000000000000000000008000000000000000000000000000000000000c0000000000000000000000000800000000000
% 00000000000000000000000000000000000001c000000000000000000000000800000000000000000000000000000000000006000000000000000000000000800000000000
% 000000000000000000000000000000000000000c00000000000000000000000800000000000000000000000000000000000007000000000000000000000000800000000000
% 000000000000000000000000000000000000000e00000000000000000000000800000000000000000000000000000000000000300000000000000000000000800000000000
% 000000000000000000000000000000000000000020000000000000000000000800000000000000000000000000000000000000380000000000000000000000800000000000
% 000000000000000000000000000000000000000038000000000000000000000800000000000000000000000000000000000000008000000000000000000000800000000000
% 00000000000000000000000000000000000000000180000000000000000000080000000000000000000000000000000000000000e000000000000000000000800000000000
% 000000000000000000000000000000000000000001c00000000000000000000800000000000000000000000000000000000000000600000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000700000000000000000000800000000000
% 0000000000000000000000000000000000000000000e0000000000000000000800000000000000000000000000000000000000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000038000000000000000000800000000000
% 000000000000000000000000000000000000000000003800000000000000000800000000000000000000000000000000000000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000e00000000000000000800000000000
% 0000000000000000000000000000000000000000000001c0000000000000000800000000000000000000000000000000000000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000070000000000000000800000000000
% 000000000000000000000000000000000000000000000007000000000000000800000000000000000000000000000000000000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000002000000000000000800000000000000000000000000000000000000000000001c00000000000000800000000000
% 000000000000000000000000000000000000000000000000380000000000000800000000000000000000000000000000000000000000000800000000000000800000000000
% 0000000000000000000000000000000000000000000000001800000000000008000000000000000000000000000000000000000000000000e0000000000000800000000000
% 00000000000000000000000000000000000000000000000001c000000000000800000000000000000000000000000000000000000000000060000000000000800000000000
% 00000000000000000000000000000000000000000000000000c000000000000800000000000000000000000000000000000000000000000007000000000000800000000000
% 000000000000000000000000000000000000000000000000000700000000000800000000000000000000000000000000000000000000000003000000000000800000000000
% 0000000000000000000000000000000000000000000000000003000000000008000000000000000000000000000000000000000000000000001c0000000000800000000000
% 0000000000000000000000000000000000000000000000000000380000000008000000000000000000000000000000000000000000000000000c0000000000800000000000
% 00000000000000000000000000000000000000000000000000001800000000080000000000000000000000000000000000000000000000000000e000000000800000000000
% 000000000000000000000000000000000000000000000000000000c0000000ff00000000000000000000000000000000000000000000000000006000000000800000000000
% 000000000000000000000000000000000000000000000000000000e0000000420000000000000000000000000000000000000000000000000000030000000ff00000000000
% 000000000000000000000000000000000000000000000000000000060000006600000000000000000000000000000000000000000000000000000380000004200000000000
% 000000000000000000000000000000000000000000000000000000070000006600000000000000000000000000000000000000000000000000000018000006600000000000
% 00000000000000000000000000000000000000000000000000000000380000240000000000000000000000000000000000000000000000000000001c000006600000000000
% 000000000000000000000000000000000000000000000000000000001801802400000000000000000000000000000000000000000000000000000000e00002400000000000
% 0000000000000000000000000000000000000000000000000000000000c1c03c00000000000000000000000000000000000000000000000000000000600602400000000000
% 0000000000000000000000000000000000000000000000000000000000e3e03c00000000000000000000000000000000000000000000000000000000030703c00000000000
% 00000000000000000000000000000000000000000000000000000000000230fe00000000000000000000000000000000000000000000000000000000038f8fe00000000000
% 00000000000000000000000000000000000000000000000000000000000619c7000000000000000000000000000000000000000000000000000000000008dc700000000000
% 0000000000000000000000000000000000000000000000000000000000040f0180000000000000000000000000000000000000000000000000000000001870180000000000
% 00000000000c00000000000000000000000000700000000000000000000c070080000000000000000000000000000000000000000000000000000000001030080000000000
% 00000000003c00000000000000000000000000f00000000000000000000ffe00c00000000000000000000000000000000000000000000000000000000030200c0000000000
% 00000000000c0000000000000000000000000030000000000000000000000600c0000000000000000000000000000000000000000000000000000000003fe00c0000000000
% 00000000000c0000000000000000000000000030000000000000000000000200c00000000000000000000000000000000000000000000000000000000000200c0000000000
% 00000000000c0000000000000000000000000030000000000000000000000200fc0000000000000000000000000000000000000000000000000000000000200c0000000000
% 00000000000c000000000000000000000000003000000000000000000000030198e00000000000000000000000000000000000000000000000000000000030180000000000
% 00000000000cf00f80f87e3df8f0013c03f00fb03e07e000000000000000018380638000000000000000000000000000000000000000000000000000000018380000000000
% 00000000000df819c19c1c187060077e063818f0670c600000000000000000ff00000e0000000000000000000000000000000000000000000000000000000ff00000000000
% 00000fffc00f1c20e30c1c18706003c70c1c307083982000000000000000003c00000038000000000000000000000000000000000000000000000000000003c00000000000
% 3f800fffc00c0c60e30c0c1030600303180e303183982000000000000000000000000000e00000000000000000000000000000000000000000000000000000800000000000
% 7fc00000000c0c7fe20c0e3038400303180e6031ff9c0000000000000000000000000000038000000000000000000000000000000000000000000000000000800000000000
% ffe00000000c0c60003c063038c0030318066031800f0000000000000000000000000000000e00000000000000000000000000000000000000000000000000800000000000
% ffe00000000c0c6000cc07201c800303180660318007c000000000000000000000000000000038000000000000000000000000000000000000000000000000800000000000
% fff00000000c0c60030c07601c800303180660318003e000000000000000000000000000000001e00000000000000000000000000000000000000000000000800000000000
% fff00fffc00c0c70160c03400f8003031c066031c050f000000000000000000000000000000000070000000000000000000000000000000000000000000000800000000000
% fff00fffc00c0c70360c03c00f0003031c047031c0d07000000000000000000000000000000000001c00000000000000000000000000000000000000000000800000000000
% fff00000000c0c38660c01c0070003030e0c3030e1983000000000000000000000000000000000000070000000000000000000000000000000000000000000800000000000
% ffe00000000c0c3fc7ff81800700030307183c78ff1c2000000000000000000000000000000000000001c00000000000000000000000000000000000000000800000000000
% 7fe00000001f3e1f83ef0180060007ef83f01f307e1fc000000000000000000000000000000000000000070000000000000000000000000000000000000000800000000000
% 3fc000000000000000000000060000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000800000000000
% 0f0000000000000000000000040000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000800000000000
% 0000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000800000000000
% 000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000800000000000
% 000000000000000000000001f80000000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000800000000000
% 000000000000000000000000f000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003800000000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000800000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000800000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000ff00000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000004200000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000006600000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000006600000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000002400000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000002400000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c6000000003c00000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007180002003c00000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c600380fe00000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e383e1c700000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003827b0180000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e1f0080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040600c0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffe00c0000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080200c0000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200c0000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030180000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018380000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff00000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.6 0.4 0.4 0.4]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
552.6 707 M
 511.9 689.64 465.78 684.57 426.45 662.49 D
 416.99 657.18 412.23 635.65 427.39 635.62 D
 469.97 635.54 513.96 655.84 552.6 675.79 D
 561.53 680.41 566.6 697.49 557.3 707 D
13 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
305.53 624 M
 262.62 623.88 245.84 577.77 270.82 546.04 D
 274.09 541.88 294.99 539.95 301.86 554.14 D
 309.61 570.16 313.37 588.36 311.02 605.49 D
 310.24 611.14 308.8 616.67 306.61 621.97 D
3 X
V
0 X
N
306.64 661 M
 266.95 654.27 232.58 630.62 209.61 601.53 D
 195.94 584.21 198.18 545.33 221.91 540.16 D
 235.79 537.14 228.4 556.26 239.69 558.84 D
 271.77 566.17 235.65 605.88 262.71 619.18 D
 278.1 626.76 335.98 637.89 306.64 661 D
14 X
V
0 X
N
551 771 M
 443.02 748.36 331.16 728.54 230 678.4 D
 182.9 655.05 105.88 654.95 89.43 600 D
 83.24 579.36 69.67 558.07 78.8 538 D
 90.52 512.25 121.6 507.17 143 520.67 D
 157.2 529.62 152.94 554.63 175 556.86 D
 212.06 560.61 181.59 605.7 200.08 627 D
 225.71 656.53 273.67 656.23 309 669.04 D
 381.52 695.32 451.7 722.03 525 727.31 D
 548.3 728.99 589.2 768.73 549 771 D
5 X
V
0 X
N
J
235.61 539.53 237.86 541.48 242.41 531.68 233.36 537.58 4 Y
0 Z
N
J
217 561 235.45 539.72 2 L
7 X
V
J
217 561 217.49 560.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
217.49 560.43 234.95 540.28 2 L
N
J
234.95 540.28 235.45 539.72 2 L
N
J
487.61 538.53 489.86 540.48 494.41 530.68 485.36 536.58 4 Y
0 Z
N
J
469 560 487.45 538.72 2 L
7 X
V
J
469 560 469.49 559.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
469.49 559.43 486.95 539.28 2 L
N
J
486.95 539.28 487.45 538.72 2 L
N
J
550 428.29 552.98 428.29 550 417.91 547.02 428.29 4 Y
0 Z
N
550 458 550 428.54 2 L
7 X
V
2 Z
0 X
N
550 704.28 552.98 704.28 550 693.91 547.02 704.28 4 Y
0 Z
N
550 754 550 704.53 2 L
7 X
V
2 Z
0 X
N
550 470.29 552.98 470.29 550 459.91 547.02 470.29 4 Y
0 Z
N
550 500 550 470.54 2 L
7 X
V
2 Z
0 X
N
550 517.29 552.98 517.29 550 506.91 547.02 517.29 4 Y
0 Z
N
550 529 550 517.54 2 L
7 X
V
2 Z
0 X
N
550 542.29 552.98 542.29 550 531.91 547.02 542.29 4 Y
0 Z
N
550 573 550 542.54 2 L
7 X
V
2 Z
0 X
N
550 626.29 552.98 626.29 550 615.91 547.02 626.29 4 Y
0 Z
N
550 644 550 626.54 2 L
7 X
V
2 Z
0 X
N
550 591.29 552.98 591.29 550 580.91 547.02 591.29 4 Y
0 Z
N
550 611 550 591.54 2 L
7 X
V
2 Z
0 X
N
550 660.29 552.98 660.29 550 649.91 547.02 660.29 4 Y
0 Z
N
550 689 550 660.54 2 L
7 X
V
2 Z
0 X
N
431 516.29 433.98 516.29 431 505.91 428.02 516.29 4 Y
0 Z
N
431 528 431 516.54 2 L
7 X
V
2 Z
0 X
N
431 546.29 433.98 546.29 431 535.91 428.02 546.29 4 Y
0 Z
N
431 577 431 546.54 2 L
7 X
V
2 Z
0 X
N
431 592.29 433.98 592.29 431 581.91 428.02 592.29 4 Y
0 Z
N
431 612 431 592.54 2 L
7 X
V
2 Z
0 X
N
432 627.29 434.98 627.29 432 616.91 429.02 627.29 4 Y
0 Z
N
432 645 432 627.54 2 L
7 X
V
2 Z
0 X
N
494 542.29 496.98 542.29 494 531.91 491.02 542.29 4 Y
0 Z
N
494 573 494 542.54 2 L
7 X
V
2 Z
0 X
N
494 591.29 496.98 591.29 494 580.91 491.02 591.29 4 Y
0 Z
N
494 611 494 591.54 2 L
7 X
V
2 Z
0 X
N
375 543.29 377.98 543.29 375 532.91 372.02 543.29 4 Y
0 Z
N
375 574 375 543.54 2 L
7 X
V
2 Z
0 X
N
375 592.29 377.98 592.29 375 581.91 372.02 592.29 4 Y
0 Z
N
375 612 375 592.54 2 L
7 X
V
2 Z
0 X
N
298 471.29 300.98 471.29 298 460.91 295.02 471.29 4 Y
0 Z
N
298 501 298 471.54 2 L
7 X
V
2 Z
0 X
N
298 518.29 300.98 518.29 298 507.91 295.02 518.29 4 Y
0 Z
N
298 530 298 518.54 2 L
7 X
V
2 Z
0 X
N
298 543.29 300.98 543.29 298 532.91 295.02 543.29 4 Y
0 Z
N
298 574 298 543.54 2 L
7 X
V
2 Z
0 X
N
298 627.29 300.98 627.29 298 616.91 295.02 627.29 4 Y
0 Z
N
298 645 298 627.54 2 L
7 X
V
2 Z
0 X
N
298 592.29 300.98 592.29 298 581.91 295.02 592.29 4 Y
0 Z
N
298 612 298 592.54 2 L
7 X
V
2 Z
0 X
N
298 661.29 300.98 661.29 298 650.91 295.02 661.29 4 Y
0 Z
N
298 690 298 661.54 2 L
7 X
V
2 Z
0 X
N
243 546.29 245.98 546.29 243 535.91 240.02 546.29 4 Y
0 Z
N
243 576 243 546.54 2 L
7 X
V
2 Z
0 X
N
243 589.29 245.98 589.29 243 578.91 240.02 589.29 4 Y
0 Z
N
243 612 243 589.54 2 L
7 X
V
2 Z
0 X
N
179 519.29 181.98 519.29 179 508.91 176.02 519.29 4 Y
0 Z
N
179 530 179 519.54 2 L
7 X
V
2 Z
0 X
N
179 547.29 181.98 547.29 179 536.91 176.02 547.29 4 Y
0 Z
N
179 575 179 547.54 2 L
7 X
V
2 Z
0 X
N
179 591.29 181.98 591.29 179 580.91 176.02 591.29 4 Y
0 Z
N
179 613 179 591.54 2 L
7 X
V
2 Z
0 X
N
179 626.29 181.98 626.29 179 615.91 176.02 626.29 4 Y
0 Z
N
179 646 179 626.54 2 L
7 X
V
2 Z
0 X
N
124 592.29 126.98 592.29 124 581.91 121.02 592.29 4 Y
0 Z
N
124 613 124 592.54 2 L
7 X
V
2 Z
0 X
N
124 543.29 126.98 543.29 124 532.91 121.02 543.29 4 Y
0 Z
N
124 573 124 543.54 2 L
7 X
V
2 Z
0 X
N
J
309.92 695.83 310.67 692.95 299.88 693.23 309.18 698.71 4 Y
0 Z
N
J
550 758 310.16 695.89 2 L
7 X
V
J
550 758 546.37 757.06 2 L
2 Z
0 X
N
[7.37 6.387] 7.37 I
546.37 757.06 313.8 696.83 2 L
N
J
313.8 696.83 310.16 695.89 2 L
N
J
535.87 416.85 536.36 419.78 546.11 415.15 535.38 413.91 4 Y
0 Z
N
J
294 457 535.62 416.89 2 L
7 X
V
J
294 457 294.74 456.88 2 L
2 Z
0 X
N
[1.493 4.48] 1.493 I
294.74 456.88 534.88 417.01 2 L
N
J
534.88 417.01 535.62 416.89 2 L
N
J
538.45 460.99 539.5 463.77 548.15 457.32 537.39 458.21 4 Y
0 Z
N
J
430 502 538.21 461.08 2 L
7 X
V
J
430 502 430.7 501.73 2 L
2 Z
0 X
N
[1.445 4.336] 1.445 I
430.7 501.73 537.51 461.35 2 L
N
J
537.51 461.35 538.21 461.08 2 L
N
J
554 693 486 669 433 648 3 Y
7 X
V
J
443.49 652.16 444.59 649.39 433.84 648.33 442.39 654.92 4 Y
0 Z
0 X
N
J
554 693 486 669 443.72 652.25 3 L
J
554 693 550.46 691.75 2 L
2 Z
N
[7.753 6.719] 7.753 I
550.46 691.75 489.54 670.25 2 L
N
J
489.54 670.25 486 669 482.51 667.62 3 L
N
[8.255 7.154] 8.255 I
482.51 667.62 447.21 653.63 2 L
N
J
447.21 653.63 443.72 652.25 2 L
N
J
539.76 506.75 541.02 509.45 549.18 502.38 538.51 504.05 4 Y
0 Z
N
J
494 528 539.54 506.86 2 L
7 X
V
J
494 528 494.68 527.68 2 L
2 Z
0 X
N
[1.392 4.175] 1.392 I
494.68 527.68 538.86 507.17 2 L
N
J
538.86 507.17 539.54 506.86 2 L
N
J
504.47 618.14 506.09 615.64 495.76 612.49 502.85 620.64 4 Y
0 Z
N
J
549 647 504.68 618.27 2 L
7 X
V
J
549 647 545.85 644.96 2 L
2 Z
0 X
N
[7.008 6.073] 7.008 I
545.85 644.96 507.83 620.31 2 L
N
J
507.83 620.31 504.68 618.27 2 L
N
J
534.16 592.72 536.46 590.83 527.58 584.7 531.86 594.61 4 Y
0 Z
N
J
550 612 534.32 592.91 2 L
7 X
V
J
550 612 547.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
547.62 609.1 536.7 595.81 2 L
N
J
536.7 595.81 534.32 592.91 2 L
N
J
542.61 538.53 544.86 540.48 549.41 530.68 540.36 536.58 4 Y
0 Z
N
J
524 560 542.45 538.72 2 L
7 X
V
J
524 560 524.49 559.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
524.49 559.43 541.95 539.28 2 L
N
J
541.95 539.28 542.45 538.72 2 L
N
J
526 572.04 528.64 572.04 526 562.81 523.36 572.04 4 Y
1 H
0 Z
N
526 588 526 572.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 549.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 549.5 576.5 A
7 X
90 450 5.4 5.4 549.5 612.5 G
0 X
90 450 5.4 5.4 549.5 612.5 A
7 X
90 450 5.4 5.4 549.5 529.5 G
0 X
90 450 5.4 5.4 549.5 529.5 A
7 X
90 450 5.4 5.4 526.5 558.5 G
0 X
90 450 5.4 5.4 526.5 558.5 A
7 X
90 450 5.4 5.4 526.5 584.5 G
0 X
90 450 5.4 5.4 526.5 584.5 A
J
479.16 592.72 481.46 590.83 472.58 584.7 476.86 594.61 4 Y
0 Z
N
J
495 612 479.32 592.91 2 L
7 X
V
J
495 612 492.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
492.62 609.1 481.7 595.81 2 L
N
J
481.7 595.81 479.32 592.91 2 L
N
J
472 570.04 474.64 570.04 472 560.81 469.36 570.04 4 Y
1 H
0 Z
N
472 586 472 570.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 494.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 494.5 576.5 A
7 X
90 450 5.4 5.4 494.5 529.5 G
0 X
90 450 5.4 5.4 494.5 529.5 A
7 X
90 450 5.4 5.4 471.5 558.5 G
0 X
90 450 5.4 5.4 471.5 558.5 A
7 X
90 450 5.4 5.4 471.5 584.5 G
0 X
90 450 5.4 5.4 471.5 584.5 A
7 X
90 450 5.4 5.4 494.5 612.5 G
0 X
90 450 5.4 5.4 494.5 612.5 A
7 X
90 450 5.4 5.4 549.5 646.5 G
0 X
90 450 5.4 5.4 549.5 646.5 A
7 X
90 450 5.4 5.4 549.5 502.5 G
0 X
90 450 5.4 5.4 549.5 502.5 A
J
420.76 506.75 422.02 509.45 430.18 502.38 419.51 504.05 4 Y
0 Z
N
J
375 528 420.54 506.86 2 L
7 X
V
J
375 528 375.68 527.68 2 L
2 Z
0 X
N
[1.392 4.175] 1.392 I
375.68 527.68 419.86 507.17 2 L
N
J
419.86 507.17 420.54 506.86 2 L
N
J
385.47 618.14 387.09 615.64 376.76 612.49 383.85 620.64 4 Y
0 Z
N
J
430 647 385.68 618.27 2 L
7 X
V
J
430 647 426.85 644.96 2 L
2 Z
0 X
N
[7.008 6.073] 7.008 I
426.85 644.96 388.83 620.31 2 L
N
J
388.83 620.31 385.68 618.27 2 L
N
J
415.16 592.72 417.46 590.83 408.58 584.7 412.86 594.61 4 Y
0 Z
N
J
431 612 415.32 592.91 2 L
7 X
V
J
431 612 428.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
428.62 609.1 417.7 595.81 2 L
N
J
417.7 595.81 415.32 592.91 2 L
N
J
424.61 539.53 426.86 541.48 431.41 531.68 422.36 537.58 4 Y
0 Z
N
J
406 561 424.45 539.72 2 L
7 X
V
J
406 561 406.49 560.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
406.49 560.43 423.95 540.28 2 L
N
J
423.95 540.28 424.45 539.72 2 L
N
J
408 571.04 410.64 571.04 408 561.81 405.36 571.04 4 Y
1 H
0 Z
N
408 587 408 571.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 430.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 430.5 576.5 A
7 X
90 450 5.4 5.4 430.5 612.5 G
0 X
90 450 5.4 5.4 430.5 612.5 A
7 X
90 450 5.4 5.4 430.5 529.5 G
0 X
90 450 5.4 5.4 430.5 529.5 A
7 X
90 450 5.4 5.4 407.5 558.5 G
0 X
90 450 5.4 5.4 407.5 558.5 A
7 X
90 450 5.4 5.4 407.5 584.5 G
0 X
90 450 5.4 5.4 407.5 584.5 A
J
360.16 592.72 362.46 590.83 353.58 584.7 357.86 594.61 4 Y
0 Z
N
J
376 612 360.32 592.91 2 L
7 X
V
J
376 612 373.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
373.62 609.1 362.7 595.81 2 L
N
J
362.7 595.81 360.32 592.91 2 L
N
J
368.61 537.53 370.86 539.48 375.41 529.68 366.36 535.58 4 Y
0 Z
N
J
350 559 368.45 537.72 2 L
7 X
V
J
350 559 350.49 558.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
350.49 558.43 367.95 538.28 2 L
N
J
367.95 538.28 368.45 537.72 2 L
N
J
353 571.04 355.64 571.04 353 561.81 350.36 571.04 4 Y
1 H
0 Z
N
353 587 353 571.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 375.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 375.5 576.5 A
7 X
90 450 5.4 5.4 375.5 529.5 G
0 X
90 450 5.4 5.4 375.5 529.5 A
7 X
90 450 5.4 5.4 352.5 558.5 G
0 X
90 450 5.4 5.4 352.5 558.5 A
7 X
90 450 5.4 5.4 352.5 584.5 G
0 X
90 450 5.4 5.4 352.5 584.5 A
7 X
90 450 5.4 5.4 375.5 612.5 G
0 X
90 450 5.4 5.4 375.5 612.5 A
7 X
90 450 5.4 5.4 430.5 646.5 G
0 X
90 450 5.4 5.4 430.5 646.5 A
7 X
90 450 5.4 5.4 430.5 502.5 G
0 X
90 450 5.4 5.4 430.5 502.5 A
90 450 5.4 5.4 549.5 691.5 G
90 450 5.4 5.4 549.5 691.5 A
7 X
90 450 5.4 5.4 549.5 457.5 G
0 X
90 450 5.4 5.4 549.5 457.5 A
J
284.45 461.99 285.5 464.77 294.15 458.32 283.39 459.21 4 Y
0 Z
N
J
176 503 284.21 462.08 2 L
7 X
V
J
176 503 176.7 502.73 2 L
2 Z
0 X
N
[1.445 4.336] 1.445 I
176.7 502.73 283.51 462.35 2 L
N
J
283.51 462.35 284.21 462.08 2 L
N
J
191.58 650.93 192.61 648.14 181.85 647.32 190.54 653.72 4 Y
0 Z
N
J
302 692 191.81 651.02 2 L
7 X
V
J
302 692 298.48 690.69 2 L
2 Z
0 X
N
[7.899 6.846] 7.899 I
298.48 690.69 195.33 652.33 2 L
N
J
195.33 652.33 191.81 651.02 2 L
N
J
287.76 506.75 289.02 509.45 297.18 502.38 286.51 504.05 4 Y
0 Z
N
J
242 528 287.54 506.86 2 L
7 X
V
J
242 528 242.68 527.68 2 L
2 Z
0 X
N
[1.392 4.175] 1.392 I
242.68 527.68 286.86 507.17 2 L
N
J
286.86 507.17 287.54 506.86 2 L
N
J
252.47 618.14 254.09 615.64 243.76 612.49 250.85 620.64 4 Y
0 Z
N
J
297 647 252.68 618.27 2 L
7 X
V
J
297 647 293.85 644.96 2 L
2 Z
0 X
N
[7.008 6.073] 7.008 I
293.85 644.96 255.83 620.31 2 L
N
J
255.83 620.31 252.68 618.27 2 L
N
J
282.16 592.72 284.46 590.83 275.58 584.7 279.86 594.61 4 Y
0 Z
N
J
298 612 282.32 592.91 2 L
7 X
V
J
298 612 295.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
295.62 609.1 284.7 595.81 2 L
N
J
284.7 595.81 282.32 592.91 2 L
N
J
291.61 538.53 293.86 540.48 298.41 530.68 289.36 536.58 4 Y
0 Z
N
J
273 560 291.45 538.72 2 L
7 X
V
J
273 560 273.49 559.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
273.49 559.43 290.95 539.28 2 L
N
J
290.95 539.28 291.45 538.72 2 L
N
J
275 571.04 277.64 571.04 275 561.81 272.36 571.04 4 Y
1 H
0 Z
N
275 587 275 571.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 297.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 297.5 576.5 A
90 450 5.4 5.4 297.5 612.5 G
90 450 5.4 5.4 297.5 612.5 A
7 X
90 450 5.4 5.4 297.5 529.5 G
0 X
90 450 5.4 5.4 297.5 529.5 A
7 X
90 450 5.4 5.4 274.5 558.5 G
0 X
90 450 5.4 5.4 274.5 558.5 A
7 X
90 450 5.4 5.4 274.5 584.5 G
0 X
90 450 5.4 5.4 274.5 584.5 A
J
227.16 592.72 229.46 590.83 220.58 584.7 224.86 594.61 4 Y
0 Z
N
J
243 612 227.32 592.91 2 L
7 X
V
J
243 612 240.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
240.62 609.1 229.7 595.81 2 L
N
J
229.7 595.81 227.32 592.91 2 L
N
J
220 571.04 222.64 571.04 220 561.81 217.36 571.04 4 Y
1 H
0 Z
N
220 587 220 571.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 242.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 242.5 576.5 A
7 X
90 450 5.4 5.4 242.5 529.5 G
0 X
90 450 5.4 5.4 242.5 529.5 A
7 X
90 450 5.4 5.4 219.5 558.5 G
0 X
90 450 5.4 5.4 219.5 558.5 A
7 X
90 450 5.4 5.4 219.5 584.5 G
0 X
90 450 5.4 5.4 219.5 584.5 A
7 X
90 450 5.4 5.4 242.5 612.5 G
0 X
90 450 5.4 5.4 242.5 612.5 A
90 450 5.4 5.4 297.5 646.5 G
90 450 5.4 5.4 297.5 646.5 A
7 X
90 450 5.4 5.4 297.5 502.5 G
0 X
90 450 5.4 5.4 297.5 502.5 A
J
165.76 508.75 167.02 511.45 175.18 504.38 164.51 506.05 4 Y
0 Z
N
J
120 530 165.54 508.86 2 L
7 X
V
J
120 530 120.68 529.68 2 L
2 Z
0 X
N
[1.392 4.175] 1.392 I
120.68 529.68 164.86 509.17 2 L
N
J
164.86 509.17 165.54 508.86 2 L
N
J
133.47 620.14 135.09 617.64 124.76 614.49 131.85 622.64 4 Y
0 Z
N
J
178 649 133.68 620.27 2 L
7 X
V
J
178 649 174.85 646.96 2 L
2 Z
0 X
N
[7.008 6.073] 7.008 I
174.85 646.96 136.83 622.31 2 L
N
J
136.83 622.31 133.68 620.27 2 L
N
J
163.16 592.72 165.46 590.83 156.58 584.7 160.86 594.61 4 Y
0 Z
N
J
179 612 163.32 592.91 2 L
7 X
V
J
179 612 176.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
176.62 609.1 165.7 595.81 2 L
N
J
165.7 595.81 163.32 592.91 2 L
N
J
172.61 538.53 174.86 540.48 179.41 530.68 170.36 536.58 4 Y
0 Z
N
J
154 560 172.45 538.72 2 L
7 X
V
J
154 560 154.49 559.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
154.49 559.43 171.95 539.28 2 L
N
J
171.95 539.28 172.45 538.72 2 L
N
J
155 570.04 157.64 570.04 155 560.81 152.36 570.04 4 Y
1 H
0 Z
N
155 586 155 570.54 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 178.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 178.5 576.5 A
7 X
90 450 5.4 5.4 178.5 612.5 G
0 X
90 450 5.4 5.4 178.5 612.5 A
7 X
90 450 5.4 5.4 178.5 529.5 G
0 X
90 450 5.4 5.4 178.5 529.5 A
7 X
90 450 5.4 5.4 155.5 558.5 G
0 X
90 450 5.4 5.4 155.5 558.5 A
7 X
90 450 5.4 5.4 155.5 584.5 G
0 X
90 450 5.4 5.4 155.5 584.5 A
J
108.16 592.72 110.46 590.83 101.58 584.7 105.86 594.61 4 Y
0 Z
N
J
124 612 108.32 592.91 2 L
7 X
V
J
124 612 121.62 609.1 2 L
2 Z
0 X
N
[6.293 5.454] 6.293 I
121.62 609.1 110.7 595.81 2 L
N
J
110.7 595.81 108.32 592.91 2 L
N
J
115.61 539.53 117.86 541.48 122.41 531.68 113.36 537.58 4 Y
0 Z
N
J
97 561 115.44 539.72 2 L
7 X
V
J
97 561 97.49 560.43 2 L
2 Z
0 X
N
[1.403 4.21] 1.403 I
97.49 560.43 114.95 540.28 2 L
N
J
114.95 540.28 115.44 539.72 2 L
N
J
101 586 101 574 101 559 3 Y
7 X
V
101 570.04 103.64 570.04 101 560.81 98.36 570.04 4 Y
1 H
0 Z
0 X
N
101 586 101 574 101 570.54 3 L
2 Z
N
7 X
90 450 5.4 5.4 123.5 576.5 G
0.5 H
0 X
90 450 5.4 5.4 123.5 576.5 A
7 X
90 450 5.4 5.4 123.5 529.5 G
0 X
90 450 5.4 5.4 123.5 529.5 A
7 X
90 450 5.4 5.4 100.5 558.5 G
0 X
90 450 5.4 5.4 100.5 558.5 A
7 X
90 450 5.4 5.4 100.5 584.5 G
0 X
90 450 5.4 5.4 100.5 584.5 A
7 X
90 450 5.4 5.4 123.5 612.5 G
0 X
90 450 5.4 5.4 123.5 612.5 A
7 X
90 450 5.4 5.4 178.5 646.5 G
0 X
90 450 5.4 5.4 178.5 646.5 A
7 X
90 450 5.4 5.4 178.5 502.5 G
0 X
90 450 5.4 5.4 178.5 502.5 A
7 X
90 450 5.4 5.4 297.5 691.5 G
0 X
90 450 5.4 5.4 297.5 691.5 A
7 X
90 450 5.4 5.4 297.5 457.5 G
0 X
90 450 5.4 5.4 297.5 457.5 A
90 450 5.4 5.4 549.5 757.5 G
90 450 5.4 5.4 549.5 757.5 A
7 X
90 450 5.4 5.4 549.5 414.5 G
0 X
90 450 5.4 5.4 549.5 414.5 A
90 450 5.4 5.4 51.5 445.5 G
90 450 5.4 5.4 51.5 445.5 A
0 28 Q
(= heavy nodes) 65 441 T
1 22 Q
(P) 315 739 T
1 17.6 Q
(1) 328.44 733.5 T
1 22 Q
(P) 320 644 T
1 17.6 Q
(2) 333.44 638.5 T
1 22 Q
(P) 316 604 T
1 17.6 Q
(3) 329.44 598.5 T
1 22 Q
(P) 572 691 T
1 17.6 Q
(4) 585.44 685.5 T
0 0 0 1 0 0 0 K
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 949 1353 a FN(\(a\))1941 b(\(b\))0 1663
y(Figure)30 b(7:)41 b Fu(\(a\))28 b(An)g(e)o(xample)h(snapshot)h(of)e
(a)g(parallel)i(schedule)h(for)d(a)g(simple)h(dag.)43
b(The)28 b(shaded)i(nodes)f(\(the)g(set)f(of)0 1776 y(nodes)33
b(in)e Fr(\033)396 1790 y Fq(p)435 1776 y Fu(\))g(ha)n(v)o(e)h(been)g
(e)o(x)o(ecuted,)i(while)e(the)f(blank)i(\(white\))f(nodes)g(ha)n(v)o
(e)g(not.)52 b(Of)31 b(the)g(nodes)i(in)e Fr(\033)3467
1790 y Fq(p)3506 1776 y Fu(,)i(the)e(black)0 1889 y(nodes)37
b(form)e(the)h(corresponding)k(parallel)d(pre\002x)f
Fr(\033)1765 1903 y FH(1)1804 1889 y Fu(,)i(while)e(the)f(remaining)j
(gre)o(y)e(nodes)g(are)g(premature.)67 b(\(b\))35 b(A)0
2002 y(possible)25 b(partitioning)g(of)e(nodes)h(in)e
Fr(\033)1241 2016 y Fq(p)1302 2002 y Fu(into)h(hea)n(vy)h(and)f(light)g
(nodes.)30 b(Each)22 b(shaded)i(re)o(gion)g(denotes)g(the)f(set)g(of)f
(nodes)0 2115 y(e)o(x)o(ecuted)34 b(consecuti)n(v)o(ely)j(in)c
(depth-\002rst)h(order)g(on)f(a)g(single)h(processor)h(\()p
Fr(P)2526 2129 y FH(1)2566 2115 y Fr(;)15 b(P)2664 2129
y FH(2)2705 2115 y Fr(;)g(P)2803 2129 y FH(3)2875 2115
y Fu(or)33 b Fr(P)3041 2129 y FH(4)3080 2115 y Fu(\))g(between)h
(steals.)58 b(The)0 2228 y(hea)n(vy)25 b(node)f(in)g(each)g(re)o(gion)h
(is)e(sho)n(wn)h(shaded)h(black.)0 2513 y FN(in)j(the)f(deque,)i(and)f
(we)g(will)f(use)h(the)g(tw)o(o)f(phrases)h(interchangeably)-6
b(.)39 b(Gi)n(v)o(en)27 b(a)h FI(p)p FN(-schedule)g FI(s)3400
2528 y Fq(p)3468 2513 y FN(of)g(a)g(dag)g FI(G)0 2634
y FN(generated)20 b(by)g(algorithm)f FL(DFDeques)8 b
FN(,)20 b(we)h(can)f(\002nd)g(a)g(unique)g FE(last)f(parent)h
FN(for)g(e)n(v)o(ery)g(node)f(in)h FI(G)g FN(\(e)o(xcept)g(for)0
2754 y(the)j(root)g(node\))h(as)f(follo)n(ws.)29 b(The)23
b(last)g(parent)h(of)f(a)h(node)f FI(u)g FN(in)g FI(G)h
FN(is)f(de\002ned)g(as)h(the)f(last)g(of)h FI(u)p FN(')-5
b(s)22 b(parent)i(nodes)0 2874 y(to)29 b(be)g(e)o(x)o(ecuted)f(in)g
(the)h(schedule)g FI(s)1291 2889 y Fq(p)1330 2874 y FN(.)44
b(If)29 b(tw)o(o)g(or)g(more)f(parent)h(nodes)g(of)g
FI(u)f FN(were)i(the)f(last)f(to)h(be)g(e)o(x)o(ecuted,)0
2995 y(the)24 b(processor)h(e)o(x)o(ecuting)e(one)h(of)h(them)f
(continues)f(e)o(x)o(ecution)g(of)i FI(u)p FN(')-5 b(s)23
b(thread.)31 b(W)-8 b(e)25 b(label)f(the)g(unique)g(parent)0
3115 y(of)29 b FI(u)f FN(e)o(x)o(ecuted)g(by)h(this)f(processor)g(as)h
(its)f(last)h(parent.)43 b(This)28 b(processor)g(may)h(ha)n(v)o(e)f(to)
h(preempt)f FI(u)p FN(')-5 b(s)28 b(thread)0 3235 y(without)20
b(e)o(x)o(ecuting)h FI(u)g FN(if)h(it)f(runs)h(out)f(of)h(its)f(memory)
g(quota;)h(in)g(this)f(case,)i(it)e(puts)g FI(u)p FN(')-5
b(s)21 b(thread)h(on)g(to)f(its)g(deque)0 3356 y(and)k(then)f(gi)n(v)o
(es)f(up)i(the)g(deque.)146 3476 y(Consider)g(the)g(pre\002x)h
FI(\033)991 3491 y Fq(p)1056 3476 y FN(of)f(the)g(parallel)g(schedule)f
FI(s)2054 3491 y Fq(p)2119 3476 y FN(after)i(the)e(\002rst)i
FI(j)31 b FN(timesteps,)23 b(for)i(an)o(y)g FG(1)j FF(\024)g
FI(j)34 b FF(\024)29 b FI(\034)11 b FN(.)0 3597 y(Let)27
b FI(v)k FN(be)d(the)f(last)g(non-premature)g(node)g(\(i.e.,)h(the)f
(last)f(node)i(from)f FI(\033)2530 3612 y FH(1)2570 3597
y FN(\))g(to)g(be)g(e)o(x)o(ecuted)g(during)f(the)i(\002rst)f
FI(j)0 3717 y FN(timesteps)21 b(of)i FI(s)551 3732 y
Fq(p)591 3717 y FN(.)30 b(If)23 b(more)g(than)g(one)f(such)h(node)g(e)o
(xist,)f(let)g FI(v)27 b FN(be)c(an)o(y)f(one)h(of)g(them.)30
b(Let)22 b FF(P)32 b FN(be)23 b(a)g(set)g(of)g(nodes)0
3837 y(in)j(the)g(dag)g(constructed)g(as)h(follo)n(ws:)32
b FF(P)j FN(is)26 b(initialized)f(to)h FF(f)p FI(v)t
FF(g)p FN(;)g(for)g(e)n(v)o(ery)g(node)g FI(u)g FN(in)g
FF(P)8 b FN(,)28 b(the)e(last)g(parent)g(of)0 3958 y
FI(u)i FN(is)f(added)h(to)g FF(P)8 b FN(.)41 b(Since)28
b(the)g(root)g(is)g(the)f(only)h(node)g(at)g(depth)f(1,)i(it)e(must)g
(be)h(in)g FF(P)8 b FN(,)29 b(and)f(thus,)g FF(P)37 b
FN(contains)0 4078 y(e)o(xactly)26 b(all)h(the)g(nodes)g(along)f(a)h
(particular)g(path)g(from)g(the)g(root)f(to)h FI(v)t
FN(;)h(we)f(will)f(call)h FF(P)36 b FN(the)26 b FE(last)h(path)f
FN(in)h FI(\033)3835 4093 y Fq(p)3875 4078 y FN(.)0 4199
y(Further)l(,)e(since)g FI(v)j FN(is)d(non-premature,)f(all)h(the)f
(nodes)h(in)f FF(P)33 b FN(are)26 b(non-premature.)146
4319 y(Let)f FI(u)360 4334 y Fq(i)413 4319 y FN(be)h(the)f(node)g(in)g
(the)g(last)g(path)g FF(P)33 b FN(at)26 b(depth)e FI(i)p
FN(;)i(then)f FI(u)2296 4334 y FH(1)2360 4319 y FN(is)g(the)g(root,)g
(and)g FI(u)3035 4334 y Fq(\016)3098 4319 y FN(is)f(the)i(node)f
FI(v)t FN(,)g(where)0 4439 y FI(\016)35 b FN(is)c(the)g(depth)g(of)g
FI(v)t FN(.)51 b(Let)31 b FI(t)1022 4454 y Fq(i)1082
4439 y FN(be)g(the)g(timestep)f(in)h(which)g FI(u)2169
4454 y Fq(i)2228 4439 y FN(is)g(e)o(x)o(ecuted;)i(then)e
FI(t)2977 4454 y FH(1)3057 4439 y FG(=)39 b(1)31 b FN(since)h(the)f
(root)g(is)0 4560 y(e)o(x)o(ecuted)i(in)h(the)g(\002rst)g(timestep.)58
b(F)o(or)34 b FI(i)45 b FG(=)g(2)p FI(;)17 b(:)g(:)g(:)f(;)h(\016)38
b FN(let)c FI(I)2160 4575 y Fq(i)2222 4560 y FN(be)h(the)f(interv)n(al)
f FF(f)p FI(t)2928 4575 y Fq(i)p Fj(\000)p FH(1)3075
4560 y FG(+)c(1)p FI(;)17 b(:)g(:)g(:)f(;)h(t)3483 4575
y Fq(i)3511 4560 y FF(g)p FN(,)36 b(and)e(let)0 4680
y FI(I)43 4695 y FH(1)122 4680 y FG(=)39 b FF(f)p FG(1)p
FF(g)p FN(.)48 b(Let)31 b FI(I)666 4695 y Fq(\016)r FH(+1)833
4680 y FG(=)39 b FF(f)p FI(t)1033 4695 y Fq(\016)1098
4680 y FG(+)27 b(1)p FI(;)17 b(:)g(:)g(:)e(;)i(j)6 b
FF(g)p FN(.)49 b(Since)31 b FI(\033)1945 4695 y Fq(p)2017
4680 y FN(consists)e(of)i(all)g(the)g(nodes)f(e)o(x)o(ecuted)h(in)f
(the)h(\002rst)g FI(j)0 4800 y FN(timesteps,)j(the)f(interv)n(als)f
FI(I)1009 4815 y FH(1)1049 4800 y FI(;)17 b(:)g(:)g(:)e(;)i(I)1310
4815 y Fq(\016)r FH(+1)1472 4800 y FN(co)o(v)o(er)32
b(the)i(duration)e(of)i(e)o(x)o(ecution)d(of)j(all)f(nodes)g(in)g
FI(\033)3460 4815 y Fq(p)3500 4800 y FN(.)56 b(W)-8 b(e)34
b(will)0 4921 y(call)f(this)e(unique)h(set)h(of)f(disjoint)f(interv)n
(als)g(the)i FE(co)o(v)o(ering)f(intervals)g FN(of)g
FI(\033)2717 4936 y Fq(p)2757 4921 y FN(.)55 b(W)-8 b(e)33
b(will)e(analyze)i(the)g(space)0 5041 y(requirement)i(of)h(the)g
(parallel)g(e)o(x)o(ecution)e(by)i(bounding)e(the)i(e)o(xcess)g(space)g
(allocated)g(\(compared)g(to)f(the)2 5162 y(1)t Fg(D)t(F)r
FN(-schedule)r(\))25 b(during)f(each)i(co)o(v)o(ering)d(interv)n(al)h
(of)h FI(\033)1959 5177 y Fq(p)1999 5162 y FN(.)1900
5589 y(13)p eop
%%Page: 14 17
14 16 bop 0 100 a FK(4.2.2)99 b(Analysis)24 b(of)h(space)g(bound)0
287 y FN(T)-8 b(o)26 b(analyze)g(the)f(space)h(bound,)f(we)h(\002rst)g
(bound)f(the)h(number)f(of)h(hea)n(vy)f(premature)h(nodes)f(in)h(an)o
(y)f(pre\002x)h(of)0 408 y(the)g(parallel)g(e)o(x)o(ecution)f(\(Lemma)h
(4.2\).)35 b(This)25 b(bound)h(is)f(obtained)h(by)g(counting)f(the)h
(maximum)e(number)i(of)0 528 y(hea)n(vy)d(premature)g(nodes)f(e)o(x)o
(ecuted)g(in)h(each)g(co)o(v)o(ering)f(interv)n(al)g(of)h
FI(\033)2476 543 y Fq(p)2516 528 y FN(.)30 b(Since)23
b(each)h(hea)n(vy)e(premature)h(node)0 648 y(can)j(account)g(for)g(up)g
(to)f FI(K)33 b FN(additional)25 b(space)h(compared)g(to)f(the)h
(serial)g(e)o(x)o(ecution)e(\(here)j FI(K)33 b FN(is)25
b(the)h(memory)0 769 y(threshold\),)k(we)f(can)h(relate)g(the)f(number)
g(of)h(premature)f(nodes)g(to)g(the)h(space)f(requirement)g(of)h(the)f
(parallel)0 889 y(e)o(x)o(ecution)23 b(\(Lemma)i(4.3\).)146
1010 y(W)-8 b(e)34 b(be)o(gin)e(by)i(pro)o(ving)e(the)h(follo)n(wing)e
(lemma)i(re)o(garding)f(the)h(nodes)g(in)g(a)h(deque)f(belo)n(w)g(an)o
(y)g(of)g(the)0 1130 y(nodes)24 b(on)h(the)g(last)f(path)g(in)h
FI(\033)1046 1145 y Fq(p)1086 1130 y FN(.)0 1382 y FK(Lemma)g(4.1)49
b FM(Let)24 b FI(\033)731 1397 y Fq(p)795 1382 y FM(be)g(any)g(pr)l
(e\002x)g(of)g(the)g(par)o(allel)e(sc)o(hedule)o(,)h(and)h(let)f
FF(P)33 b FM(be)24 b(the)g(last)f(path)g(in)g FI(\033)3497
1397 y Fq(p)3538 1382 y FM(.)30 b(F)-10 b(or)23 b(any)0
1502 y FG(1)k FF(\024)i FI(i)f FF(\024)g FI(\016)t FM(,)c(if)h
FI(u)581 1517 y Fq(i)633 1502 y FM(is)g(the)f(node)h(on)f(the)h(path)f
FF(P)34 b FM(at)24 b(depth)g FI(i)p FM(,)h(then)-32 1706
y(1.)48 b(If)32 b(during)e(the)h(e)n(xecution)g FI(u)1101
1721 y Fq(i)1161 1706 y FM(is)f(on)i(some)f(deque)o(,)i(then)e(e)o
(very)h(node)f(below)g(it)g(in)g(its)g(deque)g(is)g(the)g(right)91
1826 y(c)o(hild)24 b(of)g(some)h(node)g(in)f FF(P)8 b
FM(.)-32 2029 y(2.)48 b(When)25 b FI(u)399 2044 y Fq(i)451
2029 y FM(is)e(e)n(xecuted)i(on)f(a)g(pr)l(ocessor)-11
b(,)23 b(e)o(very)i(node)f(on)g(the)g(pr)l(ocessor')l(s)f(deque)h(must)
g(be)g(the)g(right)f(c)o(hild)91 2150 y(of)i(some)f(node)h(in)f
FF(P)8 b FM(.)0 2378 y(Pr)l(oof)p FN(:)63 b(W)-8 b(e)26
b(can)g(pro)o(v)o(e)f(this)g(lemma)g(to)g(be)h(true)f(for)h(an)o(y)f
FI(u)2121 2393 y Fq(i)2175 2378 y FN(by)g(induction)f(on)i
FI(i)p FN(.)33 b(The)26 b(base)g(case)g(is)f(the)h(root)0
2499 y(node.)k(Initially)22 b(it)i(is)f(the)g(only)g(node)h(in)f(its)g
(deque,)h(and)f(gets)g(e)o(x)o(ecuted)g(before)h(an)o(y)g(ne)n(w)f
(nodes)g(are)h(created.)0 2619 y(Thus,)30 b(the)f(lemma)g(is)g(tri)n
(vially)e(true.)44 b(Let)30 b(us)f(assume)g(the)g(lemma)f(is)h(true)h
(for)f(all)g FI(u)3035 2634 y Fq(j)3072 2619 y FN(,)h(for)g
FG(0)36 b FF(\024)g FI(j)42 b FF(\024)37 b FI(i)p FN(.)45
b(W)-8 b(e)0 2739 y(must)24 b(pro)o(v)o(e)f(that)i(it)f(is)g(true)h
(for)g FI(u)1190 2754 y Fq(i)p FH(+1)1308 2739 y FN(.)146
2860 y(Since)d FI(u)445 2875 y Fq(i)493 2860 y FN(is)e(the)h(last)f
(parent)h(of)g FI(u)1312 2875 y Fq(i)p FH(+1)1430 2860
y FN(,)h FI(u)1533 2875 y Fq(i)p FH(+1)1671 2860 y FN(becomes)f(ready)g
(immediately)e(after)i FI(u)3061 2875 y Fq(i)3110 2860
y FN(is)f(e)o(x)o(ecuted)g(on)h(some)0 2980 y(processor)-5
b(.)30 b(There)25 b(are)h(tw)o(o)e(possibilities:)-32
3183 y(1.)48 b FI(u)147 3198 y Fq(i)p FH(+1)298 3183
y FN(is)32 b(e)o(x)o(ecuted)g(immediately)e(follo)n(wing)h
FI(u)1785 3198 y Fq(i)1845 3183 y FN(on)i(that)f(processor)-5
b(.)53 b(Property)33 b(\(1\))g(hold)f(tri)n(vially)e(since)91
3304 y FI(u)147 3319 y Fq(i)p FH(+1)292 3304 y FN(is)c(ne)n(v)o(er)g
(put)g(on)g(a)h(deque.)36 b(If)27 b(the)f(deque)h(remains)f(unchanged)g
(before)h FI(u)2922 3319 y Fq(i)p FH(+1)3066 3304 y FN(is)f(e)o(x)o
(ecuted,)g(property)91 3424 y(\(2\))33 b(holds)f(tri)n(vially)e(for)j
FI(u)1039 3439 y Fq(i)p FH(+1)1157 3424 y FN(.)54 b(Otherwise,)33
b(the)g(only)e(change)i(that)f(may)g(be)h(made)f(to)g(the)h(deque)f(is)
g(the)91 3545 y(addition)h(of)h(the)g(right)f(child)g(of)h
FI(u)1353 3560 y Fq(i)1415 3545 y FN(before)g FI(u)1759
3560 y Fq(i)p FH(+1)1911 3545 y FN(is)g(e)o(x)o(ecuted,)h(if)f
FI(u)2575 3560 y Fq(i)2637 3545 y FN(w)o(as)g(a)g(fork)g(with)f
FI(u)3370 3560 y Fq(i)p FH(+1)3522 3545 y FN(as)h(its)f(left)91
3665 y(child.)d(In)25 b(this)e(case)i(too,)f(property)g(\(2\))g(holds,)
g(since)g(the)g(ne)n(w)g(node)g(in)g(the)h(deque)f(is)g(right)g(child)f
(of)i(some)91 3785 y(node)g(in)f FF(P)8 b FN(.)-32 3989
y(2.)48 b FI(u)147 4004 y Fq(i)p FH(+1)294 3989 y FN(is)28
b(added)h(to)f(the)h(processor')-5 b(s)28 b(deque)g(after)i
FI(u)1924 4004 y Fq(i)1980 3989 y FN(is)e(e)o(x)o(ecuted.)42
b(This)28 b(may)g(happen)h(because)g FI(u)3617 4004 y
Fq(i)3673 3989 y FN(w)o(as)g(a)91 4109 y(fork)f(and)f
FI(u)512 4124 y Fq(i)p FH(+1)657 4109 y FN(w)o(as)g(its)f(right)h
(child)f(\(see)i(Figure)f(8\),)h(or)f(because)h(the)e(processor)h(e)o
(xhausted)g(its)f(memory)91 4230 y(quota.)38 b(In)27
b(the)g(former)h(case,)g(since)f FI(u)1446 4245 y Fq(i)p
FH(+1)1592 4230 y FN(is)f(the)i(right)e(child)h(of)g
FI(u)2443 4245 y Fq(i)2471 4230 y FN(,)h(nothing)e(can)h(be)h(added)f
(to)g(the)g(deque)91 4350 y(before)i FI(u)430 4365 y
Fq(i)p FH(+1)547 4350 y FN(.)40 b(In)28 b(the)g(latter)f(case)h(\(that)
g(is,)g(the)f(memory)g(quota)g(is)h(e)o(xhausted)f(before)h
FI(u)3251 4365 y Fq(i)p FH(+1)3397 4350 y FN(is)f(e)o(x)o(ecuted\),)91
4470 y(the)g(only)e(node)i(that)e(may)i(be)f(added)h(to)f(the)g(deque)g
(before)h FI(u)2276 4485 y Fq(i)p FH(+1)2421 4470 y FN(is)f(the)g
(right)g(child)g(of)g FI(u)3268 4485 y Fq(i)3296 4470
y FN(,)h(if)f FI(u)3491 4485 y Fq(i)3545 4470 y FN(is)g(a)h(fork.)91
4591 y(This)k(does)g(not)g(violate)f(the)i(lemma.)49
b(Once)32 b FI(u)1773 4606 y Fq(i)p FH(+1)1922 4591 y
FN(is)f(added)g(to)g(the)h(deque,)h(it)d(may)h(either)h(get)f(e)o(x)o
(ecuted)91 4711 y(on)f(a)g(processor)g(when)g(it)f(becomes)h(the)g
(topmost)e(node)h(in)h(the)g(deque,)h(or)f(it)f(may)h(get)g(stolen.)45
b(If)30 b(it)g(gets)91 4831 y(e)o(x)o(ecuted)k(without)f(being)h
(stolen,)h(properties)f(\(1\))h(and)f(\(2\))h(hold,)h(since)e(no)g(ne)n
(w)g(nodes)g(can)h(be)f(added)91 4952 y(belo)n(w)d FI(u)420
4967 y Fq(i)p FH(+1)570 4952 y FN(in)g(the)g(deque.)51
b(If)32 b(it)f(is)g(stolen,)i(the)e(processor)g(that)g(steals)g(and)h
(e)o(x)o(ecutes)f(it)g(has)g(an)h(empty)91 5072 y(deque,)k(and)e
(therefore)h(properties)e(\(1\))h(and)g(\(2\))g(are)g(true,)i(and)e
(continue)f(to)h(hold)f(until)f FI(u)3393 5087 y Fq(i)p
FH(+1)3545 5072 y FN(has)i(been)91 5193 y(e)o(x)o(ecuted.)1900
5589 y(14)p eop
%%Page: 15 18
15 17 bop 484 1344 a @beginspecial 11 @llx 464 @lly 595
@urx 703 @ury 1440 @rhi @setspecial
%%BeginDocument: figures/dag7.epsi
% 0000000000000000000000000000000000000c20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000ce1000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000008c1001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000019c0003800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000001bc0007800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000001ee7005800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000001cc3009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000002013000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000067bf800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000006003000f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000004002003fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000006006003ae0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000007560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000006aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000007570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000006aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000007570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000003ae0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000007fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000c200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000038200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000070200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000e0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000180200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000300200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000e00200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000001c00200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000003800200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000006000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000c000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000038000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000070000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000e0000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000018400000000000180000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000018c0000000000c300000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000018c0000000000fe00000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000019c200e000001fc00003fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000001182009000003fc00001080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000003380001000003fc00001980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000003780003000007fe00001980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000003dce00600000ffe00000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000398600e00001ff800000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000400200001fc000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000cf02000fbf0000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000c002003ff80000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000008024003ae00000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000c07c0075600000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000006aa00000007f800003a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000757000000060c0000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000006aa0000000c0c0000c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000007570000000c040001860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000003ae0000000c0400018e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000001fc0000000c0400030e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000003100000000c0c00031e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000e10000000071800033e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000001c1000000003f00001cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000381000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000601000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000c01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000003801000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000007001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000e001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000018001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000030001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000e0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000001c0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000030800000000000380001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000031800000000000600001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000031800000000030c00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000338401c000003f80001fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000002304026000007f000008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000670004200000ff00000cc00000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000
% 000000000000000006f0000200000ff00000cc00000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000
% 000000000000000007b9c00600001ff800004800000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000
% 00000000000000000730c00400003ff800004800000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000
% 00000000000000000000800800007fe00000780000000000000000000000000000000000000000000000000000000000000000000000000000000003f1e1f99c78000000000000000000
% 000000000000000000019e1000007f0000007800000000000000000000000000000000000000000000000000000000000000000000000000000000067233198c8c000000000000000000
% 000000000000000000018020000ffc00000030000000000000000000000000000000000000000000000000000000000000000000000000000000000c37f6198dfc000000000000000000
% 000000000000000000010042003fe000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000c3606198d80000000000000000000
% 0000000000000000000180fc003ae00000007c000060000000000000000000000000000000000000000000000000000000000000000000000000000c3606198d80000000000000000000
% 000000000000000000000000007560000001fe000060000000000000000000000000000000000000000000000000000000000000000000000000000e360e198d82000000000000000000
% 000000000000000000000000006aa00000018300006000000000000000000000000000000000000000000000000000000000000000000000000000063317399cc4000000000000000000
% 000000000000000000000000007570000003030000600000000000000000000000000000000000000000000000000000000000000000000000000003f1e3f8ec78000000000000000000
% 000000000000000000000000006aa00000030100004000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000
% 000000000000000000000000007570000003010000de00000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000
% 000000000000000000000000003ae0000003010000f700000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000
% 000000000000000000000000001fc0000003030000c300000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000
% 000000000000000000000000000000000001c60001c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000100000000fc00018700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000018600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000038c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000031800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000100000000000003e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fffffffff800000000000000000
% 000000000000000000000000000fc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000000000000000003ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000000000000000003ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000c0000800000000000000000
% 000000000000000000000000001fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000e0000800000000000000000
% 000000000000000000000000001fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000c0000801000000000000000
% 000000000000000000000000001fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000c0000803000000000000000
% 000000000000000000000000000fc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000c0000807cf8fe0000000000
% 000000000000000000000000000fc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000fc000080318ce70000000000
% 000000000000000006100000000fc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040019c000080330ec70000000000
% 0000000000000000063000000007800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004003180000803306c30000000000
% 0000000000000000063000000007800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004006180000803306c30000000000
% 00000000000000000670801c0007800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004006380000803386c30000000000
% 00000000000000000460800c000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400c3800008031ccc60000000000
% 00000000000000000ce00018000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400c780000803cf8fc0000000000
% 00000000000000000de00018000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400cf80000800000c00000000000
% 00000000000000000f738018000f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004007300000800000c00000000000
% 00000000000000000e618010003fc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000c00000000000
% 0000000000000000000100300035600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800001f00000000000
% 000000000000000000033c30006ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000000000300300075700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000000000020030006aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000000000300f80075700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000000000000000006ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000000000000000003dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000003ff800000000000000000
% 000000000000000000000000003f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffff800000000000000000
% 000000000000000000000000007200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffe0000000800000000000000000
% 00000000000000000000000000c2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000000000000000182000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000000000000000702000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004308000000800000000000000000
% 0000000000000000000000000e02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004318000000800000000000000000
% 0000000000000000000000001c02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004318000000800000000000000000
% 0000000000000000000000003002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004338400070800000000000000000
% 0000000000000000000000006002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004230400030800000000000000000
% 000000000000000000000001c002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004670000060800000000000000000
% 00000000000000000000000380020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046f0010060800000000000000000
% 00000000000000000000000700020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047b9c10060800000000000000000
% 00000000000000000000000c0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004730c10040800000000000000000
% 00000000000000000000001800020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040009ff0c0800000000000000000
% 00000000000000000000007000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040018100c0800000000000000000
% 0000000000000000000000e000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040018100c0800000000000000000
% 0000000000000000000001c000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040010100c0800000000000000000
% 00000000000000000000030000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040018103e0800000000000000000
% 0000000000308000000186000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000000003180000001fc00003fc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000000003180000003f8000010800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000000003384000007f8000019800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000000002304000007f8000019800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000670000000ffc0000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000003ff800000000000000000
% 00000000006f0000001ffc00000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffff800000000000000000
% 00000000007b9c00003ff000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffe0000000800000000000000000
% 0000000000730c00003f8000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000800007e000000060000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000180007f000000006000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000000000018001fe00000000f800000000000000000000000000d58000000000000000000000000000000000000000000000000000000000000004000f00000800000000000000000
% 00000000000010001ab00000003fc00000000000000000000000001ab8000000000000000000000000000000000000000000000000000000000000004003980000800000000000000000
% 0000000000001800357000000030600007800000000000000000001d5c000000000000000000000000000000000000000000000000000000000000004006100000800000000000000000
% 00000000000000003ab80000006060001cc00000000000000000001aa8000000000000000000000000000000000000000000000000000000000000004006000000800000000000000000
% 0000000000000000355000000060200030800000000000000000001d5c00000000000000000000000000000000000000000000000000000000000000400c000000800000000000000000
% 00000000000000003ab800000060200030000000000000000000001ab800000000000000000000000000000000000000000000000000000000000000400c000000800000000000000000
% 0000000000000000357000000060200060000000000000000000000f7000000000000000000000000000000000000000000000000000000000000000400c000000800000000000000000
% 00000000000000001ee0000000606000600000000000000000000007e000000000000000000000000000000000000000000000000000000000000000400e200000800000000000000000
% 00000000000000003fc000000038c00060000000000000000000000080000000000000000000000000000000000000000000000000000000000000004007c00000800000000000000000
% 000000000000000061000000001f800071000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000000c1000000000000003e000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000003810000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000007010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000000e010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000000000001c010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000000000030010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000000000000600100000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000003ff800000000000000000
% 00000000000001c001000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ffffffffff800000000000000000
% 000000000000038001000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ffe0000000800000000000000000
% 0000000000000700010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004003000000800000000000000000
% 0000000000000e00010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004003000000800000000000000000
% 0000000000001800010000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004003000000800000000000000000
% 00000000000030000100000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000004003000000800000000000000000
% 000000000000e0000fc000000000000000000000000000000000001ff8000000000000000000000000000000000000000000000000000000000000004002000000800000000000000000
% 000000000001c0003ff000000000000000000000000000000000001ff80000000000000000000000000000000000000003f8000000000000000000004006f00000800000000000000000
% 00000000000380003ff000000000000000000000000000000000000ff00000000000038000000380000000000000e000031c000000000000000000004007b80000800000000000000000
% 00000000000700001fe000000000000000000000000000000000000ff000000000000180000001800000000000006000030c000000000000000000004006180000800000000000000000
% 00000000030c00001fe000000000000000000000000000000000000ff000000000000180000001800000000000046000030c00000000000000000000400e180000800000000000000000
% 00000000031800001fe0000000000000000000000000000000000007e0000000000001800000018000000000000c6000070c00000000000000000000400c380000800000000000000000
% 0000000007f000000fc0000000000000000000000000000000000007e0003800dc3e1f8f1f01e18f8dc3f81fc79f7e00063800000000000000000000400c300000800000000000000000
% 000000000ce000000fc0000000000000000000000000000000000007e0001000e6633391b1033198ce66601ceccc730007f000000000000000000000401c600000800000000000000000
% 000000000ce000000fc0000000000000000000000000000000000003c0000000c6c3e1bfb80231b0ec663018e8cc63000600000000000000000000004018c00000800000000000000000
% 00000000187000000780000000000000000000000000000000000003c0000000c6c1e1b01e01f1b06c66301867cc63000e0000000000000000000000401f000000800000000000000000
% 0000000030f000000780000000000000000000000000000000000003c0000000c6c1e1b0070331b06c6360186ccc63000c00000000000000000000004000000000800000000000000000
% 0000000037800000078000000000000000000000000000000000000180000000c6e1f1b0438631b86c63c01878cc63000c00000000000000000000004000000000800000000000000000
% 000000007e000000030000000000000000000000000000000000000180001000c67331989186319ccc670018d8cc63001c00000000000000000000004000000000800000000000000000
% 00000000f00000000300000000000000000000000000000000000003e0003800ee3e1f8f1f03bbcf8ee7f01f8eef77003c00000000000000000000004000000000800000000000000000
% 0000001fc000000007c000000000000000000000000000000000000ff0000000000000000000000000040818000000000000000000000000000000004000000000800000000000000000
% 0000007f800000001fe000000000000000000000000000000000000d580000000000000000000000000c08180000000000000000000000000000000040000003ff800000000000000000
% 00000060c00000001ab000000000000000000000000000000000001ab80000000000000000000000000e101800000000000000000000000000000000ffffffffff800000000000000000
% 000000c0c0000000357000000000000000000000000000000000001d5c00000000000000000000000007e03e00000000000000000000000000000000ffe0000000800000000000000000
% 000000c0400000003ab800000000000000000000000000000000001aa8000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000c04000000035500079c000000000000000000000000000001d5c000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000c0400000003ab80071c000000000000000000000000000001ab8000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 000000c0c0000000357000738000000000000000000000000000000f70000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 00000071800000001ee0007386000f00000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000004003a00000800700000000000000
% 0000003f000000000fc0007386001e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004006600000800300000000000000
% 0000000400000000000000e7800006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400c600000800300004200000000
% 0000000400000000000000ef40080e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401860000080030000c600000000
% 0000000400000000000000ebde080e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004018e000008003f0f9ff9f1bbc00
% 0000000400000000000000f38c080c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004030e000008003998cc6319ce600
% 0000000400000000000000000cff8c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004031e0000080031f0ec661d8c600
% 0000000400000000000000001c081c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004033e0000080030f06c660d8c600
% 0000000400000000000000001c081c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401cc0000080030f06c660d8c600
% 0000000400000000000000001a081c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000080030f86c670d8c600
% 0000000400000000000000001c087e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800319ccc63998c600
% 00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000008003e0f8f79f1cee00
% 0000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000800000000000000000
% 0000007f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fffffffff800000000000000000
% 00c0002100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00e0003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00c0003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00c0001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00c0001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0fc0001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 19c0001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 3180001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 6180007f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 63800060c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% c38000c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% c78000c040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% cf8000c040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 730000c040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000007180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000003f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 5 FMDOCUMENT
0 0 /Times-BoldItalic FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
41 482.29 43.98 482.29 41 471.91 38.02 482.29 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
41 502 41 482.54 2 L
7 X
V
2 Z
0 X
N
52.65 513.25 54.56 510.97 44.69 506.58 50.74 515.53 4 Y
0 Z
N
81 537 52.84 513.41 2 L
2 Z
N
90 450 0.75 0.75 219.96 95.16 552.19 GG
96.15 553.02 96.86 548.98 85.09 543.75 92.3 554.43 4 Y
1.5 H
0 Z
N
96.15 553.02 96.86 548.98 85.09 543.75 92.3 554.43 4 Y
V
120 573 95.16 552.19 2 L
2 Z
N
90 450 0.75 0.75 219.96 134.16 629.19 GG
135.15 630.02 135.86 625.98 124.09 620.75 131.3 631.43 4 Y
0 Z
N
135.15 630.02 135.86 625.98 124.09 620.75 131.3 631.43 4 Y
V
159 650 134.16 629.19 2 L
2 Z
N
90 450 0.75 0.75 219.96 172.16 663.19 GG
173.15 664.02 173.86 659.98 162.09 654.75 169.3 665.43 4 Y
0 Z
N
173.15 664.02 173.86 659.98 162.09 654.75 169.3 665.43 4 Y
V
197 684 172.16 663.19 2 L
V
2 Z
N
90 450 0.75 0.75 270 83 519.86 GG
83 521.16 86.55 519.11 83 506.72 79.45 519.11 4 Y
0 Z
N
83 521.16 86.55 519.11 83 506.72 79.45 519.11 4 Y
V
83 535 83 519.86 2 L
7 X
V
2 Z
0 X
N
122 554.29 124.98 554.29 122 543.91 119.02 554.29 4 Y
0.5 H
0 Z
N
122 574 122 554.54 2 L
7 X
V
2 Z
0 X
N
159 631.29 161.98 631.29 159 620.91 156.02 631.29 4 Y
0 Z
N
159 651 159 631.54 2 L
7 X
V
2 Z
0 X
N
198 664.29 200.98 664.29 198 653.91 195.02 664.29 4 Y
0 Z
N
198 684 198 664.54 2 L
7 X
V
2 Z
0 X
N
3 X
90 450 4.5 4.5 83.5 501.5 G
0 X
90 450 4.5 4.5 83.5 501.5 A
3 X
90 450 4.5 4.5 83.5 539.5 G
0 X
90 450 4.5 4.5 83.5 539.5 A
3 X
90 450 4.5 4.5 122.5 576.5 G
0 X
90 450 4.5 4.5 122.5 576.5 A
3 X
90 450 4.5 4.5 122.5 617.5 G
0 X
90 450 4.5 4.5 122.5 617.5 A
3 X
90 450 4.5 4.5 158.5 651.5 G
0 X
90 450 4.5 4.5 158.5 651.5 A
3 X
90 450 4.5 4.5 198.5 685.5 G
0 X
90 450 4.5 4.5 198.5 685.5 A
7 X
90 450 4.5 4.5 41.5 501.5 G
0 X
90 450 4.5 4.5 41.5 501.5 A
7 X
90 450 4.5 4.5 122.5 538.5 G
0 X
90 450 4.5 4.5 122.5 538.5 A
7 X
90 450 4.5 4.5 159.5 615.5 G
0 X
90 450 4.5 4.5 159.5 615.5 A
7 X
90 450 4.5 4.5 197.5 648.5 G
0 X
90 450 4.5 4.5 197.5 648.5 A
90 450 0.75 0.75 270 123 595.86 GG
123 597.16 126.55 595.11 123 582.72 119.45 595.11 4 Y
1.5 H
0 Z
N
123 597.16 126.55 595.11 123 582.72 119.45 595.11 4 Y
V
123 611 123 595.86 2 L
7 X
V
2 Z
0 X
N
0 20 Q
(u) 100 493 T
0 16 Q
(i+1) 111.12 488 T
1 20 Q
(u) 52 546 T
1 16 Q
(i) 62 541 T
1 20 Q
(u) 79 580 T
1 16 Q
(i-1) 89 575 T
1 20 Q
(u) 80 625 T
1 16 Q
(i-2) 90 620 T
1 20 Q
(u) 117 658 T
1 16 Q
(i-3) 127 653 T
1 20 Q
(u) 158 693 T
1 16 Q
(i-4) 168 688 T
1 20 Q
(b) 178 607 T
(c) 141 533 T
493 482 532 598 R
7 X
V
0.5 H
0 X
N
(d) 12 467 T
(a) 502 490 T
(a) 218 644 T
(b) 503 511 T
(c) 504 535 T
(u) 496 560 T
1 16 Q
(i+1) 506 555 T
1 20 Q
(d) 504 581 T
2 18 Q
(top) 541 583 T
(bottom) 545 487 T
(deque) 488 617 T
90 450 0.75 0.75 270 236 520.86 GG
236 522.16 239.55 520.11 236 507.72 232.45 520.11 4 Y
1.5 H
0 Z
N
236 522.16 239.55 520.11 236 507.72 232.45 520.11 4 Y
V
236 536 236 520.86 2 L
7 X
V
2 Z
0 X
N
3 X
90 450 4.5 4.5 236.5 502.5 G
0.5 H
0 X
90 450 4.5 4.5 236.5 502.5 A
3 X
90 450 4.5 4.5 236.5 540.5 G
0 X
90 450 4.5 4.5 236.5 540.5 A
(:  nodes along path) 253 507 T
1 20 Q
(P) 397.99 507 T
493 572 532 573 2 L
1 H
N
493 548 532 549 2 L
N
493 526 532 527 2 L
N
493 504 532 505 2 L
N
7 X
90 450 4.5 4.5 41.5 468.5 G
0.5 H
0 X
90 450 4.5 4.5 41.5 468.5 A
0 0 0 1 0 0 0 K
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 1084 1489 a FN(\(a\))1663 b(\(b\))0 1799
y(Figure)75 b(8:)131 b Fu(\(a\))70 b(A)e(portion)j(of)e(the)h
(dynamically)i(unfolding)g(dag)e(during)h(the)f(e)o(x)o(ecution.)168
b(Nodes)0 1912 y Fr(u)52 1926 y Fq(i)p Fj(\000)p FH(4)170
1912 y Fr(;)15 b(u)262 1926 y Fq(i)p Fj(\000)p FH(3)381
1912 y Fr(;)g(:)g(:)g(:)i(;)e(u)635 1926 y Fq(i)663 1912
y Fr(;)g(u)755 1926 y Fq(i)p FH(+1)899 1912 y Fu(lie)25
b(on)g(the)h(last)g(path)g Fm(P)7 b Fu(.)33 b(Node)26
b Fr(u)1997 1926 y Fq(i)p FH(+1)2140 1912 y Fu(is)f(ready)-6
b(,)26 b(and)g(is)f(currently)j(present)f(in)e(some)g(deque.)0
2025 y(The)i(deque)h(is)g(sho)n(wn)f(in)g(\(b\);)j(all)d(nodes)i(belo)n
(w)e Fr(u)1671 2039 y Fq(i)p FH(+1)1816 2025 y Fu(on)g(the)h(deque)h
(must)e(be)g(right)h(children)i(of)d(some)g(nodes)i(on)e
Fm(P)0 2138 y Fu(abo)o(v)o(e)d Fr(u)289 2152 y Fq(i)p
FH(+1)407 2138 y Fu(.)k(In)23 b(this)h(e)o(xample,)g(node)g
Fr(u)1313 2152 y Fq(i)p FH(+1)1454 2138 y Fu(w)o(as)f(the)h(right)g
(child)g(of)f Fr(u)2299 2152 y Fq(i)2328 2138 y Fu(,)f(and)i(w)o(as)f
(added)h(to)f(the)h(deque)h(when)e(the)h(fork)0 2251
y(at)30 b Fr(u)147 2265 y Fq(i)204 2251 y Fu(w)o(as)g(e)o(x)o(ecuted.)
49 b(Subsequently)-6 b(,)35 b(descendents)e(of)d(the)g(left)g(child)h
(of)f Fr(u)2533 2265 y Fq(i)2590 2251 y Fu(\(e.g.,)h(node)g
Fr(d)p Fu(\),)g(may)f(be)g(added)h(to)f(the)0 2364 y(deque)25
b(abo)o(v)o(e)f Fr(u)529 2378 y Fq(i)p FH(+1)647 2364
y Fu(.)p 3867 2650 34 42 v 0 2771 a FN(T)-8 b(o)34 b(pro)o(v)o(e)e(the)
i(space)g(bound,)i(we)e(\002rst)g(bound)f(the)g FM(number)h(of)f(heavy)
i(pr)l(ematur)l(e)e(nodes)h FN(in)f(an)h(arbitrary)0
2891 y(pre\002x)20 b FI(\033)307 2906 y Fq(p)366 2891
y FN(of)g FI(s)515 2906 y Fq(p)573 2891 y FN(\(Lemma)f(4.2\).)29
b(The)19 b(proof,)h(detailed)f(belo)n(w)-6 b(,)19 b(proceeds)g(as)h
(follo)n(ws:)26 b(W)-8 b(e)20 b(focus)f(on)g(timesteps)0
3011 y(in)36 b(which)f(one)h(or)h(more)e(hea)n(vy)h(premature)h(nodes)e
(may)h(be)g(e)o(x)o(ecuted.)64 b(These)36 b(timesteps)e(are)j(split)e
(into)0 3132 y(phases,)j(such)e(that)f(each)i(phase)f(has)f(a)i
(limited)d(number)h(of)h(steal)g(attempts.)63 b(Since)36
b(a)g(hea)n(vy)g(premature)0 3252 y(node)28 b(can)h(only)f(be)h(e)o(x)o
(ecuted)e(as)i(a)g(result)f(of)g(a)h(steal,)g(we)g(bound)f(the)g
(number)g(of)h(hea)n(vy)f(premature)h(nodes)0 3373 y(e)o(x)o(ecuted)35
b(by)g(bounding)g(the)g(number)g(of)h(such)g(phases)f(that)g(can)h
(occur)h(in)e(the)h(parallel)f(pre\002x)h FI(\033)3616
3388 y Fq(p)3657 3373 y FN(.)63 b(The)0 3493 y(phases)24
b(are)g(bound)f(by)h(considering)f(each)i(co)o(v)o(ering)d(interv)n(al)
h(of)h FI(\033)2385 3508 y Fq(p)2449 3493 y FN(separately)-6
b(.)30 b(The)24 b(basic)g(idea)g(is)g(to)f(sho)n(w)0
3613 y(that)f(with)g(a)i(constant)e(probability)-6 b(,)21
b(the)h(current)i(ready)f(node)f FI(u)h FN(along)f(the)h(last)f(path)h
(in)f FI(\033)3163 3628 y Fq(p)3226 3613 y FN(will)g(get)h(e)o(x)o
(ecuted)0 3734 y(during)j(a)i(phase,)f(since)g(the)g(deque)g
(containing)e FI(u)i FN(must)f(be)h(a)g(candidate)g(for)g(steals.)37
b(The)27 b(current)g(co)o(v)o(ering)0 3854 y(interv)n(al)d(ends)h(as)g
(soon)f(as)h FI(u)g FN(is)f(e)o(x)o(ecuted)h(\(by)g(de\002nition\),)f
(thereby)h(limiting)d(the)j(number)g(of)g(phases)g(in)f(the)0
3974 y(interv)n(al.)0 4226 y FK(Lemma)h(4.2)49 b FM(Let)20
b FI(\033)727 4241 y Fq(p)788 4226 y FM(be)g(any)g(par)o(allel)e(pr)l
(e\002x)j(of)f(a)g FI(p)p FM(-sc)o(hedule)f(pr)l(oduced)g(by)i
(algorithm)d FL(DFDeques)p FM(\()p FI(K)7 b FM(\))21
b(for)0 4347 y(a)27 b(computation)e(with)h(depth)g FI(D)s
FM(,)h(in)g(whic)o(h)f(e)o(very)h(action)f(allocates)g(at)g(most)g
FI(K)34 b FM(space)o(.)i(Then)27 b(the)g(e)n(xpected)0
4467 y(number)g(of)f(heavy)i(pr)l(ematur)l(e)f(nodes)g(in)f
FI(\033)1550 4482 y Fq(p)1618 4467 y FM(is)g FI(O)s FG(\()p
FI(p)d FF(\001)h FI(D)s FG(\))p FM(.)37 b(Further)-11
b(,)27 b(for)f(any)i FI(\017)k(>)g FG(0)p FM(,)27 b(the)g(number)g(of)g
(heavy)0 4588 y(pr)l(ematur)l(e)e(nodes)f(is)g FI(O)s
FG(\()p FI(p)e FF(\001)f FG(\()p FI(D)k FG(+)d(ln)o(\(1)p
FI(=\017)p FG(\)\)\))j FM(with)g(pr)l(obability)d(at)i(least)g
FG(1)e FF(\000)h FI(\017)p FM(.)0 4816 y(Pr)l(oof)p FN(:)80
b(Consider)30 b(the)f(start)h(of)f(an)o(y)h(co)o(v)o(ering)e(interv)n
(al)h FI(I)2110 4831 y Fq(i)2168 4816 y FN(of)h FI(\033)2336
4831 y Fq(p)2376 4816 y FN(,)h(for)f FI(i)37 b FG(=)g(1)p
FI(;)17 b(:)g(:)g(:)f(;)h(\016)33 b FN(\(we)d(will)f(look)g(at)h(the)0
4936 y(last)24 b(co)o(v)o(ering)g(interv)n(al)g FI(I)904
4951 y Fq(\016)r FH(+1)1057 4936 y FN(separately\);)h(here)h
FI(\016)j FN(is)24 b(the)h(depth)f(of)h(the)g(last)g(non-premature)f
(node)h(e)o(x)o(ecuted)0 5057 y(in)34 b FI(\033)167 5072
y Fq(p)207 5057 y FN(.)59 b(Let)34 b FI(u)514 5072 y
Fq(i)576 5057 y FN(be)h(the)f(node)g(at)g(depth)g FI(i)g
FN(on)g(the)h(last)e(path)h FF(P)43 b FN(in)34 b FI(\033)2466
5072 y Fq(p)2506 5057 y FN(.)59 b(By)35 b(Lemma)e(3.1,)k(all)d(nodes)f
(in)h(the)0 5177 y(deques)28 b(to)f(the)h(left)g(of)g
FI(u)888 5192 y Fq(i)916 5177 y FN(')-5 b(s)28 b(deque,)g(and)g(all)g
(nodes)g(abo)o(v)o(e)f FI(u)2182 5192 y Fq(i)2238 5177
y FN(in)g(its)g(deque)i(are)f(non-premature.)40 b(Let)28
b FI(x)3749 5192 y Fq(i)3806 5177 y FN(be)0 5297 y(the)j(number)f(of)i
(nodes)e(belo)n(w)g FI(u)1194 5312 y Fq(i)1253 5297 y
FN(in)h(its)f(deque.)50 b(Because)32 b(steals)e(tar)n(get)h(the)g
(\002rst)g(\(leftmost\))g FI(p)g FN(deques)f(in)1900
5589 y(15)p eop
%%Page: 16 19
16 18 bop 0 100 a FN(the)28 b(global)f(list)f(of)i(deques)g
FF(R)p FN(,)h(hea)n(vy)f(premature)g(nodes)f(can)h(be)g(pick)o(ed)g(in)
f(an)o(y)g(timestep)g(from)g(at)h(most)f FI(p)0 220 y
FN(deques.)40 b(Further)l(,)30 b(e)n(v)o(ery)d(time)h(a)g(hea)n(vy)g
(premature)g(node)g(is)g(pick)o(ed,)h(the)f(deque)g(containing)f
FI(u)3462 235 y Fq(i)3517 220 y FN(must)h(also)0 340
y(be)h(a)f(candidate)h(deque)f(to)g(be)h(pick)o(ed)f(as)g(a)h(tar)n
(get)g(for)g(a)f(steal;)i(that)e(is,)h FI(u)2645 355
y Fq(i)2701 340 y FN(must)e(be)i(among)f(the)g(leftmost)f
FI(p)0 461 y FN(deques.)39 b(Consider)27 b(only)g(the)g(timesteps)f(in)
h(which)h FI(u)1919 476 y Fq(i)1974 461 y FN(is)f(among)g(the)g
(leftmost)f FI(p)i FN(deques;)g(we)g(will)f(refer)h(to)0
581 y(such)c(timesteps)f(as)h FE(candidate)g FN(timesteps.)29
b(Because)c(ne)n(w)f(deques)g(may)g(be)g(created)h(to)f(the)g(left)g
(of)g FI(u)3609 596 y Fq(i)3661 581 y FN(at)h(an)o(y)0
702 y(time,)f(the)h(candidate)f(timesteps)g(need)h(not)f(be)h
(contiguous.)146 822 y(W)-8 b(e)21 b(no)n(w)f(bound)g(the)g(total)g
(number)g(of)g(steal)h(attempts)e(that)h(tak)o(e)g(place)h(during)f
(the)g(candidate)h(timesteps.)0 942 y(Each)28 b(such)f(steal)g(attempt)
f(may)h(result)g(in)g(the)g(e)o(x)o(ecution)f(of)i(a)f(hea)n(vy)h
(premature)f(node;)h(steals)f(in)g(all)g(other)0 1063
y(timesteps)k(result)h(in)g(the)h(e)o(x)o(ecution)e(of)h(hea)n(vy)-6
b(,)34 b(b)n(ut)e(non-premature)g(nodes.)54 b(Each)33
b(timestep)e(can)i(ha)n(v)o(e)f(at)0 1183 y(most)c FI(p)i
FN(steal)f(attempts.)44 b(Therefore,)32 b(we)e(can)g(partition)e(the)h
(candidate)h(timesteps)e(into)h FE(phases)p FN(,)h(such)g(that)0
1303 y(each)c(phase)g(has)f(between)h FI(p)f FN(and)h
FG(2)p FI(p)c FF(\000)h FG(1)i FN(steal)h(attempts.)31
b(W)-8 b(e)26 b(call)g(a)f(phase)h(in)f(interv)n(al)f
FI(I)3240 1318 y Fq(i)3294 1303 y FE(successful)k FN(if)d(at)0
1424 y(least)e(one)h(of)g(its)e FG(\002\()p FI(p)p FG(\))i
FN(steal)f(attempts)g(tar)n(gets)g(the)h(deque)f(containing)f
FI(u)2585 1439 y Fq(i)2613 1424 y FN(.)31 b(Let)23 b
FI(X)2906 1439 y Fq(ij)2990 1424 y FN(be)h(the)g(random)f(v)n(ariable)0
1544 y(with)i(v)n(alue)h(1)g(if)g(the)g FI(j)800 1508
y Fq(th)897 1544 y FN(phase)g(in)g(interv)n(al)f FI(I)1625
1559 y Fq(i)1679 1544 y FN(is)h(successful,)g(and)g(0)g(otherwise.)35
b(Because)27 b(tar)n(gets)f(for)g(steal)0 1665 y(attempts)i(are)h
(chosen)g(at)g(random)f(from)h(the)g(leftmost)e FI(p)i
FN(deques)g(with)f(uniform)g(probability)-6 b(,)28 b(and)h(because)0
1785 y(each)c(phase)g(has)g(at)g(least)f FI(p)h FN(steal)g(attempts,)
1281 2066 y FG(Pr)17 b([)p FI(X)1510 2081 y Fq(ij)1598
2066 y FG(=)28 b(1])83 b FF(\025)g FG(1)22 b FF(\000)2192
1920 y Fe( )2257 2066 y FG(1)g FF(\000)2438 1999 y FG(1)p
2438 2043 49 4 v 2438 2135 a FI(p)2497 1920 y Fe(!)2563
1943 y Fq(p)1861 2331 y FF(\025)83 b FG(1)22 b FF(\000)2202
2263 y FG(1)p 2202 2307 V 2204 2399 a FI(e)1861 2564
y FF(\025)2031 2496 y FG(1)p 2031 2541 V 2031 2632 a(2)0
2929 y FN(Thus,)39 b(each)e(phase)g(succeeds)g(with)f(probability)f(at)
i(least)f FG(1)p FI(=)p FG(2)p FN(.)66 b(Because)38 b
FI(u)2817 2944 y Fq(i)2882 2929 y FN(had)f FI(x)3118
2944 y Fq(i)3183 2929 y FN(nodes)f(belo)n(w)g(it)g(in)0
3049 y(its)d(deque,)k(it)c(must)g(get)h(e)o(x)o(ecuted)g(before)g(or)h
(by)e(the)h(time)g FI(x)2249 3064 y Fq(i)2306 3049 y
FG(+)29 b(1)34 b FN(successful)g(steals)g(tar)n(get)g
FI(u)3509 3064 y Fq(i)3537 3049 y FN(')-5 b(s)33 b(deque.)0
3170 y(Therefore,)d(there)f(can)h(be)f(at)f(most)g FI(x)1344
3185 y Fq(i)1398 3170 y FG(+)d(1)j FN(successful)h(phases)f(in)g(the)h
(co)o(v)o(ering)e(interv)n(al)h FI(I)3314 3185 y Fq(i)3342
3170 y FN(.)43 b(The)29 b(node)f FI(u)3872 3185 y Fq(i)0
3290 y FN(may)g(get)h(e)o(x)o(ecuted)f(before)h FI(x)1069
3305 y Fq(i)1123 3290 y FG(+)c(1)j FN(steal)h(attempts)e(tar)n(get)i
(its)f(deque,)i(if)f(its)f(o)n(wner)g(processor)g(e)o(x)o(ecutes)g
FI(u)3872 3305 y Fq(i)0 3411 y FN(of)n(f)34 b(the)f(top)g(of)h(the)g
(deque.)58 b(Let)34 b(there)g(be)g(some)f FI(n)1888 3426
y Fq(i)1961 3411 y FF(\024)44 b FG(\()p FI(x)2175 3426
y Fq(i)2233 3411 y FG(+)28 b(1\))34 b FN(successful)f(phases)h(in)f
(the)h(interv)n(al)f FI(I)3847 3426 y Fq(i)3875 3411
y FN(.)0 3531 y(From)27 b(Lemma)g(4.1,)g(the)g FI(x)956
3546 y Fq(i)1012 3531 y FN(nodes)f(belo)n(w)h FI(u)1596
3546 y Fq(i)1651 3531 y FN(are)g(right)g(children)g(of)g(nodes)f(on)h
(the)g(last)g(path)g FF(P)8 b FN(.)38 b(There)27 b(are)0
3651 y FG(\()p FI(\016)g FF(\000)d FG(1\))29 b FI(<)h(D)f
FN(nodes)d(along)f FF(P)35 b FN(not)25 b(including)g
FI(u)1763 3666 y Fq(\016)1800 3651 y FN(,)i(and)f(each)g(of)g(them)g
(may)g(ha)n(v)o(e)f(at)i(most)d(one)i(right)g(child.)0
3772 y(Since)33 b(each)h(of)f(these)g(right)f(children)g(can)i(only)e
(get)g(e)o(x)o(ecuted)h(once)g(during)f(one)h(of)g(the)f(\002rst)h
FI(\016)k FN(co)o(v)o(ering)0 3892 y(interv)n(als,)393
3826 y Fe(P)481 3852 y Fq(\016)481 3917 y(i)p FH(=1)616
3892 y FI(x)671 3907 y Fq(i)731 3892 y FI(<)32 b(D)s
FN(.)38 b(Therefore,)28 b(the)f(total)f(number)h(of)g(successful)g
(phases)g(in)f(the)h(\002rst)h FI(\016)j FN(interv)n(als)26
b(is)0 3946 y Fe(P)88 3972 y Fq(\016)88 4037 y(i)p FH(=1)223
4013 y FI(n)281 4028 y Fq(i)337 4013 y FG(=)440 3946
y Fe(P)528 3972 y Fq(\016)528 4037 y(i)p FH(=1)646 4013
y FG(\()p FI(x)739 4028 y Fq(i)790 4013 y FG(+)c(1\))27
b FI(<)h FG(\()p FI(D)d FG(+)d FI(\016)t FG(\))27 b FF(\024)h
FG(2)p FI(D)s FN(.)146 4133 y(Finally)-6 b(,)37 b(consider)e(the)g
(last)f(co)o(v)o(ering)g(interv)n(al)g FI(I)1949 4148
y Fq(\016)r FH(+1)2077 4133 y FN(.)62 b(Let)35 b FI(z)40
b FN(be)c(the)f(ready)g(node)g(at)g(the)g(start)g(of)g(the)0
4253 y(interv)n(al)23 b(with)g(the)h(highest)e(priority)-6
b(.)29 b(Then,)24 b FI(z)32 b FF(62)d FI(\033)1813 4268
y Fq(p)1853 4253 y FN(,)24 b(because)g(otherwise)f FI(z)29
b FN(\(or)24 b(some)f(other)h(node\),)g(and)g(not)0 4374
y FI(v)t FN(,)31 b(w)o(ould)f(ha)n(v)o(e)f(been)i(the)f(last)f
(non-premature)h(node)g(to)g(be)g(e)o(x)o(ecuted)f(in)h
FI(\033)2756 4389 y Fq(p)2796 4374 y FN(.)47 b(Hence,)32
b(if)e FI(z)35 b FN(is)30 b(about)f(to)h(be)0 4494 y(e)o(x)o(ecuted)21
b(on)g(a)h(processor)l(,)g(then)f(interv)n(al)g FI(I)1545
4509 y Fq(\016)r FH(+1)1695 4494 y FN(is)g(empty)-6 b(.)28
b(Otherwise,)22 b FI(z)k FN(must)21 b(be)g(at)h(the)f(top)g(of)h(the)f
(leftmost)0 4614 y(deque)27 b(at)h(the)f(start)g(of)h(interv)n(al)e
FI(I)1196 4629 y Fq(\016)r FH(+1)1324 4614 y FN(.)39
b(Using)26 b(an)i(ar)n(gument)f(similar)f(to)h(that)g(of)g(Lemma)g
(4.1,)h(we)f(can)h(sho)n(w)0 4735 y(that)23 b(the)f(nodes)h(belo)n(w)f
FI(z)28 b FN(in)23 b(the)f(deque)h(must)f(be)h(right)g(children)f(of)h
(nodes)g(along)f(a)i(path)e(from)h(the)g(root)g(to)f
FI(z)t FN(.)0 4855 y(Thus,)i FI(z)29 b FN(can)24 b(ha)n(v)o(e)g(at)g
(most)f FG(\()p FI(D)g FF(\000)d FG(2\))k FN(nodes)g(belo)n(w)f(it.)30
b(Because)25 b FI(z)k FN(must)23 b(be)i(among)e(the)h(leftmost)f
FI(p)h FN(deques)0 4976 y(throughout)e(the)i(interv)n(al)f
FI(I)976 4991 y Fq(\016)r FH(+1)1104 4976 y FN(,)h(the)g(phases)g(in)f
(this)g(interv)n(al)g(are)i(formed)f(from)g(all)f(its)h(timesteps.)k(W)
-8 b(e)25 b(call)f(a)0 5096 y(phase)k FE(successful)i
FN(in)d(interv)n(al)g FI(I)1183 5111 y Fq(\016)r FH(+1)1339
5096 y FN(if)h(at)g(least)g(one)g(of)g(the)f FG(\002\()p
FI(p)p FG(\))h FN(steal)g(attempts)e(in)i(the)g(phase)f(tar)n(gets)h
(the)0 5216 y(deque)k(containing)e FI(z)t FN(.)53 b(Then)32
b(this)f(interv)n(al)g(must)f(ha)n(v)o(e)i(less)f(than)h
FI(D)j FN(successful)c(phases.)52 b(As)31 b(before,)j(the)0
5337 y(probability)23 b(of)i(a)g(phase)g(being)f(successful)h(is)f(at)h
(least)f FG(1)p FI(=)p FG(2)p FN(.)1900 5589 y(16)p eop
%%Page: 17 20
17 19 bop 146 100 a FN(W)-8 b(e)31 b(ha)n(v)o(e)f(sho)n(wn)g(that)g
(for)g(an)o(y)g FI(j)44 b FF(\024)39 b FI(\034)j FN(\(here)31
b FI(\034)43 b FN(is)30 b(the)g(length)g(of)g(the)g(parallel)h
(schedule)f FI(s)3463 115 y Fq(p)3503 100 y FN(\),)i(the)e(\002rst)0
220 y FI(j)41 b FN(timesteps)34 b(of)h(the)g(parallel)g(e)o(x)o
(ecution,)h(represented)g(by)e(the)h(parallel)g(pre\002x)h
FI(\033)2992 235 y Fq(p)3032 220 y FN(,)i(must)c(ha)n(v)o(e)h(less)f
(than)0 340 y FG(3)p FI(D)j FN(successful)e(phases)878
304 y FC(8)915 340 y FN(.)61 b(Since)35 b(a)h(hea)n(vy)f(premature)f
(node)h(can)g(only)g(be)g(e)o(x)o(ecuted)f(after)h(a)g(steal,)i(each)0
461 y(phase)32 b(may)f(result)h(in)f(less)h(than)f FG(2)p
FI(p)h FN(hea)n(vy)g(premature)g(nodes)f(being)h(stolen)f(and)h(e)o(x)o
(ecuted.)51 b(Further)l(,)34 b(for)0 581 y FI(i)47 b
FG(=)g(1)p FI(;)17 b(:)g(:)g(:)f(;)h(\016)t FN(,)37 b(in)e(each)h
(interv)n(al)e FI(I)1291 596 y Fq(i)1354 581 y FN(of)h
FI(\033)1527 596 y Fq(p)1568 581 y FN(,)i(another)e FI(p)30
b FF(\000)h FG(1)k FN(hea)n(vy)g(premature)g(nodes)g(may)g(be)g(e)o(x)o
(ecuted)0 702 y(in)e(the)g(same)h(timestep)e(that)h FI(u)1115
717 y Fq(i)1176 702 y FN(is)g(e)o(x)o(ecuted.)56 b(Since)34
b FI(\016)48 b FF(\024)c FI(D)s FN(,)36 b(if)d FI(\033)2470
717 y Fq(p)2544 702 y FN(has)h(a)f(total)g(of,)j(say)-6
b(,)35 b FI(N)44 b FN(phases,)35 b(the)0 822 y(number)29
b(of)h(hea)n(vy)g(premature)g(nodes)g(in)g FI(\033)1573
837 y Fq(p)1643 822 y FN(is)f(less)h(than)f FG(\(2)p
FI(N)37 b FG(+)25 b FI(D)s FG(\))h FF(\001)g FI(p)p FN(.)46
b(Because)31 b(the)f(entire)g(e)o(x)o(ecution)0 942 y(must)d(ha)n(v)o
(e)g(less)h(than)f FG(3)p FI(D)k FN(successful)c(phases,)i(and)e(each)i
(phase)f(succeeds)g(with)f(probability)f(at)i(least)g
FG(1)p FI(=)p FG(2)p FN(,)0 1063 y(the)h(e)o(xpected)h(number)f(of)g
(total)g(phases)g(before)h(we)g(see)g FG(3)p FI(D)i FN(successful)d
(phases)g(is)g(less)g(than)g FG(6)p FI(D)s FN(,)i(that)e(is,)0
1183 y FG(E)17 b([)p FI(N)10 b FG(])50 b FI(<)f FG(6)p
FI(D)s FN(.)66 b(Therefore,)40 b(the)d(e)o(xpected)f(number)g(of)g(hea)
n(vy)h(premature)f(nodes)h(in)f FI(\033)3241 1198 y Fq(p)3318
1183 y FN(is)g(bounded)f(by)0 1303 y FG(E)17 b([\(2)p
FI(N)32 b FG(+)22 b FI(D)s FG(\))g FF(\001)g FI(p)p FG(])28
b FI(<)f FG(\(12)p FI(D)e FG(+)d FI(D)s FG(\))f FF(\001)h
FI(p)28 b FG(=)f FI(O)s FG(\()p FI(p)22 b FF(\001)g FI(D)s
FG(\))p FN(.)146 1424 y(The)36 b(high)e(probability)g(bound)g(can)i(be)
g(pro)o(v)o(ed)e(as)h(follo)n(ws.)61 b(Suppose)35 b(the)g(e)o(x)o
(ecution)f(tak)o(es)h(at)g(least)0 1544 y FG(12)p FI(D)30
b FG(+)e(8)17 b(ln)o(\(1)p FI(=\017)p FG(\))33 b FN(phases.)54
b(Then)33 b(the)g(e)o(xpected)f(number)h(of)g(successful)f(phases)h(is)
f(at)h(least)g FI(\026)42 b FG(=)h(6)p FI(D)30 b FG(+)0
1665 y(4)17 b(ln)o(\(1)p FI(=\017)p FG(\))p FN(.)53 b(Using)31
b(the)i(Chernof)n(f)f(bound)g([39)o(,)j(Theorem)d(4.2])g(on)g(the)g
(number)g(of)g(successful)g(phases)g FI(X)8 b FN(,)0
1785 y(and)25 b(setting)e FI(a)28 b FG(=)g(6)p FI(D)c
FG(+)e(8)17 b(ln)o(\(1)p FI(=\017)p FG(\))p FN(,)25 b(we)g(get)1567
1749 y FC(9)1147 2070 y FG(Pr)16 b([)p FI(X)36 b(<)28
b(\026)21 b FF(\000)i FI(a=)p FG(2])83 b FI(<)g FG(exp)2278
1924 y Fe(")2337 2003 y FF(\000)17 b FG(\()p FI(a=)p
FG(2\))2656 1955 y FH(2)p 2337 2047 359 4 v 2462 2139
a FG(2)p FI(\026)2705 1924 y Fe(#)0 2340 y FN(Therefore,)988
2605 y FG(Pr)g([\()p FI(X)35 b(<)28 b FG(3)p FI(D)s FG(\)])83
b FI(<)h FG(exp)2001 2459 y Fe(")2257 2538 y FF(\000)p
FI(a)2385 2502 y FH(2)2425 2538 y FI(=)p FG(4)p 2059
2582 661 4 v 2059 2674 a(12)p FI(D)24 b FG(+)f(8)17 b(ln)n(\(1)p
FI(=\017)p FG(\))2730 2459 y Fe(#)1675 2888 y FG(=)84
b(exp)2001 2742 y Fe(")2364 2820 y FF(\000)p FI(a)2492
2784 y FH(2)p 2059 2864 778 4 v 2059 2956 a FG(4)22 b
FF(\001)g FG(\(2)p FI(a)g FF(\000)h FG(8)17 b(ln)n(\(1)p
FI(=\017)p FG(\)\))2847 2742 y Fe(#)1675 3117 y FF(\024)83
b FI(e)1880 3076 y Fj(\000)p Fq(a)1972 3053 y Fd(2)2007
3076 y Fq(=)p FH(8)p Fq(a)1675 3262 y FG(=)h FI(e)1880
3221 y Fj(\000)p Fq(a)q(=)p FH(8)1675 3408 y FG(=)g FI(e)1880
3367 y Fj(\000)p FH(\(6)p Fq(D)r FH(+8)13 b(ln)o(\(1)p
Fq(=\017)p FH(\)\))r Fq(=)p FH(8)1675 3553 y FI(<)84
b(e)1880 3512 y Fj(\000)p FH(8)12 b(ln\(1)p Fq(=\017)p
FH(\))q Fq(=)p FH(8)1675 3698 y FG(=)84 b FI(\017)0 3912
y FN(Because)23 b(there)e(can)h(be)g(at)f(most)g FG(3)p
FI(D)j FN(successful)d(phases,)h(algorithm)e FL(DFDeques)29
b FN(requires)22 b FG(12)p FI(D)13 b FG(+)d(8)17 b(ln)m(\(1)p
FI(=\017)p FG(\))0 4033 y FN(or)27 b(more)g(phases)g(with)f
(probability)f(at)i(most)f FI(\017)p FN(.)38 b(Recall)28
b(that)e(each)i(phase)f(consists)f(of)h FG(\002\()p FI(p)p
FG(\))g FN(steal)f(attempts.)0 4153 y(Therefore,)g FI(\033)498
4168 y Fq(p)563 4153 y FN(has)e FI(O)s FG(\()p FI(p)e
FF(\001)f FG(\()p FI(D)k FG(+)d(ln)o(\(1)p FI(=\017)p
FG(\)\)\))j FN(hea)n(vy)g(premature)g(nodes)f(with)g(probability)f(at)i
(least)g FG(1)c FF(\000)i FI(\017)p FN(.)p 3867 4153
34 42 v 0 4370 a(W)-8 b(e)28 b(can)g(no)n(w)f(state)h(a)g(lemma)f
(relating)h(the)f(number)h(of)g(hea)n(vy)f(premature)h(nodes)g(in)f
FI(\033)3145 4385 y Fq(p)3213 4370 y FN(with)g(the)h(memory)0
4490 y(requirement)c(of)h FI(s)660 4505 y Fq(p)700 4490
y FN(.)0 4735 y FK(Lemma)g(4.3)49 b FM(Let)32 b FI(G)f
FM(be)h(a)f(da)o(g)g(with)g(depth)g FI(D)s FM(,)i(in)e(whic)o(h)g(e)o
(very)h(node)f(allocates)f(at)h(most)g FI(K)39 b FM(space)o(,)33
b(and)0 4856 y(for)28 b(whic)o(h)h(the)g(serial)f(depth-\002r)o(st)g(e)
n(xecution)h(r)l(equir)l(es)f FI(S)2078 4871 y FH(1)2147
4856 y FM(space)o(.)43 b(Let)29 b FI(s)2643 4871 y Fq(p)2712
4856 y FM(be)g(the)g FI(p)p FM(-sc)o(hedule)f(of)h(length)f
FI(T)p 0 4950 1560 4 v 116 5011 a FB(8)149 5041 y Fz(Remember)e(that)i
(the)f(parallel)f(pre\002x)h Fy(\033)1368 5053 y Fc(p)1407
5041 y Fz(,)i(and)d(hence)h(the)g(classi\002cation)g(of)g(nodes)f(as)i
(premature)d(or)i(non-premature,)e(or)0 5141 y(phases)20
b(as)h(successful,)f(depends)f(on)g(the)i(choice)e(of)h(this)h
Fy(j)5 b Fz(.)116 5210 y FB(9)149 5240 y Fz(The)23 b(probability)d(of)i
(success)h(for)f(a)h(phase)f(is)h(not)f(necessarily)g(independent)e(of)
i(pre)n(vious)f(phases;)j(ho)n(we)n(v)o(er)m(,)c(because)i(each)0
5340 y(phase)e(succeeds)g(with)g(probability)e(at)j(least)g
Fw(1)p Fy(=)p Fw(2)p Fz(,)e(independent)e(of)j(other)g(phases,)f(we)i
(can)f(apply)f(the)h(Chernof)n(f)f(bound.)1900 5589 y
FN(17)p eop
%%Page: 18 21
18 20 bop 1536 1200 a @beginspecial 66 @llx 444 @lly
267 @urx 735 @ury 1440 @rhi @setspecial
%%BeginDocument: figures/dag8.epsi
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000060000000001800000
% 0000000000000000000000000000002000cc0000000001800600
% 0000000000000000000000000000002000cc0000000003000600
% 00000000000000000000000000000020018c0000000003000c00
% 0000000000000000000000000000002003efe3e7e1f87f001f00
% 00000000000000000000000000000020018e63ee6318c7000c00
% 00000000000000000000000000000020019c6318361987000c00
% 000000000000000000000000000000200118661831f986000800
% 000000000000000000000000000000200318663fe7fb06001800
% 00000000000000000000000000000020031866300e3306001800
% 00000000000000000000000000000020031066306c310e001800
% 000000000000000000000000000000200330c418cc719c001800
% 0000000000000000000000000000002003b0cc1f8fb9fc001c00
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000000000000000000000000000002000000000000000000000
% 0000001ffc000000000000000000002000000000000000000000
% 0000001ffe00000000000000000fffe000000000000000000000
% 0000001c0f0000000000000000fe8fffc0000000000000000000
% 0000001807000000000000001fe00021d8000000000000000000
% 000000180700000000000000fe0202221e000000000000000000
% 000000380600000000000007c000002007c00000000000000000
% 000000380e0000000000000e88888bfc88e00000000000000000
% 000000381c000000000000380000010800380000000000000000
% 0000003ffc000000000000e0202021b8203c0000000000000000
% 0000003ff0000000000003c000000198000e0000000000000000
% 000000700000000000000f8888888898888f0000000000000000
% 000000700000000000003c000000009000030000000000000000
% 00000070000000000000f202020202f202038000000000000000
% 00000060003f00000001c000000000f000018000000000000000
% 000000e0007380000003888888888bfe88888000000000000000
% 000000e000618000000600000000070380008000000000000000
% 000000e000038000001c222022203c01e220c000000000000000
% 00000000007f000000380000000018006000c000000000000000
% 0000000000fb0000007888888888b0006888c000000000000000
% 0000000001c3000000c000000000600030008000000000000000
% 0000000001870000038202020202618612028000000000000000
% 0000000001cf0000070000000000618618008000000000000000
% 0000000000fb00000e8888888888c30c18898000000000000000
% 0000000000000000180000000000430c18018000000000000000
% 0000000000000000302020202020430c18210000000000000000
% 0000000000000000600000000000430c18030000000000000000
% 0000000000000000c88888888888e31c188b0000000000000000
% 0000000000000001800000000000633810060000000000000000
% 000000000000000302020202020263f832040000000000000000
% 00000000000000060000000000003000600c0000000000000000
% 000000000000000c888888888888980068980000000000000000
% 00000000000000180000000000001c01c0180000000000000000
% 00000000000000302220222022203703a2300000000000000000
% 0000000000000060000000000000e3fe00600000000000000000
% 00000000000000c8888888888889c8b888e00000000000000000
% 0000000000000180000000000003001000c00000000000000000
% 000000000000030202020202020e021203800000000000000000
% 000000000000060000000000001c001003000000000000000000
% 0000000000000c888888888888b888988e000000000000000000
% 00000000000018000000000000e000100c000000000000000000
% 00000000000030202020202021e0203038000000000000000000
% 0000000000007000000000000700001070000000000000000000
% 000000000000e888888888888e888898e0000000000000000000
% 000000000000c000000000001c000011c0000000000000000000
% 0000000000018202020202027202021380000000000000000000
% 000000000003000000000000e000001e00000000000000000000
% 000000000006888888888889c888889c00000000000000000000
% 00000000000c0000000000070000007000000000000000000000
% 00000000001c22202220222e222023f000000000000000000000
% 00000000003800000000001c0000079000000000000000000000
% 0000000000388888888888f888889e1000000000000000000000
% 0000000000600000000000e00000f81000000000000000000000
% 0000000000c20202020203c20207c01004000000000000000000
% 000000000180000000000700003e00100e000000000000000000
% 000000000388888888888e8889f00011fe000000000000000000
% 000000000700000000001c000f80003ff3000000000000000000
% 0000000006202020202070203e0001f83b000000000000000000
% 000000000c0000000000e000700007fe1d800000000000000000
% 00000000188888888889c888c0000e8e0f800000000000000000
% 00000000300000000007000380003fcf07c00000000000000000
% 0000000062020202020e02070000e3cf83c00000000000000000
% 00000000e00000000018001c0003c1c9c1e00000000000000000
% 00000000c888888888f888b80007e0e8e0e00000000000000000
% 000000018000000000e00070000c707870700000000000000000
% 000000032220222023a022c00018387838300000000000000000
% 0000000600000000070001c0003c1c3c1c180000000000000000
% 0000000e888888898e888980006e0e3e0e180000000000000000
% 0000001c00000001d800030000c7073f070c0000000000000000
% 0000001a02020203f2020600018383ff838c00001ffc00000000
% 000000300000000660000c0003c1c381c1c400001ffe00000000
% 000000688888888cb8889c0007e0ee00e0e600001c0f00000000
% 000000c00000e00c180018000e707c0030760000180700000000
% 000001a02027fc38f82030001c383800383b0000180700000000
% 00000380000e073fc00060001c1c30001c1f0000380600000000
% 0000078888b803fc8888e0003e0e318e3e0f0000380e00000000
% 00000600003000e00000c0003707318e6f078000381c00000000
% 00000e02026000c20202c0006383a19e6f8380003ffc00000000
% 0000180000c0006000018000c1c1e196cdc180003ff030000000
% 0000388888c3062888898000e0e0e1b6cce0c000700030000000
% 0000600000c30c3000030001f07060b78c70c000700060000000
% 0000e22022831c3022230001b83830e788384000700060000000
% 0000c00000819830000600031c1c30e70c1c600060006f000000
% 000188888881b038888e00060e0e30c71e0e6000e0007f800000
% 000300000081b030000c00070707180037072000e00071800000
% 0006020202c1e022020c000f83838c003383b000e000e1800000
% 000e000000c1c0200008000dc1c1ce00e1c1f0000000c1800000
% 000c888888c1c06888980008e0e0fb81e0e0f0000000c1800000
% 00180000006000c000180018707071ff707070000000c1800000
% 00302020203000e02030001838383838383830000001c3000000
% 00300000003803800030003c1c1c7c1c1c1c18000001e6000000
% 0068888888ee078888b0003e0e0eee1e0e0e18000001fc000000
% 0060000000c7fc00003000270707c71707071800000000000000
% 00c2020203824202026000638383839383838800000000000000
% 00c000000380400000600061c1c1c1d1c1c1cc00000000000000
% 018888888b88c88888e000e0e0e3e0f0e0e0ec00000000000000
% 0300000006004000004000f07076707070707c00000000000000
% 032022202e20622022c000b8383e383838383c00000000000000
% 020000001800400000c0019c1c1c1c1c1c1c1c00000000000000
% 06888888b888c88888c0018e0e1e0e1e0e0e0e00000000000000
% 060000007000400000800107071f071707070600000000000000
% 0e020202620242020280018383b3839383838600000000000000
% 0c000000c0004000018003c1c1f1c1d1c1c1c600000000000000
% 088888898888c888898003e0e0e0e1fee0e0e600000000000000
% 18000033000040000180037070f070f470707200000000000000
% 1820203e202060202100023838f838fc38383a00000000000000
% 1000003e000040000100061c1d9c1cdc1c1c1e00000000000000
% 388888ee888ff8888b00060e1f0e0e4e0e0e0e00000000000000
% 3000004700021000030007071787074f07070600000000000000
% 320202c70203320203000783b3e383fb83838300000000000000
% 200000cc0003300003000dc1f1e1c1f9c1c1c300000000000000
% 688888b88889a8888b000ce0e1e0e0f8e0e0e300000000000000
% 600001f00001200002000c70777071ff70707300000000000000
% 622023e02221e220220008387e383b81f8383b00000000000000
% 40001f800001e00002000c1c7c1c1e00fc1c1f00000000000000
% 4888ff88888ffc888a000e0efe0e0c003e0e0f00000000000000
% c001c0e0000e070002000f07ff07180037070700000000000000
% c20700720238038206000b8e0783b0001b838300000000000000
% c0060018003000c0060009f803c1f00009c1c100000000000000
% c88c001888e000c88e0018f000e0f0000ce0e100000000000000
% c018000c00c000600600186000f060000c707100000000000000
% e038000420c00020260018c0007820000c383b00000000000000
% c018000600c0003006001cc0003c20000c1c1f00000000000000
% 88900006888000388e001ec0003e20000e0e0f00000000000000
% 801000060080003006001f80003730000f070700000000000000
% 8210000602800032060013800033b0000b838300000000000000
% 8010000600800030060011800031f00019c1c300000000000000
% 8898000488c000288e0010800030f80030e0e300000000000000
% c018000400c00020060010c000307c0030707300000000000000
% e238000c22c00060260018c000383e00f8383b00000000000000
% c00c0018006000c006001cc0007c1f81dc1c1f00000000000000
% c88e001888b000c88e001e6000ce0fff0e0e0f00000000000000
% c00700700038038006001f3000c7071707070600000000000000
% c203c0e2020e070206001bb80383839383838200000000000000
% c000ff800007fc00060019ce07c1c1d1c1c1c200000000000000
% 48888c888888c8888e0018e7fce0e0f0e0e0e200000000000000
% 4000060000004000060018707870707070707600000000000000
% 6020232020206020260018383838383838383e00000000000000
% 600001800000400006001c1c1c1c1c1c1c1c1e00000000000000
% 688889c88888c8888e001e0e0e0e0e1e0e0e0c00000000000000
% 600000e00000400002000f070707071707070400000000000000
% 220202620202420202000b838383839383838c00000000000000
% 200000300000400002000dc1c1c1c1d1c1c1cc00000000000000
% 388888988888c8888b000ce0e0e0e0f0e0e0ec00000000000000
% 3000000c0000400003000c707070707070707800000000000000
% 1220222622206220230004383838383838383800000000000000
% 18000007000040000300061c1c1c1dfe1c1c1800000000000000
% 1888888b8888c8888b00060e0e0e0e8e0e0e1800000000000000
% 180000018000400001000307070727cf07071800000000000000
% 0a020202c2024202038003838387e3cf83839000000000000000
% 0c00000060004000018003c1c1c3f1c9c1c1f000000000000000
% 0c888888b888c88888c001e0e0eef0e8e0e0f000000000000000
% 060000001887f80000c001f0707e707870706000000000000000
% 062020203fa23020204000f8383bb87838386000000000000000
% 020000000ec33000006000dc1c1ddc7c1c1c6000000000000000
% 03888888b8cbb88888e0006e0e0e7ffe0e0e4000000000000000
% 03000000384120000020003707073f038707c000000000000000
% 018202020e6322020230003383839c01c383c000000000000000
% 018000000721e00000180019c1c1d80061c18000000000000000
% 0088888889f9e88888980018e0e0f00060e18000000000000000
% 00c0000000f3c000000c000c7070600030718000000000000000
% 00602220223ff2202226000638386000183b0000000000000000
% 0060000000381c00000600031c1c60001c1f0000000000000000
% 0038888888e00e88888b00018e0e40001e0e0000000000000000
% 0030000000c0030000018001c70740001f060000000000000000
% 001a0202038003020203c000c383c0001b860000000000000000
% 00180000030001800000e00061c1c00019c40000000000000000
% 000c88888b0000888888f00030e0e00010ec0000000000000000
% 000c0000030000c0000038001870600010780000000000000000
% 00062020220000e0202038000c38600038380000000000000000
% 00030000020000c000000c00061c30007c300000000000000000
% 000388888a0000c888888f00038e18006e300000000000000000
% 00018000020000c00000038001c71c01c7600000000000000000
% 0000c20203000082020202c000e3870383c00000000000000000
% 0000c00003000080000000700071c3ffc1c00000000000000000
% 000068888b000188888888b80038e0e0e1800000000000000000
% 00003000018003000000001c000e707071800000000000000000
% 00003a2022c0032022202227000738383b000000000000000000
% 0000180000e00f0000000003c001dc3c1f000000000000000000
% 00000c8888b81f8888888888e000ee2e0e000000000000000000
% 00000600001ff0e00000000038003f2704000000000000000000
% 000003020203027a020202021e000fa38c000000000000000000
% 000001800000001c00000000078003e1f8000000000000000000
% 000001c88888888f8888888889e000fff0000000000000000000
% 000000c000000003c00000000070002fc0000000000000000000
% 0000006020202020e0202020203c002000000000000000000000
% 0000003000000000380000000007002000000000000000000000
% 00000018888888889e8888888889c02000000000000000000000
% 0000000c00000000070000000000702000000000000000000000
% 000000060202020203c2020202023c2000000000000000000000
% 000000030000000000f0000000000f2000000000000000000000
% 000000018888888888b8888888888be000000000000000000000
% 00000000e0000000000e0000000000f000000000000000000000
% 00000000722022202227a2202220223800000000000000000000
% 00000000380000000001c0000000002e00000000000000000000
% 000000001c8888888888f888888888af80000000000000000000
% 000000000600000000003c0000000021c0000000000000000000
% 000000000302020202020e020202022270000000000000000000
% 0000000001c00000000003800000002038000000000000000000
% 0000000000e88888888889e888888bfc8e000000000000000000
% 0000000000380000000000700000010807000000000000000000
% 00000000001c20202020203c202021b823800000000000000000
% 00000000000600000000000f0000019800e00000000000000000
% 00000000000388888888888b8888889888f00000000000000000
% 000000000001e00000000000e000009000380000000000000000
% 00000000000072020202020272c202f2021c0000000000000000
% 0000000000001c00000000001de000f000060000000000000000
% 0000000000000788888888888fe888e8888b0000000000000000
% 00000000000003c000000000033003f000018000000000000000
% 00000000000000f02220222022382ffc2220c000000000000000
% 000000000000003800000000060c380700006000000000000000
% 000000000000000e888888888fcef0038888b000000000000000
% 00000000000000078000000000ff600180003800000000000000
% 0000000000000001c2020202020fc000c2021800000000000000
% 0000000000000000700000000001800060000c00000000000000
% 00000000000000001c8888888889800068888c00000000000000
% 0000000000000000070000000001000020000600000000000000
% 000000000000000003e020202021000020202600000000000000
% 000000000000000000f000000003000030000600000000000000
% 000000000000000000388888888b000038888a00000000000000
% 0000000000000000000e00000003000020000200000000000000
% 0000000000000000000782020203000022020200000000000000
% 00000000000000000001e0000001000060000600000000000000
% 0000000000000000000078888889800068888e00000000000000
% 000000000000000000001e000000c000c0000c00000000000000
% 0000000000000000000007a02220c000e2203800000000000000
% 0000000000000000000001e00000600180003800000000000000
% 0000000000000000000000788888b8078888f000000000000000
% 00000000000000000000001f00001e1e0001c000000000000000
% 000000000000000000000003c20207fa02078000000000000000
% 000000000000000000000000f0000040000e0000000000000000
% 0000000000000000000000003e8888c888b80000000000000000
% 00000000000000000000000007e0004000f00000000000000000
% 00000000000000000000000000fc20602fc00000000000000000
% 000000000000000000000000000f8040fe000000000000000000
% 0000000000000000000000000001ffffe0000000000000000000
% 0000000000000000000000000000007800000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 0000000000000000000000000000004000000000000000000000
% 000000000000000000000000000007f800000000000000000000
% 0000000000000000000000000000021000000000000000000000
% 0000000000000000000000000000033000000000000000000000
% 0000000000000000000000000000033000000000000000000000
% 0000000000000000000000000000012000000000000000000000
% 0000000000000000000000000000012000000000000000000000
% 000000000000000000000000000001e000000000000000000000
% 000000000000000000000000000001e000000000000000000000
% 000000000000000000000000000000c000000000000000000000
% 000000000000000000000000000000c000000000000000000000
% 000000000000000000000000000000c000000000000000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
196.67 695.01 M
 148.27 707.43 114.81 651.1 85.94 619.33 D
 45.67 575.01 77.74 514.12 122.6 490.71 D
 148.49 477.19 186.34 448.25 214.27 472.15 D
 227.18 483.2 199.83 500.88 184.64 508.81 D
 162.88 520.15 138.06 529.93 136.77 562.58 D
 135.34 598.92 145.08 638.23 177.23 645.22 D
 200.24 650.23 229.38 686.17 198.52 694.01 D
5 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
188 455.29 190.98 455.29 188 444.91 185.02 455.29 4 Y
0 Z
N
188 477 188 455.54 2 L
2 Z
N
189 692.29 191.98 692.28 189 681.91 186.02 692.28 4 Y
0 Z
N
189 733 189 692.53 2 L
2 Z
N
200.58 643.98 M
 163.97 643.15 146.4 593.38 151.3 558 D
 154.78 532.84 192.32 506.42 199.66 517.05 D
 226.93 556.58 222.23 608.02 200.58 645 D
14 X
V
0 X
N
190 641.29 192.98 641.29 190 630.91 187.02 641.29 4 Y
0 Z
N
190 673 190 641.54 2 L
2 Z
N
189 500.29 191.98 500.29 189 489.91 186.02 500.29 4 Y
0 Z
N
189 532 189 500.54 2 L
2 Z
N
190 553.29 192.98 553.29 190 542.91 187.02 553.29 4 Y
0 Z
N
190 581 190 553.54 2 L
2 Z
N
190 596.29 192.98 596.29 190 585.91 187.02 596.29 4 Y
0 Z
N
190 618 190 596.54 2 L
2 Z
N
116 592.29 118.98 592.29 116 581.91 113.02 592.29 4 Y
0 Z
N
116 613 116 592.54 2 L
2 Z
N
116 547.29 118.98 547.29 116 536.91 113.02 547.29 4 Y
0 Z
N
116 577 116 547.54 2 L
2 Z
N
170.34 490.83 171.88 493.38 179.22 485.47 168.8 488.28 4 Y
0 Z
N
117 523 170.12 490.96 2 L
4 X
V
2 Z
0 X
N
133.03 628.77 134.81 626.39 124.72 622.54 131.24 631.15 4 Y
0 Z
N
184 667 133.23 628.92 2 L
4 X
V
2 Z
0 X
N
169.98 590.57 172.5 588.99 164.48 581.77 167.46 592.15 4 Y
0 Z
N
184 613 170.11 590.78 2 L
4 X
V
2 Z
0 X
N
178.61 548.53 180.86 550.48 185.41 540.68 176.36 546.58 4 Y
0 Z
N
160 570 178.45 548.72 2 L
4 X
V
2 Z
0 X
N
96.16 591.72 98.46 589.83 89.58 583.7 93.86 593.61 4 Y
0 Z
N
112 611 96.32 591.91 2 L
4 X
V
2 Z
0 X
N
104.61 544.53 106.86 546.48 111.41 536.68 102.36 542.58 4 Y
0 Z
N
86 566 104.44 544.72 2 L
4 X
V
2 Z
0 X
N
7 X
90 450 9.45 9.95 189.55 533.95 G
0 X
90 450 9.45 9.95 189.55 533.95 A
7 X
90 450 9.45 9.95 190.55 576.95 G
0 X
90 450 9.45 9.95 190.55 576.95 A
7 X
90 450 9.45 9.95 164.55 572.95 G
0 X
90 450 9.45 9.95 164.55 572.95 A
7 X
90 450 9.95 10.45 187.95 479.55 G
0 X
90 450 9.95 10.45 187.95 479.55 A
7 X
90 450 9.45 9.95 189.55 673.95 G
0 X
90 450 9.45 9.95 189.55 673.95 A
7 X
90 450 9.45 9.95 116.55 615.95 G
0 X
90 450 9.45 9.95 116.55 615.95 A
7 X
90 450 9.45 9.95 116.55 573.95 G
0 X
90 450 9.45 9.95 116.55 573.95 A
7 X
90 450 9.45 9.95 87.55 573.95 G
0 X
90 450 9.45 9.95 87.55 573.95 A
7 X
90 450 9.45 9.95 114.45 528.05 G
0 X
90 450 9.45 9.95 114.45 528.05 A
7 X
90 450 9.45 9.95 190.55 619.95 G
0 X
90 450 9.45 9.95 190.55 619.95 A
0 24 Q
(P) 89 681 T
0 19.2 Q
(a) 105.01 675 T
0 24 Q
(P) 225.32 612.77 T
0 19.2 Q
(b) 241.32 606.77 T
0 18 Q
(w) 184 615 T
(v) 111 611 T
(u) 183 669 T
(thread  t) 199 713 T
0 0 0 1 0 0 0 K
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 0 1504 a FN(Figure)39 b(9:)59 b Fu(An)36
b(e)o(xample)i(scenario)g(when)f(a)f(processor)j(\()p
Fr(P)2045 1518 y Fq(a)2123 1504 y Fu(in)e(this)g(e)o(xample\))h(may)e
(not)h(e)o(x)o(ecute)h(a)e(contiguous)0 1617 y(subsequence)29
b(of)c(nodes)h(between)g(steals.)35 b(The)25 b(shaded)h(re)o(gions)h
(indicate)g(the)f(subset)g(of)f(nodes)i(e)o(x)o(ecuted)f(on)f(each)h
(of)0 1730 y(the)h(tw)o(o)g(processors,)j Fr(P)790 1744
y Fq(a)858 1730 y Fu(and)d Fr(P)1073 1745 y Fq(b)1108
1730 y Fu(.)38 b(Here,)27 b(processor)j Fr(P)1828 1744
y Fq(a)1896 1730 y Fu(steals)e(the)f(thread)h Fr(t)e
Fu(and)h(e)o(x)o(ecutes)i(node)f Fr(u)p Fu(.)38 b(It)26
b(then)i(forks)g(a)0 1843 y(child)23 b(thread)h(\(containing)h(node)f
Fr(v)s Fu(\),)e(puts)h(thread)g Fr(t)e Fu(on)i(its)f(deque,)i(and)e
(starts)i(e)o(x)o(ecuting)g(the)e(child.)30 b(In)22 b(the)g(mean)h
(time,)0 1956 y(processor)i Fr(P)428 1971 y Fq(b)484
1956 y Fu(steals)e(thread)g Fr(t)e Fu(from)h(the)h(deque)g(belonging)i
(to)d Fr(P)2113 1970 y Fq(a)2155 1956 y Fu(,)f(and)i(e)o(x)o(ecutes)g
(it)f(until)h(it)f(suspends.)30 b(Subsequently)-6 b(,)0
2068 y Fr(P)58 2082 y Fq(a)120 2068 y Fu(\002nished)22
b(e)o(x)o(ecuting)h(the)e(child)h(thread,)g(and)g(w)o(ak)o(es)f(up)g
(the)g(suspended)j(parent)e Fr(t)e Fu(and)h(resumes)h(e)o(x)o(ecution)h
(of)e Fr(t)p Fu(.)27 b(The)0 2181 y(combined)e(sets)f(of)g(nodes)h(e)o
(x)o(ecuted)g(on)e(both)i(processors)h(forms)e(a)f(contiguous)k
(subsequence)g(of)e(1)t Fl(D)t(F)r Fu(-schedule)6 b(.)0
2467 y FM(g)o(ener)o(ated)26 b(for)g FI(G)g FM(by)h(algorithm)e
FL(DFDeques)p FM(\()p FI(K)7 b FM(\).)37 b(If)27 b(for)f(any)g
FI(i)i FM(suc)o(h)d(that)h FG(1)31 b FF(\024)h FI(i)f
FF(\024)h FI(T)14 b FM(,)27 b(the)f(pr)l(e\002x)h FI(\033)3643
2482 y Fq(p)3710 2467 y FM(of)f FI(s)3860 2482 y Fq(p)0
2587 y FM(r)l(epr)l(esenting)g(the)g(computation)e(after)i(the)g(\002r)
o(st)f FI(i)i FM(timesteps)e(contains)g(at)h(most)f FI(r)k
FM(heavy)e(pr)l(ematur)l(e)f(nodes,)0 2707 y(then)d(the)h(par)o(allel)d
(space)j(r)l(equir)l(ement)f(of)g FI(s)1579 2722 y Fq(p)1642
2707 y FM(is)g(at)g(most)g FI(S)2105 2722 y FH(1)2162
2707 y FG(+)17 b FI(r)j FF(\001)d FG(min)o(\()p FI(K)r(;)g(S)2754
2722 y FH(1)2792 2707 y FG(\))p FM(.)31 b(Further)-11
b(,)22 b(ther)l(e)i(ar)l(e)g(at)f(most)0 2828 y FI(D)i
FG(+)d FI(r)j FF(\001)c FG(min)o(\()p FI(K)r(;)c(S)712
2843 y FH(1)751 2828 y FG(\))25 b FM(active)g(thr)l(eads)f(during)f
(the)i(e)n(xecution.)0 3056 y(Pr)l(oof)p FN(:)82 b(W)-8
b(e)30 b(can)h(partition)e FI(\033)1086 3071 y Fq(p)1156
3056 y FN(into)h(the)g(set)g(of)g(non-premature)g(nodes)g(and)g(the)g
(set)g(of)g(premature)h(nodes.)0 3177 y(Since,)22 b(by)e(de\002nition,)
h(all)f(non-premature)h(nodes)f(form)h(some)f(serial)g(pre\002x)i(of)e
(the)j(1)t Fg(D)t(F)r FN(-schedule)r(,)f(their)e(net)0
3297 y(memory)27 b(allocation)g(cannot)g(e)o(xceed)h
FI(S)1437 3312 y FH(1)1476 3297 y FN(.)40 b(W)-8 b(e)28
b(no)n(w)f(bound)g(the)g(net)h(memory)f(allocated)g(by)h(the)f
(premature)0 3417 y(nodes.)37 b(Consider)28 b(a)f(steal)g(that)g
(results)f(in)h(the)g(e)o(x)o(ecution)f(of)h(a)h(hea)n(vy)f(premature)g
(node)g(on)g(a)h(processor)f FI(P)14 b FN(.)0 3538 y(The)31
b(nodes)f(e)o(x)o(ecuted)g(by)g FI(P)44 b FN(until)30
b(its)g(ne)o(xt)g(steal,)i(cannot)e(allocate)h(more)f(than)g
FI(K)38 b FN(space.)49 b(Because)32 b(there)0 3658 y(are)26
b(at)g(most)f FI(r)j FN(hea)n(vy)e(premature)f(nodes)g(e)o(x)o(ecuted,)
g(the)h(total)f(space)h(allocated)f(across)h(all)f(processors)g(after)0
3778 y FI(i)g FN(timesteps)e(cannot)i(e)o(xceed)g FI(S)1110
3793 y FH(1)1172 3778 y FG(+)d FI(r)i FF(\001)e FI(K)7
b FN(.)146 3899 y(The)21 b(maximum)f(number)g(of)i(acti)n(v)o(e)e
(threads)h(is)f(at)h(most)f(the)h(number)g(of)g(threads)g(with)g
(premature)g(nodes,)0 4019 y(plus)k(the)h(maximum)e(number)h(of)h(acti)
n(v)o(e)f(threads)h(during)f(a)h(serial)g(e)o(x)o(ecution,)e(which)h
(is)h FI(D)s FN(.)34 b(Assuming)24 b(that)0 4140 y(each)c(thread)g
(needs)f(to)h(allocate)f(at)h(least)f(a)h(unit)e(of)i(space)g(when)g
(it)f(is)g(fork)o(ed)g(\(e.g.,)i(to)e(store)h(its)e(re)o(gister)h
(state\),)0 4260 y(at)29 b(most)g FI(K)37 b FN(threads)29
b(with)g(premature)g(nodes)g(can)h(be)f(fork)o(ed)h(for)g(each)g(hea)n
(vy)f(premature)h(node)f(e)o(x)o(ecuted.)0 4380 y(Therefore,)d(the)e
(total)g(number)g(of)h(acti)n(v)o(e)f(threads)h(is)f(at)h(most)f
FI(D)h FG(+)d FI(r)i FF(\001)e FI(K)7 b FN(.)p 3867 4380
34 42 v 0 4600 a(Note)24 b(that)f(each)h(acti)n(v)o(e)f(thread)h
(requires)f(at)h(most)f(a)h(constant)f(amount)f(of)i(space)g(to)g(be)g
(stored)f(by)g(the)h(sched-)0 4721 y(uler)34 b(\(not)g(including)e(its)
h(stack)h(space\).)59 b(W)-8 b(e)34 b(no)n(w)f(e)o(xtend)h(the)f
(analysis)g(to)h(handle)g(lar)n(ge)g(allocations)f(\(of)0
4841 y(more)25 b(than)f FI(K)32 b FN(space\).)0 5061
y FK(Handling)j(lar)o(ge)g(allocations)f(of)i(space)p
FN(.)97 b(W)-8 b(e)36 b(had)f(assumed)g(earlier)g(in)g(this)f(section)h
(that)g(e)n(v)o(ery)f(node)0 5181 y(allocates)21 b(at)g(most)e
FI(K)28 b FN(units)20 b(of)h(memory)-6 b(.)28 b(Indi)n(vidual)19
b(nodes)i(that)f(allocate)h(more)g(than)f FI(K)29 b FN(space)21
b(are)h(handled)0 5302 y(as)37 b(described)f(in)g(Section)h(3.)66
b(The)36 b(k)o(e)o(y)g(idea)h(is)f(to)g(delay)h(the)f(big)g
(allocations,)j(so)d(that)g(if)g(threads)h(with)1900
5589 y(18)p eop
%%Page: 19 22
19 21 bop 0 100 a FN(higher)22 b(priorities)f(become)i(ready)-6
b(,)22 b(the)o(y)g(will)f(be)i(e)o(x)o(ecuted)f(instead.)29
b(The)22 b(solution)f(is)h(to)g(insert)g(before)h(e)n(v)o(ery)0
220 y(allocation)35 b(of)i FI(m)f FN(bytes)g(\()p FI(m)50
b(>)e(K)7 b FN(\),)40 b(a)d(binary)f(fork)g(tree)h(of)f(depth)g
FG(log\()p FI(m=K)7 b FG(\))p FN(,)39 b(so)d(that)g FI(m=K)44
b FN(dummy)0 340 y(threads)30 b(are)i(created)f(at)g(its)f(lea)n(v)o
(es.)48 b(Each)31 b(of)f(the)h(dummy)e(threads)h(simply)g(performs)g(a)
h(no-op)f(that)g(tak)o(es)0 461 y(one)j(timestep,)h(b)n(ut)e(the)h
(threads)g(at)g(the)g(lea)n(v)o(es)f(of)h(the)g(fork)g(tree)h(are)f
(treated)h(as)f(if)g(it)f(were)i(allocating)e FI(K)0
581 y FN(space;)j(a)e(processor)e(gi)n(v)o(es)g(up)g(its)g(deque)h(and)
g(performs)g(a)g(steal)g(after)g(e)o(x)o(ecuting)e(each)j(of)f(these)g
(dummy)0 702 y(threads.)43 b(Therefore,)31 b(by)d(the)h(time)f(the)h
FI(m=K)36 b FN(dummy)28 b(threads)g(are)i(e)o(x)o(ecuted,)f(a)g
(processor)g(may)g(proceed)0 822 y(with)d(the)h(allocation)f(of)i
FI(m)f FN(bytes)g(without)e(e)o(xceeding)i(our)g(space)g(bound.)37
b(Recall)28 b(that)f(in)f(our)h(cost)g(model,)0 942 y(an)33
b(allocation)e(of)h FI(m)h FN(bytes)f(requires)g(a)h(depth)f(of)g
FI(O)s FG(\(log)16 b FI(m)p FG(\))p FN(;)36 b(therefore,)f(this)c
(transformation)g(of)i(the)f(dag)0 1063 y(increases)25
b(its)e(depth)h(by)g(at)h(most)e(a)i(constant)f(f)o(actor)-5
b(.)30 b(The)25 b(transformation)e(tak)o(es)h(place)h(at)f(runtime,)g
(and)g(the)0 1183 y(on-line)31 b FL(DFDeques)40 b FN(algorithm)30
b(generates)j(a)f(schedule)g(for)g(this)f(transformed)g(dag.)52
b(The)32 b(\002nal)g(bound)f(on)0 1303 y(the)d(space)g(requirement)f
(of)h(the)f(generated)h(schedule,)g(is)g(stated)f(belo)n(w)-6
b(.)38 b(Also,)28 b(in)f(Lemma)g(4.3,)h(each)g(node)0
1424 y(w)o(as)e(assumed)f(to)g(allocate)h(at)g(most)f
FI(K)33 b FN(space;)26 b(since)g(the)f(e)o(x)o(ecution)g(can)h(ne)n(v)o
(er)f(ha)n(v)o(e)g(a)i(net)e(ne)o(gati)n(v)o(e)f(space)0
1544 y(allocation,)g(this)g(assumption)f(required)i(that)g
FI(K)7 b(l)r(eS)1849 1559 y FH(1)1889 1544 y FN(.)32
b(W)l(ithout)23 b(this)i(assumption,)e(we)i(need)g(to)g(additionally)0
1665 y(bound)d(memory)g(allocation)g(for)h(v)o(ery)f(lar)n(ge)h
FI(K)7 b FN(;)23 b(we)g(therefore)h(pro)o(v)o(e)d(belo)n(w)h(a)h
(tighter)f(bound)g(for)h(the)g(space)0 1785 y(requirement)h(when)h
FI(K)35 b(>)27 b(S)1028 1800 y FH(1)1068 1785 y FN(.)0
1973 y FK(Theor)n(em)f(4.4)49 b FM(\()p FK(Upper)26 b(bound)g(on)f
(space)h(r)n(equir)n(ement\))0 2093 y FM(Consider)c(a)g(nested-par)o
(allel)e(computation)g(with)i(depth)g FI(D)j FM(and)c(serial,)h
(depth-\002r)o(st)f(space)h(r)l(equir)l(ement)g FI(S)3836
2108 y FH(1)3875 2093 y FM(.)0 2213 y(Then,)33 b(for)e(any)h
FI(K)47 b(>)39 b FG(0)p FM(,)33 b(the)e(e)n(xpected)i(value)e(of)g(the)
g(space)g(r)l(equir)l(ed)h(to)f(e)n(xecute)h(the)f(computation)f(on)h
FI(p)0 2334 y FM(pr)l(ocessor)o(s)23 b(using)h(algorithm)f
FL(DFDeques)p FM(\()p FI(K)7 b FM(\),)25 b(including)f(the)g(space)h(r)
l(equir)l(ed)g(to)f(stor)l(e)h(active)g(thr)l(eads,)f(is)0
2454 y FI(S)60 2469 y FH(1)122 2454 y FG(+)f FI(O)s FG(\(min)n(\()p
FI(K)r(;)17 b(S)726 2469 y FH(1)764 2454 y FG(\))23 b
FF(\001)f FI(p)h FF(\001)g FI(D)s FG(\))p FM(.)32 b(Further)-11
b(,)25 b(for)g(any)h FI(\017)j(>)g FG(0)p FM(,)d(the)f(pr)l(obability)e
(that)i(the)g(computation)f(r)l(equir)l(es)0 2575 y FI(S)60
2590 y FH(1)122 2575 y FG(+)e FI(O)s FG(\(min)m(\()p
FI(K)r(;)17 b(S)724 2590 y FH(1)763 2575 y FG(\))22 b
FF(\001)g FI(p)g FF(\001)g FG(\()p FI(D)j FG(+)d(ln)o(\(1)p
FI(=\017)p FG(\)\)\))j FM(space)f(is)h(at)f(least)g FG(1)e
FF(\000)h FI(\017)p FM(.)0 2739 y(Pr)l(oof)p FN(:)60
b(Lemmas)23 b(4.2)h(and)h(4.3)f(hold)f(for)i(an)o(y)f(pre\002x)h
(\(snapshot\))e(of)i(the)f(parallel)h(computation.)j(Therefore,)0
2859 y(using)21 b(the)h(abo)o(v)o(e)e(transformation)h(of)h(the)g(dag)f
(for)h(allocations)f(lar)n(ger)i(than)e FI(K)7 b FN(,)23
b(it)e(follo)n(ws)f(that)i(the)f(e)o(xpected)0 2979 y(amount)i(of)h
(space)g(required)g(by)g(the)g(parallel)g(computation)e(is)h
FI(S)2296 2994 y FH(1)2355 2979 y FG(+)c FI(O)s FG(\()p
FI(K)25 b FF(\001)19 b FI(p)f FF(\001)h FI(D)s FG(\))p
FN(.)30 b(Further)l(,)25 b(it)e(follo)n(ws)g(that)0 3100
y(for)k(an)o(y)g FI(\017)33 b(>)f FG(0)p FN(,)27 b(the)g(probability)f
(that)h(the)g(computation)e(requires)j FI(S)2468 3115
y FH(1)2531 3100 y FG(+)c FI(O)s FG(\()p FI(K)30 b FF(\001)24
b FI(p)f FF(\001)h FG(\()p FI(D)j FG(+)c(ln\(1)p FI(=\017)p
FG(\)\)\))k FN(space)0 3220 y(is)d(at)h(least)g FG(1)d
FF(\000)g FI(\017)p FN(.)146 3341 y(W)-8 b(e)28 b(no)n(w)e(obtain)g(a)i
(tighter)e(bound)g(when)h FI(K)39 b(>)32 b(S)1944 3356
y FH(1)1983 3341 y FN(.)38 b(Consider)27 b(the)g(case)g(when)g(a)h
(processor)f FI(P)40 b FN(steals)27 b(a)0 3461 y(thread)c(and)g(e)o(x)o
(ecutes)f(a)h(hea)n(vy)h(premature)e(node.)30 b(The)23
b(nodes)g(e)o(x)o(ecuted)f(by)h FI(P)36 b FN(before)24
b(the)f(ne)o(xt)f(steal)h(are)g(all)0 3581 y(premature,)j(and)g(form)g
(a)g(series)g(of)h(one)f(or)g(more)g(subsequences)f(of)h(the)i(1)t
Fg(D)t(F)r FN(-schedule)r(.)35 b(The)26 b(intermediate)0
3702 y(nodes)c(between)h(these)g(subsequences)f(\(in)h(depth-\002rst)f
(order\))h(are)h(e)o(x)o(ecuted)e(on)g(other)h(processors)g(\(e.g.,)g
(see)0 3822 y(Figure)35 b(9\).)60 b(These)35 b(intermediate)f(nodes)g
(occur)h(when)g(other)f(processors)g(steal)h(threads)f(from)h(the)f
(deque)0 3942 y(belonging)23 b(to)i FI(P)14 b FN(,)24
b(and)h(\002nish)g(e)o(x)o(ecuting)e(the)i(stolen)f(threads)g(before)i
FI(P)38 b FN(\002nishes)25 b(e)o(x)o(ecuting)e(all)h(the)h(remain-)0
4063 y(ing)k(threads)g(in)g(its)f(deque.)44 b(Subsequently)-6
b(,)29 b(when)g FI(P)14 b FN(')-5 b(s)28 b(deque)h(becomes)g(empty)-6
b(,)29 b(the)g(thread)h(e)o(x)o(ecuting)d(on)0 4183 y
FI(P)41 b FN(may)27 b(w)o(ak)o(e)g(up)g(its)f(parent,)i(so)f(that)g
FI(P)41 b FN(starts)26 b(e)o(x)o(ecuting)g(the)h(parent)g(without)f
(performing)g(another)h(steal.)0 4304 y(Therefore,)37
b(the)d(set)g(of)h(nodes)e(e)o(x)o(ecuted)h(by)g FI(P)47
b FN(before)35 b(the)f(ne)o(xt)f(steal,)k(possibly)32
b(along)i(with)f(premature)0 4424 y(nodes)24 b(e)o(x)o(ecuted)g(on)h
(other)f(processors,)h(form)f(a)i(contiguous)d(subsequence)h(of)h(the)i
(1)t Fg(D)t(F)r FN(-schedule)r(.)146 4544 y(Assuming)22
b(that)g(the)h(net)g(space)g(allocated)g(during)f(the)j(1)t
Fg(D)t(F)r FN(-schedule)g(can)f(ne)n(v)o(er)e(be)h(ne)o(gati)n(v)o(e,)e
(this)h(sub-)0 4665 y(sequence)h(cannot)f(allocate)h(more)f(than)g
FI(S)1490 4680 y FH(1)1552 4665 y FN(units)g(of)g(net)h(memory)-6
b(.)28 b(Therefore,)c(if)f(there)g(are)g FI(r)i FN(hea)n(vy)e(prema-)0
4785 y(ture)f(nodes,)g(the)f(net)h(memory)f(allocation)f(of)i(all)g
(the)f(premature)h(nodes)f(cannot)h(e)o(xceed)g FI(r)13
b FF(\001)e FG(min)n(\()p FI(K)r(;)17 b(S)3632 4800 y
FH(1)3671 4785 y FG(\))p FN(,)22 b(and)0 4905 y(the)i(total)g(space)h
(allocated)f(across)g(all)h(processors)f(after)h FI(i)f
FN(timesteps)f(cannot)i(e)o(xceed)f FI(S)3136 4920 y
FH(1)3196 4905 y FG(+)d FI(r)i FF(\001)e FG(min)n(\()p
FI(K)r(;)c(S)3798 4920 y FH(1)3837 4905 y FG(\))p FN(.)0
5026 y(Therefore,)26 b(using)d(Lemma)i(4.2,)f(the)h(abo)o(v)o(e)e(e)o
(xpected)i(and)g(high)f(probability)f(space)i(bounds)f(follo)n(w)-6
b(.)p 3867 5026 34 42 v 0 5220 a(W)e(e)31 b(no)n(w)f(sho)n(w)g(that)h
(the)f(abo)o(v)o(e)g(space)i(bound)e(is)g(tight)g(\(within)g(constant)g
(f)o(actors\))h(in)f(the)h(e)o(xpected)g(case,)0 5340
y(for)25 b(algorithm)e FL(DFDeques)8 b FN(.)1900 5589
y(19)p eop
%%Page: 20 23
20 22 bop 0 100 a FK(Theor)n(em)26 b(4.5)49 b(\(Lo)o(wer)26
b(bound)g(on)f(space)g(r)n(equir)n(ement\))0 220 y FM(F)-10
b(or)34 b(any)h FI(S)413 235 y FH(1)500 220 y FI(>)47
b FG(0)p FM(,)37 b FI(p)47 b(>)g FG(0)p FM(,)37 b FI(K)55
b(>)46 b FG(0)p FM(,)38 b(and)d FI(D)49 b FF(\025)f FG(24)17
b(log)e FI(p)p FM(,)38 b(ther)l(e)e(e)n(xists)e(a)h(nested)g(par)o
(allel)e(da)o(g)i(with)g(a)0 340 y(serial)29 b(space)h(r)l(equir)l
(ement)g(of)g FI(S)1192 355 y FH(1)1262 340 y FM(and)g(depth)f
FI(D)s FM(,)j(suc)o(h)d(that)g(the)i(e)n(xpected)f(space)h(r)l(equir)l
(ed)f(by)g(algorithm)0 461 y FL(DFDeques)p FM(\()p FI(K)7
b FM(\))26 b(to)e(e)n(xecute)i(it)e(on)g FI(p)h FM(pr)l(ocessor)o(s)e
(is)i FG(\012\()p FI(S)2021 476 y FH(1)2083 461 y FG(+)d(min)n(\()p
FI(K)r(;)17 b(S)2570 476 y FH(1)2609 461 y FG(\))22 b
FF(\001)g FI(p)g FF(\001)g FI(D)s FG(\))p FM(.)0 689
y(Pr)l(oof)p FN(:)69 b(Consider)27 b(the)f(dag)h(sho)n(wn)f(in)h
(Figure)g(10.)37 b(The)27 b(black)g(nodes)f(denote)h(allocations,)f
(while)h(the)f(gre)o(y)0 809 y(nodes)33 b(denote)f(deallocations.)55
b(The)33 b(dag)g(essentially)f(has)h(a)g(fork)h(tree)f(of)g(depth)g
FG(log\()p FI(p=)p FG(2\))p FN(,)h(at)g(the)f(lea)n(v)o(es)0
930 y(of)c(which)f(e)o(xist)f(subgraphs)1004 894 y FC(10)1074
930 y FN(.)42 b(The)29 b(root)f(nodes)g(of)h(these)f(subgraphs)g(are)h
(labelled)f FI(u)3103 945 y FH(1)3142 930 y FI(;)17 b(u)3242
945 y FH(2)3281 930 y FI(;)g(:)g(:)g(:)f(;)h(u)3556 945
y Fq(n)3602 930 y FN(,)30 b(where)0 1050 y FI(n)35 b
FG(=)f FI(p=)p FG(2)p FN(.)42 b(The)29 b(leftmost)e(of)i(these)f
(subgraphs,)h FI(G)1837 1065 y FH(0)1876 1050 y FN(,)h(sho)n(wn)d(in)h
(Figure)h(10)f(\(b\),)i(consists)d(of)i(a)g(serial)f(chain)0
1171 y(of)36 b FI(d)g FN(nodes.)64 b(The)36 b(remaining)f(subgraphs)g
(are)i(identical,)h(ha)n(v)o(e)e(a)g(depth)g(of)g FG(2)p
FI(d)30 b FG(+)g(1)p FN(,)39 b(and)d(are)h(sho)n(wn)d(in)0
1291 y(Figure)g(10)f(\(c\).)59 b(The)33 b(amount)g(of)h(space)g
(allocated)g(by)f(each)h(of)g(the)g(black)g(nodes)f(in)g(these)h
(subgraphs)f(is)0 1411 y(de\002ned)25 b(as)f FI(A)k FG(=)g(min)n(\()p
FI(K)r(;)17 b(S)1019 1426 y FH(1)1058 1411 y FG(\))p
FN(.)31 b(Since)24 b(we)h(are)g(constructing)e(a)i(dag)f(of)h(depth)f
FI(D)s FN(,)g(the)g(v)n(alue)g(of)g FI(d)g FN(is)g(set)g(such)0
1532 y(that)g FG(2)p FI(d)e FG(+)g(1)g(+)g(2)17 b(log)o(\()p
FI(p=)p FG(2\))27 b(=)h FI(D)s FN(.)i(The)25 b(space)g(requirement)g
(of)g(a)i(1)t Fg(D)t(F)r FN(-schedule)g(for)e(this)f(dag)h(is)f
FI(S)3560 1547 y FH(1)3599 1532 y FN(.)146 1652 y(W)-8
b(e)38 b(no)n(w)e(e)o(xamine)h(ho)n(w)f(algorithm)g FL(DFDeques)8
b FN(\()p FI(K)f FN(\))37 b(w)o(ould)g(e)o(x)o(ecute)f(such)h(a)h(dag.)
68 b(One)37 b(processor)0 1773 y(starts)e(e)o(x)o(ecuting)f(the)h(root)
g(node,)i(and)e(e)o(x)o(ecutes)g(the)g(left)g(child)g(of)g(the)h
(current)f(node)g(at)h(each)f(timestep.)0 1893 y(Thus,)30
b(within)f FG(log\()p FI(p=)p FG(2\))36 b(=)h(log)17
b FI(n)30 b FN(timesteps,)g(it)f(will)g(ha)n(v)o(e)h(e)o(x)o(ecuted)f
(node)g FI(u)2847 1908 y FH(1)2886 1893 y FN(.)46 b(No)n(w)30
b(consider)f(node)h FI(u)3826 1908 y Fq(n)3872 1893 y
FN(;)0 2013 y(it)d(is)h(guaranteed)g(to)f(be)h(e)o(x)o(ecuted)f(once)h
FG(log)17 b FI(n)28 b FN(successful)f(steals)g(tar)n(get)h(the)g(root)f
(thread.)40 b(\(Recall)29 b(that)e(the)0 2134 y(right)j(child)g(of)h(a)
g(forking)f(node,)i(that)e(is,)i(the)e(ne)o(xt)g(node)h(in)f(the)h
(parent)g(thread,)h(must)d(be)i(e)o(x)o(ecuted)f(either)0
2254 y(before)e(or)f(when)h(the)f(parent)g(thread)h(is)f(ne)o(xt)f
(stolen.\))38 b(Because)29 b(there)e(are)h(al)o(w)o(ays)f
FI(n)33 b FG(=)f FI(p=)p FG(2)27 b FN(processors)g(in)0
2374 y(this)i(e)o(xample)g(that)g(are)h(idle)f(and)h(attempt)f(steals)g
(tar)n(geting)g FI(p)h FN(deques)f(at)h(the)g(start)f(of)h(e)n(v)o(ery)
f(timestep,)g(the)0 2495 y(probability)23 b FI(p)511
2510 y FH(steal)682 2495 y FN(that)h(a)h(steal)g(will)f(tar)n(get)h(a)g
(particular)f(deque)h(is)g(gi)n(v)o(en)e(by)1397 2797
y FI(p)1446 2812 y FH(steal)1674 2797 y FF(\025)84 b
FG(1)22 b FF(\000)2005 2651 y Fe( )2071 2797 y FG(1)g
FF(\000)2252 2730 y FG(1)p 2252 2774 49 4 v 2252 2866
a FI(p)2311 2651 y Fe(!)2376 2674 y Fq(p=)p FH(2)1674
3021 y FF(\025)84 b FG(1)22 b FF(\000)g FI(e)2050 2980
y Fj(\000)p FH(1)p Fq(=)p FH(2)1675 3199 y FI(>)1845
3132 y FG(1)p 1845 3176 V 1845 3268 a(3)0 3445 y FN(W)-8
b(e)25 b(call)g(a)g(timestep)e FI(i)i FE(successful)i
FN(if)d(some)g(node)h(along)f(the)g(path)h(from)f(the)g(root)h(to)f
FI(u)3096 3460 y Fq(n)3167 3445 y FN(gets)g(e)o(x)o(ecuted;)g(this)0
3566 y(happens)c(when)h(a)g(steal)f(tar)n(gets)h(the)f(deque)h
(containing)e(that)i(node.)29 b(Thus,)21 b(after)g FG(log)16
b FI(n)21 b FN(successful)g(timesteps,)0 3686 y(node)h
FI(u)272 3701 y Fq(n)341 3686 y FN(must)g(get)g(e)o(x)o(ecuted;)g
(after)h(that,)g(we)g(will)e(consider)h(e)n(v)o(ery)g(subsequent)g
(timestep)f(to)h(be)h(successful.)0 3806 y(Let)34 b FI(S)40
b FN(be)34 b(the)g(number)f(of)h(successful)g(timesteps)e(in)i(the)g
(\002rst)g FG(12)17 b(log)f FI(n)34 b FN(timesteps.)57
b(Then,)36 b(the)d(e)o(xpected)0 3927 y(v)n(alue)24 b(is)h(gi)n(v)o(en)
e(by)1436 4147 y FG(E)17 b([)p FI(S)6 b FG(])83 b FF(\025)g
FG(12)17 b(log)f FI(n)23 b FF(\001)e FI(p)2318 4162 y
FH(steal)1722 4292 y FF(\025)83 b FG(4)17 b(log)f FI(n)0
4512 y FN(Using)24 b(the)h(Chernof)n(f)g(bound)f([39)o(,)h(Theorem)g
(4.2])f(on)h(the)g(number)f(of)h(successful)f(timesteps,)f(we)i(ha)n(v)
o(e)869 4791 y FG(Pr)q([)p FI(S)33 b(<)1198 4670 y Fe(\022)1259
4791 y FG(1)22 b FF(\000)1439 4723 y FG(3)p 1439 4768
V 1439 4859 a(4)1498 4670 y Fe(\023)1581 4791 y FF(\001)g
FG(E)17 b([)p FI(S)6 b FG(])28 b(])83 b FF(\024)g FG(exp)2298
4645 y Fe(")2346 4791 y FF(\000)2440 4670 y Fe(\022)2512
4723 y FG(3)p 2512 4768 V 2512 4859 a(4)2570 4670 y Fe(\023)2631
4686 y FH(2)2693 4791 y FF(\001)2753 4723 y FG(E)17 b([)p
FI(S)6 b FG(])p 2753 4768 203 4 v 2830 4859 a(2)2966
4645 y Fe(#)p 0 5004 1560 4 v 87 5065 a FB(10)149 5096
y Fz(All)21 b(logarithms)e(denoted)f(as)j Fw(log)g Fz(are)f(to)h(the)f
(base)g(2.)1900 5589 y FN(20)p eop
%%Page: 21 24
21 23 bop 655 1941 a @beginspecial 39 @llx 389 @lly 594
@urx 762 @ury 2088 @rhi @setspecial
%%BeginDocument: figures/dag9.epsi
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e38000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180c000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001804000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001006000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001006000000000000180000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f006000000000000180000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0060000000000003c0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe180c0000000000006e0000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe00c1c000000000000cb0000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe0007f8000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e00001e0000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e00000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000040000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f00000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f0000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f0000000000000040000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000000000000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f8000000000000000040000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f80000000000000000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f800000000000000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f8000000000000000000040000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f80000000000000000000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f800000000000000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f8000000000000000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000000000000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc00000000000000000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc000000000000000000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000000000000000000000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc00000000000000000000000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc000000000000000000000000000040000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000000000000000000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000fc00000000000000000000000000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000000000040000000000000080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000fe0000000000000000000000000000000040000000000000080000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000fe00000000000000000000000000000000040000000000000080000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000000000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000000000000000004000000000000000007fe00000
% 000000000000000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000000000000000000400000000000000000f9fc0000
% 00000000000000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000400000000000000800001e0000
% 0000000000000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000040000000000000080000030000
% 000000000000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000004000000000000008003c01c000
% 00000000000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000004000000000000008007e004000
% 0000000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000000000000000040000000000000080067040000
% 000000000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000040000000000000080043840000
% 00000000000000000000000000000000000000000000000000000000000000000003f00000000000000000000000000000000000000000000040000000000000080041840000
% 0000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000000000000000000040000000000000080040c40000
% 000000000000000000000000000000000000000000000000000000000000000003f8000000000000000000000000000000000000000000000040000000000000080060c40000
% 00000000000000000000000000000000000000000000000000000000000000003f8000000000000000000000000000000000000000000000004000000000000000003c640000
% 0000000000000000000000000000000000000000000000000000000000000003f80000000000000000000000000000000000000000000000004000000000000000001c740000
% 000000000000000000000000000000000000000000000000000000000000001f80000000000000000000000000000000000000000000000000400000000000000000c03c0000
% 00000000000000000000000000000000000000000000000000000000000001f800000000000000000000000000000000000000000000000000400000000000000000701c0000
% 0000000000000000000000000000000000000000000000000000000000001f8000000000000000000000000000000000000000000000000007f800000000000000001c040000
% 000000000000000000000000000000000000000000000000000000000001f8000000000000000000000000000000000000000000000000000210000000000000080007000000
% 00000000000000000000000000000000000000000000000000000000001fc0000000000000000000000000000000000000000000000000000330000000000000080001c00000
% 0000000000000000000000000000000000000000000000000000000001fc00000000000000000000000000000000000000000000000000000330000000000000080000e00000
% 000000000000000000000000000000000000000000000000000001801fc000000000000000000000000000000000000000000000000000000120000000000000080000380000
% 00000000000000000000000000000000000000000000000000000381fc00000000000000000000000000000000000000000000000000000001200000000000000800000c0000
% 00000000000000000000000000000000000000000000000000000e8fc000000000000000000000000000000000000000000000000000000001e0000000000000080007c00000
% 000000000000000000000000000000000000000000000000007f1cfc0000000000000000000000000000000000000000000000000000000007f000000000000008000ff00000
% 00000000000000000000000000000000000000000000000000e3f0c0000000000000000000000000000000000000000000000000000000000e3800000000000008000c380000
% 0000000000000000000000000000000000000000000000000180e04000000000000000000000000000000000000000000000000000000000180c0000000000000000081c0000
% 000000000000000000000000000000000000000000000000018040600000000000000000000000000000000000000000000000000000000018040000000000000000080c0000
% 00000000000000000000000000000000000000000000000001007fe00000000000000000000000000000000000000000000000000000000010060000000000000000040c0000
% 0000000000000000000000000000000000000000000000000100600000000000000000000000000000000000000000000000000000000000100600000000000000000e0c0000
% 0000000000000000000000000000000000000000000000000100600000000000000000000000000000000000000000000000000000000000100600000000000000000ffc0000
% 00000000000000000000000000000000000000000000000001006000000000000000000000000000000000000000000000000000000000007006000000000000080001ff0000
% 0000000000000000000000000000000000000000000000000780c00000000000000000000000000000000000000000000000000000000003f80c0000000000000800c00fc000
% 0000000000000000000000000000000000000000000000001ec1c0000000000000000000000000000000000000000000000000000000001f0c1c00000000000008006000c000
% 000000000000000000000000000000000000000000000000f87f8000000000000000000000000000000000000000000000000000000000f807f8000000000000080038000000
% 000000000000000000000000000000000000000000000007c01e0000000000000000000000000000000000000000000000000000000007c001e000000000000008000f00c000
% 00000000000000000000000000000000000000000000001e0004000000000000000000000000000000000000000000000000000000003e000040000000000000080007ffc000
% 0000000000000000000000000000000000000000000000f8000400000000000000000000000000000000000000000000000000000000f8000040000000000000080000fe0000
% 0000000000000000000000000000000000000000000007c0000400000000000000000000000000000000000000000000000000000007c0000040000000000000080000000000
% 000000000000000000000000000000000000000000003e0000040000000000000000000000000000000000000000000000000000003e00000040000000000000080000000000
% 00000000000000000000000000000000000000000000f0000004000000000000000000000000000000000000000000000000000001f000000040000000000000000000000000
% 00000000000000000000000000000000000000000007c000000400000000000000000000000000000000000000000000000000000f8000000040000000000000000000000000
% 0000000000000000000000000000000000000000003e0000000400000000000000000000000000000000000000000000000000007c0000000040000000000000000000000000
% 000000000000000000000000000000000000000000f0000000040000000000000000000000000000000000000000000000000001f00000000040000000000000000000000000
% 000000000000000000000000000000000000000007c000000004000000000000000000000000000000000000000000000000000f800000000040000000000000000008000000
% 00000000000000000000000000000000000000003e0000000004000000000000000000000000000000000000000000000000007c00000000004000000000000008000fc00000
% 0000000000000000000000000000000000000000f0000000000400000000000000000000000000000000000000000000000003e0000000000040000000000000080007fc0000
% 0000000000000000000000000000000000000007c000000000040000000000000000000000000000000000000000000000001f0000000000004000000000000008000c3f0000
% 000000000000000000000000000000000000003e000000000004000000000000000000000000000000000000000000000000f8000000000000400000000000000800080b8000
% 00000000000000000000000000000000000000f0000000000004000000000000000000000000000000000000000000000003e0000000000000400000000000000800080cc000
% 00000000000000000000000000000000000007c000000000000400000000000000000000000000000000000000000000001f000000000000004000000000000008000c0cc000
% 0000000000000000000000000000000000003e0000000000000400000000000000000000000000000000000000000000007800000000000000400000000000000800060cc000
% 000000000000000000000000000000000000f0000000000000040000000000000000000000000000000000000000000003800000000000000040000000000000080007fcc000
% 000000000000000000000000000000000007c000000000000004000000000000000000000000000000000000000000001e000000000000000040000000000000000001f9c000
% 00000000000000000000000000000000003e0000000000000004000000000000000000000000000000000000000000007800000000000000004000000000000000000001c000
% 0000000000000000000000000000000000f0000000000000000400000000000000000000000000000000000000000003e0000000000000000040000000000000000000000000
% 0000000000000000000000000000000007c000000000000000040000000000000000000000000000000000000000000f00000000000000000040000000000000000007e00000
% 000000000000000000000000000000003e0000000000000000040000000000000000000000000000000000000000007c0000000000000000004000000000000000000ff00000
% 00000000000000000000000000000000f0000000000000000004000000000000000000000000000000000000000001e00000000000000000004000000000000008000c380000
% 00000000000000000000000000000007c000000000000000000400000000000000000000000000000000000000000f800000000000000000004000000000000008001c1c0000
% 0000000000000000000000000000003e0000000000000000007f80000000000000000000000000000000000000003c000000000000000000004000000000000008001c0c0000
% 000000000000000000000000000001f0000000000000000000210000000000000000000000000000000000000001f000000000000000000007f800000000000008000c0c0000
% 0000000000000000000000000000078000000000000000000033000000000000000000000000000000000000000780000000000000000000021000000000000008000e0c0000
% 00000000000000000000000000003e0000000000000000000033000000000000000000000000000000000000003e000000000000000000000330000000000000080007fc0000
% 0000000000000000000000000001f0000000000000000000001200000000000000000000000000000000000000f0000000000000000000000330000000000000080003f80000
% 000000000000000000000000000780000000000000000000001200000000000000000000000000000000000c07c00000000000000000000001200000000000000800e0600000
% 000000000000000000000000603e00000000000000000000001e00000000000000000000000000000000001c1e000000000000000000000001200000000000000800fe000000
% 000000000000000000000000e1f000000000000000000000001e00000000000000000000000000000000003c78000000000000000000000001e000000000000000003ff00000
% 000000000000000000000001a78000000000000000000000000c000000000000000000000000000000000067c0000000000000000000000001e0000000000000000001fc0000
% 000000000000000000003f873e0000000000000000000000007f00000000000000000000000000000003f8c700000000000000000000000007f00000000000000000000c0000
% 0000000000000000000071ce30000000000000000000000000e3800000000000000000000000000000071d830000000000000000000000000e38000000000000000000000000
% 00000000000000000000c07c1000000000000000000000000180c000000000000000000000000000000c0707800000000000000000000000180c000000000000080000000000
% 00000000000000000000c03018000000000000000000000001804000000000000000000000000000000c03ff8000000000000000000000001804000000000000080000000000
% 00000000000000000000803ff8000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000080000000000
% 00000000000000000000803000000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000080000000000
% 00000000000000000003803000000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000080000000000
% 00000000000000000007803000000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000080000000000
% 0000000000000000001cc0600000000000000000000000000780c000000000000000000000000000003c0600000000000000000000000000780c000000000000080000000000
% 0000000000000000003860e00000000000000000000000000ec1c00000000000000000000000000000760e00000000000000000000000000ec1c000000000000080000000000
% 000000000000000000e03fc0000000000000000000000000387f800000000000000000000000000001c3fc0000000000000000000000000387f8000000000000080000000000
% 000000000000000001c00f00000000000000000000000000701e00000000000000000000000000000380f00000000000000000000000000701e0000000000000000000000000
% 000000000000000007000200000000000000000000000001c00400000000000000000000000000000e00100000000000000000000000001c0040000000000000000000000000
% 00000000000000000e000200000000000000000000000003800400000000000000000000000000001c0010000000000000000000000000380040000000000000000000000000
% 00000000000000003800020000000000000000000000000e00040000000000000000000000000000700010000000000000000000000000e00040000000000000000000000000
% 0000000000000000f000020000000000000000000000001c00040000000000000000000000000000e00010000000000000000000000001c00040000000000000000000000000
% 0000000000000001c000020000000000000000000000007000040000000000000000000000000003800010000000000000000000000007000040000000000000080000000000
% 0000000000000007800002000000000000000000000001e00004000000000000000000000000000f00001000000000000000000000001e000040000000000000080000000000
% 000000000000000e000002000000000000000000000003800004000000000000000000000000001c000010000000000000000000000038000040000000000000080000000000
% 618000000000003c00000200000000000000000000000f00000400000000000000000000000000780000100000000000000000000000f0000040000000000000080000000000
% 618000000000007000000200000000000000000000001c00000400000000000000000000000000e00000100000000000000000000001c0000040000000000000080000000000
% c3000000000001c000000200000000000000000000007800000400000000000000000000000003c0000010000000000000000000000780000040000000000000080000000000
% c3000000000003800000020030c00001860000000000e00000040000000000000000000000000700000010000000000000000000000e00000040000000000000080000000000
% c302000000000e000000020030c00001860000000003800000040000000000000000000000001c00000010000000000000000000003800000040000000000000080000000000
% c30e000000001c0000000200618000030c0000000007000000040000000000000000000000003800000010000000000000000000007000000040000000000000080000000000
% c71e00000000700000000200618000030c3c0000001c0000007f800000000000000000000000e0000001fe00000000000000000001c000000040061800000000000000000000
% ce0600000000e00000003fc0618780030c660000003800000021000000000000000000000001c0000000840000000000000000000380000007f8061800000000000000000000
% fe0600000003800000001080618cc0030cc6000000e00000003300000000000000000000000700000000cc0000000000000000000e00000002100c3000000000000000000000
% 0004000003070000000019806398c0031c06000001c00000003300000000000000000000000e00000000cc0000000000000000001c00000003300c3000000000000000000000
% 000c0000031c0000000019806710c003383c000007000000001200000000000000000000003800000000480000000000000000007000000003300c3000000000080000000000
% 000c000007380000000009007f018003f80c00060e00000000120000000000000000000030700000000048000000000000000060e000000001200c3000000000080000000000
% 000c00000de0000000000900000700000004000638000000001e0000000000000000000031c000000000780000000000000000638000000001200c73f0000000080000000000
% 0008007f19c0000000000f00001c0000018c000e70000000001e00000000000000000000738000000000780000000000000000e70000000001e00ce3b0000000080000000000
% 000000e3b8e0000000000f0000380000019c001bc0000000000c00000000000000000000de0000000000300000000000000001bc0000000001e00fe310000000080000000000
% 00000180f1e0000000003f800030000001f83fb380000000007f000000000000000001fd9c0000000003f800000000000003fb380000000007f0000210000000cb0000000000
% 000001806f000000000071c0007f8000000071f1c000000000e38000000000000000038f8e00000000071c000000000000071f1c000000000e380006300000006e0000000000
% 000001007c0000000000c060000000000000c063c00000000180c00000000000000006031e000000000c060000000000000c063c00000000180c0006300000002c0000000000
% 00000100600000000000c020000000000000c03e00000000018040000000000000000601f0000000000c020000000000000c03e00000000018040006300000003c0000000000
% 000001006000000000008030000000000000803800000000010060000000000000000401c0000000000803000000000000080380000000001006000420000000180000000000
% 00000100600000000000803000000000000080300000000001006000000000000000040180000000000803000000000000080300000000001006000000000000180000000000
% 00000180c00000000000803000000000000080300000000001006000000000000000040180000000000803000000000000080300000000001006000000000000000000000000
% 000003c1c00000000000803000000000000080300000000001006000000000000000040180000000000803000000000000080300000000001006000000000000000000000000
% 00001e7f800000000000c060000000000000c060000000000180c000000000000000060300000000000c060000000000000c060000000000180c000000000000000000000000
% 0000781e00000000000060e000000000000060e00000000000c1c00000000000000003070000000000060e000000000000060e00000000000c1c000000000000000000000000
% 0003c0020000000000007fc0000000000000ffc00000000000ff800000000000000001fe00000000000ffc00000000000007fc00000000000ff8000000000000000000000000
% 000f0002000000000001cf000000000000038f0000000000039e00000000000000000778000000000038f00000000000001cf0000000000039e0000000000000000000000000
% 007800020000000000038200000000000007040000000000070400000000000000000e0800000000007040000000000000382000000000007040000000000000000000000000
% 01e00002000000000007020000000000000e0400000000000e0400000000000000001c080000000000e04000000000000070200000000000e040000000000000000000000000
% 0f00000200000000000e020000000000001c0400000000001c04000000000000000038080000000001c040000000000000e0200000000001c040000000000000000000000000
% 3c000002000000000018020000000000003004000000000030040000000000000000600800000000030040000000000001802000000000030040000000000000000000000000
% e0000002000000000030020000000000006004000000000060040000000000000000c00800000000060040000000000003002000000000060040000000000000000000000000
% 803f00020000000000e002000000000001c0040000000001c00400000000000000038008000000001c004000000000000e0020000000001c0040000000000000000000000000
% 807f80020000000001c002000000000003800400000000038004000000000000000700080000000038004000000000001c002000000000380040000000000067c00000000000
% 80e1c00200000000038002000000000007000400000000070004000000000000000e00080000000070004000000000003800200000000070004000000000005fe00000000000
% 8180c0020000000007000200000000000e0004000000000e0004000000000000001c000800000000e00040000000000070002000000000e000400000000000d8600000000000
% 8380c002000000000c000200000000001800040000000018000400000000000000300008000000018000400000000000c00020000000018000400000000001b0600000000000
% 830000020000000018000200000000003000040000000030000400000000000000600008000000030000400000000001800020000000030000400000003fc1b0600000000000
% 870fc002000000007000020000000000e0000400000000e0000400000000000001c000080000000e00004000000000070000200000000e0000400000003fe300600000000000
% 860fc00200000000e000020000000001c0000400000001c00004000000000000038000080000001c000040000000000e0000200000001c00004000000038e301c00000000000
% 8600c002000000004000020000000000800004000000008000040000000000000100000800000008000040000000000400002000000008000040000000706607800000000000
% 860183e200000000400002000000000080000400000000800004000000000000010000080000000800004000000000040000200000000800004000000060640e000000000000
% 8701866200000000400002000000000080000400000000800004000000000000010000080000000800004000000000040000200000000800004000000060cc38000000000000
% 87838c2200000000400002000000000080000400000000800004000000000000010000080000000800004000000000040000200000000800004000000060d870000000000000
% 83ff8c220000000040000200000000008000040000000080000400000000000001000008000000080000400000000004000020000000080000400000007198c0000000000000
% 81f9886200000000403f020000000000803f0400000000803f040000000000000100000800000008000040000000000400002000000008000040000000ffb0ffc00000000000
% 8000186200000000407f820000000000807f8400000000807f840000000000000100000800000008000040000000000401f8200000000803f040000000de20ff800000000000
% 800018620000000040e1c2000000000080e1c40000000080e1c400000000000001003f080000000803f040000000000403fc200000000807f840000000c00000000000000000
% 800018c2000000004180c200000000008180c4000000008180c400000000000001007f880000000807f8400000000004070e20000000080e1c40000000c00000000000000000
% 80001dc2000000004380c200000000008380c4000000008380c40000000000000100e1c8000000080e1c4000000000040c062000000008180c40000001800000000000000000
% 80000f0200000000430002000000000083000400000000830004000000000000010180c800000008180c4000000000041c062000000008380c40000001800000000000000000
% e000000200000000470fc20000000000870fc400000000870fc4000000000000010380c800000008380c40000000000418002000000008300040000000000000000000000000
% 3c00000200000000460fc20000000000860fc400000000860fc400000000000001030008000000083000400000000004387e200000000870fc40000000000000000000000000
% 0f000002000000004600c200000000008600c4000000008600c400000000000001070fc80000000870fc400000000004307e200000000860fc40000000000000000000000000
% 01e000020000000046018200000000008601840000000086018400000000000001060fc80000000860fc40000000000430062000000008600c40000000300000000000c00000
% 0078000200000000470182000000000087018400000000870184000000000000010600c800000008600c400000000004300c2000000008601840000000300000000000c00000
% 000f00020000000047838200000000008783840000000087838400000000000001060188000000086018400000000004380c2000000008701840000000300000000000c00000
% 0003c0020000000043ff82000000000083ff840000000083ff84000000000000010701880000000870184000000000043c1c2000000008783840000000300000000000c00000
% 000078020000000041f982000000000081f9840000000081f984000000000000010783880000000878384000000000041ffc20000000083ff84000f8c33f83f367e3f8fe1f00
% 00001e02000000004000020000000000800004000000008000040000000000000103ff88000000083ff84000000000040fcc20000000081f9840018cc33986738c7398e33180
% 000003ff000000004000020000000000800004000000008000040000000000000101f988000000081f98400000000004000020000000080000400180c330cc3308330cc33000
% 000000e380000000400002000000000080000400000000800004000000000000010000080000000800004000000000040000200000000800004001f0c330cc3303f30cc33e00
% 00000180c00000004000020000000000800004000000008000040000000000000100000800000008000040000000000400002000000008000040007cc330cc330ff30cc30f80
% 00000180400000004000020000000000800004000000008000040000000000000100000800000008000040000000000400002000000008000040000ec330cc3318330cc301c0
% 000001006000000040000200000000008000040000000080000400000000000001000008000000080000400000000004000020000000080000400306c330cc3318330cc360c0
% 00000100600000004000020000000000800004000000008000040000000000000100000800000008000040000000000400002000000008000040038ee73986731c7398c371c0
% 0000010060000000400002000000000080000400000000800004000000000000010000080000000800004000000000040000200000000800004001f87b3f03f30fbbf0c33f00
% 0000010060000000e000020000000001c0000400000001c00004000000000000038000080000001c000040000000000e0000200000001c000040000000000030000300000000
% 00000180c00000007000020000000000e0000400000000e0000400000000000001c000080000000e00004000000000070000200000000e000040000000000c30000300000000
% 000000c1c00000001800020000000000300004000000003000040000000000000060000800000003000040000000000180002000000003000040000000000c60000300000000
% 0000007f800000000c000200000000001800040000000018000400000000000000300008000000018000400000000000c00020000000018000400000000007c0000300000000
% 0000001fc000000007000200000000000e0004000000000e0004000000000000001c000800000000e00040000000000070002000000000e00040000000000000000000000000
% 0000000370000000038002000000000007000400000000070004000000000000000e000800000000700040000000000038002000000000700040000000000000000000000000
% 000000019c00000001c002000000000003800400000000038004000000000000000700080000000038004000000000001c002000000000380040000000000000000000000000
% 000000008f00000000e002000000000001c0040000000001c00400000000000000038008000000001c004000000000000e0020000000001c0040000000000000000000000000
% 00000000c70000000030020000000000006004000000000060040000000000000000c00800000000060040000000000003002000000000060040000000000000000000000000
% 000000006e0000000018020000000000003004000000000030040000000000000000600800000000030040000000000001802000000000030040000000000000000000000000
% 000000007e000000000e020000000000001c0400000000001c04000000000000000038080000000001c040000000000000e0200000000001c040000000000000000000000000
% 000000003f0000000007020000000000000e0400000000000e0400000000000000001c080000000000e04000000000000070200000000000e040000000000000000000000000
% 000000003380000000038200000000000007040000000000070400000000000000000e0800000000007040000000000000382000000000007040000000000000000000000000
% 0000000001c000000001c200000000000003840000000000038400000000000000000708000000000038400000000000001c2000000000003840000000000000000000000000
% 0000000000e0000000006200000000000000c4000000000000c40000000000000000018800000000000c40000000000000062000000000000c40000000000000000000000000
% 0000000000600000000032000000000000006400000000000064000000000000000000c800000000000640000000000000032000000000000640000000000000000000000000
% 000000000030000000001e000000000000003c0000000000003c00000000000000000078000000000003c000000000000001e0000000000003c0000000000000000000000000
% 000000000018000000000e000000000000001c0000000000001c00000000000000000038000000000001c000000000000000e0000000000001c0000000000000000000000000
% 00000000000c000000003f800000000000003f8000000000007f000000000000000001fc000000000003f800000000000003f8000000000007f0000000000000000000000000
% 0000000000060000000071c000000000000071c00000000000e38000000000000000038e0000000000071c000000000000071c00000000000e38000000000000000000000000
% 00000000000300000000c060000000000000c060000000000180c000000000000000060300000000000c060000000000000c060000000000180c000000000000000000000000
% 00000000000180000000c020000000000000c0200000000001804000000000000000060100000000000c020000000000000c0200000000001804000000000000000000000000
% 000000000000c0000000803000000000000080300000000001006000000000000000040180000000000803000000000000080300000000001006000000000000000000000000
% 00000000000060000000803000000000000080300000000001006000000000000000040180000000000803000000000000080300000000001006000000000000000000000000
% 000000000000300000008030000000000000803800000000010060000000000000000401c0000000000803000000000000080380000000001006000000000000300000000000
% 000000000000180000008030000000000000803e00000000010060000000000000000401f00000000008030000000000000803e0000000001006000000000000300000000000
% 0000000000000c000000c060000000000000c063c00000000180c00000000000000006031e000000000c060000000000000c063c00000000180c000000000000780000000000
% 0000000000000600000060e000000000000060f1c000000000c1c00000000000000003078e00000000060e000000000000060f1c000000000c1c000000000000dc0000000000
% 000000000000030000003fc00000000000003ff380000000007f800000000000000001ff9c0000000003fc00000000000003ff380000000007f8000000000001960000000000
% 000000000000018000000f000000000000000f1bc0000000001e00000000000000000078de0000000000f000000000000000f1bc0000000001e0000000000000100000000000
% 00000000000001c000000f00000000000000000e70000000001e00000000000000000000738000000000780000000000000000e70000000001e0000000000000100000000000
% 00000000000000e000000900000000000000000638000000001e0000000000000000000031c00000000078000000000000000063800000000120000000000000100000000000
% 00000000000000700000090000000000000000060e00000000120000000000000000000030700000000048000000000000000060e00000000120000000000000100000000000
% 00000000000000380000198000000000000000000700000000120000000000000000000000380000000048000000000000000000700000000330000000000000100000000000
% 000000000000001c00001980000000000000000001c00000003300000000000000000000000e00000000cc0000000000000000001c0000000330000000000000000000000000
% 000000000000000e00001080000000000000000000e00000003300000000000000000000000700000000cc0000000000000000000e0000000210000000000000000000000000
% 0000000000000007000030c00000000000000000003800000021000000000000000000000001c000000084000000000000000000038000000618000000000000000000000000
% 000000000000000380003fc00000000000000000001c00000061800000000000000000000000e00000018600000000000000000001c0000007f8000000000000000000000000
% 0000000000000001c0000200000000000000000000070000007f80000000000000000000000038000001fe000000000000000000007000000040000000000000100000000000
% 0000000000000000e000020000000000000000000003800000040000000000000000000000001c00000010000000000000000000003800000040000000000000100000000000
% 00000000000000006000020000000000000000000000e00000040000000000000000000000000700000010000000000000000000000e00000040000000000000100000000000
% 000000000000000030000200000000000000000000007800000400000000000000000000000003c0000010000000000000000000000780000040000000000000100000000000
% 000000000000000018000200000000000000000000001c00000400000000000000000000000000e00000100000000000000000000001c0000040000000000000100000000000
% 00000000000000000c000200000000000000000000000f00000400000000000000000000000000780000100000000000000000000000f0000040000000000000100000000000
% 0000000000000000060002000000000000000000000003800004000000000000000000000000001c000010000000000000000000000038000040000000000000100000000000
% 0000000000000000030002000000000000000000000001e00004000000000000000000000000000f00001000000000000000000000001e000040000000000000100000000000
% 00000000000000000180020000000000000000000000007000040000000000000000000000000003800010000000000000000000000007000040000000000000100000000000
% 000000000000000000c0020000000000000000000000001c00040000000000000000000000000000e00010000000000000000000000001c00040000000000000000000000000
% 00000000000000000060020000000000000000000000000e00040000000000000000000000000000700010000000000000000000000000e00040000000000000000000000000
% 000000000000000000300200000000000000000000000003800400000000000000000000000000001c0010000000000000000000000000380040000000000000000000000000
% 000000000000000000180200000000000000000000000001c00400000000000000000000000000000e00100000000000000000000000001c0040000000000000000000000000
% 0000000000000000000c020000000000000000000000000070040000000000000000000000000000038010000000000000000000000000070040000000000000000000000000
% 000000000000000000063f80000000000000000000000000387f000000000000000000000000000001c3f80000000000000000000000000387f0000000000000100000000000
% 0000000000000000000371c00000000000000000000000000ee3800000000000000000000000000000771c00000000000000000000000000ee38000000000000100000000000
% 00000000000000000001c0600000000000000000000000000780c000000000000000000000000000003c0600000000000000000000000000780c000000000000100000000000
% 00000000000000000001c02000000000000000000000000001804000000000000000000000000000000c02000000000000000000000000001804000000000000100000000000
% 00000000000000000000803000000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000100000000000
% 00000000000000000000803000000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000100000000000
% 00000000000000000000803ff8000000000000000000000001006000000000000000000000000000000803000000000000000000000000001006000000000000100000000000
% 00000000000000000000803018000000000000000000000001006000000000000000000000000000000803ff8000000000000000000000001006000000000000100000000000
% 00000000000000000000c07c1000000000000000000000000180c000000000000000000000000000000c0701800000000000000000000000180c000000000000000000000000
% 0000000000000000000060ee30000000000000000000000000c1c00000000000000000000000000000060f830000000000000000000000000c1c000000000000000000000000
% 000000000000000000003fc73e0000000000000000000000007f80000000000000000000000000000003fcc700000000000000000000000007f8000000000000000000000000
% 000000000000000000000f01a78000000000000000000000001e00000000000000000000000000000000f067c0000000000000000000000001e00000000000000000ffc00000
% 000000000000000000000000e1f000000000000000000000001e00000000000000000000000000000000003c78000000000000000000000001e00000000000000001f3f80000
% 000000000000000000000000603e00000000000000000000001e00000000000000000000000000000000001c1e000000000000000000000001200000000000001000003c0000
% 000000000000000000000000000780000000000000000000001200000000000000000000000000000000000c07c0000000000000000000000120000000000000100000060000
% 0000000000000000000000000001f0000000000000000000001200000000000000000000000000000000000000f0000000000000000000000330000000000000100078038000
% 00000000000000000000000000003e0000000000000000000033000000000000000000000000000000000000003e0000000000000000000003300000000000001000fc008000
% 000000000000000000000000000007800000000000000000003300000000000000000000000000000000000000078000000000000000000002100000000000001000ce080000
% 000000000000000000000000000001f0000000000000000000210000000000000000000000000000000000000001f00000000000000000000618000000000000100087080000
% 0000000000000000000000000000003e0000000000000000006180000000000000000000000000000000000000003c00000000000000000007f8000000000000100083080000
% 00000000000000000000000000000007c000000000000000007f80000000000000000000000000000000000000000f8000000000000000000040000000000000100081880000
% 00000000000000000000000000000000f0000000000000000004000000000000000000000000000000000000000001e0000000000000000000400000000000001000c1880000
% 000000000000000000000000000000003e0000000000000000040000000000000000000000000000000000000000007c00000000000000000040000000000000000078c80000
% 0000000000000000000000000000000007c000000000000000040000000000000000000000000000000000000000000f00000000000000000040000000000000000038e80000
% 0000000000000000000000000000000000f0000000000000000400000000000000000000000000000000000000000003e0000000000000000040000000000000000180780000
% 00000000000000000000000000000000003e000000000000000400000000000000000000000000000000000000000000780000000000000000400000000000000000e0380000
% 000000000000000000000000000000000007c000000000000004000000000000000000000000000000000000000000001e000000000000000040000000000000000038080000
% 000000000000000000000000000000000000f000000000000004000000000000000000000000000000000000000000000380000000000000004000000000000010000e000000
% 0000000000000000000000000000000000003e000000000000040000000000000000000000000000000000000000000000780000000000000040000000000000100003800000
% 00000000000000000000000000000000000007c000000000000400000000000000000000000000000000000000000000001f0000000000000040000000000000100001c00000
% 00000000000000000000000000000000000000f0000000000004000000000000000000000000000000000000000000000003e000000000000040000000000000100000700000
% 000000000000000000000000000000000000003e000000000004000000000000000000000000000000000000000000000000f800000000000040000000000000100000180000
% 0000000000000000000000000000000000000007c000000000040000000000000000000000000000000000000000000000001f0000000000004000000000000010000f800000
% 0000000000000000000000000000000000000000f0000000000400000000000000000000000000000000000000000000000003e000000000004000000000000010001fe00000
% 00000000000000000000000000000000000000003e0000000004000000000000000000000000000000000000000000000000007c000000000040000000000000100018700000
% 000000000000000000000000000000000000000007c000000004000000000000000000000000000000000000000000000000000f800000000040000000000000000010380000
% 000000000000000000000000000000000000000000f0000000040000000000000000000000000000000000000000000000000001f00000000040000000000000000010180000
% 0000000000000000000000000000000000000000003e0000000400000000000000000000000000000000000000000000000000007c0000000040000000000000000008180000
% 00000000000000000000000000000000000000000007c000000400000000000000000000000000000000000000000000000000000f800000004000000000000000001c180000
% 00000000000000000000000000000000000000000000f0000004000000000000000000000000000000000000000000000000000001f00000004000000000000000001ff80000
% 000000000000000000000000000000000000000000003e0000040000000000000000000000000000000000000000000000000000003e00000040000000000000100003fe0000
% 0000000000000000000000000000000000000000000007c0000400000000000000000000000000000000000000000000000000000007c00000400000000000001001801f8000
% 0000000000000000000000000000000000000000000000f8000400000000000000000000000000000000000000000000000000000000f80000400000000000001000c0018000
% 00000000000000000000000000000000000000000000001e0004000000000000000000000000000000000000000000000000000000003e000040000000000000100070000000
% 000000000000000000000000000000000000000000000007c0040000000000000000000000000000000000000000000000000000000007c0004000000000000010001e018000
% 000000000000000000000000000000000000000000000000f87f0000000000000000000000000000000000000000000000000000000000f807f000000000000010000fff8000
% 0000000000000000000000000000000000000000000000001ee380000000000000000000000000000000000000000000000000000000001f0e38000000000000100001fc0000
% 0000000000000000000000000000000000000000000000000780c00000000000000000000000000000000000000000000000000000000003f80c000000000000100000000000
% 00000000000000000000000000000000000000000000000001804000000000000000000000000000000000000000000000000000000000007804000000000000100000000000
% 00000000000000000000000000000000000000000000000001006000000000000000000000000000000000000000000000000000000000001006000000000000000000000000
% 00000000000000000000000000000000000000000000000001006000000000000000000000000000000000000000000000000000000000001006000000000000000000000000
% 00000000000000000000000000000000000000000000000001006000000000000000000000000000000000000000000000000000000000001006000000000000000000000000
% 00000000000000000000000000000000000000000000000001007fe0000000000000000000000000000000000000000000000000000000001006000000000000000000000000
% 0000000000000000000000000000000000000000000000000180e04000000000000000000000000000000000000000000000000000000000180c000000000000000010000000
% 00000000000000000000000000000000000000000000000000c1f0c0000000000000000000000000000000000000000000000000000000000c1c00000000000010001f800000
% 000000000000000000000000000000000000000000000000007f9cfc0000000000000000000000000000000000000000000000000000000007f800000000000010000ff80000
% 000000000000000000000000000000000000000000000000001e0e8fc000000000000000000000000000000000000000000000000000000001e00000000000001000187e0000
% 00000000000000000000000000000000000000000000000000000381fc0000000000000000000000000000000000000000000000000000000120000000000000100010170000
% 000000000000000000000000000000000000000000000000000001801fc000000000000000000000000000000000000000000000000000000120000000000000100010198000
% 0000000000000000000000000000000000000000000000000000000001fc00000000000000000000000000000000000000000000000000000330000000000000100018198000
% 00000000000000000000000000000000000000000000000000000000001fc000000000000000000000000000000000000000000000000000033000000000000010000c198000
% 000000000000000000000000000000000000000000000000000000000001f800000000000000000000000000000000000000000000000000021000000000000010000ff98000
% 0000000000000000000000000000000000000000000000000000000000001f800000000000000000000000000000000000000000000000000618000000000000000003f38000
% 00000000000000000000000000000000000000000000000000000000000001f800000000000000000000000000000000000000000000000007f8000000000000000000038000
% 000000000000000000000000000000000000000000000000000000000000001f8000000000000000000000000000000000000000000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003f80000000000000000000000000000000000000000000000004000000000000000000fc00000
% 00000000000000000000000000000000000000000000000000000000000000003f8000000000000000000000000000000000000000000000004000000000000000001fe00000
% 000000000000000000000000000000000000000000000000000000000000000003f8000000000000000000000000000000000000000000000040000000000000100018700000
% 0000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000000000000000000040000000000000100038380000
% 00000000000000000000000000000000000000000000000000000000000000000003f00000000000000000000000000000000000000000000040000000000000100038180000
% 000000000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000040000000000000100018180000
% 0000000000000000000000000000000000000000000000000000000000000000000003f00000000000000000000000000000000000000000004000000000000010001c180000
% 00000000000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000004000000000000010000ff80000
% 000000000000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000040000000000000100007f00000
% 0000000000000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000400000000000001001c0c00000
% 00000000000000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000400000000000001001fc000000
% 000000000000000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000000000000004000000000000000007fe00000
% 0000000000000000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000000000000040000000000000000003f80000
% 00000000000000000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000000000000000040000000000000000000180000
% 000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000000000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000fe00000000000000000000000000000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000fe0000000000000000000000000000000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000fc00000000000000000000000000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000000000000000000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc000000000000000000000000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc00000000000000000000000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000000000000000000000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc000000000000000000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc00000000000000000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000000000000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f8000000000000000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f800000000000000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f80000000000000000000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f8000000000000000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f800000000000000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f80000000000000000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f8000000000000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000000000000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f0000000000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f00000000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f0000000000040000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f000000000040000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f00000000040000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000040000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e000000040000000000000100000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e00000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000040000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe0007f0000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe00e38000000000001960000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe180c000000000000dc0000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff804000000000000580000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f006000000000000780000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001006000000000000300000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001006000000000000300000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001006000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180c000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1c000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f8000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Helvetica-Oblique FMFONTDEFINE
1 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 609 168 591 168 564 189 546 4 Y
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
245 609 224 591 224 564 245 546 4 Y
N
324 609 303 591 303 564 324 546 4 Y
N
377 609 356 591 356 564 377 546 4 Y
N
442 609 421 591 421 564 442 546 4 Y
N
497 609 476 591 476 564 497 546 4 Y
N
497 702.28 499.98 702.28 497 691.91 494.02 702.28 4 Y
0 Z
N
497 752 497 702.53 2 L
7 X
V
2 Z
0 X
N
497 624.29 499.98 624.29 497 613.91 494.02 624.29 4 Y
0 Z
N
497 642 497 624.54 2 L
7 X
V
2 Z
0 X
N
497 658.29 499.98 658.29 497 647.91 494.02 658.29 4 Y
0 Z
N
497 687 497 658.54 2 L
7 X
V
2 Z
0 X
N
379 625.29 381.98 625.29 379 614.91 376.02 625.29 4 Y
0 Z
N
379 643 379 625.54 2 L
7 X
V
2 Z
0 X
N
245 625.29 247.98 625.29 245 614.91 242.02 625.29 4 Y
0 Z
N
245 643 245 625.54 2 L
7 X
V
2 Z
0 X
N
245 659.29 247.98 659.29 245 648.91 242.02 659.29 4 Y
0 Z
N
245 688 245 659.54 2 L
7 X
V
2 Z
0 X
N
126 624.29 128.98 624.29 126 613.91 123.02 624.29 4 Y
0 Z
N
126 644 126 624.54 2 L
7 X
V
2 Z
0 X
N
256.92 693.83 257.67 690.95 246.88 691.23 256.18 696.71 4 Y
0 Z
N
497 756 257.16 693.89 2 L
7 X
V
2 Z
0 X
N
501 691 433 667 380 646 3 Y
7 X
V
390.49 650.16 391.59 647.39 380.84 646.33 389.39 652.92 4 Y
0 Z
0 X
N
501 691 433 667 390.72 650.25 3 L
2 Z
N
451.47 616.14 453.09 613.64 442.76 610.49 449.85 618.64 4 Y
0 Z
N
496 645 451.68 616.27 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 496.5 610.5 G
0 X
90 450 5.4 5.4 496.5 610.5 A
7 X
90 450 5.4 5.4 441.5 610.5 G
0 X
90 450 5.4 5.4 441.5 610.5 A
7 X
90 450 5.4 5.4 496.5 644.5 G
0 X
90 450 5.4 5.4 496.5 644.5 A
332.47 616.14 334.09 613.64 323.76 610.49 330.85 618.64 4 Y
0 Z
N
377 645 332.68 616.27 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 377.5 610.5 G
0 X
90 450 5.4 5.4 377.5 610.5 A
7 X
90 450 5.4 5.4 322.5 610.5 G
0 X
90 450 5.4 5.4 322.5 610.5 A
7 X
90 450 5.4 5.4 377.5 644.5 G
0 X
90 450 5.4 5.4 377.5 644.5 A
7 X
90 450 5.4 5.4 496.5 689.5 G
0 X
90 450 5.4 5.4 496.5 689.5 A
138.58 648.93 139.61 646.14 128.85 645.32 137.54 651.72 4 Y
0 Z
N
249 690 138.81 649.02 2 L
7 X
V
2 Z
0 X
N
199.47 616.14 201.09 613.64 190.76 610.49 197.85 618.64 4 Y
0 Z
N
244 645 199.68 616.27 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 244.5 610.5 G
0 X
90 450 5.4 5.4 244.5 610.5 A
7 X
90 450 5.4 5.4 189.5 610.5 G
0 X
90 450 5.4 5.4 189.5 610.5 A
7 X
90 450 5.4 5.4 244.5 644.5 G
0 X
90 450 5.4 5.4 244.5 644.5 A
80.47 618.14 82.09 615.64 71.76 612.49 78.85 620.64 4 Y
0 Z
N
125 647 80.68 618.27 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 125.5 644.5 G
0 X
90 450 5.4 5.4 125.5 644.5 A
7 X
90 450 5.4 5.4 244.5 689.5 G
0 X
90 450 5.4 5.4 244.5 689.5 A
7 X
90 450 5.4 5.4 496.5 755.5 G
0 X
90 450 5.4 5.4 496.5 755.5 A
0 19 Q
(G) 479 571 T
(G) 424 571 T
(G) 359 570 T
(G) 307 570 T
(G) 227 572 T
(G) 171 572 T
0 20 Q
(   p/2) 510 584 T
126 609 105 591 105 564 126 546 4 Y
N
7 X
90 450 5.4 5.4 125.5 610.5 G
0 X
90 450 5.4 5.4 125.5 610.5 A
0 19 Q
(G) 107 572 T
70 611 40 598.71 40 580.29 70 568 4 Y
N
7 X
90 450 5.4 5.4 68.5 612.5 G
0 X
90 450 5.4 5.4 68.5 612.5 A
(G) 43 585 T
0 15.2 Q
(0) 57.78 580.25 T
0 18 Q
(u) 38 622 T
0 14.4 Q
(1) 48.01 617.5 T
0 18 Q
(u) 135 619 T
0 14.4 Q
(2) 145.01 614.5 T
0 18 Q
(u) 506 616 T
0 14.4 Q
(n) 516.01 611.5 T
0 18 Q
(u) 164 619.48 T
0 14.4 Q
(3) 174.01 614.98 T
J
497 448.72 494.02 448.72 497 459.09 499.98 448.72 4 Y
0 Z
N
497 399 497 448.47 2 L
7 X
V
2 Z
0 X
N
497 526.71 494.02 526.71 497 537.09 499.98 526.71 4 Y
0 Z
N
497 509 497 526.46 2 L
7 X
V
2 Z
0 X
N
497 492.71 494.02 492.71 497 503.09 499.98 492.71 4 Y
0 Z
N
497 464 497 492.46 2 L
7 X
V
2 Z
0 X
N
379 525.71 376.02 525.71 379 536.09 381.98 525.71 4 Y
0 Z
N
379 508 379 525.46 2 L
7 X
V
2 Z
0 X
N
245 525.71 242.02 525.71 245 536.09 247.98 525.71 4 Y
0 Z
N
245 508 245 525.46 2 L
7 X
V
2 Z
0 X
N
245 491.71 242.02 491.71 245 502.09 247.98 491.71 4 Y
0 Z
N
245 463 245 491.46 2 L
7 X
V
2 Z
0 X
N
126 526.71 123.02 526.71 126 537.09 128.98 526.71 4 Y
0 Z
N
126 507 126 526.46 2 L
7 X
V
2 Z
0 X
N
256.92 457.17 256.18 454.29 246.88 459.77 257.67 460.05 4 Y
0 Z
N
497 395 257.16 457.11 2 L
7 X
V
2 Z
0 X
N
501 460 433 484 380 505 3 Y
7 X
V
390.49 500.84 389.39 498.08 380.84 504.67 391.59 503.61 4 Y
0 Z
0 X
N
501 460 433 484 390.72 500.75 3 L
2 Z
N
451.47 534.86 449.85 532.36 442.76 540.51 453.09 537.36 4 Y
0 Z
N
496 506 451.68 534.73 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 496.5 540.5 G
0 X
90 450 5.4 5.4 496.5 540.5 A
7 X
90 450 5.4 5.4 441.5 540.5 G
0 X
90 450 5.4 5.4 441.5 540.5 A
7 X
90 450 5.4 5.4 496.5 506.5 G
0 X
90 450 5.4 5.4 496.5 506.5 A
332.47 534.86 330.85 532.36 323.76 540.51 334.09 537.36 4 Y
0 Z
N
377 506 332.68 534.73 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 377.5 540.5 G
0 X
90 450 5.4 5.4 377.5 540.5 A
7 X
90 450 5.4 5.4 322.5 540.5 G
0 X
90 450 5.4 5.4 322.5 540.5 A
7 X
90 450 5.4 5.4 377.5 506.5 G
0 X
90 450 5.4 5.4 377.5 506.5 A
7 X
90 450 5.4 5.4 496.5 461.5 G
0 X
90 450 5.4 5.4 496.5 461.5 A
138.58 502.07 137.54 499.28 128.85 505.68 139.61 504.86 4 Y
0 Z
N
249 461 138.81 501.98 2 L
7 X
V
2 Z
0 X
N
199.47 534.86 197.85 532.36 190.76 540.51 201.09 537.36 4 Y
0 Z
N
244 506 199.68 534.73 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 244.5 540.5 G
0 X
90 450 5.4 5.4 244.5 540.5 A
7 X
90 450 5.4 5.4 189.5 540.5 G
0 X
90 450 5.4 5.4 189.5 540.5 A
7 X
90 450 5.4 5.4 244.5 506.5 G
0 X
90 450 5.4 5.4 244.5 506.5 A
76.84 553.88 74.7 551.82 69.63 561.35 78.98 555.95 4 Y
0 Z
N
125 504 77.01 553.7 2 L
7 X
V
2 Z
0 X
N
7 X
90 450 5.4 5.4 125.5 506.5 G
0 X
90 450 5.4 5.4 125.5 506.5 A
7 X
90 450 5.4 5.4 244.5 461.5 G
0 X
90 450 5.4 5.4 244.5 461.5 A
7 X
90 450 5.4 5.4 496.5 395.5 G
0 X
90 450 5.4 5.4 496.5 395.5 A
7 X
90 450 5.4 5.4 125.5 540.5 G
0 X
90 450 5.4 5.4 125.5 540.5 A
7 X
90 450 5.4 5.4 68.5 565.5 G
0 X
90 450 5.4 5.4 68.5 565.5 A
J
556 750.8 556 755.5 2 L
0 Z
N
553.43 751.05 556 755.5 558.57 751.05 3 L
N
J
556 616.2 556 611.5 2 L
N
558.57 615.95 556 611.5 553.43 615.95 3 L
N
J
556 750.8 556 616.2 2 L
J
556 750.8 556 747.05 2 L
2 Z
N
[7.195 6.236] 7.195 I
556 747.05 556 619.95 2 L
N
J
556 619.95 556 616.2 2 L
N
J
0 19 Q
(log \050p/2\051) 0 -270 582 648 TF
J
555 534.8 555 539.5 2 L
0 Z
N
552.43 535.05 555 539.5 557.57 535.05 3 L
N
J
555 400.2 555 395.5 2 L
N
557.57 399.95 555 395.5 552.43 399.95 3 L
N
J
555 534.8 555 400.2 2 L
J
555 534.8 555 531.05 2 L
2 Z
N
[7.195 6.236] 7.195 I
555 531.05 555 403.95 2 L
N
J
555 403.95 555 400.2 2 L
N
J
(log \050p/2\051) 0 -270 581 432 TF
1 18 Q
(subgraphs) 510 564 T
0 0 0 1 0 0 0 K
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 1895 2230 a FN(\(a\))400 4291 y @beginspecial
39 @llx 544 @lly 271 @urx 747 @ury 1008 @rhi @setspecial
%%BeginDocument: figures/dag11.epsi
% 000000000000000000000000000000001800000000000300001f800000
% 000000000000000000000000000000001800000000000300007fe00000
% 00000000000000000000000000000000380000000000030000e0e00000
% 0000000000000000000000000000000030000000000006000180600000
% 0000000000000000000000000003f18337c1fcdcfe3fc7f80380000006
% 0000000000000000000000000007f9833fe7fcfdc63fe7fc030000000e
% 000000000000000000000000000c198738e61ce18638e71c070fe00000
% 000000000000000000000000000f0186706c1cc00e706618060fe00000
% 0000000000000000000000000007e386606c18c1fe606c180600c1f000
% 0000000000000000000000000001f30660cc1983ce60cc180600c3b800
% 0000000000000000000000000018330e60cc19870c60cc180701c31800
% 000000000000000000000000001c331e738c39860c718c380383c61800
% 000000000000000000000000001fe3fcff8ff1873cff9c3003ffc61818
% 000000000000000000000000000fc3ecfe07f383eede183001fc841818
% 000000000000000000000000000000000000300000c0000000000c1000
% 000000000000000000000000000000000018600000c0000000000c3000
% 000000000000000000000000000000000018e0000180000000000c3000
% 00000000000000000000000000000000001f8000018000000000066000
% 000000000000000000000000000000000000000000000000000007c000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 000000000c000000000000000000000000000000000000000000000000
% 000000000c000000000000000000000000000000000000000000000000
% 000000001e000000000000000000003f00000000000000000000000000
% 000000003700000000000000000000e380000000000000000000000000
% 000000006580000000000000000000c180000000000000000000000000
% 0000000004000000000000000000018180000000000000000000000000
% 0000000004000000000000000001818000001fc0000000000000000000
% 000000000400000000000000000181f000003fe0000000000000000000
% 000000000400000000000000000180fe00007ff0000000000000000000
% 0000000004000000000000000001000f00007ff0000000000000000000
% 000000000000000000000000003ff00302007ff8000000000000000000
% 000000000000000000000000000303030e007ff8000000000000000000
% 000000000000000000000000000303031e007ff8000000000000000000
% 0000000000000000000000000002038e06007ff8000000000000000000
% 000000000000000000000000000201fc06007ff0000000000000000000
% 0000000004000000000000000000000004003ff0000000000000000000
% 000000000400000000000000000000000c001fe0000000000000000000
% 000000000400000000000000000000000c000780000000000000000000
% 000000000400000000000000000000000c000100000000000000000000
% 0000000004000000000000000000000008000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000001fe0000000000000000000
% 0000000004000000000000000000000000000840000000000000000000
% 0000000004000000000000000000000000000cc0000000000000000000
% 0000000004000000000000000000000000000cc0000000000000000000
% 0000000004000000000000000000000000000480000000000000000000
% 0000000004000000000000000000000000000480000000000000000000
% 0000000004000000000000000000000000000780000000000000000000
% 0000000000000000000000000000000000000780000000000000000000
% 0000000000000000000000000000000000000300000000000000000000
% 0000000000000000000000000000000000000300000000000000000000
% 0000000000000000000000000000000000001fc0000000000000000000
% 00000000000000000000000000000000000038e0000000000000000000
% 0000000004000000000000000000000000006030000000000000000000
% 0000000004000000000000000000000000006010000000000000000000
% e000000004000000000000000000000000004018000000000000000000
% ff00000004000000000000000000000000004018000000000000000000
% 1ff8000004000000000000000000000000004018000000000000000000
% 07fe000004000000000000000000000000004018000000000000000000
% 0c0e000004000000000000000000000000006030000000000000000000
% 0c06000004000000000000000000000000003070000000000000000000
% 0c02000004000000000000000000000000001fe0000000000000000000
% 0402000000000000000000000000000000000780000000000000000000
% 0702000000000000000000000000000000000000000000000000000000
% 03fe000000000000000000000000000000000000000000000000000000
% 01fc000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000700000000000000000000
% 0000000004000000000000000000000000000f00000000000000000000
% 0000000004000000000000000000000000000f00000000000000000000
% 0000000004000000000000000000000000000f00000000000000000000
% 0000000004000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000700000000000000000000
% 03fe000000000000000000000000000000000f00000000000000000000
% 07fe000004000000000000000000000000000f00000000000000000000
% 0600000004000000000000000000000000000f00000000000000000000
% 0600000004000000000000000000000000000000000000000000000000
% 0600000004000000000000000000000000000000000000000000000000
% 0600000004000000000000000000000000000000000000000000000000
% 0300000004000000000000000000000000000000000000000000000000
% 7ffe000004000000000000000000000000000000000000000000000000
% 7ffe000004000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000700000000000000000000
% 0404000000000000000000000000000000000f00000000000000000000
% 0606000000000000000000000000000000000f00000000000000000000
% 7ffe000000000000000000000000000000000f00000000000000000000
% 7ffe000000000000000000000000000000000000000000000000000000
% 0600000000000000000000000000000000000000000000000000000000
% 0600000004000000000000000000000000000000000000000000000000
% 0000000004000000000000000000000000000000000000000000000000
% 01f8000004000000000000000000000000000000000000000000000000
% 03fc000004000000000000000000000000000fe0000000000000000000
% 070e000004000000000000000000000000001c70000000000000000000
% 0606000004000000000000000000000000003018000000000000000000
% 0606000004000000000000000000000000003008000000000000000000
% 060600000400000000000000000000000000200c000000000000000000
% 070c00000400000000000000000000000000200c000000000000000000
% 07ffe0000000000000000000000000000000200c000000000000000000
% 07ffe0000000000000000000000000000000200c000000000000000000
% 0000000000000000000000000000000000003018000000000000000000
% 0000000000000000000000000000000000001838000000000000000000
% 01f8000000000000000000000000000000000ff0000000000000000000
% 03ee0000040000000000000000000000000003c0000000000000000000
% 0766000004000000000000000000000000000100000000000000000000
% 0666000004000000000000000000000000000100000000000000000000
% 0666000004000000000000000000000000000100000000000000000000
% 0666000004000000000000000000000000000100000000000000000000
% 076e000004000000000000000000000000000100000000000000000000
% 03fc000004000000000000000000000000000100000000000000000000
% 01f8000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 7ffe000000000000000000000000000000000100000000000000000000
% 7ffe000000000000000000000000000000000100000000000000000000
% 070c000000000000000000000000000000000100000000000000000000
% 0606000000000000000000000000000000000100000000000000000000
% 0606000004000000000000000000000000000100000000000000000000
% 0606000004000000000000000000000000000100000000000000000000
% 070e000004000000000000000000000000000100000000000000000000
% 03fc000004000000000000000000000000000100000000000000000000
% 01f8000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000000000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000000100000000000000000000
% 0000000004000000000000000000000000001fe0000000000000000000
% 0000000004000000000000000000000000000840000000000000000000
% 0000000004000000000000000000000000000cc0000000000000000000
% 0000000000000000000000000000000000000cc0000000000000000000
% 0000000000000000000000000000001f80000480000000000000000000
% 00000000000000000000000000000071c0000480000000000000000000
% 00000000000000000000000000000060c0000780000000000000000000
% 000000000000000000000000000000c0c0000780000000000000000000
% 000000000400000000000000000000c000000300000000000600000000
% 000000000400000000000000000000f800001fc0000000000600000000
% 0000000004000000000000000000007f00003fe0000000000c00000000
% 000000000400000000000000000f800780006230000000000c00000000
% 000000000400000000000000000f000181007550003f87e1fc7e031c60
% 000000006580000000000000000001818700401800398c631ce6031cc0
% 000000003700000000000000000001818f005558007198361d83033cc0
% 000000001600000000000000000001c703006038006198361983032d80
% 000000001e00000000000000000000fe030055580061b07c1bfe036d80
% 000000000c0000000000000000000000020060300061b06c1b00016f00
% 000000000c0000000000000000000000060035700041b0643b0601cf00
% 0000000000000000000000000000000006001fe000c319c6718c01ce00
% 000000000000000000000000000000000600078000c30f87f1f8018e00
% 0000000000000000000000000000000004000000000000000000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Helvetica-Oblique FMFONTDEFINE
1 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 20 Q
0 X
0 0 0 1 0 0 0 K
(subgraph G) 146 732 T
0 16 Q
(0) 250.5 727 T
0 20 Q
( :) 259.4 732 T
J
77 705.8 77 710.5 2 L
0.5 H
0 Z
N
74.43 706.05 77 710.5 79.57 706.05 3 L
N
J
77 553.2 77 548.5 2 L
N
79.57 552.95 77 548.5 74.43 552.95 3 L
N
J
77 705.8 77 553.2 2 L
J
77 705.8 77 702.05 2 L
2 Z
N
[7.429 6.438] 7.429 I
77 702.05 77 556.95 2 L
N
J
77 556.95 77 553.2 2 L
N
1 F
(depth) 0 -270 55 579 TF
0 F
(d) 0 -270 55 640.16 TF
J
191 667.29 193.98 667.29 191 656.91 188.02 667.29 4 Y
0 Z
N
191 695 191 667.54 2 L
7 X
V
2 Z
0 X
N
90 450 5.4 5.4 190.5 699.5 G
90 450 5.4 5.4 190.5 699.5 A
4 X
90 450 5.4 5.4 190.5 551.5 G
0 X
90 450 5.4 5.4 190.5 551.5 A
191 566.29 193.98 566.28 191 555.91 188.02 566.28 4 Y
0 Z
N
191 599 191 566.53 2 L
2 Z
N
0 18 Q
(+S) 145 696 T
0 14.4 Q
(1) 167.52 691.5 T
0 18 Q
(- S) 146 549 T
0 14.4 Q
(1) 169 544.5 T
J
7 X
90 450 5.4 5.4 190.5 651.5 G
0 X
90 450 5.4 5.4 190.5 651.5 A
7 X
90 450 5.4 5.4 191.5 604.5 G
0 X
90 450 5.4 5.4 191.5 604.5 A
1 35 Q
(...) 0 -270 192 612 TF
J
48 431 393 431 393 377 48 377 4 Y
J
48 427.25 48 431 51.75 431 3 L
7 X
N
[7.39 6.405] 7.39 I
51.75 431 389.24 431 2 L
N
J
389.24 431 393 431 393 427.25 3 L
N
[7.191 6.232] 7.191 I
393 427.25 393 380.75 2 L
N
J
393 380.75 393 377 389.25 377 3 L
N
[7.39 6.405] 7.39 I
389.25 377 51.76 377 2 L
N
J
51.76 377 48 377 48 380.75 3 L
N
[7.191 6.232] 7.191 I
48 380.75 48 427.25 2 L
N
0 18 Q
0 X
(node w) 207 545 T
0 0 0 1 0 0 0 K
J
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 1639 w @beginspecial 45 @llx 392 @lly 399
@urx 747 @ury 1728 @rhi @setspecial
%%BeginDocument: figures/dag10.epsi
% 00000000000000000000000000000006000000000000c00007e000000000000000000000000000000000000000
% 00000000000000000000000000000006000000000000c0001ff800000000000000000000000000000000000000
% 0000000000000000000000000000000e000000000000c000383800000000000000000000000000000000000000
% 0000000000000000000000000000000c0000000000018000601800000000000000000000000000000000000000
% 00000000000000000000000000fc60cdf07f373f8ff1fe00e00003000000000000000000000000000000000000
% 00000000000000000000000001fe60cff9ff3f718ff9ff00c00007000000000000000000000000000000000000
% 000000000000000000000000030661ce398738618e39c701c3f800000000000000000000000000000000000000
% 00000000000000000000000003c0619c1b0730039c19860183f800000000000000000000000000000000000000
% 00000000000000000000000001f8e1981b06307f981b0601803000000000000000000000000000000000000000
% 000000000000000000000000007cc198330660f398330601803000000000000000000000000000000000000000
% 000000000000000000000000060cc398330661c318330601c07000000000000000000000000000000000000000
% 000000000000000000000000070cc79ce30e61831c630e00e0f000000000000000000000000000000000000000
% 00000000000000000000000007f8ff3fe3fc61cf3fe70c00fff00c000000000000000000000000000000000000
% 00000000000000000000000003f0fb3f81fce0fbb7860c007f200c000000000000000000000000000000000000
% 00000000000000000000000000000000000c000030000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000618000030000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000638000060000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000007e0000060000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000000
% 0000000600000000000000000000000000000000000000000000000000000000000000000000038e0000000000
% 000000060000000000000000000000000000000000000000000000000000000000000000000006030000000000
% 0000000f0000000000000000000000000000000000000000000000000000000000000000000006010000000000
% 0000001b8000000000000000000000000000000000000000000000000000000000000000000004018000000000
% 00000032c000000000000000000000000000000000000000000000000000000000000000000004018000000000
% 000000020000000000000000000000000000000000000000000000000000000000000000000004018000000000
% 00000002000000000000000000000000000000000000000000000000000000000000000000001c018000000000
% 0000000200000000000000000000000000000000000000000000000000000000000000000000fe030000000000
% 0000000200000000000000000000000000000000000000000000000000000000000000000007c3070000000000
% 000000020000000000000000000000000000000000000000000000000000000000000000001e01fe0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000f800780000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000007c000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000001f0000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000f80000100000000000
% 000000000000000000000000000000000000000000000000000000000000000000000003c00000100000000000
% 00000002000000000000000000000000000000000000000000000000000000000000301f000000100000000000
% 0000000200000000000000000000000000000000000000000000000000000000000070f8000000100000000000
% 00000002000000000000000000000000000000000000000000000000000000000000d3c0000000100000000000
% 000000020000000000000000000000000000000000000000000000000000000000039f00000000100000000000
% 000000020000000000000000000000000000000000000000000000000000000000071800000000100000000000
% 00000002000000000000000000000000000000000000000000000000000000001fce0800000000100000000000
% 000000020000000000000000000000000000000000000000000000000000000038f80c00000000100000000000
% 0000000200000000000000000000000000000000000000000000000000000000603ffc00000000100000000000
% 000000020000000000000000000000000000000000000000000000000000000060100000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000040180000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000040180000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000040180000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000000c0180000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000000007e0300000000000100000000000
% 000000020000000000000000000000000000000000000000000000000000001e30700000000000100000000000
% 00000002000000000000000000000000000000000000000000000000000000781fe00000000000100000004000
% 00000002000000000000000000000000000000000000000000000000000603c00780000000000010000000e000
% 00000002000000000000000000000000000000000000000000000000000e0f000100000000000010000000f000
% 00000002000000000000000000000000000000000000000000000000001e7c000100000000000010000001f000
% 000000020000000000000000000000000000000000000000000000000033e0000100000000000010000001b000
% 000000020000000000000000000000000000000000000000000000000063800001000000000001fe000c01b800
% 0000000200000000000000000000000000000000000000000000000000c180000100000000000084000c031800
% 000000020000000000000000000000000000000000000000000000000383c00001000000000000cc000c031c00
% 0000000000000000000000000000000000000000000000000000000007ffc00001000000000000cc000c031c00
% 000000000000000000000000000000000000000000000000000000000e000000010000000000004800ffc7fc00
% 0000000000000000000000000000000000000000000000000000000000000000010000000000004801ffc7fe00
% 00000000000000000000000000000000000000000000000000000020000000000100000000000078000c0e0600
% 000000000000000000000000000000000000000000000000000000700000000001000000000001fc000c0c0600
% 000000020000000000000000000000000000000000000000000000f80000000001000000000003fe000c0c0700
% 000000020000000000000000000000000000000000000000000080700000000001000000000007ff000c1c0300
% 0000000200000000000000000000000000000000000000000001c0200000000001000000000007ff0000000000
% 0000000200000000000000000000000000000000000000000003e0000000000001000000000007ff8000000000
% 0000000200000000000000000000000000000000000000000201c0000000000001000000000007ff8000000000
% 000000020000000000000000000000000000000000000000070080000000000001000000000007ff8000000000
% 0000000200000000000000000000000000000000000000000f8000000000000001000000000007ff8000000000
% 000000020000000000000000000000000000000000000000070000000000000001000000000007ff0000000000
% 000000020000000000000000000000000000000000000000020000000000000001000000000003ff0000000000
% 0000000000000000000000000000000000000000000000c0000000000000000001000000000001fe0000000000
% 0000000000000000000000000000000000000000000003c0000000000000000001000000000000780000000000
% 000000000000000000000000000000000000000000001f00000000000000000001000000200000100000000000
% 000000000000000000000000000000000000000000007800000000000000000001000000700000100000000000
% 00000000000000000000000000000000000000000001e00000000000000000001fe00000780000100000000000
% 0000000200000000000000000000000000000000000f0000000000000000000008400000f80000100000000000
% 0000000200000000000000000000000000000000003c000000000000000000000cc00000d80000100000000000
% 000000020000000000000000000000000000000000f0000000000000000000000cc00600dc0000100000000000
% 0000000200000000000000000000000000000000078000000000000000000000048006018c0000100000000000
% 000000020000000000000000000000000000000c1e0000000000000000000000048006018e0000100000000000
% 000000020000000000000000000000000000001cf80000000000000000000000078006018e0000100000000000
% 000000020000000000000000000000000000003fc0000000000000000000000007807fe3fe0000100000000000
% 000000020000000000000000000000000007f0670000000000000000000000000300ffe3ff0000100000000000
% 00000002000000000000000000000000000e38c70000000000000000000000001fc00607030000100000000000
% 0000000000000000000000000000000000180d838000000000000000000000003fe00606030000100000000000
% 000000000000000000000000000000000018077f8000000000000000000000007ff00606038000100000000000
% 00000000000000000000000000000000001007f00000000000000000000000007ff0060e018000100000000000
% 0000000000000000000000000000000000f006000000000000000000000000007ff80000000000100000000000
% 0000000000000000000000000000000003d006000000000000000000000000007ff80000000000100000000000
% 000000020000000000000000000000000f1006000000000000000000000000007ff80000000000100000000000
% 000000020000000000000000000000003c180c000000000000000000000000007ff80000000000100000000000
% 00000002000000000000000000000000f00c1c000000000000000000000000007ff00000000000100000000000
% 00000002000000000000000000000007c007f8000000000000000000000000003ff00000000000100000000000
% 0000000200000000000000000000001e0001e0000000000000000000000000001fe00000000000100000000000
% 000000020000000000000000000000780000400000000000000000000000000007800000000000100000000000
% 000000020000000000000000000001e00000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000000000007800000400000000000000000000000000001000000000000100000000000
% 3ffe00020000000000000000000c3e000000400000000000000000000000000001000000000000100000000000
% 180000000000000000000000001cf0000000400000000000000000000000000001000000000000100000000000
% 180000000000000000000000003fc0000000400000000000000000000000000001000000000000100000000000
% 180000000000000000000000006700000000400000000000000000000000000001000000000000100000000000
% 00000000000000000000000000c300000000400000000000000000000000000001000000000000100000000000
% 000000000000000000000003f98380000000400000000000000000000000000001000000000000100000000000
% 0000000200000000000000071f7f80000000400000000000000000000000000001000000000000100000000000
% 00600002000000000000000c07f000000000400000000000000000000000000001000000000000100000000000
% 00600002000000000000000c020000000000400000020000000000000000000001000000000000100000000000
% 006000020000000000000008030000000000400000070000000000000000000001000000000000100000000000
% 006000020000000000000008030000000000400000078000000000000000000001000000000000100000000000
% 07fe00020000000000000008030000000007f800000f8000000000000000000001000000000000100000000000
% 07fe000200000000000000080300000000021000000d8000000000000000000001000000000000100000000000
% 00600002000000000000000c0600000000033000600dc000000000000000000001000000000000100000000000
% 0060000200000000000000060e000000000330006018c000000000000000000001000000000000100000000000
% 006000000000000000000003fc000000000120006018e000000000000000000001000000000000100000000000
% 006000000000000000000000f0000000000120006018e000000000000000000001000000000000100000000000
% 004000000000000000000000400000000001e007fe3fe000000000000000000001000000000000100000000000
% 000000000000000000000000400000000001e00ffe3ff000000000000000000001000000000000100000000000
% 000000000000000000000000400000000007f00060703000000000000000000001000000000000100000000000
% 00000002000000000000000040000000000ff80060603000000000000000000001000000000000100000000000
% 00000002000000000000000040000000001ffc0060603800000000000000000001000000000000100000000000
% e0000002000000000000000040000000001ffc0060e01800000000000000000001000000000000100000000000
% ff000002000000000000000040000000001ffe0000000000000000000000000001000000000000100000000000
% 1ff80002000000000000000040000000001ffe0000000000000000000000000001000000000000100000000000
% 07fe0002000000000000000040000000001ffe0000000000000000000000000001000000000000100000000000
% 0c0e0002000000000000000040000000001ffe0000000000000000000000000001000000000000100000000000
% 0c060002000000000000000040000000001ffc0000000000000000000000000001000000000000100000000000
% 0c020002000000000000000040000000000ffc0000000000000000000000000001000000000000100000000000
% 040200000000000000000000400000000007f80000000000000000000000000001000000000000100000000000
% 070200000000000000000000400000000001e00000000000000000000000000001000000000000100000000000
% 03fe00000000000000000000400000000000400000000000000000000000000001000000000000100000000000
% 01fc00000000000000000000400000000000400000000000000000000000000001000000000000100000000000
% 000000000000000000000000400000200000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000400000700000400000000000000000000000000001000000000000100000000000
% 000000020000000000000007f80000780000400000000000000000000000000001000000000000100000000000
% 1e0600020000000000000002100000f80000400000000000000000000000000001000000000000100000000000
% 3f8600020000000000000003300000d80000400000000000000000000000000001000000000000100000000000
% 718600020000000000000003300600dc0000400000000000000000000000000001000000000000100000000000
% 60c6000200000000000000012006018c0000400000000000000000000000000001000000000000100000000000
% 60c6000200000000000000012006018e0000400000000000000000000000000001000000000000100000000000
% 606600020000000000000001e006018e0000400000000000000000000000000001000000000000100000000000
% 703600020000000000000007f07fe3fe0000400000000000000000000000000001000000000000100000000000
% 3c3e0000000000000000000ff8ffe3ff0000400000000000000000000000000001000000000000100000000000
% 1c0e0000000000000000001ffc0607030000400000000000000000000000000001000000000000100000000000
% 00000000000000000000001ffc0606030000400000000000000000000000000001000000000000100000000000
% 00000000000000000000001ffe0606038000400000000000000000000000000001000000000000100000000000
% 00000000000000000000001ffe060e018000400000000000000000000000000001000000000000100000000000
% 00000002000000000000001ffe0000000000400000000000000000000000000001000000000000100000000000
% 00000002000000000000001ffe0000000000400000000000000000000000000001000000000000100000000000
% 00000002000000000000001ffc0000000000400000000000000000000000000001000000000000100000000000
% 00000002000000000000000ffc0000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000007f80000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000001e00000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 03fe00000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 07fe00000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060000000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060000000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 030000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 040400020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060600020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060000000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060000000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 01f800000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 03fc00000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 070e00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060600020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060600020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 060600020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 070c00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 07ffe0020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 07ffe0020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 01f800000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 03ee00000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 076600000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 066600000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 066600000000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 066600020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 076e00020000000000000000800000000000400000000000000000000000000001000000000000100000000000
% 03fc0002000000000000000ff00000080000400000000000000000000000000001000000000000100000000000
% 01f8000200000000000000042000001c0000400000000000000000000000000001000000000000100000000000
% 0000000200000000000000066000001e0000400000000000000000000000000001000000000000100000000000
% 0000000200000000000000066000003e0000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000002400000360000400000000000000000000000000001000000000000100000000000
% 7ffe00020000000000000002400000370000400000000000000000000000000001000000000000100000000000
% 070c00020000000000000003c00000630000400000000000000000000000000001000000000000100000000000
% 060600000000000000000003c00000638000400000000000000000000000000001000000000000100000000000
% 060600000000000000000003f01f00638000400000000000000000000000000001000000000000100000000000
% 0606000000000000000000071c1f00ff8000400000000000000000000000000001000000000000100000000000
% 070e000000000000000000075c0000ffc000400000000000000000000000000001000000000000100000000000
% 03fc0000000000000000000c060001c0c000400000000000000000000000000001000000000000100000000000
% 01f80002000000000000000d56000180c000400000000000000000000000000001000000000000100000000000
% 0000000200000000000000088a000180e000400000000000000000000000000001000000000000100000000000
% 00000002000000000000000d560003806000400000000000000000000000000001000000000000100000000000
% 00000002000000000000000c060000000000400000000000000000000000000001000000000000100000000000
% 00000002000000000000000d560000000000400000000000000000000000000001000000000000100000000000
% 0000000200000000000000060c0000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000003ff0000000000400000000000000000000000000001000000000000100000000000
% 000000020000000000000000e38000000000400000000000000000000000000001000000000000100000000000
% 00000002000000000000000000e000000000400000000000000000000000000001000000000000100000000000
% 000000000000000000000000007800000000400000020000000000000000000001000000000000100000000000
% 000000000000000000000000001e00000000400000070000000000000000000001000000000000100000000000
% 000000000000000000000000000780000000400000078000000000000000000001000000000000100000000000
% 0000000000000000000000000001e00000004000000f8000000000000000000001000000000000100000000000
% 000000000000000000000000000070000007f800000d8000000000000000000001000000000000100000000000
% 00000002000000000000000000001c0000021000000dc000000000000000000001000000000000100000000000
% 00000002000000000000000000000f00000330000018c000000000000000000001000000000000100000000000
% 000000020000000000000000000003c0000330000018e000000000000000000001000000000000100000000000
% 000000020000000000000000000000f000012007c018e000000000000000000001000000000000100000000000
% 0000000200000000000000000000003c00012007c03fe000000000000000000001000000000000100000000000
% 0000000200000000000000000000000e0c01e000003ff000000000000000000001000000000000100000000000
% 000000020000000000000000000000038e01e00000703000000000000000000001000000000000100000000000
% 00000002000000000000000000000001ef00c00000603000000000000000000001000000000000100000000000
% 000000020000000000000000000000007b80c00000603800000000000000000001000000000000100000000000
% 0000000000000000000000000000000019c0c00000e01800000000000000000001000000000000100000000000
% 0000000000000000000000000000000030e7f00000000000000000000000000001000000000000100000000000
% 000000000000000000000000000000003e7eb80000000000000000000000000001000000000000100000000000
% 0000000000000000000000000000000007fd5c0000000000000000000000000001000000000000100000000000
% 000000000000000000000000000000000078040000000000000000000000000001000000000000100000000000
% 000000020000000000000000000000000015560000000000000000000000000001000000000000100000000000
% 0000000200000000000000000000000000180e0000000000000000000000000001000000000000100000000000
% 000000020000000000000000000000000015560000000000000000000000000001000000000000100000000000
% 000000020000000000000000000000000010060000000000000000000000000001000000000000100000000000
% 00000002000000000000000000000000001d5fc000000000000000000000000001000000000000100000000000
% 00000002000000000000000000000000000c9cf800000000000000000000000001000000000000100000000000
% 000000020000000000000000000000000007f83e00000000000000000000000001000000000000100000000000
% 000000020000000000000000000000000001e007c0600000000000000000000001000000000000100000000000
% 0000000200000000000000000000000000000000f8700000000000000000000001000000000000100000000000
% 00000000000000000000000000000000000000001e580000000000000000000001000000000000100000000000
% 000000000000000000000000000000000000000007ce0000000000000000000001000000000000100000000000
% 000000000000000000000000000000000000000000c70000000000000000000001000000000000100000000000
% 000000000000000000000000000000000000000000838000000000000000000001000000000000100000000000
% 00000000000000000000000000000000000000000180c000000000000000000001000000000000100000000000
% 000000020000000000000000000000000000000001fff000000000000000000001000000000000100000000000
% 00000002000000000000000000000000000000000000f800000000000000000001000000000000100000000000
% 000000020000000000000000000000000000000000000010000000000000000001000000000000100000000000
% 000000020000000000000000000000000000000000000038000000000000000001000000000000100000000000
% 00000002000000000000000000000000000000000000007c000000000000000001000000000000100000000000
% 000000020000000000000000000000000000000000000038000000000000000001000000000000100000000000
% 000000020000000000000000000000000000000000000010020000000000000001000000000000100000000000
% 000000020000000000000000000000000000000000000000070000000000000001000000000000100000000000
% 0000000200000000000000000000000000000000000000000f8000000000000001000000000000100000000000
% 000000000000000000000000000000000000000000000000070000000000000001000000000000100000000000
% 000000000000000000000000000000000000000000000000020000000000000001000000000000100000000000
% 000000000000000000000000000000000000000000000000000000000000000001000000100000100000000000
% 000000000000000000000000000000000000000000000000000010000000000001000000380000100000000000
% 0000000000000000000000000000000000000000000000000000380000000000010000003c0000100000000000
% 00000002000000000000000000000000000000000000000000007c0000000000010000007c0000100000000000
% 0000000200000000000000000000000000000000000000000000380000000000010000006c0000100000000000
% 0000000200000000000000000000000000000000000000000000100000000000010000006e0000100000000000
% 000000020000000000000000000000000000000000000000000000000000000001000000c60000100000000000
% 0000000200000000000000000000000000000000000000000000000c000000001fe00000c70000100000000000
% 0000000200000000000000000000000000000000000000000000000f8000000008403e00c70000100000000000
% 00000002000000000000000000000000000000000000000000000001e00000000cc03e01ff0000100000000000
% 000000020000000000000000000000000000000000000000000000007c0000000cc00001ff8000100000000000
% 000000020000000000000000000000000000000000000000000000000f80000004800003818000100000000000
% 0000000000000000000000000000000000000000000000000000000001f0000004800003018000100000000000
% 00000000000000000000000000000000000000000000000000000000007c00000780000301c000100000000000
% 00000000000000000000000000000000000000000000000000000000000f80c00780000700c000100000000000
% 000000000000000000000000000000000000000000000000000000000001f0e003000000000000100000000000
% 0000000000000000000000000000000000000000000000000000000000003cb003000000000000100000000000
% 0000000200000000000000000000000000000000000000000000000000000f9c1fc00000000000100000000000
% 000000020000000000000000000000000000000000000000000000000000018e38e00000000000100000000000
% 000000020000000000000000000000000000000000000000000000000000010775700000000000100000000000
% 0000000200000000000000000000000000000000000000000000000000000301e8900000000000100000000000
% 00000002000000000000000000000000000000000000000000000000000003fff5580000000000100000000000
% 0000000200000000000000000000000000000000000000000000000000000001f0180000000001fe0000000000
% 0000000200000000000000000000000000000000000000000000000000000000555e0000000000840000000000
% 0000000200000000000000000000000000000000000000000000000000000000481fe000000000cc0000000000
% 000000020000000000000000000000000000000000000000000000000000000075707f00000000cc0000000000
% 0000000000000000000000000000000000000000000000000000000000000000307007f8000000480000000000
% 00000000000000000000000000000000000000000000000000000000000000001fe0003f800300480000000000
% 000000000000000000000000000000000000000000000000000000000000000007800001fc03c0780000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000001fe2e0780000002000
% 00000000000000000000000000000000000000000000000000000000000000000000000000fe39fc0000007000
% 00000002000000000000000000000000000000000000000000000000000000000000000000060fde0000007800
% 0000000200000000000000000000000000000000000000000000000000000000000000000004068b000000f800
% 000000020000000000000000000000000000000000000000000000000000000000000000000fff55000000d800
% 00000002000000000000000000000000000000000000000000000000000000000000000000080401800000dc00
% 000000020000000000000000000000000000000000000000000000000000000000000000000005558000018c00
% 00000032c000000000000000000000000000000000000000000000000000000000000000000004898000018e00
% 0000001b800000000000000000000000000000000000000000000000000000000000000000000555807c018e00
% 0000000b000000000000000000000000000000000000000000000000000000000000000000000603007c03fe00
% 0000000f000000000000000000000000000000000000000000000000000000000000000000000357000003ff00
% 000000060000000000000000000000000000000000000000000000000000000000000000000001fe0000070300
% 000000060000000000000000000000000000000000000000000000000000000000000000000000780000060300
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000060380
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0180
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000070000000000000000000000000000000000000000000000000000e00000000000
% 0000000000000000000000000c0000000000000000000000000000000000000000000000000000380000000000
% 0000000000000000000000003800000000000000000000000000000000000000000000000000000e0000000000
% 0000000000000000000000003ff07fc1ff07fc1ff07f83fe0ff83fe0ff83fe0ff83fe0ff83fe0ffe0000000000
% 0000000000000000000000000c0000000000000000000000000000000000000000000000000000380000000000
% 000000000000000000000000070000000000000000000000000000000000000000000000000000e00000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000606600000000000c0000700001800000180000000000000000
% 0000000000000000000000000000000000000000606600000000000c0000700001800000180000000000000000
% 0000000000000000000000000000000000000000606600000000000c0000600001800000180000000000000000
% 0000000000000000000000000000000000000000c06600000000000c0000600001800000180000000000000000
% 000000000000000000000000000000000000001fc1f6f8dc7c1fc1fc7e01f1f06f861f03f80000000000000000
% 000000000000000000000000000000000000007fc1fffcfcfe3fe3fcff01fbfc7f8c3f87f80000000000000000
% 00000000000000000000000000000000000000f1c0670ce1c730671cc300671e719871ce380000000000000000
% 00000000000000000000000000000000000000c1c0660cc18303e60cf000660e61f060cc180000000000000000
% 00000000000000000000000000000000000000c180660cc1ff1fe60c7e00660661f87fcc180000000000000000
% 00000000000000000000000000000000000000c180660cc1ff3c660c1f00660661d87fcc180000000000000000
% 00000000000000000000000000000000000000c180660cc18130660d0300660e619c604c180000000000000000
% 00000000000000000000000000000000000000c780660cc1c330e71dc300631c618e70ce380000000000000000
% 00000000000000000000000000000000000000ff00760cc0fe3fe3fcff0063f861863f87f80000000000000000
% 000000000000000000000000000000000000007f007e0cc07e1f71ec7e0061f061871f83d80000000000000000
save
countdictstack
mark
newpath
/showpage {} def
%
% HISTORY
% 27-Feb-1997 Dale Moore
%  Catch and ignore 11x17 problems for LPS-20.
% 25-Feb-1996 Dale Moore
%  If pdfmark is in systemdict, check for currentdistillerparms also
%  before using currentdistillerparms.
%
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%%% modified by fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%%% modified by fixfm5
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown 0 paperwidth paperheight manfeed
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
false %%%% modified by fixfm5
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%%% modified by fixfm5
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%%% modified by fixfm5
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {{11x17tray} stopped pop {11x17} stopped pop} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Helvetica FMFONTDEFINE
2 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
204.36 651.48 205.54 648.75 194.83 647.36 203.18 654.21 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
231 663 204.59 651.58 2 L
2 Z
N
361 681.29 363.98 681.29 361 670.91 358.02 681.29 4 Y
0 Z
N
361 710 361 681.54 2 L
7 X
V
2 Z
0 X
N
361 457.28 363.98 457.28 361 446.9 358.02 457.28 4 Y
0 Z
N
361 664 361 457.53 2 L
2 Z
N
309 472.28 311.98 472.28 309 461.9 306.02 472.28 4 Y
0 Z
N
309 644 309 472.53 2 L
7 X
V
2 Z
0 X
N
309 660.29 311.98 660.29 309 649.91 306.02 660.29 4 Y
0 Z
N
309 689 309 660.54 2 L
7 X
V
2 Z
0 X
N
191 519.28 193.98 519.28 191 508.91 188.02 519.28 4 Y
0 Z
N
191 613 191 519.53 2 L
7 X
V
2 Z
0 X
N
191 626.29 193.98 626.29 191 615.91 188.02 626.29 4 Y
0 Z
N
191 646 191 626.54 2 L
7 X
V
2 Z
0 X
N
143 602.29 145.98 602.29 143 591.91 140.02 602.29 4 Y
0 Z
N
143 623 143 602.54 2 L
7 X
V
2 Z
0 X
N
142 544.29 144.98 544.29 142 533.91 139.02 544.29 4 Y
0 Z
N
142 587 142 544.54 2 L
7 X
V
2 Z
0 X
N
321.57 696.96 322.61 694.18 311.85 693.32 320.52 699.75 4 Y
0 Z
N
359 711 321.8 697.05 2 L
2 Z
N
347.95 448.29 348.56 451.21 358.11 446.18 347.35 445.38 4 Y
0 Z
N
306 457 347.71 448.34 2 L
4 X
V
2 Z
0 X
N
285.48 681.19 286.58 678.43 275.84 677.34 284.37 683.95 4 Y
0 Z
N
305 689 285.71 681.28 2 L
2 Z
N
90 450 5.4 5.4 360.5 668.5 G
90 450 5.4 5.4 360.5 668.5 A
215.41 492.9 216.44 495.69 225.15 489.31 214.38 490.11 4 Y
0 Z
N
188 503 215.18 492.99 2 L
4 X
V
2 Z
0 X
N
178.05 509.32 179.45 511.95 187.2 504.43 176.65 506.7 4 Y
0 Z
N
145 527 177.83 509.44 2 L
7 X
V
2 Z
0 X
N
156.27 633.67 157.5 630.96 146.82 629.38 155.04 636.38 4 Y
0 Z
N
190 649 156.5 633.77 2 L
7 X
V
2 Z
0 X
N
90 450 5.4 5.4 190.5 612.5 G
90 450 5.4 5.4 190.5 612.5 A
90 450 5.4 5.4 142.5 589.5 G
90 450 5.4 5.4 142.5 589.5 A
4 X
90 450 4.9 5.4 143 530.5 G
0 X
90 450 4.9 5.4 143 530.5 A
7 X
90 450 5.4 5.4 143.5 626.5 G
0 X
90 450 5.4 5.4 143.5 626.5 A
7 X
90 450 5.4 5.4 190.5 646.5 G
0 X
90 450 5.4 5.4 190.5 646.5 A
4 X
90 450 5.4 5.4 190.5 502.5 G
0 X
90 450 5.4 5.4 190.5 502.5 A
4 X
90 450 5.4 5.4 308.5 456.5 G
0 X
90 450 5.4 5.4 308.5 456.5 A
7 X
90 450 5.4 5.4 360.5 711.5 G
0 X
90 450 5.4 5.4 360.5 711.5 A
4 X
90 450 5.4 5.4 360.5 443.5 G
0 X
90 450 5.4 5.4 360.5 443.5 A
90 450 5.4 5.4 308.5 645.5 G
90 450 5.4 5.4 308.5 645.5 A
7 X
90 450 5.4 5.4 308.5 690.5 G
0 X
90 450 5.4 5.4 308.5 690.5 A
294.41 460.9 295.44 463.69 304.15 457.31 293.38 458.11 4 Y
0 Z
N
267 471 294.18 460.99 2 L
4 X
V
2 Z
0 X
N
0 36 Q
(.) 229 484 T
(.) 240 480 T
(.) 253 474 T
(.) 240 665 T
(.) 250 668 T
(.) 260 671 T
1 20 Q
(+A) 318 647 T
(+A) 373 671 T
(+A) 202 614 T
(+A) 150 589 T
J
149.19 417 144.5 417 2 L
0 Z
N
148.94 414.43 144.5 417 148.94 419.57 3 L
N
J
358.81 417 363.5 417 2 L
N
359.06 419.57 363.5 417 359.06 414.43 3 L
N
J
149.19 417 358.81 417 2 L
J
149.19 417 152.94 417 2 L
2 Z
N
[7.486 6.488] 7.486 I
152.94 417 355.05 417 2 L
N
J
355.05 417 358.81 417 2 L
N
2 F
(d) 196 392 T
1 F
( threads forked) 207.12 392 T
2 F
(subgraph G :) 146 732 T
J
76 710.81 76 715.5 2 L
0 Z
N
73.43 711.06 76 715.5 78.57 711.06 3 L
N
J
76 443.19 76 438.5 2 L
N
78.57 442.94 76 438.5 73.43 442.94 3 L
N
J
76 710.81 76 443.19 2 L
J
76 710.81 76 707.06 2 L
2 Z
N
[7.547 6.541] 7.547 I
76 707.06 76 446.95 2 L
N
J
76 446.95 76 443.19 2 L
N
1 F
(depth  2) 0 -270 61 530 TF
2 F
(d) 0 -270 61 602.28 TF
1 F
(+1) 0 -270 61 618.96 TF
J
(- A) 319 464 T
(- A) 374 435 T
(- A) 202 508 T
(- A) 152 529 T
0 0 0 1 0 0 0 K
FMENDPAGE
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 822 4580 a(\(b\))1776 b(\(c\))0 4890 y(Figure)28
b(10:)69 b Fu(\(a\))27 b(The)e(dag)i(for)f(which)h(the)f(e)o
(xistential)j(lo)n(wer)d(bound)i(holds.)38 b(\(b\))26
b(and)g(\(c\))h(present)h(the)e(details)i(of)e(the)0
5003 y(subgraphs)g(sho)n(wn)d(in)h(\(a\).)k(The)23 b(black)h(nodes)h
(denote)f(allocations)j(and)c(gre)o(y)h(nodes)g(denote)h
(deallocations;)i(the)d(nodes)0 5116 y(are)g(mark)o(ed)g(with)g(the)f
(amount)i(of)e(memory)h(\(de\)allocated.)32 b(Here,)24
b Fr(A)h Fi(=)g(min)n(\()p Fr(K)q(;)15 b(S)2763 5130
y FH(1)2804 5116 y Fi(\))p Fu(.)1900 5589 y FN(21)p eop
%%Page: 22 25
22 24 bop 0 100 a FN(Therefore,)1192 344 y FG(Pr)q([)p
FI(S)33 b(<)28 b FG(log)16 b FI(n)p FG(])84 b FF(\024)f
FG(exp)2158 223 y Fe(\024)2202 344 y FF(\000)2289 277
y FG(9)p 2289 321 49 4 v 2289 413 a(8)2365 344 y(log)16
b FI(n)2565 223 y Fe(\025)1833 602 y FG(=)83 b(exp)2158
456 y Fe(")2206 602 y FF(\000)2293 534 y FG(9)p 2293
578 V 2293 670 a(8)2375 602 y FF(\001)2434 534 y FG(ln)16
b FI(n)p 2434 578 157 4 v 2439 670 a FG(ln)g(2)2601 456
y Fe(#)1833 822 y FI(<)83 b(e)2037 781 y Fj(\000)p FH(1)p
Fq(:)p FH(62)p Fj(\001)p FH(ln)12 b Fq(n)1833 989 y FG(=)83
b FI(n)2050 948 y Fj(\000)p FH(0)p Fq(:)p FH(62)2257
989 y FF(\001)2322 922 y FG(1)p 2317 966 59 4 v 2317
1058 a FI(n)1833 1222 y(<)2002 1155 y FG(2)p 2002 1199
49 4 v 2002 1291 a(3)2083 1222 y FF(\001)2148 1155 y
FG(1)p 2143 1199 59 4 v 2143 1291 a FI(n)2311 1222 y
FG(for)49 b FI(p)28 b FF(\025)g FG(4)0 1464 y FN(Recall)k(that)f
FI(n)39 b FG(=)h FI(p=)p FG(2)p FN(.)50 b(\(The)31 b(case)h(of)f
FI(p)40 b(<)f FG(4)31 b FN(can)h(be)f(easily)g(handled)g(separately)-6
b(.\))49 b(Let)32 b FF(E)3351 1479 y Fq(i)3410 1464 y
FN(be)f(the)g(e)n(v)o(ent)0 1585 y(that)j(node)f FI(u)467
1600 y Fq(i)529 1585 y FN(is)h FM(not)f FN(e)o(x)o(ecuted)g(within)g
(the)h(\002rst)g FG(12)17 b(log)f FI(n)34 b FN(timesteps.)57
b(W)-8 b(e)34 b(ha)n(v)o(e)g(sho)n(wed)f(that)g FG(Pr)q([)p
FF(E)3706 1600 y Fq(n)3752 1585 y FG(])45 b FI(<)0 1705
y FG(\(2)p FI(=)p FG(3\))28 b FF(\001)h FG(\(1)p FI(=n)p
FG(\))p FN(.)57 b(Similarly)-6 b(,)35 b(we)f(can)h(sho)n(w)d(that)i
(for)g(each)h FI(i)44 b FG(=)h(1)p FI(;)17 b(:)g(:)g(:)e(;)i(n)29
b FF(\000)h FG(1)p FN(,)36 b FG(Pr[)p FF(E)3116 1720
y Fq(i)3144 1705 y FG(])44 b FI(<)h FG(\(2)p FI(=)p FG(3\))28
b FF(\001)g FG(\(1)p FI(=n)p FG(\))p FN(.)0 1826 y(Therefore,)i
FG(Pr[)578 1759 y Fe(S)648 1785 y Fq(n)648 1850 y FH(1)711
1826 y FF(E)764 1841 y Fq(i)792 1826 y FG(])k FI(<)g
FG(2)p FI(=)p FG(3)p FN(.)41 b(Thus,)28 b(for)h FI(i)34
b FG(=)g(1)p FI(;)17 b(:)g(:)g(:)f(;)h(n)p FN(,)29 b(all)f(the)g
FI(u)2465 1841 y Fq(i)2521 1826 y FN(nodes)g(get)g(e)o(x)o(ecuted)g
(within)f(the)h(\002rst)0 1946 y FG(12)17 b(log)f FI(n)25
b FN(timesteps)e(with)h(probability)f(greater)j(than)e
FG(1)p FI(=)p FG(3)p FN(.)146 2066 y(Each)i(subgraph)f
FI(G)g FN(has)g FI(d)h FN(nodes)e(at)i(dif)n(ferent)f(depths)f(that)h
(allocate)h(memory;)e(the)h(\002rst)h(of)f(these)h(nodes)0
2187 y(cannot)36 b(be)g(e)o(x)o(ecuted)f(before)i(timestep)d
FG(log)17 b FI(n)p FN(.)65 b(Let)35 b FI(t)i FN(be)f(the)g(\002rst)g
(timestep)f(at)h(which)f(all)h(the)g FI(u)3604 2202 y
Fq(i)3668 2187 y FN(nodes)0 2307 y(ha)n(v)o(e)29 b(been)h(e)o(x)o
(ecuted.)45 b(Then,)30 b(at)g(this)f(timestep,)g(there)h(are)h(at)e
(least)h FG(\()p FI(d)25 b FG(+)h(log)16 b FI(n)26 b
FF(\000)h FI(t)p FG(\))j FN(nodes)f(remaining)f(in)0
2427 y(each)33 b(subgraph)f FI(G)g FN(that)g(allocate)h
FI(A)g FN(bytes)f(each,)i(b)n(ut)e(ha)n(v)o(e)h(not)f(yet)g(been)h(e)o
(x)o(ecuted.)52 b(Similarly)-6 b(,)33 b(node)g FI(w)0
2548 y FN(in)c(subgraph)g FI(G)579 2563 y FH(0)647 2548
y FN(will)g(not)g(be)g(e)o(x)o(ecuted)g(before)g(timestep)f
FG(\()p FI(d)e FG(+)f(log)17 b FI(n)p FG(\))p FN(,)30
b(that)f(is,)h(another)f FG(\()p FI(d)c FG(+)h(log)16
b FI(n)26 b FF(\000)g FI(t)p FG(\))0 2668 y FN(timesteps)37
b(after)i(timestep)e FI(t)p FN(.)73 b(Therefore,)42 b(for)d(the)g(ne)o
(xt)e FG(\()p FI(d)32 b FG(+)g(log)17 b FI(n)33 b FF(\000)f
FI(t)p FG(\))39 b FN(timesteps)e(there)i(are)g(al)o(w)o(ays)0
2789 y FI(n)23 b FF(\000)g FG(1)28 b(=)g(\()p FI(p=)p
FG(2\))22 b FF(\000)h FG(1)i FN(non-empty)f(deques)h(\(out)g(of)g(a)h
(total)e(of)i FI(p)f FN(deques\))g(during)g(the)g(e)o(x)o(ecution.)30
b(Each)c(time)0 2909 y(a)g(thread)f(is)g(stolen)f(from)h(one)h(of)f
(these)g(deques,)g(a)h(black)f(node)g(\(from)h(Figure)f(10)g(\(c\)\))i
(is)d(e)o(x)o(ecuted,)h(and)g(the)0 3029 y(thread)i(then)f(suspends.)35
b(Because)27 b FI(p=)p FG(2)g FN(processors)f(become)g(idle)g(and)h
(attempt)e(a)i(steal)g(at)f(the)h(start)f(of)g(each)0
3150 y(timestep,)k(we)g(can)g(sho)n(w)f(that)h(in)f(the)h(e)o(xpected)f
(case,)j(at)e(least)g(a)g(constant)f(fraction)h(of)g(the)f
FI(p=)p FG(2)h FN(steals)f(are)0 3270 y(successful)i(in)g(e)n(v)o(ery)f
(timestep.)49 b(Each)32 b(successful)f(steal)g(results)f(in)h
FI(A)40 b FG(=)f(min)o(\()p FI(S)2986 3285 y FH(1)3025
3270 y FI(;)17 b(K)7 b FG(\))31 b FN(units)g(of)g(memory)0
3391 y(being)38 b(allocated.)70 b(Consider)38 b(the)f(case)i(when)f
FI(t)52 b FG(=)h(12)17 b(log)e FI(n)p FN(.)71 b(Then,)41
b(using)c(linearity)g(of)i(e)o(xpectations,)0 3511 y(o)o(v)o(er)34
b(the)h FI(d)29 b FF(\000)i FG(11)17 b(log)e FI(n)36
b FN(timesteps)d(after)j(timestep)e FI(t)p FN(,)k(the)c(e)o(xpected)h
(v)n(alue)g(of)g(the)g(total)f(space)h(allocated)0 3631
y(is)g FI(S)162 3646 y FH(1)231 3631 y FG(+)30 b(\012\()p
FI(A)h FF(\001)e FI(p)h FF(\001)g FG(\()p FI(d)g FF(\000)g
FG(11)17 b(log)f FI(n)p FG(\)\))47 b(=)h FI(S)1591 3646
y FH(1)1660 3631 y FG(+)30 b(\012\()p FI(A)g FF(\001)g
FI(p)g FF(\001)g FG(\()p FI(D)i FF(\000)f FG(log)17 b
FI(p)p FG(\)\))p FN(.)62 b(\()p FI(D)50 b FF(\025)e FG(24)17
b(log)f FI(p)35 b FN(ensures)h(that)0 3752 y FG(\()p
FI(d)22 b FF(\000)g FG(11)17 b(log)f FI(n)p FG(\))28
b FI(>)g FG(0)p FN(.\))146 3872 y(W)-8 b(e)24 b(sho)n(wed)f(that)g
(with)f(constant)h(probability)f(\()17 b FI(>)27 b FG(1)p
FI(=)p FG(3)p FN(\),)c(all)h(the)f FI(u)2522 3887 y Fq(i)2573
3872 y FN(nodes)g(will)g(be)g(e)o(x)o(ecuted)g(within)f(the)0
3992 y(\002rst)k FG(12)17 b(log)f FI(n)27 b FN(timesteps.)34
b(Therefore,)27 b(in)f(the)g(e)o(xpected)g(case,)h(the)g(space)f
(allocated)g(\(at)h(some)f(point)f(during)0 4113 y(the)g(e)o(x)o
(ecution)e(after)i(all)g FI(u)944 4128 y Fq(i)996 4113
y FN(nodes)g(ha)n(v)o(e)f(been)h(e)o(x)o(ecuted\))f(is)h
FG(\012\()p FI(S)2345 4128 y FH(1)2407 4113 y FG(+)d(min)n(\()p
FI(S)2765 4128 y FH(1)2805 4113 y FI(;)17 b(K)7 b FG(\))22
b FF(\001)f FG(\()p FI(D)k FF(\000)e FI(l)r(og)t(p)p
FG(\))e FF(\001)h FI(p)p FG(\))p FN(.)p 3867 4113 34
42 v 0 4425 a FK(Cor)n(ollary)i(4.6)48 b(\(Lo)o(wer)26
b(bound)g(using)f(w)o(ork)h(stealing\))0 4546 y FM(F)-10
b(or)29 b(any)g FI(S)402 4561 y FH(1)478 4546 y FI(>)36
b FG(0)p FM(,)31 b FI(p)36 b(>)g FG(0)p FM(,)31 b(and)e
FI(D)39 b FF(\025)e FG(24)17 b(log)e FI(p)p FM(,)31 b(ther)l(e)f(e)n
(xists)f(a)g(nested)g(par)o(allel)f(da)o(g)h(with)g(a)h(serial)e(space)
0 4666 y(r)l(equir)l(ement)21 b(of)h FI(S)661 4681 y
FH(1)722 4666 y FM(and)f(depth)g FI(D)s FM(,)h(suc)o(h)f(that)f(the)i
(e)n(xpected)g(space)g(r)l(equir)l(ed)f(to)g(e)n(xecute)i(it)e(using)g
(the)g(space-)0 4787 y(ef)n(\002cient)k(work)g(stealer)f(fr)l(om)f
([13])h(on)h FI(p)g FM(pr)l(ocessor)o(s)e(is)h FG(\012\()p
FI(S)2178 4802 y FH(1)2240 4787 y FF(\001)e FI(p)g FF(\001)g
FI(D)s FG(\))p FM(.)p 3867 4787 V 0 5099 a FN(The)31
b(corollary)g(follo)n(ws)f(from)h(Theorem)g(4.5)g(and)g(the)g(f)o(act)h
(that)f(algorithm)f FL(DFDeques)39 b FN(beha)n(v)o(es)30
b(lik)o(e)h(the)0 5220 y(space-ef)n(\002cient)k(w)o(ork-stealing)f
(scheduler)g(for)h FI(K)53 b FG(=)46 b FF(1)p FN(.)60
b(Blumofe)34 b(and)h(Leiserson)f([13])g(presented)h(an)0
5340 y(upper)c(bound)g(on)g(space)g(of)h FI(p)27 b FF(\001)f
FI(S)1227 5355 y FH(1)1298 5340 y FN(using)k(randomized)h(w)o(ork)g
(stealing.)49 b(Their)32 b(result)e(is)h(not)g(inconsistent)1900
5589 y(22)p eop
%%Page: 23 26
23 25 bop 0 100 a FN(with)39 b(the)g(abo)o(v)o(e)g(corollary)-6
b(,)42 b(because)e(their)f(analysis)g(allo)n(ws)f(only)h(\223stack-lik)
o(e\224)g(memory)g(allocation)3806 63 y FC(11)3875 100
y FN(,)0 220 y(which)25 b(is)h(more)f(restricted)h(than)f(our)g(model.)
33 b(F)o(or)26 b(such)f(restricted)g(dags,)h(their)f(space)h(bound)f
(of)h FI(p)d FF(\001)f FI(S)3674 235 y FH(1)3740 220
y FN(also)0 340 y(applies)k(directly)g(to)h FL(DFDeques)8
b FN(\()p FF(1)p FN(\).)36 b(Our)27 b(lo)n(wer)g(bound)f(for)h
FI(K)38 b FG(=)32 b FF(1)26 b FN(is)h(also)f(consistent)f(with)h(the)h
(upper)0 461 y(bound)34 b(of)h FI(p)30 b FF(\001)f FI(S)41
b FN(by)35 b(Simpson)e(and)i(Burton)g([51],)j(where)d
FI(S)41 b FN(is)34 b(the)h(maximum)e(space)j(requirement)e(o)o(v)o(er)0
581 y(all)c(possible)f(depth-\002rst)i(schedules.)47
b(In)30 b(this)g(e)o(xample,)h FI(S)44 b FG(=)38 b FI(S)2347
596 y FH(1)2413 581 y FF(\001)26 b FI(D)s FN(,)31 b(since)g(the)f
(right-to-left)f(depth-\002rst)0 702 y(schedule)24 b(requires)h
FI(S)779 717 y FH(1)841 702 y FF(\001)d FI(D)27 b FN(space.)0
997 y Fs(4.3)119 b(T)n(ime)29 b(bound)0 1184 y FN(W)-8
b(e)37 b(no)n(w)f(pro)o(v)o(e)f(the)i(time)f(bound)g(required)g(for)h
(a)g(parallel)g(computation)e(using)g(algorithm)g FL(DFDeques)8
b FN(.)0 1305 y(This)36 b(time)g(bound)f(does)i(not)f(include)g(the)g
(scheduling)f(costs)h(of)h(maintaining)e(the)h(relati)n(v)o(e)g(order)h
(of)f(the)0 1425 y(deques)22 b(\(i.e.,)g(inserting)f(and)h(deleting)f
(deques)g(in)h(the)g(global)f(list)g(of)h(deques)f FF(R)p
FN(\),)i(or)f(\002nding)g(the)g FI(m)3545 1389 y Fq(th)3637
1425 y FN(deque.)0 1545 y(Else)n(where)i([40],)g(we)h(describe)f(ho)n
(w)g(the)g(scheduler)g(can)h(be)f(parallelized,)h(and)f(then)g(pro)o(v)
o(e)f(the)h(time)g(bound)0 1666 y(including)35 b(these)i(scheduling)f
(costs.)66 b(W)-8 b(e)38 b(\002rst)f(assume)f(that)g(e)n(v)o(ery)h
(action)f(allocates)h(at)g(most)f FI(K)44 b FN(space)0
1786 y(\(where)30 b FI(K)37 b FN(is)29 b(the)g(memory)g(threshold)f
(used)h(by)g(the)h FL(DFDeques)37 b FN(algorithm\))28
b(and)i(pro)o(v)o(e)e(the)h(time)g(bound.)0 1907 y(W)-8
b(e)25 b(then)g(relax)g(this)f(assumption)e(and)j(pro)o(vide)f(the)h
(modi\002ed)f(time)g(bound)g(at)h(the)f(end)h(of)g(this)f(subsection.)0
2134 y FK(Lemma)h(4.7)49 b FM(Consider)31 b(a)g(par)o(allel)f
(computation)g(with)h(work)i FI(W)45 b FM(and)31 b(depth)g
FI(D)s FM(,)i(in)f(whic)o(h)f(e)o(very)h(action)0 2254
y(allocates)c(at)h(most)g FI(K)37 b FM(space)o(.)44 b(The)30
b(e)n(xpected)h(time)e(to)g(e)n(xecute)h(this)f(computation)e(on)j
FI(p)f FM(pr)l(ocessor)o(s)f(using)0 2374 y(the)23 b
FL(DFDeques)p FM(\()p FI(K)7 b FM(\))24 b(sc)o(heduling)d(algorithm)h
(is)g FI(O)s FG(\()p FI(W)s(=p)16 b FG(+)g FI(D)s FG(\))p
FM(.)29 b(Further)-11 b(,)22 b(for)h(any)g FI(\017)28
b(>)f FG(0)p FM(,)c(the)g(time)g(r)l(equir)l(ed)0 2495
y(to)h(e)n(xecute)i(the)f(computation)e(is)h FI(O)s FG(\()p
FI(W)s(=p)d FG(+)h FI(D)j FG(+)d(ln)o(\(1)p FI(=\017)p
FG(\)\))j FM(with)f(pr)l(obability)f(at)h(least)g FG(1)e
FF(\000)h FI(\017)p FM(.)0 2698 y(Pr)l(oof)p FN(:)59
b(Consider)25 b(an)o(y)e(timestep)g FI(i)i FN(of)f(the)h
FI(p)p FN(-schedule;)f(let)g FI(n)2201 2713 y Fq(i)2253
2698 y FN(be)h(the)f(number)g(of)g(deques)g(in)g FF(R)h
FN(at)f(timestep)0 2819 y FI(i)p FN(.)36 b(W)-8 b(e)27
b(\002rst)g(classify)e(each)i(timestep)f FI(i)h FN(into)e(one)i(of)f
(tw)o(o)g(types)g(\(A)h(and)f(B\),)h(depending)f(on)g(the)g(v)n(alue)g
(of)h FI(n)3847 2834 y Fq(i)3875 2819 y FN(.)0 2939 y(W)-8
b(e)25 b(then)g(bound)f(the)g(total)g(number)h(of)f(timesteps)g
FI(T)1870 2954 y Fq(A)1952 2939 y FN(and)h FI(T)2178
2954 y Fq(B)2263 2939 y FN(of)g(types)f(A)h(and)g(B,)g(respecti)n(v)o
(ely)-6 b(.)0 3159 y FK(T)f(ype)26 b(A:)h FI(n)424 3174
y Fq(i)482 3159 y FF(\025)j FI(p)p FK(.)k FN(At)25 b(the)h(start)f(of)h
(timestep)f FI(i)p FN(,)h(let)g(there)g(be)g FI(r)32
b FF(\024)e FI(p)c FN(steal)g(attempts)e(in)i(this)f(timestep.)32
b(Then)0 3279 y(the)24 b(remaining)g FI(p)e FF(\000)g
FI(r)27 b FN(processors)d(are)i(b)n(usy)e(e)o(x)o(ecuting)f(nodes,)h
(that)g(is,)g(at)h(least)f FI(p)e FF(\000)g FI(r)27 b
FN(nodes)e(are)g(e)o(x)o(ecuted)0 3400 y(in)h(timestep)f
FI(i)p FN(.)36 b(Further)l(,)27 b(at)f(most)f FI(p)e
FF(\000)h FI(r)29 b FN(of)e(the)f(leftmost)f FI(p)h FN(deques)g(may)g
(be)h(empty;)e(the)i(rest)f(must)f(ha)n(v)o(e)h(at)0
3520 y(least)f(one)f(thread)h(in)g(them.)146 3640 y(Let)34
b FI(X)394 3655 y Fq(j)465 3640 y FN(be)g(the)g(random)f(v)n(ariable)g
(with)h(v)n(alue)f(1)h(if)g(the)g FI(j)2279 3604 y Fq(th)2383
3640 y FN(non-empty)f(deque)g(in)h FF(R)h FN(\(from)e(the)h(left)0
3761 y(end\))28 b(gets)f(e)o(xactly)h(one)f(steal)h(request,)g(and)g(0)
g(otherwise.)39 b(Then,)28 b FG(E)17 b([)p FI(X)2582
3776 y Fq(j)2619 3761 y FG(])33 b(=)g(Pr)17 b([)p FI(X)3017
3776 y Fq(j)3087 3761 y FG(=)33 b(1])h(=)f(\()p FI(r)s(=p)p
FG(\))23 b FF(\001)h FG(\(1)h FF(\000)0 3881 y FG(1)p
FI(=p)p FG(\))185 3845 y Fq(r)r Fj(\000)p FH(1)313 3881
y FN(.)30 b(Let)22 b FI(X)30 b FN(be)22 b(the)h(random)e(v)n(ariable)h
(representing)g(the)g(total)g(number)g(of)g(non-empty)f(deques)h(that)g
(get)0 4002 y(e)o(xactly)28 b(one)h(steal)f(request)987
3965 y FC(12)1057 4002 y FN(.)43 b(Because)29 b(there)g(are)h(at)e
(least)h FI(r)i FN(non-empty)d(deques,)h(the)g(e)o(xpected)f(v)n(alue)g
(of)0 4122 y FI(X)33 b FN(\(assuming)23 b(that)i FI(p)i
FF(\025)h FG(2)p FN(\))d(is)g(gi)n(v)o(en)e(by)1364 4396
y FG(E)17 b([)p FI(X)8 b FG(])83 b FF(\025)1878 4288
y Fq(r)1835 4313 y Fe(X)1833 4496 y Fq(j)t FH(=1)1972
4396 y FG(E)17 b([)p FI(X)2163 4411 y Fq(j)2200 4396
y FG(])1674 4682 y(=)83 b FI(r)25 b FF(\001)1963 4614
y FI(r)p 1962 4658 49 4 v 1962 4750 a(p)2043 4682 y FF(\001)d
FG(\(1)g FF(\000)2311 4614 y FG(1)p 2311 4658 V 2311
4750 a FI(p)2370 4682 y FG(\))2408 4640 y Fq(r)r Fj(\000)p
FH(1)p 0 4837 1560 4 v 87 4899 a FB(11)149 4929 y Fz(Their)j(model)f
(does)h(not)f(allo)n(w)h(allocation)f(of)h(space)g(on)f(a)i(global)e
(heap.)38 b(An)25 b(instruction)f(in)h(a)g(thread)f(may)h(allocate)f
(stack)0 5028 y(space)19 b(only)f(if)h(the)f(thread)g(cannot)g
(possibly)g(ha)n(v)o(e)g(a)h(li)n(ving)f(child)h(when)f(the)h
(instruction)e(is)j(e)o(x)o(ecuted.)i(The)d(stack)g(space)f(allocated)0
5128 y(by)i(the)g(thread)f(must)h(be)h(freed)e(when)g(the)i(thread)e
(terminates.)87 5198 y FB(12)149 5228 y Fz(F)o(or)g(simplicity)-5
b(,)18 b(we)h(only)f(count)g(the)h(deques)f(that)h(get)g(e)o(xactly)f
(one)g(request,)g(instead)h(of)f(an)o(y)g(non-zero)f(number)g(of)h
(requests.)1900 5589 y FN(23)p eop
%%Page: 24 27
24 26 bop 1673 146 a FF(\025)1843 79 y FI(r)1890 43 y
FH(2)p 1843 123 87 4 v 1862 215 a FI(p)1961 146 y FF(\001)22
b FG(\(1)g FF(\000)2230 79 y FG(1)p 2230 123 49 4 v 2230
215 a FI(p)2289 146 y FG(\))2327 105 y Fq(p)1673 414
y FF(\025)1843 346 y FI(r)1890 310 y FH(2)p 1843 390
87 4 v 1862 482 a FI(p)1961 414 y FF(\001)g FG(\(1)g
FF(\000)2230 346 y FG(1)p 2230 390 49 4 v 2230 482 a
FI(p)2289 414 y FG(\))g FF(\001)2408 346 y FG(1)p 2408
390 V 2410 482 a FI(e)1673 681 y FF(\025)1944 614 y FI(r)1991
577 y FH(2)p 1843 658 287 4 v 1843 749 a FG(2)g FF(\001)g
FI(p)g FF(\001)g FI(e)0 933 y FN(Recall)h(that)f FI(p)14
b FF(\000)g FI(r)25 b FN(nodes)d(are)i(e)o(x)o(ecuted)d(by)h(the)h(b)n
(usy)f(processors.)29 b(Therefore,)24 b(if)e FI(Y)44
b FN(is)22 b(the)h(random)f(v)n(ariable)0 1053 y(denoting)i(the)g
(total)g(number)h(of)f(nodes)h(e)o(x)o(ecuted)f(during)g(this)g
(timestep,)f(then)1791 1317 y FG(E)17 b([)p FI(Y)22 b
FG(])83 b FF(\025)g FG(\()p FI(p)22 b FF(\000)h FI(r)s
FG(\))f(+)2702 1250 y FI(r)2749 1214 y FH(2)p 2674 1294
143 4 v 2674 1386 a FG(2)p FI(ep)2090 1549 y FF(\025)2283
1481 y FI(p)p 2260 1525 94 4 v 2260 1617 a FG(2)p FI(e)1074
1760 y FG(Therefore)p FI(;)111 b FG(E)17 b([)p FI(p)23
b FF(\000)f FI(Y)g FG(])83 b FF(\024)g FI(p)22 b FF(\000)2453
1693 y FI(p)p 2431 1737 V 2431 1829 a FG(2)p FI(e)2090
1994 y FG(=)84 b FI(p)p FG(\(1)22 b FF(\000)2540 1926
y FG(1)p 2518 1970 V 2518 2062 a(2)p FI(e)2622 1994 y
FG(\))0 2233 y FN(The)30 b(quantity)e FG(\()p FI(p)d
FF(\000)i FI(Y)21 b FG(\))30 b FN(must)e(be)i(non-ne)o(gati)n(v)o(e;)f
(therefore,)i(using)e(the)g(Mark)o(o)o(v')-5 b(s)28 b(inequality)g
([39,)j(Theo-)0 2353 y(rem)25 b(3.2],)f(we)h(get)1067
2613 y FG(Pr)17 b([\()p FI(p)22 b FF(\000)h FI(Y)e FG(\))28
b FI(>)f(p)p FG(\(1)22 b FF(\000)1961 2546 y FG(1)p 1939
2590 V 1939 2681 a(4)p FI(e)2042 2613 y FG(\)])84 b FI(<)2361
2546 y FG(E)17 b([\()p FI(p)22 b FF(\000)h FI(Y)e FG(\)])p
2361 2590 463 4 v 2380 2699 a FI(p)2446 2603 y Fe(\020)2496
2699 y FG(1)g FF(\000)2692 2660 y FH(1)p 2676 2676 69
4 v 2676 2734 a(4)p Fq(e)2754 2603 y Fe(\021)2191 2968
y FF(\024)2361 2786 y Fe(\020)2411 2882 y FG(1)g FF(\000)2607
2843 y FH(1)p 2591 2859 V 2591 2916 a(2)p Fq(e)2669 2786
y Fe(\021)p 2361 2945 358 4 v 2361 2959 a(\020)2411 3055
y FG(1)g FF(\000)2607 3016 y FH(1)p 2591 3032 69 4 v
2591 3089 a(4)p Fq(e)2669 2959 y Fe(\021)1117 3269 y
FG(Therefore)p FI(;)57 b FG(Pr)17 b([)p FI(Y)49 b(<)1999
3202 y(p)p 1976 3246 94 4 v 1976 3338 a FG(4)p FI(e)2080
3269 y FG(])84 b FI(<)2385 3202 y FG(9)p 2361 3246 98
4 v 2361 3338 a(10)1256 3503 y(that)24 b(is)p FI(;)55
b FG(Pr)17 b([)p FI(Y)49 b FF(\025)1999 3435 y FI(p)p
1976 3479 94 4 v 1976 3571 a FG(4)p FI(e)2080 3503 y
FG(])84 b FI(>)2385 3435 y FG(1)p 2361 3479 98 4 v 2361
3571 a(10)146 3742 y FN(W)-8 b(e)28 b(will)e(call)h(each)h(timestep)d
(of)j(type)e(A)h FE(successful)i FN(if)e(at)h(least)e
FI(p=)p FG(4)p FI(e)h FN(nodes)g(get)g(e)o(x)o(ecuted)f(during)g(the)0
3862 y(timestep.)33 b(Then)26 b(the)f(probability)g(of)h(the)f
(timestep)g(being)g(successful)h(is)f(at)h(least)g FG(1)p
FI(=)p FG(10)p FN(.)33 b(Because)27 b(there)f(are)0 3983
y FI(W)40 b FN(nodes)25 b(in)h(the)g(entire)g(computation,)e(there)i
(can)h(be)f(at)g(most)f FG(4)p FI(e)e FF(\001)g FI(W)s(=p)i
FN(successful)h(timesteps)e(of)i(type)g(A.)0 4103 y(Therefore,)g(the)e
(e)o(xpected)h(v)n(alue)f(for)h FI(T)1403 4118 y Fq(A)1485
4103 y FN(is)f(at)h(most)f FG(40)p FI(e)e FF(\001)g FI(W)s(=p)p
FN(.)146 4223 y(The)39 b(analysis)e(of)i(the)f(high)f(probability)g
(bound)h(is)g(similar)f(to)h(that)g(for)g(Lemma)g(4.2.)71
b(Suppose)38 b(the)0 4344 y(e)o(x)o(ecution)22 b(tak)o(es)i(more)f
(than)h FG(80)p FI(eW)s(=p)17 b FG(+)h(40)f(ln)o(\(1)p
FI(=\017)p FG(\))23 b FN(timesteps)g(of)g(type)h(A.)g(Then)f(the)h(e)o
(xpected)f(number)g FI(\026)0 4464 y FN(of)d(successful)f(timesteps)g
(of)h(type)f(A)h(is)g(at)g(least)f FG(8)p FI(eW)s(=p)t
FG(+)t(4)e(ln)n(\(1)p FI(=\017)p FG(\))p FN(.)29 b(If)20
b FI(Z)27 b FN(is)20 b(the)g(random)f(v)n(ariable)g(denoting)0
4585 y(the)31 b(total)g(number)f(of)i(successful)e(timesteps,)i(then)f
(using)f(the)h(Chernof)n(f)g(bound)g([39,)i(Theorem)e(4.2],)h(and)0
4705 y(setting)24 b FI(a)j FG(=)h(40)p FI(eW)s(=p)21
b FG(+)h(40)17 b(ln)o(\(1)p FI(=\017)p FG(\))p FN(,)25
b(we)g(get)1650 4669 y FC(13)1105 4985 y FG(Pr)17 b([)p
FI(Z)35 b(<)27 b(\026)22 b FF(\000)h FI(a=)p FG(10])83
b FI(<)f FG(exp)2271 4839 y Fe(")2329 4917 y FF(\000)17
b FG(\()p FI(a=)p FG(10\))2697 4869 y FH(2)p 2329 4961
407 4 v 2479 5053 a FG(2)p FI(\026)2746 4839 y Fe(#)p
0 5149 1560 4 v 87 5210 a FB(13)149 5240 y Fz(As)32 b(with)f(the)g
(proof)f(of)h(Lemma)f(4.2,)j(we)e(can)g(use)g(the)g(Chernof)n(f)e
(bound)g(here)i(because)f(each)h(timestep)g(succeeds)f(with)0
5340 y(probability)18 b(at)j(least)g Fw(1)p Fy(=)p Fw(10)p
Fz(,)d(e)n(v)o(en)h(if)i(the)f(e)o(xact)g(probabilities)f(of)h
(successes)h(for)e(timesteps)h(are)h(not)e(independent.)1900
5589 y FN(24)p eop
%%Page: 25 28
25 27 bop 0 100 a FN(Therefore,)936 287 y FG(Pr)17 b([)p
FI(Z)34 b(<)28 b FG(4)p FI(eW)s(=p)p FG(])83 b FI(<)h(e)1891
245 y Fj(\000)p Fq(a)1983 222 y Fd(2)2018 245 y Fq(=)p
FH(200)p Fq(\026)1686 494 y FG(=)g(exp)2012 348 y Fe(")2060
494 y FF(\000)2528 427 y FI(a)2579 391 y FH(2)p 2147
471 853 4 v 2147 562 a FG(200\()p FI(a=)p FG(5)22 b FF(\000)g
FG(4)17 b(ln)o(\(1)p FI(=\017)p FG(\)\))3010 348 y Fe(#)1686
776 y FF(\024)83 b FG(exp)2012 630 y Fe(")2060 776 y
FF(\000)2286 709 y FI(a)2337 673 y FH(2)p 2147 753 368
4 v 2147 845 a FG(200)22 b FF(\001)g FI(a=)p FG(5)2525
630 y Fe(#)1686 1000 y FG(=)84 b FI(e)1891 959 y Fj(\000)p
Fq(a=)p FH(40)1686 1145 y FG(=)g FI(e)1891 1104 y Fj(\000)p
Fq(eW)r(=p)p Fj(\000)p FH(ln)o(\(1)p Fq(=\017)p FH(\))1686
1291 y FF(\024)f FI(e)1891 1250 y Fj(\000)12 b FH(ln\(1)p
Fq(=\017)p FH(\))1686 1436 y FG(=)84 b FI(\017)0 1768
y FN(W)-8 b(e)41 b(ha)n(v)o(e)f(sho)n(wn)f(that)h(the)h(e)o(x)o
(ecution)d(will)i(not)g(complete)g(e)n(v)o(en)f(after)i
FG(80)p FI(eW)s(=p)34 b FG(+)f(40)17 b(ln)o(\(1)p FI(=\017)p
FG(\))40 b FN(type)g(A)0 1889 y(timesteps)19 b(with)h(probability)g(at)
h(most)e FI(\017)p FN(.)30 b(Thus,)21 b(for)g(an)o(y)g
FI(\017)28 b(>)f FG(0)p FN(,)22 b FI(T)2325 1904 y Fq(A)2409
1889 y FG(=)28 b FI(O)s FG(\()p FI(W)s(=p)8 b FG(+)g(ln)m(\(1)p
FI(=\017)p FG(\)\))21 b FN(with)f(probability)0 2009
y(at)25 b(least)f FG(1)e FF(\000)h FI(\017)p FN(.)0 2210
y FK(T)-7 b(ype)34 b(B:)h FI(n)434 2225 y Fq(i)506 2210
y FI(<)44 b(p)p FK(.)58 b FN(W)-8 b(e)34 b(no)n(w)f(consider)g
(timesteps)f(in)h(which)h(the)f(number)g(of)h(deques)f(in)h
FF(R)g FN(is)f(less)g(than)0 2330 y FI(p)p FN(.)52 b(As)32
b(with)f(the)h(proof)g(of)g(Lemma)g(4.2,)h(we)f(split)f(type)h(B)g
(timesteps)f(into)g(phases)g(such)h(that)g(each)g(phase)0
2451 y(has)e(between)g FI(p)h FN(and)f FG(2)p FI(p)c
FF(\000)g FG(1)31 b FN(steal)e(attempts.)46 b(W)-8 b(e)31
b(can)f(then)g(use)g(a)h(potential)e(function)g(ar)n(gument)h(similar)0
2571 y(to)d(the)h(dedicated)g(machine)f(case)h(by)g(Arora)g(et)g(al.)g
([3].)39 b(Composing)27 b(phases)g(from)h(only)f(type)g(B)i(timesteps)0
2692 y(\(ignoring)23 b(type)h(A)h(timesteps\))e(retains)h(the)g(v)n
(alidity)f(of)h(their)h(analysis.)k(W)-8 b(e)25 b(brie\003y)g(outline)e
(the)h(proof)h(here.)0 2812 y(Nodes)30 b(are)g(assigned)f(e)o
(xponentially)f(decreasing)i(potentials)f(starting)g(from)h(the)f(root)
h(do)n(wnw)o(ards.)45 b(Thus,)0 2932 y(a)31 b(node)f(at)g(a)h(depth)f
(of)g FI(d)g FN(is)g(assigned)g(a)h(potential)e(of)h
FG(3)2009 2896 y FH(2\()p Fq(D)r Fj(\000)p Fq(d)p FH(\))2254
2932 y FN(,)i(and)f(in)f(the)g(timestep)f(in)h(which)g(it)g(is)g(about)
0 3053 y(to)f(be)g(e)o(x)o(ecuted)f(on)h(a)h(processor)l(,)g(a)f
(weight)f(of)i FG(3)1781 3017 y FH(2\()p Fq(D)r Fj(\000)p
Fq(d)p FH(\))p Fj(\000)p FH(1)2116 3053 y FN(.)44 b(The)o(y)28
b(sho)n(w)g(that)h(in)g(an)o(y)f(phase)h(during)g(which)0
3173 y(between)e FI(p)g FN(and)g FG(2)p FI(p)c FF(\000)h
FG(1)j FN(steal)g(attempts)e(occur)l(,)j(the)f(total)f(potential)g(of)h
(the)g(nodes)f(in)h(all)f(the)h(deques)g(drops)0 3294
y(by)37 b(a)h(constant)e(f)o(actor)i(with)f(at)g(least)g(a)h(constant)e
(probability)-6 b(.)66 b(Since)38 b(the)f(potential)f(at)i(the)f(start)
g(of)g(the)0 3414 y(e)o(x)o(ecution)23 b(is)h FG(3)549
3378 y FH(2)p Fq(D)r Fj(\000)p FH(1)739 3414 y FN(,)g(the)h(e)o
(xpected)f(v)n(alue)g(of)h(the)f(total)g(number)g(of)h(phases)f(is)h
FI(O)s FG(\()p FI(D)s FG(\))p FN(.)k(The)c(dif)n(ference)g(with)0
3534 y(our)i(algorithm)f(is)h(that)g(a)h(processor)g(may)f(e)o(x)o
(ecute)g(a)g(node,)h(and)g(then)f(put)g(up)g(to)g(2)g(\(instead)g(of)h
(1\))g(children)0 3655 y(of)k(the)f(node)h(on)g(the)f(deque)h(if)g(it)f
(runs)g(out)h(of)f(memory;)j(ho)n(we)n(v)o(er)l(,)f(this)d(dif)n
(ference)j(does)e(not)g(violate)g(the)0 3775 y(basis)d(of)g(their)h(ar)
n(guments.)41 b(Since)29 b(each)g(phase)f(has)h FG(\002\()p
FI(p)p FG(\))f FN(steal)g(attempts,)g(the)h(e)o(xpected)f(number)g(of)g
(steal)0 3895 y(attempts)k(during)g(type)g(B)i(timesteps)d(is)h
FI(O)s FG(\()p FI(pD)s FG(\))p FN(.)54 b(Further)l(,)35
b(for)e(an)o(y)g FI(\017)43 b(>)f FG(0)p FN(,)35 b(we)e(can)g(sho)n(w)f
(that)g(the)h(total)0 4016 y(number)e(of)h(steal)f(attempts)g(during)g
(timesteps)f(of)i(type)f(B)i(is)e FI(O)s FG(\()p FI(p)26
b FF(\001)h FG(\()p FI(D)j FG(+)d(ln\(1)p FI(=\017)p
FG(\)\)\))k FN(with)g(probability)f(at)0 4136 y(least)25
b FG(1)c FF(\000)i FI(\017)p FN(.)146 4257 y(Recall)30
b(that)f(in)f(e)n(v)o(ery)h(timestep,)f(each)i(processor)f(either)g(e)o
(x)o(ecutes)f(a)h(steal)g(attempt)f(that)h(f)o(ails,)g(or)h(e)o(x)o(e-)
0 4377 y(cutes)19 b(a)h(node)f(from)g(the)g(dag.)28 b(Therefore,)22
b(if)d FI(N)1649 4392 y FH(steal)1814 4377 y FN(is)g(the)g(total)f(the)
h(number)g(of)g(steal)g(attempts)f(during)h(type)g(B)0
4497 y(timesteps,)h(then)h FI(T)673 4512 y Fq(B)755 4497
y FN(is)f(at)h(most)f FG(\()p FI(W)i FG(+)8 b FI(N)1464
4512 y FH(steal)1609 4497 y FG(\))p FI(=p)p FN(.)30 b(Therefore,)22
b(the)f(e)o(xpected)g(v)n(alue)f(for)h FI(T)3184 4512
y Fq(B)3266 4497 y FN(is)g FI(O)s FG(\()p FI(W)s(=p)8
b FG(+)g FI(D)s FG(\))p FN(,)0 4618 y(and)32 b(for)g(an)o(y)g
FI(\017)41 b(>)g FG(0)p FN(,)34 b(the)e(number)g(of)g(timesteps)e(is)i
FI(O)s FG(\()p FI(W)s(=p)26 b FG(+)i FI(D)i FG(+)d(ln\(1)p
FI(=\017)p FG(\)\))32 b FN(with)f(probability)f(at)i(least)0
4738 y FG(1)22 b FF(\000)h FI(\017)p FN(.)146 4858 y(The)36
b(total)f(number)g(of)h(timesteps)e(in)h(the)h(entire)g(e)o(x)o
(ecution)e(is)h FI(T)2534 4873 y Fq(A)2621 4858 y FG(+)30
b FI(T)2784 4873 y Fq(B)2845 4858 y FN(.)64 b(Therefore,)39
b(the)c(e)o(xpected)0 4979 y(number)e(of)g(timesteps)e(in)i(the)g(e)o
(x)o(ecution)e(is)i FI(O)s FG(\()p FI(W)s(=p)27 b FG(+)h
FI(D)s FG(\))p FN(.)56 b(Further)l(,)35 b(combining)c(the)i(high)g
(probability)0 5099 y(bounds)24 b(for)h(timesteps)e(of)i(type)f(A)h
(and)g(B,)g(\(and)g(using)f(the)g(f)o(act)i(that)e FG(Pr)17
b([)p FI(X)30 b FF([)22 b FI(Y)g FG(])27 b FF(\024)i
FG(Pr)16 b([)p FI(X)8 b FG(])23 b(+)e(Pr)c([)p FI(Y)22
b FG(])p FN(\),)j(we)0 5220 y(can)k(sho)n(w)f(that)h(for)g(an)o(y)f
FI(\017)36 b(>)f FG(0)p FN(,)30 b(the)f(total)f(number)h(of)g
(timesteps)e(in)i(the)f(parallel)h(e)o(x)o(ecution)f(is)g
FI(O)s FG(\()p FI(W)s(=p)c FG(+)0 5340 y FI(D)h FG(+)d(ln)o(\(1)p
FI(=\017)p FG(\)\))j FN(with)f(probability)f(at)i(least)f
FG(1)e FF(\000)h FI(\017)p FN(.)p 3867 5340 34 42 v 1900
5589 a(25)p eop
%%Page: 26 29
26 28 bop 0 100 a FN(T)-8 b(o)32 b(handle)f(each)i(lar)n(ge)f
(allocation)f(of)h FI(m)g FN(units)f(\(where)h FI(m)42
b(>)e(K)7 b FN(\),)34 b(recall)e(that)g(we)g(add)g FF(b)p
FI(m=K)7 b FF(c)33 b FN(dummy)0 220 y(threads;)21 b(the)f(dummy)f
(threads)h(are)h(fork)o(ed)g(in)f(a)g(binary)g(tree)h(of)f(depth)g
FG(\002\(log\()p FI(m=K)7 b FG(\)\))p FN(.)29 b(Because)21
b(we)g(assume)0 340 y(a)32 b(depth)e(of)i FG(\002\(log)16
b FI(m)p FG(\))32 b FN(for)f(e)n(v)o(ery)g(allocation)f(of)i
FI(m)f FN(bytes,)h(this)f(transformation)f(of)h(the)g(dag)g(increases)h
(its)0 461 y(depth)c(by)g(at)g(most)g(a)g(constant)g(f)o(actor)-5
b(.)41 b(If)29 b FI(S)1581 476 y Fq(a)1651 461 y FN(is)f(the)h(total)e
(space)i(allocated)f(in)g(the)g(program)g(\(not)g(counting)0
581 y(the)e(deallocations\),)h(the)f(number)g(of)h(nodes)f(in)g(the)h
(transformed)f(dag)h(is)f(at)g(most)g FI(W)37 b FG(+)23
b FI(S)3240 596 y Fq(a)3282 581 y FI(=K)7 b FN(.)36 b(Therefore,)0
702 y(using)24 b(Lemma)g(4.7,)g(the)h(modi\002ed)f(time)g(bound)g(is)h
(stated)f(as)h(follo)n(ws.)0 953 y FK(Theor)n(em)h(4.8)49
b FM(\()p FK(Upper)26 b(bound)g(on)f(time)g(r)n(equir)n(ement\))0
1074 y FM(The)40 b(e)n(xpected)h(time)e(to)h(e)n(xecute)g(a)g(par)o
(allel)e(computation)g(with)h FI(W)54 b FM(work,)44 b
FI(D)e FM(depth,)h(and)d(total)e(space)0 1194 y(allocation)23
b FI(S)489 1209 y Fq(a)555 1194 y FM(on)i FI(p)g FM(pr)l(ocessor)o(s)e
(using)g(algorithm)g FL(DFDeques)p FM(\()p FI(K)7 b FM(\))26
b(is)e FI(O)s FG(\()p FI(W)s(=p)d FG(+)h FI(S)3050 1209
y Fq(a)3091 1194 y FI(=pK)29 b FG(+)22 b FI(D)s FG(\))p
FM(.)30 b(Further)-11 b(,)0 1315 y(for)27 b(any)h FI(\017)34
b(>)f FG(0)p FM(,)28 b(the)g(time)f(r)l(equir)l(ed)h(to)f(e)n(xecute)i
(the)f(computation)e(is)h FI(O)s FG(\()p FI(W)s(=p)c
FG(+)h FI(S)3005 1330 y Fq(a)3047 1315 y FI(=pK)31 b
FG(+)25 b FI(D)i FG(+)d(ln)o(\(1)p FI(=\017)p FG(\)\))0
1435 y FM(with)h(pr)l(obability)d(at)i(least)g FG(1)e
FF(\000)h FI(\017)p FM(.)0 1663 y FN(In)30 b(a)g(system)e(where)i(e)n
(v)o(ery)f(memory)g(location)g(allocated)g(must)f(be)i(zeroed,)h
FI(S)2843 1678 y Fq(a)2922 1663 y FG(=)36 b FI(O)s FG(\()p
FI(W)14 b FG(\))p FN(.)44 b(The)29 b(e)o(xpected)0 1784
y(time)37 b(bound)h(therefore)h(becomes)f FI(O)s FG(\()p
FI(W)s(=p)30 b FG(+)i FI(D)s FG(\))p FN(.)71 b(This)38
b(time)f(bound,)k(although)c(asymptotically)f(opti-)0
1904 y(mal)24 b([14],)h(is)f(not)h(as)g(lo)n(w)e(as)i(the)g(time)f
(bound)g(of)h FI(W)s(=p)d FG(+)g FI(O)s FG(\()p FI(D)s
FG(\))h FN(for)i(w)o(ork)g(stealing)f([13].)0 2124 y
FK(T)-7 b(rade-off)34 b(between)h(space,)h(time,)g(and)e(scheduling)g
(granularity)p FN(.)89 b(As)33 b(the)h(memory)e(threshold)g
FI(K)41 b FN(is)0 2244 y(increased,)36 b(the)e(scheduling)f
(granularity)g(increases,)j(since)e(a)g(processor)g(can)g(e)o(x)o
(ecute)f(more)h(instructions)0 2365 y(between)19 b(steals.)28
b(In)19 b(addition,)g(the)g(number)f(of)h(dummy)e(threads)i(added)g
(before)g(lar)n(ge)h(allocations)d(decreases.)0 2485
y(Ho)n(we)n(v)o(er)l(,)j(the)h(space)g(requirement)f(increases)h(with)f
FI(K)7 b FN(.)30 b(Thus,)20 b(adjusting)g(the)g(v)n(alue)g(of)h
FI(K)28 b FN(pro)o(vides)20 b(a)h(trade-)0 2606 y(of)n(f)k(between)f
(running)g(time)g(\(or)h(scheduling)f(granularity\),)g(and)h(space)g
(requirement.)0 2945 y FJ(5)143 b(Experiments)33 b(with)i(Pthr)m(eads)0
3169 y FN(W)-8 b(e)19 b(implemented)e(the)i(scheduler)g(as)g(part)g(of)
f(an)h(e)o(xisting)e(library)i(for)g(Posix)f(standard)h(threads)g(or)f
(Pthreads)h([30].)0 3289 y(The)32 b(library)f(is)g(the)g(nati)n(v)o(e,)
h(user)n(-le)n(v)o(el)e(Pthreads)i(library)f(on)h(Solaris)f(2.5)g([46,)
h(53)o(].)51 b(Pthreads)32 b(on)f(Solaris)0 3409 y(are)h(multiple)o(x)o
(ed)c(at)j(the)g(user)g(le)n(v)o(el)e(on)i(top)f(of)i(k)o(ernel)f
(threads,)h(which)e(act)i(lik)o(e)e(virtual)g(processors.)49
b(The)0 3530 y(original)35 b(scheduler)h(in)g(the)g(Pthread)h(library)f
(uses)g(a)g(FIFO)i(queue.)65 b(Our)36 b(e)o(xperiments)f(were)i
(conducted)0 3650 y(on)30 b(an)h(8)f(processor)g(Enterprise)g(5000)g
(SMP)h(with)f(2GB)g(main)g(memory)-6 b(.)47 b(Each)30
b(processor)h(is)f(a)g(167)g(MHz)0 3771 y(UltraSP)-9
b(ARC)26 b(with)e(a)h(512)g(kB)g(L2)f(cache.)146 3891
y(Ha)n(ving)32 b(to)g(support)f(the)h(general)h(Pthreads)f
(functionality)f(pre)n(v)o(ents)g(e)n(v)o(en)g(a)i(user)n(-le)n(v)o(el)
e(Pthreads)i(im-)0 4011 y(plementation)d(from)h(being)g(e)o(xtremely)f
(lightweight.)49 b(F)o(or)31 b(e)o(xample,)h(a)g(thread)f(creation)h
(is)f(tw)o(o)g(orders)g(of)0 4132 y(magnitude)k(more)g(e)o(xpensi)n(v)o
(e)f(than)i(a)g(null)f(function)g(call)g(on)h(the)g(UltraSP)-9
b(ARC.)37 b(Therefore,)i(the)d(user)g(is)0 4252 y(required)25
b(to)g(create)h(Pthreads)g(that)e(are)i(coarse)g(enough)f(to)f
(amortize)h(the)g(cost)g(of)g(thread)h(operations.)31
b(Ho)n(w-)0 4372 y(e)n(v)o(er)l(,)39 b(with)c(a)i(depth-\002rst)f
(scheduler)l(,)j(threads)d(at)h(this)e(granularity)h(had)g(to)g(be)h
(coarsened)g(further)f(to)g(get)0 4493 y(good)26 b(parallel)h
(performance)g([42].)37 b(W)-8 b(e)28 b(sho)n(w)d(that)i(using)f
(algorithm)f FL(DFDeques)8 b FN(,)27 b(good)f(speedups)h(can)g(be)0
4613 y(achie)n(v)o(ed)f(using)g(Pthreads)i(without)d(this)i(additional)
e(coarsening.)38 b(Thus,)27 b(the)g(user)g(can)g(no)n(w)g(\002x)g(the)g
(thread)0 4734 y(granularity)c(to)g(amortize)g(thread)g(operation)g
(costs,)g(and)g(e)o(xpect)h(to)f(get)g(good)g(parallel)g(performance)h
(in)f(both)0 4854 y(space)i(and)g(time.)146 4974 y(The)h(Pthreads)f
(model)g(supports)f(a)i(binary)f(fork)g(and)h(join)e(mechanism.)32
b(W)-8 b(e)26 b(modi\002ed)e(memory)h(alloca-)0 5095
y(tion)k(routines)f Fh(malloc)h FN(and)g Fh(free)g FN(to)h(k)o(eep)f
(track)h(of)g(the)f(memory)g(quota)g(of)h(the)f(current)h(processor)g
(\(or)1900 5589 y(26)p eop
%%Page: 27 30
27 29 bop 0 100 a FN(k)o(ernel)30 b(thread\))g(and)g(to)f(fork)h(dummy)
e(threads)i(before)g(an)g(allocation)f(if)h(required.)45
b(Our)30 b(scheduler)g(imple-)0 220 y(mentation)e(is)h(a)h(simple)e(e)o
(xtension)g(of)i(algorithm)e FL(DFDeques)37 b FN(that)29
b(supports)g(the)g(full)g(Pthreads)h(function-)0 340
y(ality)g(\(including)f(blocking)998 304 y FC(14)1098
340 y FN(mute)o(x)o(es)g(and)h(condition)f(v)n(ariables\))h(by)g
(maintaining)f(additional)g(entries)h(in)0 461 y FF(R)25
b FN(for)g(threads)g(suspended)f(on)g(synchronizations.)29
b(Our)c(benchmarks)f(are)i(predominantly)d(nested)h(parallel,)0
581 y(and)i(mak)o(e)g(limited)f(use)g(of)i(mute)o(x)o(es)d(and)i
(condition)e(v)n(ariables.)34 b(F)o(or)26 b(e)o(xample,)g(the)g(tree-b)
n(uilding)e(phase)i(in)0 702 y(Barnes-Hut)d(uses)f(mute)o(x)o(es)e(to)i
(protect)g(modi\002cations)f(to)h(the)g(tree')-5 b(s)22
b(cells.)30 b(Ho)n(we)n(v)o(er)l(,)22 b(the)g(Solaris)g(Pthreads)0
822 y(implementation)h(itself)i(mak)o(es)g(e)o(xtensi)n(v)o(e)e(use)i
(of)h(blocking)e(synchronization)g(primiti)n(v)o(es)e(such)j(as)h
(Pthread)0 942 y(mute)o(x)o(es)d(and)i(condition)e(v)n(ariables.)146
1063 y(Since)35 b(our)f(e)o(x)o(ecution)f(platform)g(is)h(an)g(SMP)h
(with)e(a)i(modest)e(number)g(of)i(processors,)h(access)e(to)g(the)0
1183 y(ready)i(threads)e(in)h FF(R)h FN(w)o(as)f(serialized.)62
b FF(R)35 b FN(is)g(implemented)f(as)h(a)g(link)o(ed)g(list)f(of)h
(deques)g(protected)g(by)g(a)0 1303 y(shared)d(scheduler)h(lock.)52
b(W)-8 b(e)33 b(optimized)e(the)h(common)f(cases)i(of)f(pushing)f(and)h
(popping)f(threads)h(onto)g(a)0 1424 y(processor')-5
b(s)32 b(current)i(deque)f(by)g(minimizing)e(locking)h(time.)55
b(A)33 b(steal)g(requires)g(the)g(lock)g(to)g(be)g(acquired)0
1544 y(more)25 b(often)f(and)h(for)g(a)g(longer)g(period)f(of)h(time.)
146 1665 y(In)f(the)g(e)o(xisting)e(Pthreads)j(implementation,)c(it)j
(is)f(not)h(al)o(w)o(ays)g(possible)e(to)i(place)g(a)h(rea)o(w)o(ak)o
(ened)f(thread)0 1785 y(on)36 b(the)g(same)g(deque)g(as)g(the)g(thread)
g(that)g(w)o(ak)o(es)g(it)f(up;)42 b(therefore,)d(our)d(implementation)
e(of)i FL(DFDeques)0 1905 y FN(is)31 b(an)g(approximation)e(of)i(the)g
(pseudocode)f(in)h(Figure)g(5.)49 b(Further)l(,)33 b(since)e(we)g
(serialize)g(access)h(to)e FF(R)p FN(,)j(and)0 2026 y(support)38
b(mute)o(x)o(es)f(and)j(condition)d(v)n(ariables,)42
b(setting)c(the)h(memory)f(threshold)g FI(K)47 b FN(to)39
b(in\002nity)f(does)h(not)0 2146 y(produce)29 b(the)f(same)h(schedule)f
(as)h(the)f(space-ef)n(\002cient)i(w)o(ork-stealing)d(scheduler)i
(intended)f(for)h(fully)f(strict)0 2267 y(computations)k([13].)57
b(Therefore,)37 b(we)d(can)g(use)g(this)e(setting)h(only)g(as)h(a)g
FM(r)l(ough)e(appr)l(oximation)f FN(of)j(a)g(pure)0 2387
y(w)o(ork-stealing)24 b(scheduler)-5 b(.)146 2507 y(W)d(e)33
b(\002rst)e(list)g(the)h(benchmarks)f(used)g(in)h(our)g(e)o
(xperiments.)50 b(Ne)o(xt,)32 b(we)g(compare)g(the)g(space)g(and)g
(time)0 2628 y(performance)j(of)g(the)f(library')-5 b(s)34
b(original)f(scheduler)i(\(labelled)f(\223FIFO\224\))i(with)e(an)h
(asynchronous,)g(depth-)0 2748 y(\002rst)f(scheduler)f([42])g
(\(labelled)h(\223)-8 b(ADF\224\),)34 b(and)f(the)h(ne)n(w)f
FL(DFDeques)41 b FN(scheduler)33 b(\(labelled)h(\223DFD\224\))g(for)g
(a)0 2868 y(\002x)o(ed)f(v)n(alue)g(of)g(the)h(memory)e(threshold)g
FI(K)7 b FN(.)57 b(W)-8 b(e)33 b(also)g(use)h FL(DFDeques)8
b FN(\()p FF(1)p FN(\))33 b(as)g(an)h(approximation)d(for)j(a)0
2989 y(w)o(ork-stealing)e(scheduler)h(\(labelled)g(\223DFD-inf)5
b(\224\).)58 b(T)-8 b(o)33 b(study)f(ho)n(w)g(the)h(performance)h(of)f
(the)g(schedulers)0 3109 y(is)38 b(af)n(fected)h(by)g(thread)g
(granularity)-6 b(,)41 b(we)e(present)f(results)g(of)h(the)f(e)o
(xperiments)g(at)g(tw)o(o)h(dif)n(ferent)f(thread)0 3230
y(granularities.)31 b(Finally)-6 b(,)24 b(we)i(measure)f(the)g
(trade-of)n(f)g(between)g(running)g(time,)f(scheduling)g(granularity)-6
b(,)24 b(and)0 3350 y(space)34 b(for)g(algorithm)f FL(DFDeques)41
b FN(by)34 b(v)n(arying)e(the)i(v)n(alue)f(of)h(the)g(memory)f
(threshold)f FI(K)42 b FN(for)34 b(one)f(of)h(the)0 3470
y(benchmarks.)0 3765 y Fs(5.1)119 b(P)o(arallel)30 b(benchmarks)0
3953 y FN(The)e(benchmarks)g(were)h(either)f(adapted)g(from)g(publicly)
f(a)n(v)n(ailable)g(coarse)i(grained)f(v)o(ersions)f([25)o(,)i(44)o(,)f
(52,)0 4073 y(56],)38 b(or)e(written)f(from)g(scratch)h(using)e(the)i
(lightweight)d(threads)j(model)f([42)o(].)64 b(The)35
b(parallelism)g(in)g(both)0 4194 y(di)n(vide-and-conquer)e(recursion)h
(and)g(parallel)g(loops)f(w)o(as)i(e)o(xpressed)e(as)i(a)f(binary)g
(tree)h(of)f(forks,)i(with)e(a)0 4314 y(separate)24 b(Pthread)g
(created)g(for)f(each)h(recursi)n(v)o(e)f(call.)30 b(Thread)23
b(granularity)g(w)o(as)g(adjusted)g(by)g(serializing)f(the)0
4435 y(recursion)33 b(near)h(the)f(leafs.)57 b(In)33
b(the)h(comparison)e(results)h(in)g(Section)g(5.2,)i
FE(medium)e FN(granularity)f(refers)i(to)0 4555 y(the)23
b(thread)g(granularity)g(that)g(pro)o(vides)f(good)g(parallel)h
(performance)h(using)e(the)h(depth-\002rst)g(scheduler)g([42].)0
4675 y(Ev)o(en)e(at)g(medium)g(granularity)-6 b(,)21
b(the)g(number)g(of)h(threads)f(signi\002cantly)f(e)o(xceeds)i(the)f
(number)g(of)h(processors;)0 4796 y(this)g(allo)n(ws)g(simple)g(coding)
h(and)g(automatic)f(load)h(balancing,)g(while)f(resulting)g(in)h
(performance)h(equi)n(v)n(alent)0 4916 y(to)38 b(hand-partitioned,)i
(coarse-grained)e(code)h(using)e(the)h(depth-\002rst)f(scheduler)h
([42].)71 b FE(F)l(ine)39 b FN(granularity)0 5037 y(refers)25
b(to)e(the)h(\002nest)g(thread)g(granularity)f(that)h(allo)n(ws)f(the)g
(cost)h(of)g(thread)g(operations)f(in)h(a)g(single-processor)p
0 5126 1560 4 v 87 5187 a FB(14)149 5218 y Fz(W)-7 b(e)25
b(use)g(the)e(term)h(\223blocking\224)e(for)h(synchronization)e(that)j
(causes)g(the)g(calling)f(thread)g(to)h(block)f(and)g(suspend,)h
(rather)f(than)0 5317 y(spin)d(w)o(ait.)1900 5589 y FN(27)p
eop
%%Page: 28 31
28 30 bop 53 3 3794 4 v 51 123 4 120 v 144 87 a Fz(Benchmark)p
616 123 V 385 w(Input)19 b(size)p 1534 123 V 1551 123
V 597 w(Medium)g(grained)p 2669 123 V 2686 123 V 669
w(Fine)i(grained)p 3845 123 V 1553 126 2295 4 v 51 242
4 120 v 616 242 V 1534 242 V 1551 242 V 1633 207 a(total)p
1858 242 V 129 w(FIFO)p 2138 242 V 99 w(ADF)p 2403 242
V 100 w(DFD)p 2669 242 V 2686 242 V 167 w(total)p 3034
242 V 150 w(FIFO)p 3314 242 V 99 w(ADF)p 3580 242 V 100
w(DFD)p 3845 242 V 53 246 3794 4 v 53 262 V 53 265 V
51 385 4 120 v 157 349 a(V)-11 b(ol.)26 b(Rend.)p 616
385 V 242 w Fw(256)883 319 y Fx(3)939 349 y Fz(v)n(ol,)20
b Fw(375)1211 319 y Fx(2)1268 349 y Fz(img)p 1534 385
V 1551 385 V 225 w(1427)p 1858 385 V 146 w(195)p 2138
385 V 168 w(29)p 2403 385 V 181 w(29)p 2669 385 V 2686
385 V 199 w(4499)p 3034 385 V 167 w(436)p 3314 385 V
167 w(36)p 3580 385 V 182 w(37)p 3845 385 V 53 389 3794
4 v 51 508 4 120 v 147 472 a(Dense)h(MM)p 616 508 V 197
w Fw(1024)16 b Fv(\002)i Fw(1024)h Fz(doubles)p 1534
508 V 1551 508 V 188 w(4687)p 1858 508 V 146 w(623)p
2138 508 V 168 w(33)p 2403 508 V 181 w(48)p 2669 508
V 2686 508 V 178 w(37491)p 3034 508 V 125 w(3752)p 3314
508 V 146 w(55)p 3580 508 V 182 w(77)p 3845 508 V 53
511 3794 4 v 51 631 4 120 v 111 595 a(Sparse)h(MVM)p
616 631 V 119 w(30K)g(nodes,)f(151K)g(edges)p 1534 631
V 1551 631 V 149 w(1263)p 1858 631 V 167 w(54)p 2138
631 V 189 w(31)p 2403 631 V 181 w(31)p 2669 631 V 2686
631 V 199 w(5103)p 3034 631 V 167 w(173)p 3314 631 V
167 w(51)p 3580 631 V 182 w(49)p 3845 631 V 53 634 3794
4 v 51 754 4 120 v 225 718 a(FFTW)p 616 754 V 482 w Fy(N)32
b Fw(=)22 b(2)1156 688 y Fx(22)p 1534 754 V 1551 754
V 1644 718 a Fz(177)p 1858 754 V 188 w(64)p 2138 754
V 189 w(13)p 2403 754 V 181 w(18)p 2669 754 V 2686 754
V 199 w(1777)p 3034 754 V 167 w(510)p 3314 754 V 167
w(30)p 3580 754 V 182 w(33)p 3845 754 V 53 757 3794 4
v 51 877 4 120 v 239 841 a(FMM)p 616 877 V 252 w Fy(N)32
b Fw(=)22 b(10)p Fy(K)6 b Fz(,)19 b(5)i(mpl)f(terms)p
1534 877 V 1551 877 V 153 w(4500)p 1858 877 V 126 w(1314)p
2138 877 V 146 w(21)p 2403 877 V 181 w(29)p 2669 877
V 2686 877 V 178 w(36676)p 3034 877 V 125 w(2030)p 3314
877 V 146 w(50)p 3580 877 V 182 w(54)p 3845 877 V 53
880 3794 4 v 51 1000 4 120 v 147 964 a(Barnes)h(Hut)p
616 1000 V 144 w Fy(N)31 b Fw(=)23 b(100)p Fy(K)6 b Fz(,)19
b(Plmr)h(model)p 1534 1000 V 1551 1000 V 115 w(40893)p
1858 1000 V 104 w(1264)p 2138 1000 V 146 w(33)p 2403
1000 V 161 w(106)p 2669 1000 V 2686 1000 V 135 w(124767)p
3034 1000 V 104 w(3570)p 3314 1000 V 146 w(42)p 3580
1000 V 161 w(120)p 3845 1000 V 53 1003 3794 4 v 51 1122
4 120 v 103 1087 a(Decision)g(T)m(ree)p 616 1122 V 210
w(133,999)e(instances)p 1534 1122 V 1551 1122 V 248 w(3059)p
1858 1122 V 167 w(82)p 2138 1122 V 189 w(60)p 2403 1122
V 181 w(77)p 2669 1122 V 2686 1122 V 199 w(6995)p 3034
1122 V 167 w(194)p 3314 1122 V 146 w(138)p 3580 1122
V 140 w(149)p 3845 1122 V 53 1126 3794 4 v 0 1333 a FN(Figure)30
b(11:)41 b Fu(Input)29 b(sizes)g(for)g(each)g(benchmark,)i(total)e
(number)g(of)f(threads)i(e)o(xpressed)h(in)d(the)g(program)i(at)e
(medium)0 1446 y(and)d(\002ne)g(granularities,)j(and)e(max.)32
b(number)26 b(of)f(simultaneously)j(acti)n(v)o(e)e(threads)g(created)h
(by)e(each)g(scheduler)j(at)c(both)0 1559 y(granularities,)k(for)d
Fr(K)31 b Fu(=)24 b(50,000)i(bytes.)34 b(\223DFD-inf)5
b(\224)25 b(creates)h(at)f(most)g(twice)g(as)f(man)o(y)h(threads)i(as)d
(\223DFD\224)g(for)h(Dense)0 1672 y(MM,)d(and)i(at)f(most)h(15\045)f
(more)h(threads)h(than)f(\223DFD\224)f(for)g(the)h(remaining)i
(benchmarks.)0 1948 y FN(e)o(x)o(ecution)j(to)i(be)g(up)f(to)h(5\045)f
(of)h(the)g(serial)g(e)o(x)o(ecution)e(time)2158 1912
y FC(15)2228 1948 y FN(.)48 b(The)31 b(parallel)g(benchmarks)f(are)i
(brie\003y)f(de-)0 2069 y(scribed)25 b(belo)n(w)-6 b(.)-32
2279 y(1.)48 b FK(V)-10 b(olume)28 b(Rendering)o(.)40
b FN(This)27 b(application)g(w)o(as)h(adapted)f(from)h(the)f(Splash-2)h
(v)n(olume)e(rendering)i(bench-)91 2399 y(mark)j([56)o(,)g(52)o(].)48
b(A)31 b(ray)g(is)f(cast)g(from)g(the)h(vie)n(wing)e(position)f
(through)i(each)h(pix)o(el)e(in)h(the)g(image)h(plane;)91
2520 y(parallelism)d(is)h(e)o(xploited)e(across)j(these)f(pix)o(els.)42
b(W)-8 b(e)29 b(create)h(a)g(separate)f(Pthread)h(to)f(handle)f(each)i
(set)f(of)91 2640 y(tiles)d(in)g(the)h(image,)f(where)h(a)g(tile)f(is)g
FG(4)e FF(\002)g FG(4)i FN(pix)o(els.)35 b(The)26 b(granularity)g(is)g
(v)n(aried)h(by)f(limiting)e(the)j(number)91 2761 y(of)e(tiles)g(in)f
(each)i(set.)31 b(Rays)26 b(cast)f(through)f(tiles)g(close)h(together)f
(in)h(the)g(image)g(are)g(lik)o(ely)f(to)h(access)h(much)91
2881 y(of)31 b(the)f(same)g(v)n(olume)g(data,)h(therefore)g(processing)
f(such)g(tiles)g(on)g(the)g(same)g(processor)h(pro)o(vides)e(good)91
3001 y(locality)-6 b(.)28 b(Each)21 b(thread)g(processes)f(up)h(to)f
(100)g(pix)o(el)g(tiles)g(of)g(the)h(rendered)g(image)f(at)h(medium)e
(granularity)-6 b(,)91 3122 y(and)25 b(up)g(to)f(5)h(tiles)f(at)h
(\002ne)g(granularity)-6 b(.)-32 3321 y(2.)48 b FK(Dense)38
b(Matrix)f(Multiply)-7 b(.)68 b FN(W)-8 b(e)38 b(use)f(a)g(recursi)n(v)
o(e,)j(di)n(vide-and-conquer)c(algorithm)g(to)h(multiply)e(tw)o(o)91
3441 y(dense)22 b(matrices.)29 b(Each)21 b(matrix)g(is)g(split)f(into)h
(four)g(quadrants;)h(the)f(quadrants)g(are)h(multiplied)d(recursi)n(v)o
(ely)-6 b(,)91 3561 y(and)27 b(the)f(resulting)f(matrices)h(are)i
(added)e(to)g(get)h(the)f(\002nal)h(result.)35 b(Matrix)26
b(addition)f(is)h(also)g(implemented)91 3682 y(in)21
b(a)g(recursi)n(v)o(e,)g(di)n(vide-and-conquer)f(f)o(ashion.)29
b(A)21 b(ne)n(w)g(thread)g(is)f(fork)o(ed)h(to)g(e)o(x)o(ecute)f(each)i
(recursi)n(v)o(e)e(call.)91 3802 y(Serial)26 b(matrix)f(multiply)e(is)j
(performed)f(at)h(the)f(lea)n(v)o(es)g(of)h(the)f(recursion)g(tree)h
(when)g(the)f(matrix)g(size)g(f)o(alls)91 3923 y(belo)n(w)i(a)g
(speci\002ed)h(block)f(size.)38 b(Such)27 b(hierarchical)h(matrix)e
(multiply)f(algorithms)h(ha)n(v)o(e)h(been)g(sho)n(wn)f(to)91
4043 y(achie)n(v)o(e)h(high)g(performance)h(due)f(to)h(their)f(good)g
(caching)g(beha)n(vior)g([1,)h(24)o(,)g(43)o(].)40 b(The)27
b(medium)f(grained)91 4163 y(v)o(ersion)e(uses)g(blocks)h(of)f(size)h
FG(64)d FF(\002)h FG(64)p FN(,)h(while)g(the)h(\002ne)g(grained)g(v)o
(ersion)f(uses)g FG(32)e FF(\002)g FG(32)j FN(blocks.)-32
4362 y(3.)48 b FK(Sparse)34 b(Matrix)f(V)-10 b(ector)34
b(Multiply)-7 b(.)55 b FN(This)33 b(code)g(to)g(multiply)d(a)k(sparse,)
h(unsymmetric)c(matrix)h(with)h(a)91 4483 y(dense)d(v)o(ector)f(w)o(as)
h(adapted)g(from)f(the)h(Spark98)g(k)o(ernels)g([44)o(].)46
b(The)30 b(sparse)g(matrix)f(is)g(generated)h(from)91
4603 y(a)f(\002nite)f(element)g(mesh)g(used)g(to)g(simulate)f(the)h
(motion)f(of)i(the)f(ground)f(after)i(an)g(earthquak)o(e)f(in)g(the)h
(San)91 4723 y(Fernando)j(v)n(alle)o(y)e([5,)h(4].)51
b(Each)32 b(thread)f(calculates)g(the)h(product)e(for)i(a)g(contiguous)
d(set)j(of)f(ro)n(ws)g(of)g(the)91 4844 y(matrix;)36
b(with)c(a)h(suf)n(\002ciently)e(lar)n(ge)j(number)e(of)g(threads,)j
(the)d(load)h(is)f(automatically)f(balanced.)55 b(Since)91
4964 y(the)23 b(ro)n(ws)g(of)g(the)g(matrix)g(are)h(ordered)g(by)f(a)g
(graph)g(partitioner)l(,)g(neighboring)f(ro)n(ws)h(may)f(access)i
(common)p 0 5049 1560 4 v 87 5111 a FB(15)149 5141 y
Fz(The)29 b(e)o(xception)e(w)o(as)j(the)f(dense)g(matrix)f(multiply)-5
b(,)30 b(which)e(we)i(wrote)e(for)h Fy(n)24 b Fv(\002)h
Fy(n)k Fz(blocks,)i(where)d Fy(n)h Fz(is)h(a)g(po)n(wer)e(of)h(tw)o(o.)
0 5240 y(Therefore,)19 b(\002ne)j(granularity)e(in)m(v)n(olv)o(ed)f
(reducing)h(the)h(block)g(size)h(by)f(a)h(f)o(actor)f(of)g(4,)h(and)f
(increasing)f(the)i(number)e(of)h(threads)g(by)0 5340
y(a)g(f)o(actor)e(of)h(8,)g(resulting)f(in)i(10\045)f(additional)f(o)o
(v)o(erhead.)1900 5589 y FN(28)p eop
%%Page: 29 32
29 31 bop 91 100 a FN(data.)63 b(At)35 b(medium)f(granularity)-6
b(,)36 b(64)g(threads)f(are)h(fork)o(ed)f(to)g(perform)g(the)h
(multiplication,)f(while)g(256)91 220 y(threads)25 b(are)g(fork)o(ed)g
(at)g(\002ne)h(granularity)-6 b(.)-32 423 y(4.)48 b FK(F)n(ast)23
b(F)n(ourier)h(T)-7 b(ransf)n(orm.)31 b FN(W)-8 b(e)24
b(used)f(the)h(Pthreads-based)g(code)g(from)g(the)f(FFTW)i(library)f
([25)o(],)h(which)91 544 y(is)30 b(typically)e(f)o(aster)i(than)g(all)f
(other)h(publicly)e(a)n(v)n(ailable)h(code)h(to)g(compute)f(one-)h(and)
g(multidimensional)91 664 y(comple)o(x)38 b(discrete)g(F)o(ourier)g
(transforms)g(\(DFTs\).)72 b(The)39 b(code)g(implements)d(the)j(Coole)o
(y-T)l(uk)o(e)o(y)d(algo-)91 785 y(rithm)f([19];)41 b(a)c(ne)n(w)e
(thread)h(is)f(fork)o(ed)h(to)g(perform)g(each)g(recursi)n(v)o(e)f
(transform)h(until)e(a)j(user)n(-speci\002ed)91 905 y(number)c(of)h
(threads)g(ha)n(v)o(e)f(been)h(created.)58 b(W)-8 b(e)34
b(use)f(64)h(threads)f(to)h(compute)e(the)i(1D)f(FFT)i(at)e(medium)91
1025 y(granularity)-6 b(,)24 b(and)h(512)f(threads)h(at)f(\002ne)i
(granularity)-6 b(.)-32 1229 y(5.)48 b FK(F)n(ast)30
b(Multipole)h(Method.)50 b FN(This)31 b(multithreaded)e(code)i
(implements)e(the)i(uniform)e(FMM)i([28],)h(an)f FI(N)10
b FN(-)91 1349 y(body)30 b(algorithm)f(that)h(calculates)g(forces)h
(between)g FI(N)41 b FN(bodies)29 b(in)h FI(O)s FG(\()p
FI(N)10 b FG(\))31 b FN(time.)46 b(Although)29 b(e)n(v)o(ery)h(phase)91
1469 y(in)25 b(the)g(computation)f(w)o(as)h(parallelized,)h(we)f(only)g
(v)n(aried)g(the)g(granularity)f(of)i(the)f(most)f(time)h(consuming)91
1590 y(phase,)e(the)g(top-do)n(wn)e(tra)n(v)o(ersal.)30
b(F)o(or)22 b(each)h(cell,)g(we)g(fork)g(a)g(separate)g(thread)g(to)f
(calculate)h(its)f(interaction)91 1710 y(with)31 b(a)h(\002x)o(ed)g
(number)f(of)h(its)e(neighbors)h(\(the)h(cells)f(on)h(its)e
(interaction)h(list\).)51 b(At)31 b(medium)f(granularity)-6
b(,)91 1831 y(each)20 b(thread)f(calculates)g(50)g(interactions)f(of)i
(a)f(cell)g(with)g(its)f(neighboring)g(cells,)i(while)e(at)i(\002ne)f
(granularity)-6 b(,)91 1951 y(each)26 b(thread)f(computes)e(5)i(such)g
(interactions.)-32 2154 y(6.)48 b FK(Bar)o(nes-Hut.)31
b FN(The)21 b(code)h(for)g(this)f FI(O)s FG(\()p FI(N)27
b FG(log)16 b FI(N)10 b FG(\))22 b FI(N)10 b FN(-body)22
b(algorithm)f([6])h(w)o(as)f(adapted)h(from)g(the)f(Splash-)91
2275 y(2)33 b(benchmark)f(suite)f([56].)53 b(All)32 b(the)g(original)f
(load)h(balancing)g(code)h(w)o(as)f(remo)o(v)o(ed)f(since)h(our)g
(simpler)l(,)91 2395 y(re)n(written)37 b(v)o(ersion)f(is)h
(automatically)e(load)i(balanced)g(by)g(the)g(Pthreads)h(library)-6
b(.)67 b(As)37 b(with)f(FMM,)h(we)91 2516 y(v)n(aried)f(the)f
(granularity)g(within)g(the)g(most)g(time)g(consuming)f(phase,)k(which)
e(is)f(the)g(force)i(calculation.)91 2636 y(W)-8 b(e)28
b(re)n(wrote)g(this)f(phase)h(to)f(recursi)n(v)o(ely)f(tra)n(v)o(erse)i
(do)n(wn)f(the)g(octree)i(by)e(forking)g(a)h(ne)n(w)g(thread)f(for)h
(each)91 2756 y(subtree,)j(and)g(terminating)d(the)i(forking)g(after)g
(a)h(\002x)o(ed)f(number)f(of)h(le)n(v)o(els.)46 b(After)30
b(that,)h(the)f(force)h(on)e(all)91 2877 y(the)e(particles)g(in)g(each)
h(subtree)f(is)f(calculated)i(by)e(a)i(separate)g(thread.)37
b(Since)28 b(particles)f(close)g(together)f(in)91 2997
y(the)f(tree)g(are)g(lik)o(ely)f(to)g(require)g(common)g(data)g(for)h
(force)g(calculation,)f(this)g(pro)o(vides)f(good)h(locality)-6
b(.)29 b(The)91 3117 y(granularity)e(is)f(adjusted)g(by)h(v)n(arying)f
(the)h(cut-of)n(f)f(le)n(v)o(el)g(at)h(which)g(parallel)g(recursion)f
(is)h(terminated.)36 b(At)91 3238 y(medium)30 b(granularity)-6
b(,)31 b(each)h(thread)f(computes)f(the)h(forces)h(on)f(particles)f(in)
h(up)g(to)g(4)g(leaf)g(cells)g(\(that)g(is,)91 3358 y(each)j(subtree)f
(contains)f(4)h(lea)n(v)o(es)g(on)g(a)n(v)o(erage\),)i(while)e(at)g
(\002ne)h(granularity)-6 b(,)34 b(each)f(thread)h(handles)e(one)91
3479 y(leaf)26 b(cell.)-32 3682 y(7.)48 b FK(Decision)33
b(T)-7 b(r)n(ee)34 b(Builder)-10 b(.)55 b FN(This)32
b(data)h(classi\002cation)f(program)g(implements)f(a)i(top-do)n(wn,)g
(di)n(vide-and-)91 3802 y(conquer)39 b(tree)h(b)n(uilding)d(algorithm)h
(ID3)h([47],)k(with)38 b(C4.5-lik)o(e)h(additions)f(to)h(handle)f
(continuous)g(at-)91 3923 y(trib)n(utes)30 b([48)o(].)48
b(A)30 b(ne)n(w)g(thread)g(is)g(fork)o(ed)h(to)f(e)o(x)o(ecute)f(each)i
(recursi)n(v)o(e)f(call.)47 b(The)30 b(resulting)f(di)n(vide-and-)91
4043 y(conquer)38 b(dag)g(is)f(highly)f(irre)o(gular)h(and)h(data)g
(dependent,)i(where)e(each)h(stage)e(of)h(the)f(recursion)h(itself)91
4164 y(in)l(v)n(olv)o(es)24 b(a)i(parallel)g(di)n(vide-and-conquer)e
(quicksort)h(to)g(split)g(the)g(instances.)33 b(W)-8
b(e)26 b(used)g(a)g(speech)g(recog-)91 4284 y(nition)d(dataset)i(with)e
(4)i(continuous)e(attrib)n(utes)g(and)h(a)h(true/f)o(alse)f
(classi\002cation)g(as)h(the)f(input.)30 b(The)24 b(thread)91
4404 y(granularity)30 b(is)g(adjusted)g(by)g(setting)f(a)i(threshold)f
(for)g(the)h(number)f(of)g(instances,)h(belo)n(w)f(which)g(the)g(re-)91
4525 y(cursion)38 b(is)g(e)o(x)o(ecuted)g(serially)-6
b(.)70 b(The)39 b(thresholds)e(were)i(set)f(to)g(2000)g(and)g(200)g
(for)h(medium)e(and)i(\002ne)91 4645 y(granularities,)24
b(respecti)n(v)o(ely)-6 b(.)0 4873 y(Figure)27 b(11)g(lists)e(the)i
(total)f(number)h(of)g(threads)f(e)o(xpressed)h(in)f(each)i(benchmark)e
(at)h(both)f(the)h(thread)g(granu-)0 4994 y(larities.)1900
5589 y(29)p eop
%%Page: 30 33
30 32 bop 0 100 a Fs(5.2)119 b(Comparison)30 b(r)n(esults)0
287 y FN(In)i(all)g(the)f(comparison)g(results,)i(we)f(use)g(a)g
(memory)f(threshold)g(of)h FI(K)48 b FG(=)40 b(50)p FI(;)17
b FG(000)31 b FN(bytes)g(for)h(\223)-8 b(ADF\224)33 b(and)0
408 y(\223DFD\224)287 371 y FC(16)358 408 y FN(.)g(Each)g(acti)n(v)o(e)
f(thread)g(is)h(allocated)f(a)h(minimum)e(8kB)h(\(1)h(page\))g(stack.)
55 b(Therefore,)35 b(the)e(space-)0 528 y(ef)n(\002cient)j(schedulers)g
(ef)n(fecti)n(v)o(ely)f(conserv)o(e)h(stack)h(memory)e(by)h(creating)h
(fe)n(wer)f(simultaneously)e(acti)n(v)o(e)0 648 y(threads)j(compared)f
(to)h(the)g(original)f(FIFO)h(scheduler)g(\(see)g(Figure)h(11\).)66
b(The)37 b(FIFO)h(scheduler)f(spends)0 769 y(signi\002cant)g(portions)g
(of)h(time)f(e)o(x)o(ecuting)f(system)h(calls)h(related)g(to)f(memory)g
(allocation)g(for)h(the)g(thread)0 889 y(stacks)24 b([42];)h(this)f
(problem)g(is)g(aggra)n(v)n(ated)h(when)f(the)h(threads)g(are)g(made)g
(\002ne)g(grained.)146 1010 y(The)30 b(8-processor)g(speedups)f(for)h
(all)g(the)f(benchmarks)h(at)g(medium)e(and)i(\002ne)g(thread)g
(granularities)f(are)0 1130 y(sho)n(wn)36 b(in)g(Figure)h(12.)66
b(T)-8 b(o)37 b(concentrate)g(on)g(the)f(ef)n(fect)h(of)g(the)g
(scheduler)l(,)j(and)c(to)h(ignore)f(the)h(ef)n(fect)g(of)0
1250 y(increased)c(thread)g(o)o(v)o(erheads)f(\(up)g(to)g(5\045)h(for)g
(all)g(e)o(xcept)f(dense)h(matrix)f(multiply\))e(at)j(the)g(\002ne)g
(granular)n(-)0 1371 y(ity)-6 b(,)38 b(speedups)e(for)g(each)h(thread)f
(granularity)g(are)h(with)f(respect)g(to)g(the)g(single-processor)g
(multithreaded)0 1491 y(e)o(x)o(ecution)29 b(at)h(that)g(granularity)-6
b(.)46 b(The)30 b(speedups)g(sho)n(w)f(that)h(both)f(the)h
(depth-\002rst)g(scheduler)g(and)g(the)h(ne)n(w)0 1611
y FL(DFDeques)g FN(scheduler)22 b(outperform)h(the)f(library')-5
b(s)23 b(original)f(FIFO)h(scheduler)-5 b(.)30 b(Ho)n(we)n(v)o(er)l(,)
22 b(at)h(the)g(\002ne)g(thread)0 1732 y(granularity)-6
b(,)37 b(the)f(ne)n(w)f(scheduler)h(pro)o(vides)e(better)i(performance)
g(than)f(the)h(depth-\002rst)f(scheduler)-5 b(.)63 b(This)0
1852 y(dif)n(ference)26 b(can)g(be)g(e)o(xplained)e(by)h(the)h(better)f
(locality)g(and)g(lo)n(wer)g(scheduling)g(contention)f(e)o(xperienced)h
(by)0 1973 y(algorithm)e FL(DFDeques)8 b FN(.)146 2093
y(W)-8 b(e)20 b(measured)f(the)h(e)o(xternal)e(\(L2\))i(cache)g(miss)e
(rates)i(for)g(each)g(benchmark)f(using)f(on-chip)h(UltraSP)-9
b(ARC)0 2213 y(performance)32 b(counters.)52 b(Figure)32
b(1,)h(which)e(lists)g(the)g(results)g(at)h(the)g(\002ne)g(thread)g
(granularity)-6 b(,)32 b(sho)n(ws)f(that)0 2334 y(our)25
b(scheduler)f(achie)n(v)o(es)g(relati)n(v)o(ely)g(lo)n(w)f(cache)j
(miss)e(rates)h(\(i.e.,)f(results)g(in)h(better)g(locality\).)146
2454 y(Three)34 b(out)e(of)i(the)f(se)n(v)o(en)f(benchmarks)g(mak)o(e)h
(signi\002cant)g(use)g(of)g(heap)g(memory)-6 b(.)55 b(F)o(or)33
b(these)g(bench-)0 2575 y(marks,)c(we)f(measured)g(the)h(high)e(w)o
(ater)i(mark)f(for)g(heap)h(memory)e(allocation)h(using)f(the)h(three)h
(schedulers.)0 2695 y(Figure)36 b(14)f(sho)n(ws)g(that)g(algorithm)g
FL(DFDeques)43 b FN(results)35 b(in)g(slightly)f(higher)i(heap)g
(memory)f(requirement)0 2815 y(compared)25 b(to)f(the)h(depth-\002rst)f
(scheduler)l(,)h(b)n(ut)f(still)g(outperforms)f(the)i(original)f(FIFO)i
(scheduler)-5 b(.)146 2936 y(The)23 b(Cilk)f(runtime)f(system)g([26])i
(uses)f(a)g(pro)o(v)n(ably)f(space-ef)n(\002cient)i(w)o(ork)f(stealing)
f(algorithm)g(to)h(sched-)0 3056 y(ule)29 b(threads)439
3020 y FC(17)509 3056 y FN(.)44 b(Figure)29 b(13)g(compares)g(the)g
(space)h(performance)f(of)g(Cilk)g(with)g(the)f(depth-\002rst)h(and)g
FL(DFDe-)0 3176 y(ques)k FN(schedulers)25 b(for)i(the)e(dense)h(matrix)
f(multiply)e(benchmark)j(\(at)g(the)g(\002ne)g(thread)g(granularity\).)
33 b(The)26 b(\002g-)0 3297 y(ure)21 b(indicates)e(that)h
FL(DFDeques)28 b FN(requires)20 b(more)g(memory)g(than)g(the)g
(depth-\002rst)g(scheduler)l(,)g(b)n(ut)g(less)g(memory)0
3417 y(than)j(Cilk.)30 b(In)24 b(particular)l(,)f(similar)f(to)i(the)f
(depth-\002rst)g(scheduler)l(,)g(the)h(memory)e(requirement)h(of)h
FL(DFDeques)0 3538 y FN(increases)h(slo)n(wly)e(with)h(the)h(number)f
(of)h(processors.)0 3833 y Fs(5.3)119 b(Measuring)26
b(the)f(tradeoff)g(between)i(space,)f(time,)f(and)h(scheduling)i
(granularity)0 4020 y FN(W)-8 b(e)33 b(studied)e(the)h(ef)n(fect)h(of)f
(the)g(size)g(of)h(memory)e(threshold)g FI(K)40 b FN(on)32
b(the)g(running)f(time,)i(memory)f(require-)0 4141 y(ment,)25
b(and)h(scheduling)e(granularity)h(using)g FL(DFDeques)8
b FN(\()p FI(K)f FN(\).)33 b(Each)26 b(processor)g(k)o(eeps)f(track)h
(of)g(the)g(number)0 4261 y(of)33 b(times)e(a)i(thread)g(from)f(its)g
(o)n(wn)g(deque)h(is)f(scheduled,)i(and)e(the)h(number)f(of)h(times)e
(it)h(has)h(to)f(perform)h(a)0 4381 y(steal.)38 b(The)27
b(ratio)h(of)f(these)g(tw)o(o)g(counts,)g(a)n(v)o(eraged)h(o)o(v)o(er)e
(all)h(the)h(processors,)f(is)g(our)g(approximation)f(of)h(the)0
4502 y(scheduling)j(granularity)-6 b(.)49 b(The)31 b(trade-of)n(f)g(is)
g(best)g(illustrated)f(in)h(the)g(dense)g(matrix)f(multiply)f
(benchmark,)0 4622 y(which)g(allocates)g(signi\002cant)f(amounts)g(of)h
(heap)g(memory)-6 b(.)43 b(Figure)29 b(15)g(sho)n(ws)f(the)h(resulting)
f(trade-of)n(f)h(for)p 0 4712 1560 4 v 87 4773 a FB(16)149
4803 y Fz(In)19 b(the)g(depth-\002rst)e(scheduler)m(,)g(the)i(memory)e
(threshold)g Fy(K)25 b Fz(is)19 b(the)g(memory)e(quota)h(assigned)g(to)
h(each)f(thread)g(between)g(thread)0 4903 y(preemptions)g([42)o(].)87
4972 y FB(17)149 5003 y Fz(Because)i(Cilk)h(requires)d
Fb(gcc)i Fz(to)g(compile)f(the)g(benchmarks)f(\(which)h(results)h(in)g
(slo)n(wer)f(code)g(for)g(\003oating)g(point)g(operations)0
5102 y(compared)29 b(to)i(the)h(nati)n(v)o(e)e Fb(cc)h
Fz(compiler)f(on)h(UltraSP)-8 b(ARCs\),)35 b(we)c(do)g(not)g(sho)n(w)g
(a)g(direct)g(comparison)e(of)i(running)e(times)j(or)0
5202 y(speedups)19 b(of)h(Cilk)h(benchmarks)d(with)i(our)g
(Pthreads-based)e(system)i(here.)1900 5589 y FN(30)p
eop
%%Page: 31 34
31 33 bop 703 994 a @beginspecial 79 @llx 251 @lly 331
@urx 352 @ury 360 @rhi @setspecial
%%BeginDocument: graphs/bar_charts/blank.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
793 3262
793 3502
998 3502
998 3262
793 3262
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-36-*
/Helvetica-Bold 36 SetF
%I t
[ 1 0 0 1 152.875 552  ] concat
%I
[
( Medium-Grain)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
793 2603
793 2843
998 2843
998 2603
793 2603
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-36-*
/Helvetica-Bold 36 SetF
%I t
[ 1 0 0 1 152.875 469.625  ] concat
%I
[
( Fine-Grain)
] Text
End

End %I eop


end
showpage
%%EndDocument
 @endspecial 2418 274 a
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig
 2418 274 a
%%BeginDocument: graphs/bar_charts/vr.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2437
589 2437
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2437
589 2437
384 2437
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 2189
794 2189
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2450
1408 2450
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2450
1408 2450
1203 2450
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 2341
1613 2341
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2456
2228 2456
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2456
2228 2456
2023 2456
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2585
2433 2585
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 2377 902 a FN(\(a\))26 b(V)-13 b(olume)24 b(Rendering)689
1379 y
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig
 689 1379 a
%%BeginDocument: graphs/bar_charts/mm.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2359
589 2359
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2359
589 2359
384 2359
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 888
794 888
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2527
1408 2527
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2527
1408 2527
1203 2527
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 1783
1613 1783
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2673
2228 2673
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2673
2228 2673
2023 2673
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2299
2433 2299
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 2418 1379 a
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig
 2418 1379 a
%%BeginDocument: graphs/bar_charts/smv.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2130
589 2130
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2130
589 2130
384 2130
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 1736
794 1736
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2394
1408 2394
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2394
1408 2394
1203 2394
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 2101
1613 2101
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2425
2228 2425
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2425
2228 2425
2023 2425
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2415
2433 2415
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 548 2007 a FN(\(b\))h(Dense)g(Matrix)f(Multiply)674
b(\(c\))25 b(Sparse)h(Matrix)e(Multiply)689 2484 y
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig
 689
2484 a
%%BeginDocument: graphs/bar_charts/fft.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2383
589 2383
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2383
589 2383
384 2383
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 2347
794 2347
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2347
1408 2347
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2347
1408 2347
1203 2347
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 2332
1613 2332
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2409
2228 2409
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2409
2228 2409
2023 2409
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2440
2433 2440
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 2418 2484 a
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig
 2418 2484 a
%%BeginDocument: graphs/bar_charts/fmm.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2865
589 2865
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2865
589 2865
384 2865
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 1246
794 1246
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2723
1408 2723
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2723
1408 2723
1203 2723
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 2603
1613 2603
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2724
2228 2724
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2724
2228 2724
2023 2724
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2715
2433 2715
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 545 3112 a FN(\(d\))h(F)o(ast)g(F)o(ourier)g(T)m(ransform)682
b(\(e\))25 b(F)o(ast)g(Multipole)e(Method)689 3589 y
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig

689 3589 a
%%BeginDocument: graphs/bar_charts/bh.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2310
589 2310
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2310
589 2310
384 2310
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 993
794 993
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2584
1408 2584
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2584
1408 2584
1203 2584
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 2409
1613 2409
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2644
2228 2644
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2644
2228 2644
2023 2644
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2589
2433 2589
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 2418 3589 a
 6138209 5683529 1052508 1578762 20523909 19537182 startTexFig
 2418 3589 a
%%BeginDocument: graphs/bar_charts/id.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 232  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 294.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 357.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 420.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 355.25 483.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
384 832
384 2259
589 2259
589 832
384 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
384 2259
589 2259
384 2259
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
589 832
794 832
589 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
589 832
589 2051
794 2051
794 832
589 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 20.843 180.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1203 832
1203 2200
1408 2200
1408 832
1203 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1203 2200
1408 2200
1203 2200
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1408 832
1613 832
1408 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1408 832
1408 2053
1613 2053
1613 832
1408 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 126.786 180.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2023 832
2023 2226
2228 2226
2228 832
2023 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2023 2226
2228 2226
2023 2226
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2228 832
2433 832
2228 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2228 832
2228 2191
2433 2191
2433 832
2228 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-32-*
/Helvetica-Bold 32 SetF
%I t
[ 1 0 0 1 229.161 180.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2745 832
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 832
2745 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1083
2745 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1336
2745 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1588
2745 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 1840
2745 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2091
2745 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2343
2745 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2595
2745 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
2642 2847
2745 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
384 832
2433 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 790 4217 a FN(\(f\))i(Barnes)h(Hut)942 b(\(g\))25 b(Decision)f(T)m
(ree)h(Builder)0 4601 y(Figure)40 b(12:)60 b Fu(Speedups)39
b(on)e(8)g(processors)j(with)d(respect)h(to)f(single-processor)43
b(e)o(x)o(ecutions)c(for)e(the)h(three)g(sched-)0 4714
y(ulers)h(\(the)f(original)i(\223FIFO\224,)c(the)i(depth-\002rst)i
(\223)-7 b(ADF\224,)36 b(and)i(the)g(ne)n(w)g(\223DFD\224)e(or)i
Ft(DFDeques)7 b Fu(\))38 b(at)f(both)i(medium)0 4826
y(and)29 b(\002ne)e(thread)j(granularities,)j(with)28
b Fr(K)34 b Fu(=)27 b(50,000)j(bytes.)44 b(Performance)29
b(of)g(\223DFD-inf)5 b(\224)28 b(\(or)g Ft(DFDeques)7
b Fu(\()p Fm(1)p Fi(\))p Fu(\),)30 b(be-)0 4939 y(ing)i(v)o(ery)f
(similar)h(to)f(that)h(of)f(\223DFD\224,)f(is)h(not)h(sho)n(wn)f(here.)
53 b(All)31 b(benchmarks)i(were)e(compiled)i(using)g
Fa(cc)53 b(-fast)0 5052 y(-xarch=v8plusa)48 b(-xchip=ultra)h
(-xtarget=native)f(-xO4)p Fu(.)1900 5589 y FN(31)p eop
%%Page: 32 35
32 34 bop 1308 965 a @beginspecial 50 @llx 50 @lly 374
@urx 277 @ury 1080 @rhi @setspecial
%%BeginDocument: graphs/mem_comp.ps
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -53 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/Helvetica findfont 160 scalefont setfont
newpath
LTa
960 401 M
2025 0 V
LTb
960 401 M
63 0 V
1962 0 R
-63 0 V
864 401 M
(0) Rshow
960 714 M
63 0 V
1962 0 R
-63 0 V
864 714 M
(10) Rshow
960 1028 M
63 0 V
1962 0 R
-63 0 V
-2058 0 R
(20) Rshow
960 1341 M
63 0 V
1962 0 R
-63 0 V
-2058 0 R
(30) Rshow
960 1654 M
63 0 V
1962 0 R
-63 0 V
-2058 0 R
(40) Rshow
960 1968 M
63 0 V
1962 0 R
-63 0 V
-2058 0 R
(50) Rshow
960 401 M
0 63 V
0 1723 R
0 -63 V
960 241 M
(1) Cshow
1249 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(2) Cshow
1539 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(3) Cshow
1828 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(4) Cshow
2117 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(5) Cshow
2406 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(6) Cshow
2696 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(7) Cshow
2985 401 M
0 63 V
0 1723 R
0 -63 V
0 -1883 R
(8) Cshow
960 401 M
2025 0 V
0 1786 V
-2025 0 V
960 401 L
352 1294 M
currentpoint gsave translate 90 rotate 0 0 M
(MEMORY) Cshow
grestore
1972 -79 M
(# PROCESSORS) Cshow
LT0
2406 1028 M
(Cilk) Rshow
2502 1028 M
288 0 V
960 1540 M
289 88 V
290 87 V
289 89 V
289 99 V
289 79 V
290 93 V
289 84 V
2598 1028 D
960 1540 D
1249 1628 D
1539 1715 D
1828 1804 D
2117 1903 D
2406 1982 D
2696 2075 D
2985 2159 D
LT1
2406 868 M
(DFD) Rshow
2502 868 M
288 0 V
960 1540 M
289 124 V
290 80 V
289 51 V
289 56 V
289 26 V
290 3 V
289 -2 V
2598 868 A
960 1540 A
1249 1664 A
1539 1744 A
1828 1795 A
2117 1851 A
2406 1877 A
2696 1880 A
2985 1878 A
LT2
2406 708 M
(ADF) Rshow
2502 708 M
288 0 V
960 1540 M
289 87 V
290 78 V
289 -72 V
289 0 V
289 2 V
290 27 V
289 -1 V
2598 708 B
960 1540 B
1249 1627 B
1539 1705 B
1828 1633 B
2117 1633 B
2406 1635 B
2696 1662 B
2985 1661 B
LT3
2406 548 M
(Input size) Rshow
2502 548 M
288 0 V
960 1190 M
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
21 0 V
20 0 V
stroke
grestore
end
showpage
%%EndDocument
 @endspecial 0 1209 a FN(Figure)27 b(13:)34 b Fu(V)-10
b(ariation)27 b(of)f(the)f(memory)h(requirement)i(with)d(the)h(number)g
(of)f(processors)k(for)c(dense)i(matrix)f(multiply)0
1322 y(using)f(three)f(schedulers:)32 b(depth-\002rst)26
b(\(\223)-7 b(ADF\224\),)22 b Ft(DFDeques)31 b Fu(\(\223DFD\224\),)22
b(and)i(Cilk)f(\(\223Cilk\224\).)154 1837 y @beginspecial
79 @llx 318 @lly 598 @urx 353 @ury 86 @rhi @setspecial
%%BeginDocument: graphs/bar_charts/blank2.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
793 3262
793 3502
1101 3502
1101 3262
793 3262
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-36-*
/Helvetica-Bold 36 SetF
%I t
[ 1 0 0 1 152.875 553.25  ] concat
%I
[
( Medium-Grain)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
3955 3262
3955 3502
4262 3502
4262 3262
3955 3262
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-36-*
/Helvetica-Bold 36 SetF
%I t
[ 1 0 0 1 548.125 553.25  ] concat
%I
[
( Fine-Grain)
] Text
End

End %I eop


end
showpage
%%EndDocument
 @endspecial 242 2024 a
 7033421 5209944 1776107 1578762 28483502 21313290 startTexFig
 242 2024 a
%%BeginDocument: graphs/bar_charts/mm_mem.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 230  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 278  ] concat
%I
[
( 40)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 326  ] concat
%I
[
( 80)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 374  ] concat
%I
[
( 120)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 422  ] concat
%I
[
( 160)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 470  ] concat
%I
[
( 200)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 518  ] concat
%I
[
( 240)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
374 832
374 2091
607 2091
607 832
374 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
374 2091
607 2091
374 2091
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
607 832
840 832
607 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
607 832
607 2847
840 2847
840 832
607 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 34.722 176.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1229 832
1229 1214
1462 1214
1462 832
1229 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1229 1214
1462 1214
1229 1214
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1462 832
1695 832
1462 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1462 832
1462 1216
1695 1216
1695 832
1462 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 144.594 176.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2084 832
2084 1274
2317 1274
2317 832
2084 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2084 1274
2317 1274
2084 1274
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2317 832
2550 832
2317 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2317 832
2317 1285
2550 1285
2550 832
2317 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 251.469 176.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2938 832
2938 1441
3171 1441
3171 832
2938 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2938 1441
3171 1441
2938 1441
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
3171 832
3404 832
3171 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
3171 832
3171 1576
3404 1576
3404 832
3171 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 336.574 176.5  ] concat
%I
[
( DFD-inf   )
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 245.216 176.5  ] concat
%I
[
( )
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 245.216 176.5  ] concat
%I
[
( )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3710 832
3710 3136
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 832
3710 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1216
3710 1216
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1600
3710 1600
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1984
3710 1984
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2368
3710 2368
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2752
3710 2752
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 3136
3710 3136
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
374 832
3404 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 1516 2024 a
 7241817 5209944 1776107 1578762 28023029 20458127 startTexFig
 1516 2024 a
%%BeginDocument: graphs/bar_charts/fmm_mem.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 230  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 275.25  ] concat
%I
[
( 0.5)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 320.5  ] concat
%I
[
( 1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 365.75  ] concat
%I
[
( 1.5)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 411  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 456.25  ] concat
%I
[
( 2.5)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 501.5  ] concat
%I
[
( 3)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
374 832
374 2847
607 2847
607 832
374 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
374 2847
607 2847
374 2847
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
607 832
840 832
607 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
607 832
607 2805
840 2805
840 832
607 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 34.722 176.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1229 832
1229 2152
1462 2152
1462 832
1229 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1229 2152
1462 2152
1229 2152
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1462 832
1695 832
1462 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1462 832
1462 2152
1695 2152
1695 832
1462 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 144.594 176.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2084 832
2084 2152
2317 2152
2317 832
2084 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2084 2152
2317 2152
2084 2152
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2317 832
2550 832
2317 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2317 832
2317 2152
2550 2152
2550 832
2317 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 251.469 176.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2938 832
2938 2152
3171 2152
3171 832
2938 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2938 2152
3171 2152
2938 2152
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
3171 832
3404 832
3171 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
3171 832
3171 2152
3404 2152
3404 832
3171 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 336.574 176.5  ] concat
%I
[
( DFD-inf   )
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 245.216 176.5  ] concat
%I
[
( )
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 245.216 176.5  ] concat
%I
[
( )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3710 832
3710 3004
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 832
3710 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1194
3710 1194
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1556
3710 1556
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1918
3710 1918
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2280
3710 2280
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2642
3710 2642
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 3004
3710 3004
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
374 832
3404 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 2792 2024 a
 6825025 5209944 1776107 1578762 27628339 21247508 startTexFig
 2792 2024 a
%%BeginDocument: graphs/bar_charts/id_mem.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 230  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 277.625  ] concat
%I
[
( 10)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 325.25  ] concat
%I
[
( 20)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 372.875  ] concat
%I
[
( 30)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 420.5  ] concat
%I
[
( 40)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 468.125  ] concat
%I
[
( 50)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 515.875  ] concat
%I
[
( 60)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
374 832
374 2647
607 2647
607 832
374 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
374 2647
607 2647
374 2647
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
607 832
840 832
607 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
607 832
607 2847
840 2847
840 832
607 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 34.722 176.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1229 832
1229 2502
1462 2502
1462 832
1229 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1229 2502
1462 2502
1229 2502
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1462 832
1695 832
1462 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1462 832
1462 2550
1695 2550
1695 832
1462 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 144.594 176.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2084 832
2084 2606
2317 2606
2317 832
2084 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2084 2606
2317 2606
2084 2606
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2317 832
2550 832
2317 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2317 832
2317 2620
2550 2620
2550 832
2317 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 251.469 176.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2938 832
2938 2669
3171 2669
3171 832
2938 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2938 2669
3171 2669
2938 2669
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
3171 832
3404 832
3171 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
3171 832
3171 2686
3404 2686
3404 832
3171 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 336.574 176.5  ] concat
%I
[
( DFD-inf   )
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 245.216 176.5  ] concat
%I
[
( )
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 245.216 176.5  ] concat
%I
[
( )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3710 832
3710 3119
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 832
3710 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1213
3710 1213
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1594
3710 1594
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1975
3710 1975
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2356
3710 2356
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2737
3710 2737
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 3119
3710 3119
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
374 832
3404 832
2 MLine
End

End %I eop


end
showpage
%%EndDocument

 endTexFig
 161 2663 a FN(\(a\))i(Dense)g(Matrix)f(Multiply)229
b(\(b\))25 b(F)o(ast)f(Multipole)f(Method)223 b(\(c\))26
b(Decision)e(T)m(ree)h(Builder)0 3047 y(Figure)f(14:)29
b Fu(High)22 b(w)o(ater)h(mark)f(of)g(heap)h(memory)f(allocation)j
(\(in)e(MB\))e(on)h(8)g(processors)j(for)d(benchmarks)j(in)l(v)n
(olving)0 3160 y(dynamic)e(memory)g(allocation)i(\()p
Fr(K)j Fu(=)21 b(50,000)j(bytes)f(for)f(\223)-7 b(ADF\224)21
b(and)h(\223DFD\224\),)f(at)h(both)h(thread)h(granularities.)32
b(\223DFD-)0 3273 y(inf)5 b(\224)24 b(is)f(our)h(approximation)j(of)d
(w)o(ork)f(stealing)j(using)f Ft(DFDeques)7 b Fu(\()p
Fm(1)p Fu(\).)163 4334 y @beginspecial 50 @llx 50 @lly
302 @urx 226 @ury 936 @rhi @setspecial
%%BeginDocument: graphs/time.ps
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
840 351 M
1449 0 V
LTb
840 351 M
63 0 V
1386 0 R
-63 0 V
756 351 M
(0) Rshow
840 575 M
63 0 V
1386 0 R
-63 0 V
756 575 M
(1) Rshow
840 798 M
63 0 V
1386 0 R
-63 0 V
756 798 M
(2) Rshow
840 1022 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(3) Rshow
840 1246 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(4) Rshow
840 1469 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(5) Rshow
840 1693 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(6) Rshow
916 351 M
0 63 V
0 1279 R
0 -63 V
916 211 M
(1e+02) Cshow
1423 351 M
0 63 V
0 1279 R
0 -63 V
0 -1419 R
(1e+04) Cshow
1930 351 M
0 63 V
0 1279 R
0 -63 V
0 -1419 R
(1e+06) Cshow
840 351 M
1449 0 V
0 1342 V
-1449 0 V
840 351 L
392 1022 M
currentpoint gsave translate 90 rotate 0 0 M
(Time \(sec\)) Cshow
grestore
1564 -69 M
(K \(bytes\)) Cshow
LT0
840 1559 M
76 -15 V
77 -1 V
76 -11 V
76 0 V
76 17 V
77 -16 V
76 -185 V
76 -25 V
76 -55 V
77 -93 V
76 -3 V
76 -21 V
76 -7 V
77 -4 V
76 8 V
76 -16 V
76 1 V
77 6 V
76 -4 V
840 1559 D
916 1544 D
993 1543 D
1069 1532 D
1145 1532 D
1221 1549 D
1298 1533 D
1374 1348 D
1450 1323 D
1526 1268 D
1603 1175 D
1679 1172 D
1755 1151 D
1831 1144 D
1908 1140 D
1984 1148 D
2060 1132 D
2136 1133 D
2213 1139 D
2289 1135 D
stroke
grestore
end
showpage
%%EndDocument
 @endspecial 1216 w @beginspecial 50 @llx 50 @lly 302
@urx 226 @ury 936 @rhi @setspecial
%%BeginDocument: graphs/mem.ps
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
840 351 M
1449 0 V
LTb
840 351 M
63 0 V
1386 0 R
-63 0 V
756 351 M
(0) Rshow
840 678 M
63 0 V
1386 0 R
-63 0 V
756 678 M
(20) Rshow
840 1006 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(40) Rshow
840 1333 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(60) Rshow
840 1660 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(80) Rshow
916 351 M
0 63 V
0 1279 R
0 -63 V
916 211 M
(1e+02) Cshow
1423 351 M
0 63 V
0 1279 R
0 -63 V
0 -1419 R
(1e+04) Cshow
1930 351 M
0 63 V
0 1279 R
0 -63 V
0 -1419 R
(1e+06) Cshow
840 351 M
1449 0 V
0 1342 V
-1449 0 V
840 351 L
308 1022 M
currentpoint gsave translate 90 rotate 0 0 M
(Memory \(MB\)) Cshow
grestore
1564 -69 M
(K \(bytes\)) Cshow
LT0
LT1
840 1070 M
76 121 V
77 70 V
76 35 V
76 -37 V
76 -8 V
77 15 V
76 -23 V
76 -36 V
76 20 V
77 151 V
76 96 V
76 -18 V
76 -10 V
77 20 V
76 25 V
76 57 V
76 40 V
77 24 V
76 9 V
840 1070 D
916 1191 D
993 1261 D
1069 1296 D
1145 1259 D
1221 1251 D
1298 1266 D
1374 1243 D
1450 1207 D
1526 1227 D
1603 1378 D
1679 1474 D
1755 1456 D
1831 1446 D
1908 1466 D
1984 1491 D
2060 1548 D
2136 1588 D
2213 1612 D
2289 1621 D
stroke
grestore
end
showpage
%%EndDocument
 @endspecial 1217 w @beginspecial 50 @llx 50 @lly 302
@urx 226 @ury 936 @rhi @setspecial
%%BeginDocument: graphs/gran.ps
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
840 351 M
1449 0 V
LTb
840 351 M
63 0 V
1386 0 R
-63 0 V
756 351 M
(0) Rshow
840 656 M
63 0 V
1386 0 R
-63 0 V
756 656 M
(5) Rshow
840 961 M
63 0 V
1386 0 R
-63 0 V
756 961 M
(10) Rshow
840 1266 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(15) Rshow
840 1571 M
63 0 V
1386 0 R
-63 0 V
-1470 0 R
(20) Rshow
916 351 M
0 63 V
0 1279 R
0 -63 V
916 211 M
(1e+02) Cshow
1423 351 M
0 63 V
0 1279 R
0 -63 V
0 -1419 R
(1e+04) Cshow
1930 351 M
0 63 V
0 1279 R
0 -63 V
0 -1419 R
(1e+06) Cshow
840 351 M
1449 0 V
0 1342 V
-1449 0 V
840 351 L
308 1022 M
currentpoint gsave translate 90 rotate 0 0 M
(Sched. granularity) Cshow
grestore
1564 -69 M
(K \(bytes\)) Cshow
LT0
LT2
840 706 M
76 5 V
77 2 V
76 1 V
76 1 V
76 0 V
77 0 V
76 -79 V
76 -1 V
76 -5 V
77 506 V
76 -5 V
76 280 V
76 60 V
77 6 V
76 3 V
76 -4 V
76 71 V
77 8 V
76 7 V
840 706 D
916 711 D
993 713 D
1069 714 D
1145 715 D
1221 715 D
1298 715 D
1374 636 D
1450 635 D
1526 630 D
1603 1136 D
1679 1131 D
1755 1411 D
1831 1471 D
1908 1477 D
1984 1480 D
2060 1476 D
2136 1547 D
2213 1555 D
2289 1562 D
stroke
grestore
end
showpage
%%EndDocument
 @endspecial 381 4525 a FN(\(a\))25 b(Running)f(time)411
b(\(b\))25 b(Memory)f(Allocation)240 b(\(c\))25 b(Scheduling)f
(granularity)0 4909 y(Figure)d(15:)54 b Fu(T)m(rade-of)n(f)20
b(between)h(running)h(time,)d(memory)h(allocation)i(and)e(scheduling)j
(granularity)g(using)d(algorithm)0 5022 y Ft(DFDeques)38
b Fu(as)30 b(the)h(memory)g(threshold)j Fr(K)i Fu(is)31
b(v)n(aried,)i(for)e(the)h(dense)g(matrix)f(multiply)h(benchmark)h(at)d
(\002ne)h(thread)0 5135 y(granularity)-6 b(.)1900 5589
y FN(32)p eop
%%Page: 33 36
33 35 bop 595 0 a
 9415694 6630772 3289088 3289088 22234234 16577003 startTexFig
 595 0 a
%%BeginDocument: graphs/g_4.ps
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
840 351 M
1809 0 V
LTb
840 351 M
63 0 V
1746 0 R
-63 0 V
756 351 M
(0) Rshow
840 617 M
63 0 V
1746 0 R
-63 0 V
756 617 M
(0.02) Rshow
840 882 M
63 0 V
1746 0 R
-63 0 V
756 882 M
(0.04) Rshow
840 1148 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(0.06) Rshow
840 1414 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(0.08) Rshow
840 1679 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(0.1) Rshow
840 1945 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(0.12) Rshow
839 351 M
0 63 V
0 1531 R
0 -63 V
839 211 M
(0) Cshow
1272 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(40) Cshow
1704 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(80) Cshow
2137 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(120) Cshow
2569 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(160) Cshow
840 351 M
1809 0 V
0 1594 V
-1809 0 V
840 351 L
140 1148 M
currentpoint gsave translate 90 rotate 0 0 M
(Scheduling Granularity) Cshow
grestore
1744 71 M
(Memory Threshold K  \(KB\)) Cshow
LT0
2137 1015 M
(WS) Rshow
2221 1015 M
252 0 V
840 1793 M
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
LT1
2137 875 M
(DFD) Rshow
2221 875 M
252 0 V
840 463 M
969 764 L
129 195 V
130 178 V
129 150 V
129 99 V
129 -21 V
129 0 V
130 0 V
129 188 V
129 -10 V
129 211 V
130 0 V
129 0 V
129 0 V
2305 875 D
840 463 D
969 764 D
1098 959 D
1228 1137 D
1357 1287 D
1486 1386 D
1615 1365 D
1744 1365 D
1874 1365 D
2003 1553 D
2132 1543 D
2261 1754 D
2391 1754 D
2520 1754 D
2649 1754 D
LT2
2137 735 M
(ADF) Rshow
2221 735 M
252 0 V
840 399 M
129 99 V
129 6 V
130 15 V
129 1 V
129 11 V
129 -2 V
129 6 V
130 -3 V
129 6 V
129 5 V
129 7 V
130 30 V
129 -15 V
129 0 V
2305 735 A
840 399 A
969 498 A
1098 504 A
1228 519 A
1357 520 A
1486 531 A
1615 529 A
1744 535 A
1874 532 A
2003 538 A
2132 543 A
2261 550 A
2391 580 A
2520 565 A
2649 565 A
stroke
grestore
end
showpage
%%EndDocument

 endTexFig
 2112 0 a
 9415694 6630772 3289088 3289088 22234234 16577003 startTexFig
 2112 0 a
%%BeginDocument: graphs/m_4.ps
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
LTb
840 397 M
63 0 V
1746 0 R
-63 0 V
756 397 M
(400) Rshow
840 761 M
63 0 V
1746 0 R
-63 0 V
756 761 M
(800) Rshow
840 1125 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(1200) Rshow
840 1490 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(1600) Rshow
840 1854 M
63 0 V
1746 0 R
-63 0 V
-1830 0 R
(2000) Rshow
839 351 M
0 63 V
0 1531 R
0 -63 V
839 211 M
(0) Cshow
1272 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(40) Cshow
1704 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(80) Cshow
2137 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(120) Cshow
2569 351 M
0 63 V
0 1531 R
0 -63 V
0 -1671 R
(160) Cshow
840 351 M
1809 0 V
0 1594 V
-1809 0 V
840 351 L
140 1148 M
currentpoint gsave translate 90 rotate 0 0 M
(Memory \(KB\)) Cshow
grestore
1744 71 M
(Memory Threshold \(KB\)) Cshow
LT0
2191 1490 M
(WS) Rshow
2275 1490 M
252 0 V
840 1759 M
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
18 0 V
18 0 V
19 0 V
18 0 V
LT1
2191 1350 M
(DFD) Rshow
2275 1350 M
252 0 V
840 729 M
129 352 V
129 170 V
130 34 V
129 153 V
129 124 V
129 -14 V
129 0 V
130 0 V
129 118 V
129 3 V
129 112 V
130 0 V
129 0 V
129 0 V
2359 1350 D
840 729 D
969 1081 D
1098 1251 D
1228 1285 D
1357 1438 D
1486 1562 D
1615 1548 D
1744 1548 D
1874 1548 D
2003 1666 D
2132 1669 D
2261 1781 D
2391 1781 D
2520 1781 D
2649 1781 D
LT2
2191 1210 M
(ADF) Rshow
2275 1210 M
252 0 V
840 511 M
969 655 L
129 -30 V
130 31 V
129 162 V
1486 692 L
129 1 V
129 59 V
130 -30 V
129 10 V
129 53 V
129 182 V
130 115 V
129 -23 V
129 0 V
2359 1210 A
840 511 A
969 655 A
1098 625 A
1228 656 A
1357 818 A
1486 692 A
1615 693 A
1744 752 A
1874 722 A
2003 732 A
2132 785 A
2261 967 A
2391 1082 A
2520 1059 A
2649 1059 A
stroke
grestore
end
showpage
%%EndDocument

 endTexFig
 669 984 a FN(\(a\))25 b(Scheduling)f(granularity)751
b(\(b\))25 b(Memory)0 1205 y(Figure)j(16:)36 b Fu(Simulation)27
b(results)h(for)e(a)g(di)n(vide-and-conquer)31 b(benchmark)e(with)d(15)
g(le)n(v)o(els)g(of)g(recursion)j(running)f(on)0 1318
y(64)i(processors.)51 b(The)29 b(memory)h(requirement)i(and)f(thread)g
(granularity)i(decrease)f(geometrically)h(\(by)d(a)f(f)o(actor)i(of)f
(2\))0 1431 y(do)n(wn)22 b(the)g(recursion)i(tree.)29
b(Scheduling)24 b(granularity)h(is)c(sho)n(wn)h(as)g(a)f(percentage)k
(of)d(the)g(total)h(w)o(ork)f(in)f(the)h(dag.)29 b(\223WS\224)0
1544 y(is)21 b(the)g(space-ef)n(\002cient)j(w)o(ork-stealing)h
(scheduler)l(,)f(\223)-7 b(ADF\224)19 b(is)i(the)h(space-ef)n
(\002cient)i(depth-\002rst)f(scheduler)l(,)h(and)d(\223DFD\224)0
1657 y(is)i(our)h(ne)n(w)f Ft(DFDeques)31 b Fu(scheduler)-5
b(.)0 1942 y FN(this)24 b(benchmark)g(at)h(the)g(\002ne)g(thread)g
(granularity)-6 b(.)30 b(As)24 b(e)o(xpected,)h(both)f(memory)g(and)g
(scheduling)g(granular)n(-)0 2062 y(ity)g(increase)h(with)f
FI(K)7 b FN(,)25 b(while)g(running)f(time)g(reduces)h(as)g
FI(K)32 b FN(is)24 b(increased.)0 2402 y FJ(6)143 b(Simulating)34
b(the)h(schedulers)0 2625 y FN(T)-8 b(o)33 b(compare)f(algorithm)g
FL(DFDeques)40 b FN(with)32 b(a)h(w)o(ork-stealing)f(scheduler)l(,)j
(we)e(b)n(uilt)e(a)i(simple)f(system)g(that)0 2746 y(simulates)h(the)i
(parallel)g(e)o(x)o(ecution)e(of)i(synthetic,)i(nested-parallel,)f(di)n
(vide-and-conquer)e(benchmarks)3805 2710 y FC(18)3875
2746 y FN(.)0 2866 y(Our)i(implementation)d(simulates)i(the)g(e)o(x)o
(ecution)g(of)g(the)h(space-ef)n(\002cient)h(w)o(ork-stealing)d
(scheduler)i([13])0 2987 y(\(labeled)22 b(\223WS\224\),)h(the)e
(space-ef)n(\002cient,)i(asynchronous)e(depth-\002rst)g(scheduler)h
([41])g(\(\223)-8 b(ADF\224\),)23 b(and)f(our)g(ne)n(w)0
3107 y FL(DFDeques)33 b FN(scheduler)24 b(\(labeled)h(\223DFD\224\).)
146 3227 y(W)-8 b(e)40 b(present)f(results)f(for)h(one)g(of)g(the)g
(synthetic)f(benchmarks)g(here)2653 3191 y FC(19)2724
3227 y FN(,)43 b(in)38 b(which)h(both)f(the)h(memory)0
3348 y(requirement)25 b(and)g(the)h(thread)f(granularity)g(decrease)i
(geometrically)d(do)n(wn)g(the)i(recursion)f(tree.)33
b(A)26 b(number)0 3468 y(of)h(di)n(vide-and-conquer)e(programs)h(e)o
(xhibit)f(such)i(properties.)36 b(Scheduling)26 b(granularity)g(w)o(as)
g(measured)h(as)0 3588 y(the)36 b(a)n(v)o(erage)g(number)f(of)h
(actions)f(e)o(x)o(ecuted)g(by)g(a)h(processor)g(between)f(tw)o(o)h
(steals.)126 b(Figure)36 b(16)f(sho)n(ws)0 3709 y(that)g(w)o(ork)g
(stealing)f(results)g(in)h(high)g(scheduling)f(granularity)g(and)h
(high)g(space)g(requirement,)j(the)d(depth)0 3829 y(\002rst)26
b(scheduler)h(results)e(in)h(lo)n(w)f(scheduling)g(granularity)h(and)g
(lo)n(w)g(space)g(requirement,)53 b(while)26 b FL(DFDeques)0
3950 y FN(allo)n(ws)18 b(scheduling)f(granularity)h(to)h(be)g(traded)g
(with)f(space)h(requirement)g(by)g(v)n(arying)e(the)i(memory)f
(threshold)0 4070 y FI(K)7 b FN(.)0 4410 y FJ(7)143 b(Summary)34
b(and)h(Discussion)0 4633 y FN(Depth-\002rst)i(schedulers)h(are)g
(space-ef)n(\002cient,)j(b)n(ut)c(unlik)o(e)g(w)o(ork-stealing)f
(schedulers,)41 b(the)o(y)36 b(require)i(the)0 4753 y(user)27
b(to)g(e)o(xplicitly)f(increase)h(the)h(thread)f(granularity)f(be)o
(yond)h(what)g(is)g(required)g(to)g(amortize)g(basic)g(thread)p
0 4843 1560 4 v 87 4904 a FB(18)149 4934 y Fz(T)-7 b(o)28
b(model)e(irre)o(gular)f(applications,)j(the)f(space)g(and)f(time)h
(requirements)f(of)g(a)i(thread)e(at)i(each)e(le)n(v)o(el)h(of)g(the)g
(recursion)f(are)0 5034 y(selected)20 b(uniformly)e(at)j(random)d(with)
i(the)h(speci\002ed)f(mean.)87 5104 y FB(19)149 5134
y Fz(Results)28 b(for)e(other)g(benchmarks)e(and)i(a)i(detailed)e
(description)f(of)h(the)h(simulator)f(can)g(be)h(found)e(in)h(the)h
(author')-5 b(s)26 b(disserta-)0 5233 y(tion)20 b([40)o(].)1900
5589 y FN(33)p eop
%%Page: 34 37
34 36 bop 0 361 a @beginspecial 79 @llx 318 @lly 598
@urx 353 @ury 115 @rhi @setspecial
%%BeginDocument: graphs/bar_charts/blank2.ps
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
793 3262
793 3502
1101 3502
1101 3262
793 3262
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-36-*
/Helvetica-Bold 36 SetF
%I t
[ 1 0 0 1 152.875 553.25  ] concat
%I
[
( Medium-Grain)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
3955 3262
3955 3502
4262 3502
4262 3262
3955 3262
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-36-*
/Helvetica-Bold 36 SetF
%I t
[ 1 0 0 1 548.125 553.25  ] concat
%I
[
( Fine-Grain)
] Text
End

End %I eop


end
showpage
%%EndDocument
 @endspecial 1361 938 a @beginspecial 35 @llx 125 @lly
401 @urx 386 @ury 1008 @rhi @setspecial
%%BeginDocument: graphs/bar_charts/bhtree.epsi
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c70
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003870
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c70
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c78
% 000000000000000000000000000000000000000000000000000000000000000000000000000000001fff00003838
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003838
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003c78
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100001ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000fc0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000001fff00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000001000007c0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100001ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003c70
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003c00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003bc0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003fe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003c78
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003838
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003838
% 000000000000000000000000000000000000000000000000000000000000000000000000000000001fff00003838
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100003c78
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100001ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000fe0
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000001000007c0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000001fff00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
% 0000000000000000000000000003fffffc0000000000000000000000000000000000000000000000000100000000
% 0000000000000000000000000003fffffc0000000000000000000000000000000000000000000000000100000000
% 0000000000000000000003ffffff777774000000000000001ffffff00000000000000000000000000001000001e0
% 0000000000000000000002000003fffffc000000000ffffffffffff00000000000000000000000000001000003e0
% 0000000000000000000003555557555554000000000d5555555555500000000000000000000000000001000003e0
% 0000000000000000000002000003fffffc000000000800001ffffff00000000000000000000000000001000007e0
% 0000000000000000000003151517575754000000000d1515175757500000000000000000000000000001000006e0
% 0000000000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000ee0
% 0000000000000000000003555557555554000000000d555555555550000000000000000000000000000100001ce0
% 7fffff8000000000000002000003fffffc000000000800001ffffff00000000000000000000000000001000018e0
% 511111800000000000000311111377777400000000091111177777700000000000000000000000000001000038e0
% 4000008000000000000002000003fffffc000000000800001ffffff00000000000000000000000000001000030e0
% 5555558000000000000003555557555554000000000d5555555555500000000000000000000000001fff00007ff8
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100007ff8
% 55111580000000000000031115137757740000000009151117577750000000000000000000000000000100007ff8
% 4000008000000000000002000003fffffc000000000800001ffffff00000000000000000000000000001000000e0
% 5555558000000000000003555557555554000000000d5555555555500000000000000000000000000001000000e0
% 4000008000000000000002000003fffffc000000000800001ffffff00000000000000000000000000001000000e0
% 51111180000000000000031111137777740000000009111117777770000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5515158000000000000003151517575754000000000d151517575750000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 51111180000000000000031111137777740000000009111117777770000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 55111580000000000000031115137757740000000009151117577750000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 51111180000000000000031111137777740000000009111117777770000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff00000000000000000000000001fff00000000
% 5515158000000000000003151517575754000000000d151517575750000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 51111180000000000000031111137777740000000009111117777770000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 55111580000000000000031115137757740000000009151117577750000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000000000000000000000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000000000000000000000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000007fffffffffff8000000100000000
% 51111180000000000000031111137777740000000009111117777770000000005111117777778000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100000fc0
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100001fe0
% 5515158000000000000003151517575754000000000d151517575750000000005515155757578000000100001ff0
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003cf0
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100003870
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003870
% 51111180000000000000031111137777740000000009111117777770000000005111117777778000000100000070
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff80000001000000f0
% 5555558000000000000003555557555554000000000d5555555555500000000055555555555580000001000001e0
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff80000001000007c0
% 551115800000000000000311151377577400000000091511175777500000000055111557775780001fff00000f80
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100001e00
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100003c00
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003ff0
% 51111180000000000000031111137777740000000009111117777770000000005111117777778000000100003ff0
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100007ff0
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5515158000000000000003151517575754000000000d151517575750000000005515155757578000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 51111180000000000000031111137777740000000009111117777770000000005111117777778000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 55111580000000000000031115137757740000000009151117577750000000005511155777578000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 51111180000000000000031111137777740000000009111117777770000000005111117777778000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5555558000000000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5515158000000000000003151517575754000000000d151517575750000000005515155757578000000100000000
% 4000008000000000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 5555558000000000000003555557555554000000000d5555555555500000000055555555555580001fff00000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 511111f7777780000000031111137777740000000009111117777770000000005111117777778000000100000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 555555d555558000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 551115d7775780000000031115137757740000000009151117577750000000005511155777578000000100000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 555555d555558000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 511111f7777780000000031111137777740000000009111117777770000000005111117777778000000100000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 555555d555558000000003555557555554000000000d555555555550000000005555555555558000000100000000
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000000
% 551515d757578000000003151517575754000000000d1515175757500000000055151557575780000001000007c0
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100000fe0
% 555555d555558000000003555557555554000000000d555555555550000000005555555555558000000100001ff0
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003c70
% 511111f7777780000000031111137777740000000009111117777770000000005111117777778000000100003c78
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003838
% 555555d555558000000003555557555554000000000d555555555550000000005555555555558000000100003838
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003838
% 551115d7775780000000031115137757740000000009151117577750000000005511155777578000000100003838
% 400000ffffff8000000002000003fffffc000000000800001ffffff0000000004000007fffff8000000100003838
% 555555d555558000000003555557555554000000000d555555555550000000005555555555558000000100003838
% 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80001fff00003838
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c78
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fe0
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% ffe38ffe07f000000000000f00ffc0ffe00000000007fe03ff9ff8000000000000fe078e38000000000000000000
% ffe38ffe0ffc00000000001f80ffe0ffe00000000007ff03ff9ffc000000000001ff078e38000000000000000000
% ffe38ffe1ffe00000000001f80fff0ffe00000000007ff83ff9ffe000000000003ff830e38000000000000000000
% e0038e003c3e00000000001f80e0f0e00000000000070783801c1e00000000000787c00e38000000000000000000
% e0038e00780f00000000003fc0e078e000000000000703c3801c0f00000000000f01c38e38f00000000000000000
% e0038e00780f00000000003dc0e038e000000000000701c3801c0700000000000f00038e39e00000000000000000
% ffc38ffc7007000000000039e0e038ffc0000000000701c3ff1c0700000000000e00038e39c00000000000000000
% ffc38ffc7007000000000079e0e038ffc0000000000701c3ff1c0700000000000e00038e3b800000000000000000
% ffc38ffc7007000000000079e0e038ffc0000000000701c3ff1c0700000000000e00038e3f800000000000000000
% e0038e007007000000000070f0e038e000000000000701c3801c0700000000000e00038e3f800000000000000000
% e0038e00780f0000000000fff0e078e000000000000703c3801c0f00000000000f01c38e3f800000000000000000
% e0038e00780f0000000000fff0e078e000000000000703c3801c0f00000000000f03c38e3fc00000000000000000
% e0038e003e1e0000000000fff8e0f0e00000000000070783801c1e000000000007c7c38e39e00000000000000000
% e0038e001ffc0000000001e078fff0e0000000000007ff83801ffe000000000003ff838e39e00000000000000000
% e0038e000ff80000000001e078ffe0e0000000000007ff03801ffc000000000003ff038e38f00000000000000000
% e0038e0007f00000000003c03cffc0e0000000000007fe03801ff8000000000000fe038e38f00000000000000000
save
countdictstack
mark
newpath
/showpage {} def
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def

%I Idraw 7

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def
%
%
%
%                              TYPE `plot2ps -help' FOR MORE INFORMATION.
%
%

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 230  ] concat
%I
[
( 0)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 292.875  ] concat
%I
[
( 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 355.875  ] concat
%I
[
( 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 418.875  ] concat
%I
[
( 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 479 481.875  ] concat
%I
[
( 8)
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
374 832
374 1866
607 1866
607 832
374 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
374 1866
607 1866
374 1866
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
607 832
840 832
607 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
607 832
607 1073
840 1073
840 832
607 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 34.722 176.5  ] concat
%I
[
( FIFO   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1229 832
1229 1938
1462 1938
1462 832
1229 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1229 1938
1462 1938
1229 1938
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
1462 832
1695 832
1462 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
1462 832
1462 1955
1695 1955
1695 832
1462 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 144.594 176.5  ] concat
%I
[
( ADF   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2084 832
2084 1933
2317 1933
2317 832
2084 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2084 1933
2317 1933
2084 1933
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2317 832
2550 832
2317 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2317 832
2317 1940
2550 1940
2550 832
2317 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 251.469 176.5  ] concat
%I
[
( DFD   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
2938 832
2938 1471
3171 1471
3171 832
2938 832
5 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
2938 1471
3171 1471
2938 1471
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.799997 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 3
3171 832
3404 832
3171 832
3 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 5
3171 832
3171 1474
3404 1474
3404 832
3171 832
5 MLine
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *helvetica-bold-r*-28-*
/Helvetica-Bold 28 SetF
%I t
[ 1 0 0 1 361.438 176.5  ] concat
%I
[
( Cilk   )
] Text
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3710 832
3710 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 832
3710 832
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1083
3710 1083
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1336
3710 1336
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1588
3710 1588
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 1840
3710 1840
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2091
3710 2091
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2343
3710 2343
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2595
3710 2595
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
3593 2847
3710 2847
2 MLine
End

Begin %I MLine
%I b 65535
0 0 0 [  ] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.199988 SetP
%I t
[ 0.125 0 0 0.125 0 112 ] concat
%I 2
374 832
3404 832
2 MLine
End

End %I eop


end
showpage
cleartomark
countdictstack exch sub { end } repeat
restore
%%EndDocument
 @endspecial 0 1127 a FN(Figure)36 b(17:)51 b Fu(Speedups)35
b(for)f(the)f(tree-b)n(uilding)k(phase)e(of)e(Barnes)h(Hut)f(\(for)g
(1M)g(particles\).)60 b(The)33 b(phase)i(in)l(v)n(olv)o(es)0
1240 y(e)o(xtensi)n(v)o(e)30 b(use)g(of)e(locks)i(on)f(cells)h(of)f
(the)g(tree)g(to)g(ensure)i(mutual)e(e)o(xclusion.)47
b(The)29 b(Pthreads-based)j(schedulers)g(\(all)0 1353
y(e)o(xcept)22 b(Cilk\))g(support)h(blocking)h(locks.)29
b(\223DFD\224)20 b(does)i(not)g(result)g(in)g(a)f(lar)n(ge)h
(scheduling)j(granularity)f(due)e(to)f(frequent)0 1466
y(suspension)30 b(of)d(the)f(threads)j(on)e(locks;)i(therefore,)h(its)d
(performance)i(is)d(similar)i(to)f(that)g(of)f(\223)-7
b(ADF\224.)25 b(Cilk)i([26)q(])f(uses)i(a)0 1579 y(pure)d(w)o(ork)f
(stealer)i(and)f(supports)h(spin)f(w)o(aiting)h(locks.)32
b(F)o(or)23 b(this)i(benchmark,)h(the)f(single-processor)k(e)o(x)o
(ecution)d(time)0 1692 y(on)e(Cilk)f(is)g(comparable)j(with)e(that)g
(on)f(the)h(Pthreads-based)j(system.)0 1917 y FN(costs.)74
b(In)39 b(contrast,)k(algorithm)38 b FL(DFDeques)47 b
FN(automatically)38 b(increases)h(the)h(scheduling)e(granularity)g(by)0
2037 y(e)o(x)o(ecuting)26 b(neighboring,)i(\002ne-grained)g(threads)g
(on)g(the)g(same)g(processor)g(to)f(yield)h(good)f(locality)g(and)h(lo)
n(w)0 2158 y(scheduling)d(contention.)32 b(In)26 b(theory)-6
b(,)25 b(for)h(nested-parallel)g(programs)f(with)g(a)h(lar)n(ge)h
(amount)d(of)i(parallelism,)0 2278 y(algorithm)h FL(DFDeques)36
b FN(has)29 b(a)f(lo)n(wer)g(space)h(bound)f(than)g(w)o(ork-stealing)f
(schedulers.)41 b(W)-8 b(e)29 b(sho)n(wed)f(that)f(in)0
2399 y(practice,)21 b(it)f(requires)g(more)g(memory)f(than)g(a)i
(depth-\002rst)e(scheduler)l(,)i(and)f(less)g(memory)f(than)g(w)o(ork)h
(stealing.)0 2519 y FL(DFDeques)27 b FN(also)18 b(allo)n(ws)g(the)h
(user)g(to)g(control)f(the)h(trade-of)n(f)g(between)g(space)g
(requirement)g(and)g(running)f(time)0 2639 y(\(or)33
b(scheduling)e(granularity\).)53 b(Because)34 b(algorithm)d
FL(DFDeques)40 b FN(allo)n(ws)32 b(more)g(deques)g(than)h(processors,)0
2760 y(it)h(can)g(be)g(easily)g(e)o(xtended)f(to)h(support)f(blocking)f
(synchronizations.)57 b(F)o(or)34 b(e)o(xample,)h(e)o(xperiments)e
(with)0 2880 y(a)i(benchmark)g(that)f(mak)o(es)h(a)g(signi\002cant)f
(use)h(of)g(locks)f(indicate)h(that)f FL(DFDeques)43
b FN(with)34 b(blocking)g(locks)0 3000 y(results)24 b(in)g(better)h
(performance)h(than)e(a)h(w)o(ork)g(stealer)g(that)f(uses)g(spin-w)o
(aiting)g(locks)g(\(see)h(Figure)g(17\).)146 3121 y(Since)34
b(Pthreads)g(are)g(not)e(v)o(ery)h(lightweight,)g(serializing)g(access)
h(to)f(the)g(set)g(of)g(ready)h(threads)f FF(R)h FN(did)0
3241 y(not)c(signi\002cantly)g(af)n(fect)h(the)f(performance)h(in)g
(our)f(implementation.)46 b(Ho)n(we)n(v)o(er)l(,)31 b(serial)g(access)g
(to)f FF(R)i FN(can)0 3362 y(become)27 b(a)f(bottleneck)g(if)h(threads)
f(are)h(e)o(xtremely)f(\002ne)h(grained,)g(and)g(require)f(frequent)h
(suspension)e(due)h(to)0 3482 y(memory)j(allocation)g(or)h
(synchronization.)45 b(T)-8 b(o)30 b(support)f(such)h(threads,)h(the)f
(scheduling)f(operations)g(\(such)0 3602 y(as)c(updates)f(to)h
FF(R)p FN(\))g(need)g(to)g(be)f(parallelized)h([40].)146
3723 y(Each)33 b(processor)f(in)g FL(DFDeques)40 b FN(treats)33
b(its)e(deque)i(as)f(a)h(re)o(gular)f(stack.)54 b(Therefore,)35
b(in)d(a)g(system)g(that)0 3843 y(supports)k(v)o(ery)g(lightweight)f
(threads,)40 b(the)d(algorithm)e(should)h(bene\002t)h(from)g
(stack-based)g(optimizations)0 3963 y(such)26 b(as)g(lazy)g(thread)g
(creation)g([27,)g(38];)g(these)g(methods)f(a)n(v)n(oid)h(allocating)f
(resources)h(for)g(a)h(thread)f(unless)0 4084 y(it)e(is)h(stolen,)e
(thereby)i(making)f(most)g(thread)g(creations)h(nearly)g(as)g(cheap)g
(as)g(function)f(calls.)146 4204 y(Increasing)19 b(scheduling)f
(granularity)g(typically)g(serv)o(es)g(to)g(enhance)i(data)f(locality)e
(on)i(SMPs)g(with)f(limited-)0 4325 y(size,)26 b(hardw)o(are-coherent)g
(caches.)33 b(Ho)n(we)n(v)o(er)l(,)25 b(on)g(distrib)n(uted)f(memory)g
(machines)h(\(or)h(softw)o(are-coherent)0 4445 y(clusters\),)g(e)o(x)o
(ecuting)e(threads)i(where)g(the)g(data)f(permanently)g(resides)h
(becomes)g(important.)32 b(A)26 b(multi-le)n(v)o(el)0
4565 y(scheduling)f(strate)o(gy)g(may)h(allo)n(w)g(the)g(thread)g
(implementation)e(to)i(scale)h(to)f(clusters)f(of)i(SMPs.)35
b(F)o(or)27 b(e)o(xam-)0 4686 y(ple,)k(the)f FL(DFDeques)38
b FN(algorithm)28 b(could)i(be)g(deplo)o(yed)g(within)e(a)j(single)e
(SMP)-11 b(,)30 b(while)g(some)f(scheme)h(based)0 4806
y(on)25 b(data)f(af)n(\002nity)h(is)f(used)h(across)f(SMPs.)146
4927 y(An)k(open)g(question)f(is)g(ho)n(w)h(to)f(automatically)g
(\002nd)h(the)g(appropriate)g(v)n(alue)f(of)h(the)g(memory)f(threshold)
0 5047 y FI(K)7 b FN(,)23 b(which)e(may)g(depend)h(on)f(the)h
(benchmark,)g(and)g(on)f(the)h(thread)f(implementation.)28
b(One)21 b(possible)g(solution)0 5167 y(is)27 b(for)i(the)e(user)h
(\(or)g(the)g(runtime)f(system\))g(to)g(set)h FI(K)35
b FN(to)27 b(an)h(appropriate)g(v)n(alue)f(after)i(running)e(the)g
(program)0 5288 y(for)g(a)g(range)g(of)g(v)n(alues)e(of)i
FI(K)34 b FN(on)26 b(smaller)g(input)g(sizes.)36 b(Alternati)n(v)o(ely)
-6 b(,)24 b(it)i(may)h(be)g(possible)e(for)i(the)f(system)1900
5589 y(34)p eop
%%Page: 35 38
35 37 bop 0 100 a FN(to)24 b(k)o(eep)h(statistics)f(to)g(dynamically)f
(adjust)h FI(K)32 b FN(to)25 b(an)g(appropriate)f(v)n(alue)h(during)f
(the)g(e)o(x)o(ecution.)0 439 y FJ(Ackno)o(wledgements)0
662 y FN(This)31 b(research)j(w)o(as)e(conducted)f(while)h(the)g
(author)g(w)o(as)g(at)g(Carne)o(gie)h(Mellon)e(Uni)n(v)o(ersity)-6
b(,)31 b(and)h(w)o(as)g(sup-)0 782 y(ported)38 b(by)g(ARP)-9
b(A)39 b(Contract)f(No.)71 b(D)l(ABT63-96-C-0071.)f(Guy)38
b(Blelloch,)j(Robert)e(Blumofe,)i(Bw)o(olen)0 903 y(Y)-10
b(ang,)27 b(and)f(the)g(anon)o(ymous)f(referees)i(pro)o(vided)e(v)n
(aluable)h(feedback)h(on)f(pre)n(vious)f(v)o(ersions)g(of)i(this)e
(paper)-5 b(.)0 1023 y(W)d(e)25 b(also)g(thank)f(Adam)g(Kalai)h(and)g
(A)-7 b(vrim)23 b(Blum)i(for)g(useful)f(discussions.)0
1348 y FJ(Refer)m(ences)45 1555 y Fu([1])50 b(A.)23 b(Aggarw)o(al,)i
(B.)d(Alpern,)j(A.)e(Chandra,)i(and)g(M.)e(Snir)-5 b(.)36
b(A)23 b(model)h(for)h(hierarchical)j(memory)-6 b(.)35
b(In)25 b Fk(Pr)l(oceedings)200 1668 y(of)30 b(the)f(19th)i(Annual)f(A)
m(CM)e(Symposium)j(on)e(Theory)h(of)g(Computing)p Fu(,)i(pages)f
(305\226314,)i(Ne)n(w)28 b(Y)-10 b(ork)29 b(City)-6 b(,)31
b(NY)-12 b(,)200 1781 y(May)24 b(1987.)45 1968 y([2])50
b(T)-7 b(.)18 b(E.)f(Anderson,)k(E.)c(D.)h(Lazo)n(wska,)i(and)f(H.)e
(M.)h(Le)n(vy)-6 b(.)22 b(The)d(performance)i(implications)h(of)c
(thread)i(management)200 2081 y(alternati)n(v)o(es)39
b(for)e(shared-memory)h(multiprocessors.)78 b Fk(P)-7
b(erformance)38 b(Evaluation)g(Re)o(vie)o(w)p Fu(,)h(17:49\22660,)i
(May)200 2194 y(1989.)45 2380 y([3])50 b(N.)21 b(S.)g(Arora,)i(R.)e(D.)
g(Blumofe,)i(and)g(C.)e(G.)g(Plaxton.)33 b(Thread)23
b(scheduling)i(for)e(multiprogrammed)i(multiproces-)200
2493 y(sors.)34 b(In)24 b Fk(A)m(CM)d(symp.)j(P)-7 b(ar)o(allel)24
b(Algorithms)h(and)f(Ar)m(c)o(hitectur)m(es)p Fu(,)h(1998.)45
2680 y([4])50 b(H.)31 b(Bao,)i(J.)e(Bielak,)k(O.)30 b(Ghattas,)35
b(L.)30 b(F)-7 b(.)31 b(Kalli)n(v)n(okas,)k(D.)c(R.)f(O'Hallaron,)35
b(J.)d(R.)e(She)n(wchuk,)k(and)f(Jifeng)g(Xu.)200 2792
y(Lar)n(ge-scale)28 b(Simulation)f(of)e(Elastic)h(Wa)n(v)o(e)f
(Propagation)i(in)e(Heterogeneous)k(Media)d(on)f(Parallel)h(Computers.)
200 2905 y Fk(Computer)f(Methods)f(in)g(Applied)g(Mec)o(hanics)i(and)e
(Engineering)p Fu(,)i(152\(1\2262\):85\226102,)i(January)e(1998.)45
3092 y([5])50 b(H.)25 b(Bao,)h(J.)g(Bielak,)h(O.)e(Ghattas,)j(D.)d(R.)f
(O'Hallaron,)k(L.)d(F)-7 b(.)25 b(Kalli)n(v)n(okas,)j(J.)e(R.)f(She)n
(wchuk,)i(and)g(J.)e(Xu.)42 b(Earth-)200 3205 y(quak)o(e)25
b(Ground)g(Motion)f(Modeling)h(on)f(P)o(arallel)g(Computers.)34
b(In)24 b Fk(Super)m(computing)j('96)p Fu(,)d(No)o(v)o(ember)g(1996.)45
3391 y([6])50 b(J.)23 b(E.)g(Barnes)i(and)f(P)-10 b(.)22
b(Hut.)35 b(A)22 b(hierarchical)28 b Fr(O)s Fi(\()p Fr(N)d
Fi(log)17 b Fr(N)10 b Fi(\))23 b Fu(force)i(calculation)i(algorithm.)36
b Fk(Natur)m(e)p Fu(,)25 b(324\(4\):446\226)200 3504
y(449,)f(December)g(1986.)45 3691 y([7])50 b(F)-7 b(.)19
b(Bellosa)i(and)f(M.)f(Steck)o(ermeier)-5 b(.)28 b(The)19
b(performance)k(implications)g(of)d(locality)i(information)g(usage)f
(in)f(shared-)200 3804 y(memory)k(multiprocessors.)37
b Fk(J)n(.)23 b(P)-7 b(ar)o(allel)24 b(and)g(Distrib)n(uted)i
(Computing)p Fu(,)e(37\(1\):113\226121,)k(August)d(1996.)45
3990 y([8])50 b(G.)30 b(Blelloch,)j(P)-10 b(.)29 b(Gibbons,)34
b(Y)-12 b(.)30 b(Matias,)j(and)e(G.)e(Narlikar)-5 b(.)58
b(Space-ef)n(\002cient)33 b(scheduling)h(of)c(parallelism)j(with)200
4103 y(synchronization)e(v)n(ariables.)44 b(In)27 b Fk(Pr)l(oc.)e(A)m
(CM)g(Symp.)h(on)g(P)-7 b(ar)o(allel)27 b(Algorithms)h(and)f(Ar)m(c)o
(hitectur)m(es)p Fu(,)h(pages)g(12\226)200 4216 y(23,)c(1997.)45
4402 y([9])50 b(G.)18 b(E.)f(Blelloch,)k(S.)c(Chatterjee,)k(J.)d(C.)g
(Hardwick,)i(J.)e(Sipelstein,)j(and)e(M.)f(Zagha.)23
b(Implementation)f(of)d(a)f(portable)200 4515 y(nested)25
b(data-parallel)i(language.)36 b Fk(J)n(.)22 b(P)-7 b(ar)o(allel)25
b(and)f(Distrib)n(uted)i(Computing)p Fu(,)e(21\(1\):4\22614,)j(April)c
(1994.)0 4702 y([10])50 b(G.)27 b(E.)g(Blelloch,)j(P)-10
b(.)27 b(B.)g(Gibbons,)j(and)f(Y)-12 b(.)27 b(Matias.)49
b(Pro)o(v)n(ably)29 b(ef)n(\002cient)g(scheduling)j(for)c(languages)j
(with)d(\002ne-)200 4815 y(grained)k(parallelism.)58
b(In)30 b Fk(Pr)l(oc.)g(A)m(CM)f(symp.)h(P)-7 b(ar)o(allel)30
b(Algorithms)i(and)f(Ar)m(c)o(hitectur)m(es)p Fu(,)j(pages)d(1\22612,)i
(Santa)200 4928 y(Barbara,)24 b(California,)h(July)g(17\22619,)f(1995.)
0 5114 y([11])50 b(R.)36 b(D.)f(Blumofe,)41 b(M.)35 b(Frigo,)41
b(C.)35 b(F)-7 b(.)35 b(Joer)n(g,)42 b(C.)35 b(E.)h(Leiserson,)42
b(and)37 b(K.)e(H.)h(Randall.)77 b(An)37 b(analysis)i(of)d(dag-)200
5227 y(consistent)c(distrib)n(uted)h(shared-memory)f(algorithms.)54
b(In)29 b Fk(Pr)l(oc.)g(A)m(CM)f(Symposium)j(on)e(P)-7
b(ar)o(allel)30 b(Algorithms)200 5340 y(and)24 b(Ar)m(c)o(hitectur)m
(es)p Fu(,)h(pages)g(297\226308,)h(June)e(1996.)1900
5589 y FN(35)p eop
%%Page: 36 39
36 38 bop 0 100 a Fu([12])50 b(R.)26 b(D.)f(Blumofe,)j(C.)e(F)-7
b(.)25 b(Joer)n(g,)k(B.)c(C.)h(K)o(uszmaul,)i(C.)d(E.)h(Leiserson,)j
(K.)c(H.)h(Randall,)i(and)g(Y)-12 b(.)26 b(Zhou.)44 b(Cilk:)36
b(An)200 213 y(ef)n(\002cient)25 b(multithreaded)h(runtime)f(system.)34
b Fk(J)n(.)22 b(P)-7 b(ar)d(.)23 b(and)h(Distr)-10 b(.)23
b(Computing)p Fu(,)i(37\(1\):55\22669,)i(August)d(1996.)0
400 y([13])50 b(R.)19 b(D.)g(Blumofe)h(and)h(C.)e(E.)f(Leiserson.)28
b(Scheduling)22 b(multithreaded)i(computations)f(by)d(w)o(ork)h
(stealing.)28 b(In)20 b Fk(Pr)l(oc.)200 513 y(Symp.)k(F)-10
b(oundations)26 b(of)e(Computer)g(Science)p Fu(,)h(pages)g(356\226368,)
h(1994.)0 701 y([14])50 b(R.)25 b(P)-10 b(.)24 b(Brent.)40
b(The)26 b(parallel)h(e)n(v)n(aluation)h(of)e(general)i(arithmetic)f(e)
o(xpressions.)44 b Fk(J)n(.)25 b(A)m(CM)p Fu(,)e(21\(2\):201\226206,)31
b(April)200 814 y(1974.)0 1001 y([15])50 b(F)-7 b(.)22
b(W)-8 b(.)21 b(Burton)j(and)g(M.)e(R.)g(Sleep.)33 b(Ex)o(ecuting)24
b(functional)i(programs)f(on)e(a)g(virtual)i(tree)f(of)f(processors.)35
b(In)24 b Fk(Pr)l(oc.)200 1114 y(A)m(CM)17 b(Conf)o(.)i(on)g
(Functional)i(Pr)l(o)o(gr)o(amming)e(Langua)o(g)o(es)i(and)f(Computer)g
(Ar)m(c)o(hitectur)m(e)p Fu(,)h(pages)f(187\226194,)h(1981.)0
1302 y([16])50 b(R.)23 b(Chandra,)j(A.)d(Gupta,)i(and)g(J.)f(L.)f
(Hennessy)-6 b(.)38 b(Data)24 b(locality)i(and)f(load)h(balancing)h(in)
d(COOL.)34 b(In)25 b Fk(Pr)l(oc.)f(A)m(CM)200 1415 y(symp.)f
(Principles)j(&)c(Pr)o(actice)j(of)e(P)-7 b(ar)o(allel)24
b(Pr)l(o)o(gr)o(amming)p Fu(,)g(pages)h(239\226259,)h(1993.)0
1602 y([17])50 b(K.)23 b(M.)g(Chandy)i(and)g(C.)e(K)n(esselman.)36
b(Compositional)27 b(c++:)k(compositional)d(parallel)e(programming.)37
b(In)25 b Fk(Pr)l(oc.)200 1715 y(Intl.)j(Wkshp.)g(on)g(Langua)o(g)o(es)
j(and)d(Compiler)o(s)h(for)f(P)-7 b(ar)o(allel)28 b(Computing)p
Fu(,)i(pages)f(124\226144,)i(Ne)n(w)c(Ha)n(v)o(en,)i(CT)-7
b(,)200 1828 y(August)25 b(1992.)0 2016 y([18])50 b(S.)20
b(A.)g(Cook.)29 b(A)21 b(taxonomy)i(of)f(problems)h(with)e(f)o(ast)h
(parallel)h(algorithms.)31 b Fk(Information)25 b(and)d(Contr)l(ol)p
Fu(,)g(64:2\22622,)200 2129 y(1985.)0 2316 y([19])50
b(J.)27 b(W)-8 b(.)27 b(Coole)o(y)h(and)h(J.)e(W)g(T)l(uk)o(e)o(y)-6
b(.)47 b(An)27 b(algorithm)j(for)e(the)g(machine)h(computation)i(of)d
(comple)o(x)h(fourier)g(series.)200 2429 y Fk(Mathematics)d(of)d
(Computation)p Fu(,)i(19:297\226301,)i(Apr)-5 b(.)23
b(1965.)0 2617 y([20])50 b(T)-7 b(.)21 b(H.)g(Cormen,)i(C.)e(E.)f
(Leiserson,)k(and)f(R.)e(L.)g(Ri)n(v)o(est.)30 b Fk(Intr)l(oduction)c
(to)d(algorithms)p Fu(.)33 b(MIT)21 b(Press)h(and)h(McGra)o(w-)200
2730 y(Hill)g(Book)h(Compan)o(y)-6 b(,)24 b(6th)g(edition,)h(1992.)0
2917 y([21])50 b(D.)30 b(E.)g(Culler)h(and)h(G.)e(Arvind.)58
b(Resource)33 b(requirements)h(of)d(data\003o)n(w)g(programs.)60
b(In)31 b Fk(Pr)l(oc.)g(Intl.)g(Symp.)g(on)200 3030 y(Computer)25
b(Ar)m(c)o(hitectur)m(e)p Fu(,)f(pages)h(141\226151,)h(1988.)0
3218 y([22])50 b(D.)24 b(R.)g(Engler)l(,)i(G.)e(R.)g(Andre)n(ws,)i(and)
g(D.)e(K.)f(Lo)n(wenthal.)40 b(Filaments:)34 b(Ef)n(\002cient)25
b(support)i(for)f(\002ne-grain)h(paral-)200 3331 y(lelism.)34
b(T)-6 b(echnical)25 b(Report)f(93-13,)g(Uni)n(v)o(ersity)h(of)f
(Arizona.)g(Dept.)f(of)h(Computer)g(Science,)g(1993.)0
3518 y([23])50 b(R.)25 b(Feldmann,)j(P)-10 b(.)25 b(Mysliwietz,)k(and)e
(B.)e(Monien.)44 b(Studying)28 b(o)o(v)o(erheads)h(in)d(massi)n(v)o
(ely)i(parallel)g(min/max-tree)200 3631 y(e)n(v)n(aluation)i(\(e)o
(xtended)g(abstract\).)47 b(In)28 b Fk(A)m(CM)d(Symp.)j(P)-7
b(ar)o(allel)27 b(Algorithms)i(and)f(Ar)m(c)o(hitectur)m(es)p
Fu(,)i(pages)f(94\226103,)200 3744 y(1994.)0 3932 y([24])50
b(Frigo,)29 b(Leiserson,)h(Prok)o(op,)g(and)e(Ramachandran.)49
b(Cache-obli)n(vious)32 b(algorithms.)49 b(In)28 b Fk(FOCS:)e(IEEE)g
(Sympo-)200 4045 y(sium)e(on)f(F)-10 b(oundations)27
b(of)d(Computer)g(Science)h(\(FOCS\))p Fu(,)e(1999.)0
4232 y([25])50 b(M.)27 b(Frigo)i(and)g(S.)e(G.)g(Johnson.)51
b(The)28 b(f)o(astest)i(fourier)g(transform)g(in)e(the)h(west.)49
b(T)-6 b(echnical)29 b(Report)g(MIT)-8 b(-LCS-)200 4345
y(TR-728,)23 b(Massachusetts)k(Institute)f(of)e(T)-6
b(echnology)g(,)25 b(September)g(1997.)0 4533 y([26])50
b(M.)28 b(Frigo,)i(C.)e(E.)f(Leiserson,)32 b(and)d(K.)f(H.)g(Randall.)
51 b(The)29 b(implementation)j(of)d(the)g(Cilk-5)g(multithreaded)k
(lan-)200 4646 y(guage.)41 b(In)25 b Fk(Pr)l(oc.)g(A)m(CM)f(Conf)o(.)h
(on)g(Pr)l(o)o(gr)o(amming)i(Langua)o(g)o(e)g(Design)f(and)g
(Implementation)p Fu(,)i(pages)f(212\226223,)200 4759
y(1998.)0 4946 y([27])50 b(S.)18 b(C.)g(Goldstein,)j(K.)d(E.)g
(Schauser)l(,)j(and)f(D.)e(E.)f(Culler)-5 b(.)25 b(Enabling)c(primiti)n
(v)o(es)f(for)g(compiling)h(parallel)g(languages.)200
5059 y(In)j Fk(W)-8 b(orkshop)25 b(on)e(Langua)o(g)o(es,)j(Compiler)o
(s,)e(and)g(Run-T)-5 b(ime)24 b(Systems)g(for)g(Scalable)i(Computer)o
(s)p Fu(,)e(May)g(1995.)0 5247 y([28])50 b(L.)22 b(Greengard.)35
b Fk(The)23 b(r)o(apid)h(e)o(valuation)i(of)e(potential)i(\002elds)f
(in)e(particle)j(systems)p Fu(.)34 b(The)23 b(MIT)f(Press,)i(1987.)1900
5589 y FN(36)p eop
%%Page: 37 40
37 39 bop 0 100 a Fu([29])50 b(High)23 b(Performance)h(F)o(ortran)f(F)o
(orum.)31 b(High)23 b(performance)i(fortran)f(language)i
(speci\002cation)f(v)o(ertion)f(1.0,)e(1993.)0 287 y([30])50
b(IEEE.)33 b(Information)27 b(T)-6 b(echnology\226Portable)28
b(Operating)e(System)e(Interf)o(ace)j(\(POSIX\)\226P)o(art)c(1:)30
b(System)24 b(Appli-)200 400 y(cation:)31 b(Program)24
b(Interf)o(ace)h(\(API\))e([C)g(Language].)35 b(IEEE/ANSI)21
b(Std)i(1003.1,)h(1996)h(Edition.)0 588 y([31])50 b(V)-12
b(.)24 b(Karamcheti,)j(J.)d(Ple)n(vyak,)i(and)g(A.)d(A.)h(Chien.)39
b(Runtime)25 b(mechanisms)i(for)e(ef)n(\002cient)h(dynamic)h
(multithread-)200 701 y(ing.)34 b Fk(J)n(.)22 b(P)-7
b(ar)o(allel)24 b(and)h(Distrib)n(uted)h(Computing)p
Fu(,)e(37\(1\):21\22640,)j(August)d(1996.)0 888 y([32])50
b(R.)22 b(Karp)h(and)h(Y)-12 b(.)22 b(Zhang.)33 b(A)22
b(randomized)j(parallel)g(branch-and-bound)k(procedure.)35
b(In)24 b Fk(Pr)l(oc.)e(Symp.)h(Theory)h(of)200 1001
y(Computing)p Fu(,)h(pages)f(290\226300,)i(1988.)0 1189
y([33])50 b(D.)28 b(A.)f(Kranz,)k(R.)c(H.)h(Halstead,)j(Jr)-5
b(.,)29 b(and)h(E.)d(Mohr)-5 b(.)51 b(Mul-T)-5 b(:)29
b(A)f(High-Performance)k(P)o(arallel)d(Lisp.)51 b(In)29
b Fk(Pr)l(oc.)200 1302 y(Pr)l(o)o(gr)o(amming)c(Langua)o(g)o(e)g
(Design)f(and)h(Implementation)p Fu(,)h(Portland,)e(Ore)o(gon,)g(June)g
(21\22623,)h(1989.)0 1489 y([34])50 b(E.)19 b(P)-10 b(.)18
b(Markatos)k(and)f(T)-7 b(.)18 b(J.)i(LeBlanc.)26 b(Locality-based)d
(scheduling)h(in)c(shared-memory)j(multiprocessors.)29
b(T)-6 b(ech-)200 1602 y(nical)25 b(Report)f(94,)f(Inst)h(for)g
(ICS-FOR)-5 b(TH,)20 b(Heraklio,)k(Crete,)g(Greec,)f(1993.)0
1790 y([35])50 b(Ev)n(angelos)23 b(Markatos)g(and)e(Thomas)h(LeBlanc.)
28 b(Locality-based)c(scheduling)h(in)c(shared-memory)i(multiproces-)
200 1903 y(sors.)34 b(T)-6 b(echnical)25 b(Report)f(TR93-0094,)h
(ICS-FOR)-5 b(TH,)19 b(Heraklio,)25 b(Crete,)e(Greece,)h(1993.)0
2090 y([36])50 b(P)-10 b(.)32 b(H.)g(Mills,)k(L.)c(S.)g(Nyland,)k(J.)d
(F)-7 b(.)31 b(Prins,)36 b(J.)d(H.)f(Reif,)j(and)f(R.)e(A.)g(W)-7
b(agner)i(.)66 b(Prototyping)36 b(parallel)f(and)f(dis-)200
2203 y(trib)n(uted)28 b(programs)g(in)e(Proteus.)41 b(T)-6
b(echnical)27 b(Report)g(UNC-CH)c(TR90-041,)28 b(Computer)e(Science)h
(Department,)200 2316 y(Uni)n(v)o(ersity)e(of)f(North)f(Carolina,)i
(1990.)0 2504 y([37])50 b(T)-7 b(.)24 b(Miyazaki,)k(C.)c(Sakamoto,)i
(M.)f(K)o(uw)o(ayama,)g(L.)f(Saisho,)j(and)f(A.)e(Fukuda.)40
b(P)o(arallel)26 b(pthread)h(library)h(\(PPL\):)200 2617
y(user)n(-le)n(v)o(el)f(thread)e(library)h(with)e(parallelism)j(and)e
(portability)-6 b(.)39 b(In)24 b Fk(Pr)l(oc.)g(Intl.)g(Computer)h
(Softwar)m(e)h(and)f(Appli-)200 2730 y(cations)h(Conf)o(.)c(\(COMPSA)m
(C\))p Fu(,)g(pages)j(301\226306,)g(No)o(v)o(ember)f(1994.)0
2917 y([38])50 b(E.)22 b(Mohr)l(,)i(D.)e(Kranz,)i(and)g(R.)e(Halstead.)
35 b(Lazy)24 b(task)g(creation:)32 b(A)22 b(technique)k(for)e
(increasing)j(the)d(granularity)i(of)200 3030 y(parallel)g(programs.)34
b Fk(IEEE)22 b(T)-5 b(r)o(ans.)23 b(on)h(P)-7 b(ar)o(allel)24
b(and)g(Distrib)n(uted)i(Systems)p Fu(,)e(1990.)0 3218
y([39])50 b(R.)33 b(Motw)o(ani)j(and)f(P)-10 b(.)33 b(Ragha)n(v)n(an.)
71 b Fk(Randomized)36 b(Algorithms)p Fu(.)70 b(Cambridge)36
b(Uni)n(v)o(ersity)g(Press,)h(Cambridge,)200 3331 y(England,)25
b(June)f(1995.)0 3518 y([40])50 b(G.)34 b(J.)h(Narlikar)-5
b(.)73 b Fk(Space-Ef)n(\002cient)39 b(Sc)o(heduling)f(for)e(P)-7
b(ar)o(allel,)39 b(Multithr)m(eaded)f(Computations)p
Fu(.)74 b(PhD)34 b(thesis,)200 3631 y(Carne)o(gie)25
b(Mellon)f(Uni)n(v)o(ersity)-6 b(,)25 b(1999.)34 b(A)-7
b(v)n(ailable)25 b(as)f(CMU-CS-99-119.)0 3819 y([41])50
b(G.)21 b(J.)g(Narlikar)i(and)g(G.)d(E.)h(Blelloch.)31
b(Space-ef)n(\002cient)24 b(implementation)h(of)d(nested)h
(parallelism.)32 b(In)22 b Fk(Pr)l(oc.)g(A)m(CM)200 3932
y(SIGPLAN)g(Symp.)h(Principles)i(and)f(Pr)o(actice)h(of)e(P)-7
b(ar)o(allel)24 b(Pr)l(o)o(gr)o(amming)p Fu(,)h(pages)f(25\22636,)h
(June)f(1997.)0 4120 y([42])50 b(G.)25 b(J.)g(Narlikar)j(and)e(G.)f(E.)
g(Blelloch.)43 b(Pthreads)27 b(for)g(dynamic)g(and)g(irre)o(gular)h
(parallelism.)44 b(In)26 b Fk(Pr)l(oc.)f(of)h(Super)n(-)200
4232 y(computing)g('98)p Fu(,)d(No)o(v)o(ember)h(1998.)0
4420 y([43])50 b(Girija)23 b(J.)e(Narlikar)i(and)g(Guy)e(E.)g
(Blelloch.)31 b(Pthreads)23 b(for)g(dynamic)g(parallelism.)32
b(T)-6 b(echnical)24 b(Report)e(CMU-CS-)200 4533 y(98-114,)j(Computer)g
(Science)f(Dept.,)f(Carne)o(gie)h(Mellon)h(Uni)n(v)o(ersity)-6
b(,)25 b(April)e(1998.)0 4721 y([44])50 b(D.)32 b(O'Hallaron.)66
b(Spark98:)50 b(Sparse)33 b(matrix)h(k)o(ernels)h(for)f(shared)h
(memory)e(and)h(message)g(passing)h(systems.)200 4834
y(T)-6 b(echnical)25 b(Report)f(CMU-CS-97-178,)g(School)g(of)g
(Computer)g(Science,)g(Carne)o(gie)h(Mellon)f(Uni)n(v)o(ersity)-6
b(,)25 b(1997.)0 5021 y([45])50 b(J.)24 b(Philbin,)i(J.)e(E.,)f(O.)g
(J.)h(Anshus,)h(and)h(C.)d(C.)g(Douglas.)38 b(Thread)25
b(scheduling)j(for)d(cache)h(locality)-6 b(.)38 b(In)25
b Fk(Intl.)g(Conf)o(.)200 5134 y(Ar)m(c)o(hitectur)o(al)h(Support)f
(for)f(Pr)l(o)o(gr)o(amming)h(Langua)o(g)o(es)g(and)g(Oper)o(ating)g
(Systems)p Fu(,)f(pages)h(60\22671,)f(1996.)1900 5589
y FN(37)p eop
%%Page: 38 41
38 40 bop 0 100 a Fu([46])50 b(M.)35 b(L.)f(Po)n(well,)k(S.)d(R.)f
(Kleiman,)39 b(S.)34 b(Barton,)40 b(D.)34 b(Shah,)39
b(D.)34 b(Stein,)39 b(and)d(M.)f(W)-7 b(eeks.)73 b(SunOS)35
b(multi-thread)200 213 y(architecture.)27 b(In)19 b Fk(Pr)l(oc.)f(W)-5
b(inter)20 b(1991)g(USENIX)d(T)-8 b(ec)o(hnical)21 b(Confer)m(ence)f
(and)g(Exhibition)p Fu(,)i(pages)e(65\22680,)h(Dallas,)200
325 y(TX,)h(USA,)f(January)26 b(1991.)0 513 y([47])50
b(J.)23 b(R.)f(Quinlan.)34 b(Induction)27 b(of)c(decision)j(trees.)34
b Fk(Mac)o(hine)24 b(learning)p Fu(,)i(1\(1\):81\226106,)h(1986.)0
701 y([48])50 b(J.)23 b(R.)f(Quinlan.)34 b Fk(C4.5:)29
b(Pr)l(o)o(gr)o(ams)24 b(for)g(Mac)o(hine)g(Learning)p
Fu(.)35 b(Mor)n(gan)25 b(Kaufmann,)f(San)f(Mateo,)h(CA,)d(1993.)0
888 y([49])50 b(Jr)-5 b(.)35 b(R.)f(H.)g(Halstead.)72
b(Multilisp:)54 b(A)35 b(language)i(for)f(concurrent)i(symbolic)f
(computation.)73 b Fk(A)m(CM)34 b(T)-5 b(r)o(ans.)35
b(on)200 1001 y(Pr)l(o)o(gr)o(amming)25 b(Langua)o(g)o(es)h(and)e
(Systems)p Fu(,)g(7\(4\):501\226538,)j(1985.)0 1189 y([50])50
b(C.)36 b(A.)g(Ruggiero)j(and)e(J.)g(Sar)n(geant.)79
b(Control)38 b(of)f(parallelism)j(in)d(the)g(manchester)j(data\003o)n
(w)d(machine.)78 b(In)200 1302 y(G.)46 b(Kahn,)53 b(editor)l(,)h
Fk(Functional)49 b(Pr)l(o)o(gr)o(amming)f(Langua)o(g)o(es)i(and)d
(Computer)h(Ar)m(c)o(hitectur)m(e)p Fu(,)54 b(pages)48
b(1\22616.)200 1415 y(Springer)n(-V)-10 b(erlag,)26 b(Berlin,)e(DE,)e
(1987.)0 1602 y([51])50 b(D.)26 b(J.)h(Simpson)h(and)g(F)-7
b(.)26 b(W)-8 b(.)26 b(Burton.)47 b(Space)28 b(ef)n(\002cient)g(e)o(x)o
(ecution)i(of)d(deterministic)k(parallel)e(programs.)48
b Fk(IEEE)200 1715 y(T)-5 b(r)o(ansactions)26 b(on)e(Softwar)m(e)h
(Engineering)p Fu(,)h(25\(3\),)e(May/June)h(1999.)0 1903
y([52])50 b(J.)24 b(P)-10 b(.)23 b(Singh,)i(A.)e(Gupta,)h(and)h(M.)e
(Le)n(v)n(o)o(y)-6 b(.)37 b(P)o(arallel)25 b(visualization)j
(algorithms:)34 b(Performance)26 b(and)f(architectural)200
2016 y(implications.)36 b Fk(IEEE)22 b(Computer)p Fu(,)i
(27\(7\):45\22655,)j(July)d(1994.)0 2203 y([53])50 b(D.)26
b(Stein)h(and)h(D.)d(Shah.)45 b(Implementing)30 b(lightweight)f
(threads.)47 b(In)27 b Fk(Pr)l(oc.)f(Summer)i(1992)g(USENIX)d(T)-8
b(ec)o(hnical)200 2316 y(Confer)m(ence)26 b(and)e(Exhibition)p
Fu(,)h(pages)g(1\22610,)f(San)f(Antonio,)i(TX,)c(1992.)j(USENIX.)0
2504 y([54])50 b(M.)24 b(T)-7 b(.)24 b(V)-10 b(ande)n(v)n(oorde)29
b(and)c(E.)f(S.)g(Roberts.)40 b(W)-7 b(orkCre)n(ws:)33
b(an)26 b(abstraction)i(for)e(controlling)i(parallelism.)42
b Fk(Intl.)25 b(J)n(.)200 2617 y(P)-7 b(ar)o(allel)24
b(Pr)l(o)o(gr)o(amming)p Fu(,)g(17\(4\):347\226366,)k(August)d(1988.)0
2804 y([55])50 b(B.)22 b(W)-7 b(eissman.)34 b(Performance)25
b(counters)g(and)f(state)g(sharing)i(annotations:)32
b(a)23 b(uni\002ed)h(approach)i(to)d(thread)i(local-)200
2917 y(ity)-6 b(.)29 b(In)21 b Fk(Intl.)g(Conf)o(.)g(on)g(Ar)m(c)o
(hitectur)o(al)i(Support)h(for)d(Pr)l(o)o(gr)o(amming)h(Langua)o(g)o
(es)i(and)e(Oper)o(ating)h(Systems)p Fu(,)f(pages)200
3030 y(262\226273,)k(October)e(1998.)0 3218 y([56])50
b(S.)22 b(C.)g(W)-7 b(oo,)23 b(M.)f(Ohara,)h(E.)f(T)-7
b(orrie,)23 b(J.)g(P)-10 b(.)22 b(Singh,)h(and)h(A.)e(Gupta.)33
b(The)23 b(SPLASH-2)e(programs:)31 b(Characteriation)200
3331 y(and)g(methodological)k(considerations.)61 b(In)30
b Fk(Pr)l(oc.)h(Intl.)g(Symp.)f(Computer)i(Ar)m(c)o(hitectur)m(e)p
Fu(,)i(pages)e(24\22637,)h(June)200 3444 y(1995.)1900
5589 y FN(38)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
