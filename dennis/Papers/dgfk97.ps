%!PS-Adobe-2.0
%%Creator: dvips 5.58 Copyright 1986, 1994 Radical Eye Software
%%Title: paper.dvi
%%CreationDate: Wed Jun  4 14:18:44 1997
%%Pages: 12
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSCommandLine: dvips -f paper
%DVIPSParameters: dpi=300, comments removed
%DVIPSSource:  TeX output 1997.06.04:1416
%%BeginProcSet: tex.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]{ch-image}imagemask restore}B /D{/cc X dup type /stringtype ne{]}
if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 39158280 55380996 1000 300 300
(/usr/local_files/robg/BusSpecs/USB/Zagreb/paper.dvi)
@start /Fa 37 124 df<FF80FF80FF0009037D880E>45 D<3078F06005047C830C>I<00
7C000186000203000403800483800883801083801083801083801107001207000C0E0000
1C000030000060000180000200000C00001001002001003C060067FE00C1FC0080F00011
187D9714>50 D<0000200000600000600000E00001E00001E00002700002700004700008
7000087000107000107000207000207000407000807000FFF00100380100380200380400
380400380C00381C0038FF01FF181A7E991D>65 D<03FFF800700E00700600700700E007
00E00700E00700E00701C00E01C01C01C03801C07003FFE003807003803803801C07001C
07001C07001C07001C0E00380E00380E00700E00E01C03C0FFFF00181A7D991B>I<000F
8200706200C01603801E07000C0E000C1C000C18000C380008300008700000700000E000
00E00000E00000E00000E00020E00020E00020E000406000406000803001001006000C18
0003E000171A7A991B>I<03FFF80000700E00007007000070030000E0018000E0018000
E0018000E001C001C001C001C001C001C001C001C001C003800380038003800380038003
800300070007000700070007000E0007000C000E001C000E0038000E0070000E00E0001C
038000FFFE00001A1A7D991D>I<000FC100302100C01301800F0700060E00060C000618
0006380004300004700000700000E00000E00000E00000E007FEE00070E00070E00070E0
00706000E06000E03000E01801E00C064003F840181A7A991E>71
D<01FF8000380000380000380000700000700000700000700000E00000E00000E00000E0
0001C00001C00001C00001C0000380000380000380000380000700000700000700000700
000E0000FFE000111A7E990F>73 D<03F8001FC00078003C000078003C000078005C0000
B800B80000B800B800009C013800009C013800011C027000011C027000011C047000011C
087000021C08E000021C10E000021C10E000021C20E000041C41C000041C41C000041C81
C000041C81C000080F038000080F038000080E038000180C038000380C070000FF083FF0
00221A7D9922>77 D<001F8000706001C03003001806001C0E000C1C000C18000E38000E
30000E70000E70000EE0001CE0001CE0001CE00038E00038E00030E00070E000E0E000C0
6001807003003806001C1C0007E000171A7A991D>79 D<03FFF800701C00700600700700
E00700E00700E00700E00701C00E01C00E01C01C01C03803807003FF8003800003800007
00000700000700000700000E00000E00000E00000E00001C0000FFC000181A7D991A>I<
003F1000609001807001007003002006002006002006002006000007000007C00003F800
01FE00007F00000F80000380000180000180200180200180600300600300600600700C00
C8180087E000141A7D9916>83 D<3FFFFC381C0C201C04401C0440380480380480380480
380400700000700000700000700000E00000E00000E00000E00001C00001C00001C00001
C000038000038000038000038000078000FFF800161A79991B>I<7FE0FF0E00380E0010
0E00101C00201C00201C00201C0020380040380040380040380040700080700080700080
700080E00100E00100E00100E00200E00200E004006008006010003860000F8000181A78
991D>I<FF803F801C001C001C0008001C0010001C0010001C0020001C0040001E004000
0E0080000E0080000E0100000E0200000E0200000E0400000E0C00000E0800000E100000
071000000720000007400000074000000780000007800000070000000600000006000000
191A78991D>I<03CC0E2E181C381C301C701CE038E038E038E038C072C072C07260F261
341E180F107C8F14>97 D<7E000E000E000E001C001C001C001C00380038003BC03C3078
30701870187018E038E038E038E038C070C060C0E060C063801E000D1A7C9912>I<01F0
06080C181838301070006000E000E000E000E000E008E010602030C01F000D107C8F12>
I<001F80000380000380000380000700000700000700000700000E00000E0003CE000E2E
00181C00381C00301C00701C00E03800E03800E03800E03800C07200C07200C0720060F2
006134001E1800111A7C9914>I<01E006181C08380870087010FFE0E000E000E000E000
E0086010602030C01F000D107C8F12>I<000700001980001B80003B0000300000300000
700000700000700000700007FF0000E00000E00000E00000E00000E00001C00001C00001
C00001C00001C000038000038000038000038000038000070000070000070000660000E4
0000CC0000700000112181990C>I<00F300038B800607000E07000C07001C0700380E00
380E00380E00380E00301C00301C00301C00183C0018780007B800003800003800007000
607000E0E000C1C0007F000011177E8F12>I<1F80000380000380000380000700000700
000700000700000E00000E00000E7C000F86001E07001E07001C07001C0700380E00380E
00380E00381C00701C80701C80703880703900E01900600E00111A7E9914>I<03070600
0000000000384C4E8E9C9C1C3838707272E2E4643808197C980C>I<3F0707070E0E0E0E
1C1C1C1C3838383870707070E4E4E4E46830081A7D990A>108 D<307C1E00598663009E
0783809E0703809C0703809C070380380E0700380E0700380E0700380E0E00701C0E4070
1C0E40701C1C40701C1C80E0380C80601807001A107C8F1F>I<307C005986009E07009E
07009C07009C0700380E00380E00380E00381C00701C80701C80703880703900E0190060
0E0011107C8F16>I<01F006180C0C180E300E700E600EE00EE00EE00CE01CE018E03060
6030C01F000F107C8F14>I<030F000590C009E0C009C06009C06009C0600380E00380E0
0380E00380E00701C00701800703800703000E8E000E78000E00000E00001C00001C0000
1C00001C0000FF00001317808F14>I<30F059189E389C189C009C003800380038003800
7000700070007000E00060000D107C8F10>114 D<03E004300830187018601C001F801F
C00FE000E00060E060E06080C041803E000C107D8F10>I<06000E000E000E000E001C00
1C00FFC01C0038003800380038007000700070007000E100E100E100E200640038000A17
7C960D>I<38064C074E0E8E0E9C0E9C0E1C1C381C381C381C7039703970393079389A0F
0C10107C8F15>I<38184C1C4E1C8E0C9C0C9C0C1C083808380838087010701070203040
18C00F000E107C8F12>I<38064C074E0E8E0E9C0E9C0E1C1C381C381C381C7038703870
38307838F00F700070006060E0E1C0C18047003C0010177C8F13>121
D<FFFF8011017D8914>123 D E /Fb 11 115 df<FFFFE0000F0078000F001C000F000E
000F0007000F0007800F0007800F0007800F0007800F0007800F0007000F000E000F001C
000F0078000FFFE0000F0000000F0000000F0000000F0000000F0000000F0000000F0000
000F0000000F0000000F0000000F0000000F000000FFF00000191C7D9B1F>80
D<03E0800C1980100580300380600180E00180E00080E00080E00080F00000F800007E00
007FE0003FFC001FFF0007FF80007F800007C00003E00001E00000E08000E08000E08000
E0C000C0C000C0E00180D00300CE060081F800131E7D9C19>83 D<002000007000007000
00700000B80000B80000B800011C00011C00011C00020E00020E0004070004070007FF00
0803800803800803801801C03803C0FE0FF815157F9419>97 D<FFFF801C03801C00801C
00801C00401C00401C10401C10001C10001C30001FF0001C30001C10001C10201C10201C
00201C00601C00401C00C01C01C0FFFFC013157F9417>101 D<FF801C001C001C001C00
1C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00FF8009157F94
0D>105 D<FFC0001C00001C00001C00001C00001C00001C00001C00001C00001C00001C
00001C00001C00001C00801C00801C00801C01801C01001C03001C0700FFFF0011157F94
15>108 D<FE000FE01E000F00170017001700170017001700138027001380270011C047
0011C0470011C0470010E0870010E08700107107001071070010710700103A0700103A07
00101C0700101C0700381C0700FE083FE01B157F941F>I<FC03F81E00E01E0040170040
13804013C04011C04010E040107040107040103840101C40101C40100E401007401007C0
1003C01001C01000C03800C0FE004015157F9419>I<01F800070E000C03001C03803801
C07801E07000E0F000F0F000F0F000F0F000F0F000F0F000F0F000F07000E07801E03801
C01C03801E0780070E0001F80014157E941A>I<FFFC001C0F001C03801C03C01C03C01C
03C01C03C01C03C01C03801C0F001FFC001C00001C00001C00001C00001C00001C00001C
00001C00001C0000FF800012157F9417>I<FFF8001C0E001C07801C03801C03C01C03C0
1C03C01C03801C07801C0E001FF8001C1C001C0E001C07001C07001C07001C07801C0784
1C07C41C03CCFF80F816157F9419>114 D E /Fc 78 126 df<60F0F0F0F0F0F0F0F0F0
F0700000000060F0F0600414799312>33 D<0E700E700E700E70FFFEFFFE7FFE0E700E70
0E701CE01CE07FFEFFFEFFFE1CE01CE01CE01CE01CE00F147F9312>35
D<07001F8019C039C039C039C039BE3B3E3E701C701C701CE03EE06FE0E7C0E3C4E38E63
CE7EFC3C380F147F9312>38 D<60F0F878181818303060C080050C799312>I<01800380
06000C0018003800300070007000E000E000E000E000E000E000E0007000700030003800
18000C0006000380018009197B9612>I<80C06030181C0C0E0E070707070707070E0E0C
1C183060C08008197C9612>I<070007000700E738FFF87FF01FC01FC07FF0FFF8E73807
00070007000D0E7E9012>I<038003800380038003800380FFFEFFFEFFFE038003800380
0380038003800F0F7F9112>I<60F0F878183030E0C00509798312>I<FFF8FFF8FFF80D03
7E8B12>I<60F0F0600404798312>I<0018003800380070007000E000E001C001C001C003
800380070007000E000E001C001C001C003800380070007000E000E000C0000D1A7E9612
>I<07C00FE01C703838701C701CE00EE00EE00EE00EE00EE00EE00EE01E701C701C3838
1C700FE007C00F147F9312>I<060006000E001E00FE00EE000E000E000E000E000E000E
000E000E000E000E000E000E00FFE0FFE00B147D9312>I<0F803FC070E0E070E038E038
403800380030007000E000C00180030006000C00183830387FF87FF80D147E9312>I<0F
E03FF07838701C201C001C0038007807E007F00038001C000E000E400EE00EE01C78383F
F00FC00F147F9312>I<00F001F00370037006700E700C701C70387038707070E070FFFE
FFFE007000700070007003FE03FE0F147F9312>I<7FF07FF07000700070007000700070
007F807FE06070007000384038E038E038E07070E03FC01F000D147E9312>I<01F007F8
0E1C181C381C70007000E7C0EFF0F838F01CE00EE00EE00E700E700E301C38381FF007C0
0F147F9312>I<E000FFFEFFFEE018E038007000E000C001C00380038007000700070007
000E000E000E000E000E0004000F157F9412>I<07C01FF03C78783C701C701C701C3838
0FE007C03C78701CE00EE00EE00EE00E701C783C1FF00FE00F147F9312>I<07C01FF038
387018E01CE00CE00EE00E701E383E1FEE0FCE000E001C001C7018703870F03FC00F800F
147F9312>I<60F0F06000000000000060F0F060040E798D12>I<60F0F060000000000000
60F0F070303060C0800413798D12>I<0038007801F003E00F801F003C00F800F000F800
3C001F000F8003E001F0007800380D117E9212>I<FFFEFFFE7FFE0000000000007FFEFF
FEFFFE0F097F8E12>I<4000E000F0007C003E000F8007C001E000F8007800F801E007C0
0F803E007C00F000E00040000D137E9312>I<1FC07FF0F078E038403800F001E0038007
00070007000700000000000000000006000F000F0006000D147E9312>I<038007C007C0
06C006C00EE00EE00EE00EE00C601C701C701C701FF01FF0383838383838FC7EFC7E0F14
7F9312>65 D<FFE0FFF03838381C381C381C381C383838783FF03FF8381C380E380E380E
380E381E383CFFF8FFF00F147F9312>I<03E60FFE1C3E381E700E700E600EE000E000E0
00E000E000E000600E700E700E381C1C380FF003E00F147F9312>I<FFC0FFF038783838
381C381C381E380E380E380E380E380E380E380E381C381C38383878FFF0FFC00F147F93
12>I<FFFEFFFE380E380E380E3800380038E038E03FE03FE038E038E03800380E380E38
0E380EFFFEFFFE0F147F9312>I<FFFEFFFE380E380E380E3800380038E038E03FE03FE0
38E038E038003800380038003800FF00FF000F147F9312>I<FC7EFC7E38383838383838
383838383838383FF83FF83838383838383838383838383838FC7EFC7E0F147F9312>72
D<FFE0FFE00E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E
00FFE0FFE00B147D9312>I<FF00FF003800380038003800380038003800380038003800
380038003804380E380E380EFFFEFFFE0F147F9312>76 D<FC7EFC7E7C7C745C76DC76DC
76DC76DC76DC76DC77DC739C739C701C701C701C701C701CF83EF83E0F147F9312>I<FE
FEFEFE3E383A383B383B383B383B383B383B3839B839B839B839B839B839B838B838F8FE
F8FEF80F147F9312>I<3FE07FF07070E038E038E038E038E038E038E038E038E038E038
E038E038E038E03870707FF03FE00D147E9312>I<FFE0FFF8383C381C380E380E380E38
0E381C383C3FF83FE0380038003800380038003800FE00FE000F147F9312>I<FF80FFE0
38F03878383838383838387838F03FE03FC038E0387038703870387038773877FE3EFE1C
10147F9312>82 D<1F303FF070F0E070E070E070E00070007F003FC00FE000F000380038
6038E038E030F070FFE0CF800D147E9312>I<7FFEFFFEE38EE38EE38E03800380038003
800380038003800380038003800380038003801FF01FF00F147F9312>I<FE3F80FE3F80
380E00380E00380E00380E00380E00380E00380E00380E00380E00380E00380E00380E00
380E00380E001C1C000E380007F00003E0001114809312>I<F83EF83E701C701C701C70
1C701C701C77DC77DC37D836D836D836D836D836D836D83EF83C781C700F147F9312>87
D<FFC0FFC0E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E0
00E000E000E000E000E000E000FFC0FFC00A1A7A9612>91 D<C000E000E0007000700038
0038001C001C001C000E000E00070007000380038001C001C001C000E000E00070007000
38003800180D1A7E9612>I<FFC0FFC001C001C001C001C001C001C001C001C001C001C0
01C001C001C001C001C001C001C001C001C001C001C001C0FFC0FFC00A1A7F9612>I<FF
F8FFF8FFF80D037E7F12>95 D<0818306060C0C0C0F0F87830050C7A9612>I<3F807FC0
70E0207000700FF03FF07870E070E070E07070F03FFE1F3E0F0E7E8D12>I<F800F80038
003800380038003BE03FF03C38381C380C380E380E380E380E380C381C3C383FF01BC00F
147F9312>I<07F01FF8383870106000E000E000E000E0006000703838381FF007E00D0E
7E8D12>I<00F800F8003800380038003807B81FF8387870386038E038E038E038E03860
38707838781FFE0FBE0F147F9312>I<07801FE0387070706038E038FFF8FFF8E0006000
703838381FF007C00D0E7E8D12>I<007E00FF01C70382038003807FFEFFFE0380038003
8003800380038003800380038003803FF83FF81014809312>I<0F9E1FFF38E770707070
7070707038E03FC03F8070003FE03FF83FFC701EE00EE00EE00E600C783C1FF00FE01016
7F8D12>I<F800F800380038003800380039E03FF03E383C383838383838383838383838
3838383838FE3EFE3E0F147F9312>I<06000F000F000600000000000000FF00FF000700
070007000700070007000700070007000700FFF0FFF00C157D9412>I<F800F800380038
00380038003BFC3BFC38F039E03BC03F803F803FC03DE038E038703838FC7EFC7E0F147F
9312>107 D<FF00FF000700070007000700070007000700070007000700070007000700
070007000700FFF8FFF80D147E9312>I<F71C00FFBE0079E70079E70071C70071C70071
C70071C70071C70071C70071C70071C700F9E780F8E380110E808D12>I<F9E0FFF03E38
3C3838383838383838383838383838383838FE3EFE3E0F0E7F8D12>I<0F803FE038E070
70E038E038E038E038E038F078707038E03FE00F800D0E7E8D12>I<FBE0FFF03C38381C
380C380E380E380E380E380C381C3C383FF03BC038003800380038003800FE00FE000F15
7F8D12>I<FCF8FDFC1F1C1E081E001C001C001C001C001C001C001C00FFC0FFC00E0E7E
8D12>114 D<1FF03FF06070C070E0007F003FE00FF000786018E018F030FFE0DFC00D0E
7E8D12>I<06000E000E000E007FF8FFF80E000E000E000E000E000E000E000E380E380E
3807F003C00D127F9112>I<F8F8F8F83838383838383838383838383838383838383878
1FFE0FBE0F0E7F8D12>I<FC7EFC7E38383C781C701C701C700EE00EE00EE006C007C007
C003800F0E7F8D12>I<FEFEFEFE701C701C301838383BB83FF83FF83AB838B81CF01CF0
1CF00F0E7F8D12>I<7C7C7C7C1CF00EE00FC007C00380078007C00EE01EF01C70FC7EFC
7E0F0E7F8D12>I<FC7EFC7E3C381C381C701C700E700E600E6006E006E003C003C003C0
038003800380778077007E003C000F157F8D12>I<3FFC7FFC7038707000E001C0038007
000E001C1C381C701CFFFCFFFC0E0E7F8D12>I<00F801F8038007000700070007000700
0700070007000E00FC00FC000E0007000700070007000700070007000700038001F800F8
0D1A7E9612>I<E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0031A79
9612>I<7800FC000E0007000700070007000700070007000700038001F801F803800700
07000700070007000700070007000E00FC0078000D1A7E9612>I
E /Fd 48 122 df<60F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0600000000060F0F060041977
9816>33 D<03800007E0000FE0001E70001C70001C70001C70001C77E01CE7E01DE7E00F
C7000F8E000F0E001E0E003F1C007F1C00739C00E3F800E1F800E0F1C0E0F1C071F9C07F
FFC03F9F801E070013197F9816>38 D<30787C3C1C1C1C1C3878F0E040060D789816>I<
00E001E0038007000E001C001C0038003800700070007000E000E000E000E000E000E000
E000E000E000700070007000380038001C001C000E000700038001E000E00B217A9C16>
I<C000E000700038001C000E000E000700070003800380038001C001C001C001C001C001
C001C001C001C0038003800380070007000E000E001C0038007000E000C0000A217B9C16
>I<70F8F8F8700505788416>46 D<03E0000FF8001FFC001E3C00380E00780F00700700
700700E00380E00380E00380E00380E00380E00380E00380E00380F00780700700700700
780F003C1E001E3C001FFC000FF80003E00011197E9816>48 D<01800380038007800F80
7F80FF807380038003800380038003800380038003800380038003800380038003807FF8
7FFC7FF80E197C9816>I<07E0001FF8003FFC00783E00E00700F00780F0038060038000
0380000380000700000700000E00001C0000380000700000E00001C0000380000F00001E
03803803807FFF80FFFF807FFF8011197E9816>I<07E0001FF8003FFC00781E00780700
300700000700000700000E00003E0007FC0007F00007FC00001E00000700000300000380
000380600380F00380E00700781E003FFC001FF80007E00011197E9816>I<7FFF00FFFF
80FFFF80000000000000000000000000000000FFFF80FFFF807FFF00110B7E9116>61
D<00E00001F00001F00001B00001B00003B80003B80003B800031800071C00071C00071C
00071C00071C000E0E000E0E000FFE000FFE001FFF001C07001C07001C07007F1FC0FF1F
E07F1FC013197F9816>65 D<7FF800FFFE007FFF001C0F001C07801C03801C03801C0380
1C07801C07001FFF001FFE001FFE001C1F001C03801C03C01C01C01C01C01C01C01C01C0
1C03C01C07807FFF80FFFF007FFC0012197F9816>I<01F18007FB800FFF801F0F803C07
80380380700380700380F00000E00000E00000E00000E00000E00000E00000E00000F000
007003807003803803803C07001F0F000FFE0007FC0001F00011197E9816>I<7FF800FF
FE007FFF001C0F001C07801C03C01C01C01C01C01C01E01C00E01C00E01C00E01C00E01C
00E01C00E01C00E01C00E01C01C01C01C01C03C01C07801C0F807FFF00FFFE007FF80013
19809816>I<7FFFC0FFFFC07FFFC01C01C01C01C01C01C01C01C01C00001C00001C1C00
1C1C001FFC001FFC001FFC001C1C001C1C001C00001C00E01C00E01C00E01C00E01C00E0
7FFFE0FFFFE07FFFE013197F9816>I<FFFFE0FFFFE0FFFFE01C00E01C00E01C00E01C00
E01C00001C00001C1C001C1C001FFC001FFC001FFC001C1C001C1C001C00001C00001C00
001C00001C00001C0000FF8000FFC000FF800013197F9816>I<FFFEFFFEFFFE03800380
03800380038003800380038003800380038003800380038003800380038003800380FFFE
FFFEFFFE0F197D9816>73 D<FFC000FFC000FFC0001C00001C00001C00001C00001C0000
1C00001C00001C00001C00001C00001C00001C00001C00001C00001C00401C00E01C00E0
1C00E01C00E0FFFFE0FFFFE0FFFFE013197F9816>76 D<7E1FC0FF3FE07F1FC01D07001D
87001D87001D87001DC7001DC7001CC7001CC7001CE7001CE7001CE7001C67001C67001C
77001C77001C37001C37001C37001C17007F1F00FF9F007F0F0013197F9816>78
D<1FFC003FFE007FFF00780F00F00780E00380E00380E00380E00380E00380E00380E003
80E00380E00380E00380E00380E00380E00380E00380F00780F00780780F007FFF003FFE
001FFC0011197E9816>I<7FF800FFFE007FFF001C0F801C03801C03C01C01C01C01C01C
01C01C03C01C03801C0F801FFF001FFE001FF8001C00001C00001C00001C00001C00001C
00001C00007F0000FF80007F000012197F9816>I<7FE000FFF8007FFC001C1E001C0F00
1C07001C07001C07001C07001C0F001C1E001FFC001FF8001FFC001C1C001C0E001C0E00
1C0E001C0E001C0E201C0E701C0E707F07E0FF87E07F03C014197F9816>82
D<07E3001FFF003FFF00781F00F00700E00700E00700E00000F000007800003F80001FF0
0007FC0000FE00000F00000700000380000380600380E00380E00700F80F00FFFE00FFFC
00C7F00011197E9816>I<7FFFE0FFFFE0FFFFE0E0E0E0E0E0E0E0E0E0E0E0E000E00000
E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000
E00000E00007FC000FFE0007FC0013197F9816>I<FC07E0FE0FE0FC07E07001C07001C0
7001C030018038038038038038038038E38039F38039F38039B38019B30019B30019B300
19B30019B30019B3001913001B1B000F1E000F1E000E0E0013197F9816>87
D<FFF0FFF0FFF0E000E000E000E000E000E000E000E000E000E000E000E000E000E000E0
00E000E000E000E000E000E000E000E000E000E000E000FFF0FFF0FFF00C20789C16>91
D<FFF0FFF0FFF00070007000700070007000700070007000700070007000700070007000
7000700070007000700070007000700070007000700070FFF0FFF0FFF00C207F9C16>93
D<081C3C7870E0E0E0E0F0F87830060D789B16>96 D<1FE0003FF0007FF800783C00300E
00000E00000E0003FE001FFE003E0E00700E00E00E00E00E00E00E00783E007FFFE03FE7
E00F83E013127E9116>I<7E0000FE00007E00000E00000E00000E00000E00000E3E000E
FF000FFF800F83C00F00E00E00E00E00700E00700E00700E00700E00700E00700E00E00F
01E00F83C00FFF800EFF00063C001419809816>I<03F80FFC1FFE3C1E780C7000E000E0
00E000E000E000F000700778073E0E1FFC0FF803F010127D9116>I<003F00007F00003F
0000070000070000070000070003C7000FF7001FFF003C1F00780F00700700E00700E007
00E00700E00700E00700E00700700F00700F003C1F001FFFE00FE7F007C7E014197F9816
>I<03E00FF81FFC3C1E780E7007E007FFFFFFFFFFFFE000E000700778073C0F1FFE0FFC
03F010127D9116>I<001F00007F8000FF8001E78001C30001C00001C0007FFF00FFFF00
FFFF0001C00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C000
01C0003FFE007FFF003FFE0011197F9816>I<7E0000FE00007E00000E00000E00000E00
000E00000E3C000EFE000FFF000F87800F03800E03800E03800E03800E03800E03800E03
800E03800E03800E03800E03807FC7F0FFE7F87FC7F01519809816>104
D<018003C003C0018000000000000000007FC07FC07FC001C001C001C001C001C001C001
C001C001C001C001C001C07FFFFFFF7FFF101A7D9916>I<FFC000FFC000FFC00001C000
01C00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C000
01C00001C00001C00001C00001C00001C000FFFF80FFFF80FFFF8011197E9816>108
D<F9C380FFEFC0FFFFE03C78E03C78E03870E03870E03870E03870E03870E03870E03870
E03870E03870E03870E0FE7CF8FE7CF8FE3C781512809116>I<7E3C00FEFE007FFF000F
87800F03800E03800E03800E03800E03800E03800E03800E03800E03800E03800E03807F
C7F0FFE7F87FC7F01512809116>I<03E0000FF8001FFC003C1E00780F00700700E00380
E00380E00380E00380E00380F00780700700780F003C1E001FFC000FF80003E00011127E
9116>I<7E3E00FEFF007FFF800F83C00F00E00E00E00E00700E00700E00700E00700E00
700E00700E00E00F01E00F83C00FFF800EFF000E3C000E00000E00000E00000E00000E00
000E00007FC000FFE0007FC000141B809116>I<FF0FC0FF3FE0FF7FE007F04007C00007
8000078000070000070000070000070000070000070000070000070000FFFC00FFFC00FF
FC0013127F9116>114 D<0FEC3FFC7FFCF03CE01CE01C70007F801FF007F8003C600EE0
0EF00EF81EFFFCFFF8C7E00F127D9116>I<0300000700000700000700000700007FFF00
FFFF00FFFF00070000070000070000070000070000070000070000070100070380070380
07038007870003FE0001FC0000F80011177F9616>I<7E1F80FE3F807E1F800E03800E03
800E03800E03800E03800E03800E03800E03800E03800E03800E03800E0F800FFFF007FB
F803E3F01512809116>I<7F1FC0FF1FE07F1FC01C07001E0F000E0E000E0E000E0E0007
1C00071C00071C00071C0003B80003B80003B80001F00001F00000E00013127F9116>I<
7F1FC0FF9FE07F1FC01C07000E07000E0E000E0E00070E00071C00071C00039C00039C00
03980001B80001B80000F00000F00000F00000E00000E00000E00001C00079C0007BC000
7F80003F00003C0000131B7F9116>121 D E /Fe 16 120 df<072008E018E0306030C0
60C060C060C0C180C188C1884388659038E00D0E7C8D12>97 D<03C00C6018E030E03000
6000600060004000C0004020604021801E000B0E7C8D10>99 D<007C0018001800180018
0030003000300030076008E018E0306030C060C060C060C0C180C188C1884388659038E0
0E177C9612>I<07001880304060404080FF00C000C000C0008000C040C08043003C000A
0E7B8D10>I<001C0036002E006C00600060006000C000C007FC00C000C001C001800180
01800180018003000300030003000300060006006600E400C80070000F1D81960B>I<03
0706000000000000384C4C4C8C18181830326262243808177D960B>105
D<38787800448C8C0047050400460604008C0C0C000C0C0C000C0C0C000C0C0C00181818
001818188018183080181831003030130030301C00190E7D8D1D>109
D<387044984708460C8C180C180C180C18183018311861186230263038100E7D8D14>I<
078018C0304060606060C060C060C06080C080C08180C10046003C000B0E7B8D12>I<1C
702288230C230C460C060C060C060C0C180C180C100C301A601B80180018003000300030
00FC000E147E8D12>I<38F04518463846308C000C000C000C0018001800180018003000
30000D0E7D8D0F>114 D<07800C4018E018E038001E001F8007C000C060C0E0C0C180C3
003E000B0E7D8D0F>I<030003000600060006000600FF800C000C000C00180018001800
1800300031003100310032001C0009147D930C>I<1C0826184618461886300C300C300C
30186018621862186208E407380F0E7D8D13>I<1C1026184618461886100C100C100C10
1820182018401840088007000D0E7D8D10>I<1C0410260C18460C18460C188618100C18
100C18100C18101830201830201830401830400C5880078F00150E7D8D18>I
E /Ff 10 58 df<1F00318060C04040C060C060C060C060C060C060C060C060404060C0
31801F000B107F8F0F>48 D<0C003C00CC000C000C000C000C000C000C000C000C000C00
0C000C000C00FF8009107E8F0F>I<1F00618040C08060C0600060006000C00180030006
000C00102020207FC0FFC00B107F8F0F>I<1F00218060C060C000C0008001800F000080
00400060C060C060804060801F000B107F8F0F>I<0300030007000F000B001300330023
004300C300FFE003000300030003001FE00B107F8F0F>I<20803F002C00200020002000
2F0030802040006000600060C06080C061801F000B107F8F0F>I<0780184030C060C060
00C000CF00F080E040C060C060C060406060C030801F000B107F8F0F>I<40007FE07FC0
8080808001000200040004000C0008000800180018001800180018000B117E900F>I<1F
00318060C060C060C071803F000F00338061C0C060C060C060404060801F000B107F8F0F
>I<1F00318060C0C040C060C060C06040E021E01E600060004060C0608043003E000B10
7F8F0F>I E /Fg 10 58 df<0F0030C0606060604020C030C030C030C030C030C030C030
C030C03040206060606030C00F000C137E9211>48 D<0C001C00EC000C000C000C000C00
0C000C000C000C000C000C000C000C000C000C000C00FFC00A137D9211>I<1F0060C060
60F070F030603000700070006000C001C00180020004000810101020207FE0FFE00C137E
9211>I<0FC030707038703870380038003000E00FC0007000380018001C601CF01CF018
E03860701FC00E137F9211>I<006000E000E00160026006600C600860106020606060C0
60FFFC0060006000600060006003FC0E137F9211>I<60607FC07F804400400040004000
4F0070C040E0006000700070E070E070E06040E021C01F000C137E9211>I<07C00C2010
70207060006000C000CF00D0C0E060C020C030C030C03040306020206010C00F000C137E
9211>I<40007FFC7FF8401080108020004000800100010003000200060006000E000E00
0E000E000E0004000E147E9311>I<0FC0107020186018601870183C303F600F800FE031
F06078C01CC00CC00CC00C601830300FC00E137F9211>I<0F00308060404060C020C030
C030C0304030607030B00F30003000200060E040E08041003E000C137E9211>I
E /Fh 37 124 df<003FC1FE0001F03F818003C03E01C007C07E03E00F807C03E00F807C
03E00F807C01C00F807C00000F807C00000F807C00000F807C0000FFFFFFFFE0FFFFFFFF
E00F807C03E00F807C03E00F807C03E00F807C03E00F807C03E00F807C03E00F807C03E0
0F807C03E00F807C03E00F807C03E00F807C03E00F807C03E00F807C03E00F807C03E07F
E1FF0FFC7FE1FF0FFC261D809C28>14 D<FFE0FFE0FFE0FFE00B047F8A10>45
D<78FCFCFCFC7806067D850D>I<000180000380000380000700000700000700000E0000
0E00001C00001C00001C0000380000380000380000700000700000E00000E00000E00001
C00001C00001C0000380000380000380000700000700000E00000E00000E00001C00001C
00001C0000380000380000700000700000700000E00000E00000C0000011297D9E18>I<
00600001E0000FE000FFE000F3E00003E00003E00003E00003E00003E00003E00003E000
03E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E000
03E0007FFF807FFF80111B7D9A18>49 D<07F8001FFE00383F80780FC0FC07C0FC07E0FC
03E0FC03E07803E00007E00007C00007C0000F80001F00001E0000380000700000E00001
80600300600600600800E01FFFC03FFFC07FFFC0FFFFC0FFFFC0131B7E9A18>I<03F800
1FFE003C1F003C0F807C07C07E07C07C07C03807C0000F80000F80001E00003C0003F800
001E00000F800007C00007C00007E03007E07807E0FC07E0FC07E0FC07C0780F80781F00
1FFE0007F800131B7E9A18>I<78FCFCFCFC7800000000000078FCFCFCFC7806127D910D>
58 D<001FE02000FFF8E003F80FE007C003E00F8001E01F0000E03E0000E03E0000607E
0000607C000060FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC
0000007C0000607E0000603E0000603E0000C01F0000C00F80018007C0030003F80E0000
FFFC00001FE0001B1C7D9B22>67 D<FFFFF800FFFFFF000FC01FC00FC007E00FC001F00F
C001F80FC000F80FC000FC0FC0007C0FC0007C0FC0007E0FC0007E0FC0007E0FC0007E0F
C0007E0FC0007E0FC0007E0FC0007E0FC0007C0FC0007C0FC0007C0FC000F80FC000F80F
C001F00FC007E00FC01FC0FFFFFF00FFFFF8001F1C7E9B25>I<FFFFFF00FFFFFF000FC0
1F000FC007000FC003000FC003800FC003800FC001800FC181800FC181800FC180000FC1
80000FC380000FFF80000FFF80000FC380000FC180000FC180000FC180000FC180000FC0
00000FC000000FC000000FC000000FC000000FC00000FFFF0000FFFF0000191C7E9B1E>
70 D<FFFFF800FFFFFE000FC03F800FC00F800FC007C00FC007E00FC007E00FC007E00F
C007E00FC007E00FC007C00FC007C00FC00F800FC03F000FFFFC000FC000000FC000000F
C000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00000FF
FC0000FFFC00001B1C7E9B21>80 D<FFFFF00000FFFFFE00000FC03F00000FC00F80000F
C007C0000FC007E0000FC007E0000FC007E0000FC007E0000FC007E0000FC007C0000FC0
0F80000FC03E00000FFFF000000FC07C00000FC03E00000FC03F00000FC01F80000FC01F
80000FC01F80000FC01F80000FC01F80000FC01F80000FC01F81800FC01F81800FC00FC1
80FFFC07C300FFFC01FE00211C7E9B24>82 D<07F8201FFEE03C07E07801E07000E0F000
E0F00060F00060F80000FE0000FFE0007FFE003FFF003FFF800FFFC007FFE0007FE00003
F00001F00000F0C000F0C000F0C000E0E000E0F001C0FC03C0EFFF0083FC00141C7D9B1B
>I<FFFC03FFFFFC03FF0FC000300FC000300FC000300FC000300FC000300FC000300FC0
00300FC000300FC000300FC000300FC000300FC000300FC000300FC000300FC000300FC0
00300FC000300FC000300FC0003007C0003007C0006003E000E001F001C000FC0780007F
FE00000FF800201C7E9B25>85 D<0FF8001C1E003E0F803E07803E07C01C07C00007C000
7FC007E7C01F07C03C07C07C07C0F807C0F807C0F807C0780BC03E13F80FE1F815127F91
17>97 D<FF0000FF00001F00001F00001F00001F00001F00001F00001F00001F00001F00
001F3F801FE1E01F80701F00781F003C1F003C1F003E1F003E1F003E1F003E1F003E1F00
3E1F003C1F003C1F00781F80701EC1E01C3F00171D7F9C1B>I<03FC000E0E001C1F003C
1F00781F00780E00F80000F80000F80000F80000F80000F800007800007801803C01801C
03000E0E0003F80011127E9115>I<000FF0000FF00001F00001F00001F00001F00001F0
0001F00001F00001F00001F001F9F00F07F01C03F03C01F07801F07801F0F801F0F801F0
F801F0F801F0F801F0F801F07801F07801F03C01F01C03F00F0FFE03F9FE171D7E9C1B>
I<01FC000F07001C03803C01C07801C07801E0F801E0F801E0FFFFE0F80000F80000F800
007800007C00603C00601E00C00F038001FC0013127F9116>I<007F0001E38003C7C007
87C00F87C00F83800F80000F80000F80000F80000F8000FFF800FFF8000F80000F80000F
80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80007F
F8007FF800121D809C0F>I<03F8F00E0F381E0F381C07303C07803C07803C07803C0780
1C07001E0F000E0E001BF8001000001800001800001FFF001FFFC00FFFE01FFFF07801F8
F00078F00078F000787000707800F01E03C007FF00151B7F9118>I<FF0000FF00001F00
001F00001F00001F00001F00001F00001F00001F00001F00001F0FC01F31E01F40F01F80
F81F80F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00
F8FFE7FFFFE7FF181D7F9C1B>I<1E003F003F003F003F001E0000000000000000000000
0000FF00FF001F001F001F001F001F001F001F001F001F001F001F001F001F001F00FFE0
FFE00B1E7F9D0E>I<FF0000FF00001F00001F00001F00001F00001F00001F00001F0000
1F00001F00001F0FF81F0FF81F03801F07001F0C001F18001F70001FF8001FFC001FBC00
1F3E001F1F001F0F001F0F801F07C01F03E0FFC7FCFFC7FC161D7F9C19>107
D<FF00FF001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F00FFE0FFE00B1D7F9C0E>I<FF0FC07E00FF
31E18F001F40F207801F80FC07C01F80FC07C01F00F807C01F00F807C01F00F807C01F00
F807C01F00F807C01F00F807C01F00F807C01F00F807C01F00F807C01F00F807C01F00F8
07C0FFE7FF3FF8FFE7FF3FF825127F9128>I<FF0FC0FF31E01F40F01F80F81F80F81F00
F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F8FFE7FFFFE7
FF18127F911B>I<01FC000F07801C01C03C01E07800F07800F0F800F8F800F8F800F8F8
00F8F800F8F800F87800F07800F03C01E01E03C00F078001FC0015127F9118>I<FF3F80
FFE1E01F80F01F00781F007C1F003C1F003E1F003E1F003E1F003E1F003E1F003E1F003C
1F007C1F00781F80F01FC1E01F3F001F00001F00001F00001F00001F00001F0000FFE000
FFE000171A7F911B>I<FE3E00FE47001E8F801E8F801E8F801F07001F00001F00001F00
001F00001F00001F00001F00001F00001F00001F0000FFF000FFF00011127F9114>114
D<1FD830786018E018E018F000FF807FE07FF01FF807FC007CC01CC01CE01CE018F830CF
C00E127E9113>I<0300030003000300070007000F000F003FFCFFFC1F001F001F001F00
1F001F001F001F001F001F0C1F0C1F0C1F0C0F08079803F00E1A7F9913>I<FF07F8FF07
F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00
F81F01F80F01F80786FF01F8FF18127F911B>I<FFC1FCFFC1FC1F00601F80E00F80C00F
C0C007C18007C18003E30003E30001F60001F60001FE0000FC0000FC0000780000780000
300016127F9119>I<FF8FF8FEFF8FF8FE1F03E0301F03E0301F83E0700F83F0600F86F0
6007C6F0C007CEF8C007EC79C003EC7D8003F83D8001F83F0001F83F0001F01F0000F01E
0000E00E0000E00E001F127F9122>I<FFFFFE1701808B18>123 D
E /Fi 61 124 df<00FCF807839C0E079C1C07081C07001C07001C07001C07001C0700FF
FFE01C07001C07001C07001C07001C07001C07001C07001C07001C07001C07001C07001C
0700FF1FE01617809615>11 D<00FC000782000E07001C07001C02001C00001C00001C00
001C0000FFFF001C07001C07001C07001C07001C07001C07001C07001C07001C07001C07
001C07001C0700FF1FE01317809614>I<60C0F1E0F1E070E01020102020402040408040
800B0A7F9612>34 D<60F0F070101020204040040A7D960A>39 D<0102040C1818303070
606060E0E0E0E0E0E0E0E0E0E060606070303018180C04020108227D980E>I<80402030
18180C0C0E060606070707070707070707070606060E0C0C18183020408008227E980E>
I<60F0F070101020204040040A7D830A>44 D<FF80FF80090280870C>I<60F0F0600404
7D830A>I<03000700FF0007000700070007000700070007000700070007000700070007
0007000700070007007FF00C157E9412>49 D<0F8030E040708030C038E0384038003800
700070006000C00180030006000C08080810183FF07FF0FFF00D157E9412>I<0FE03030
6018701C701C001C00180038006007E000300018000C000E000EE00EE00EC00C40183030
0FE00F157F9412>I<00300030007000F001F001700270047008701870107020704070C0
70FFFE0070007000700070007003FE0F157F9412>I<20303FE03FC02400200020002000
20002F8030E020700030003800384038E038E0388030406020C01F000D157E9412>I<40
007FFE7FFC7FF8C008801080200040008000800100010003000200060006000E000E000E
000E000E0004000F167E9512>55 D<07C0183030186018E00CE00CE00EE00EE00E601E30
1E186E0F8E000E000C001C70187018603020C01F800F157F9412>57
D<60F0F06000000000000060F0F060040E7D8D0A>I<60F0F06000000000000060F0F070
10102020404004147D8D0A>I<001000003800003800003800005C00005C00005C00008E
00008E00008E0001070001070003078002038002038007FFC00401C00401C00800E00800
E01800E03800F0FE03FE17177F961A>65 D<FFFE001C03801C00E01C00601C00701C0070
1C00701C00701C00E01C01C01FFF801FFFC01C00E01C00701C00301C00381C00381C0038
1C00381C00701C00E01C01C0FFFF0015177F9619>I<00FC100383300E00B01C00703800
30300030700010600010E00010E00000E00000E00000E00000E00000E000106000107000
103000203800201C00400E008003830000FC0014177E9619>I<FFFF001C01C01C00E01C
00301C00381C00181C001C1C000C1C000E1C000E1C000E1C000E1C000E1C000E1C000E1C
000C1C001C1C001C1C00381C00301C00601C01C0FFFF0017177F961B>I<FFFFE01C00E0
1C00601C00201C00101C00101C00101C04001C04001C04001C0C001FFC001C0C001C0400
1C04081C04081C00081C00181C00101C00101C00301C00F0FFFFF015177F9618>I<FFFF
E01C00E01C00601C00201C00101C00101C00101C04001C04001C04001C0C001FFC001C0C
001C04001C04001C04001C00001C00001C00001C00001C00001C0000FFC00014177F9617
>I<FFE00E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E00
0E000E000E000E000E00FFE00B177F960D>73 D<FC00FE1E00381F001017001013801011
C01011C01010E010107010103810103810101C10100E10100F101007101003901001D010
01D01000F0100070100030380030FE001017177F961A>78 D<00FC000303000E01C01C00
E0380070300030700038600018E0001CE0001CE0001CE0001CE0001CE0001CE0001C7000
387000383000303800701C00E00E01C003030000FC0016177E961B>I<FFFE001C03801C
00C01C00601C00701C00701C00701C00701C00601C00C01C03801FFE001C00001C00001C
00001C00001C00001C00001C00001C00001C00001C0000FF800014177F9618>I<FFFC00
1C03801C00C01C00E01C00701C00701C00701C00701C00E01C00C01C03801FFE001C0780
1C01C01C00E01C00E01C00E01C00E01C00E01C00E11C00E11C0072FF803C18177F961A>
82 D<0FC4302C601C400CC004C004C004E00070007F003FE00FF801FC001C000E000680
0680068006C004E008D81087E00F177E9614>I<7FFFF860381840380840380880380480
380480380400380000380000380000380000380000380000380000380000380000380000
380000380000380000380000380007FFC016177F9619>I<FF80FE1C00381C00101C0010
1C00101C00101C00101C00101C00101C00101C00101C00101C00101C00101C00101C0010
1C00101C00100E0020060020030040018180007E0017177F961A>I<FF07FC3F803C01E0
0E001C00E004001C00E004001C017004000E017008000E017008000E0238080007023810
00070238100007041C100003841C200003841C200003880E200001C80E400001C80E4000
01D80F400000F007800000F007800000F007800000600300000060030000006003000021
177F9624>87 D<FCFCC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C0C0FCFC06217D980A>91 D<204020404080408081008100E1C0F1E0F1E060C00B0A7B96
12>I<FCFC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0CFCFC
062180980A>I<1FC0386038301038003803F81E3830387038E039E039E07970FF1F1E10
0E7F8D12>97 D<FC00001C00001C00001C00001C00001C00001C00001C00001C00001CF8
001F06001C03001C03801C01801C01C01C01C01C01C01C01C01C01801C03801C03001B0E
0010F8001217809614>I<07F01838303870106000E000E000E000E00060007008300818
3007C00D0E7F8D10>I<007E00000E00000E00000E00000E00000E00000E00000E00000E
0007CE001C3E00300E00700E00600E00E00E00E00E00E00E00E00E00600E00700E00301E
00182E0007CFC012177F9614>I<0FC0186030307038E018FFF8E000E000E00060007008
3010183007C00D0E7F8D10>I<03E006700E701C201C001C001C001C001C00FF801C001C
001C001C001C001C001C001C001C001C001C001C00FF800C1780960B>I<0F9E18E33060
707070707070306018C02F80200060003FE03FF83FFC600EC006C006C006600C38380FE0
10157F8D12>I<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C7C
001D8E001E07001C07001C07001C07001C07001C07001C07001C07001C07001C07001C07
00FF9FE01317809614>I<183C3C1800000000007C1C1C1C1C1C1C1C1C1C1C1C1CFF0817
80960A>I<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C3F801C
1C001C18001C20001C40001CC0001FE0001CF0001C70001C78001C3C001C1E001C1E00FF
3FC01217809613>107 D<FC001C001C001C001C001C001C001C001C001C001C001C001C
001C001C001C001C001C001C001C001C001C00FF80091780960A>I<FC7C1F001D8E6380
1E0781C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C0
1C0701C01C0701C0FF9FE7F81D0E808D1E>I<FC7C001D8E001E07001C07001C07001C07
001C07001C07001C07001C07001C07001C07001C0700FF9FE0130E808D14>I<07C01830
3018600C600CE00EE00EE00EE00EE00E701C3018183007C00F0E7F8D12>I<FCF8001F0E
001C03001C03801C01801C01C01C01C01C01C01C01C01C01801C03801C07001F0E001CF8
001C00001C00001C00001C00001C0000FF80001214808D14>I<07C2001C2600381E0070
0E00600E00E00E00E00E00E00E00E00E00600E00700E00301E001C2E0007CE00000E0000
0E00000E00000E00000E00007FC012147F8D13>I<FCF01D381E381C101C001C001C001C
001C001C001C001C001C00FF800D0E808D0E>I<1F4060C0C040C040E000FF007F801FC0
01E080608060C060E0C09F000B0E7F8D0E>I<080008000800180018003800FF80380038
003800380038003800380038403840384038401C800F000A147F930E>I<FC3F001C0700
1C07001C07001C07001C07001C07001C07001C07001C07001C07001C0F000E170003E7E0
130E808D14>I<FE1F3C0E3C0C1C081C080E100E100720072003C003C003C00180018010
0E7F8D13>I<FCFE7C3838383838101C3C201C3C201C4C200E4E400E4E400E8640078780
078780070380030300030300160E7F8D19>I<FE3F3C181C100E20074007C0038001C002
E004F008701838383CFC7F100E7F8D13>I<FE1F3C0E3C0C1C081C080E100E1007200720
03C003C003C00180018001000100E200E200A400780010147F8D13>I<FFFF8011018088
12>123 D E /Fj 1 4 df<0C000C008C40EDC07F800C007F80EDC08C400C000C000A0B7D
8B10>3 D E /Fk 79 125 df<007E1F0001C1B1800303E3C00703C3C00E03C1800E01C0
000E01C0000E01C0000E01C0000E01C0000E01C000FFFFFC000E01C0000E01C0000E01C0
000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0
000E01C0000E01C0000E01C0000E01C0007F87FC001A1D809C18>11
D<007E0001C1800301800703C00E03C00E01800E00000E00000E00000E00000E0000FFFF
C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01
C00E01C00E01C00E01C00E01C07F87F8151D809C17>I<007FC001C1C00303C00703C00E
01C00E01C00E01C00E01C00E01C00E01C00E01C0FFFFC00E01C00E01C00E01C00E01C00E
01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C07F
CFF8151D809C17>I<003F07E00001C09C18000380F018000701F03C000E01E03C000E00
E018000E00E000000E00E000000E00E000000E00E000000E00E00000FFFFFFFC000E00E0
1C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C
000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C00
0E00E01C007FC7FCFF80211D809C23>I<6060F0F0F8F868680808080808081010101020
20404080800D0C7F9C15>34 D<00E0000001900000030800000308000007080000070800
0007080000070800000710000007100000072000000740000003C03FE003800F00038006
000380040005C0040009C0080010E0100030E010006070200060702000E0384000E03C40
00E01C8000E00F0020E0070020700780403009C0401830E18007C03E001B1F7E9D20>38
D<60F0F8680808081010204080050C7C9C0C>I<004000800100020006000C000C001800
1800300030007000600060006000E000E000E000E000E000E000E000E000E000E000E000
E000600060006000700030003000180018000C000C00060002000100008000400A2A7D9E
10>I<800040002000100018000C000C000600060003000300038001800180018001C001
C001C001C001C001C001C001C001C001C001C001C0018001800180038003000300060006
000C000C00180010002000400080000A2A7E9E10>I<60F0F0701010101020204080040C
7C830C>44 D<FFE0FFE00B0280890E>I<60F0F06004047C830C>I<000100030006000600
06000C000C000C0018001800180030003000300060006000C000C000C001800180018003
0003000300060006000C000C000C00180018001800300030003000600060006000C000C0
0010297E9E15>I<03C00C301818300C300C700E60066006E007E007E007E007E007E007
E007E007E007E007E007E007E00760066006700E300C300C18180C3007E0101D7E9B15>
I<030007003F00C700070007000700070007000700070007000700070007000700070007
00070007000700070007000700070007000F80FFF80D1C7C9B15>I<07C01830201C400C
400EF00FF80FF807F8077007000F000E000E001C001C00380070006000C0018003000601
0C01180110023FFE7FFEFFFE101C7E9B15>I<07E01830201C201C781E780E781E381E00
1C001C00180030006007E00030001C001C000E000F000F700FF80FF80FF80FF00E401C20
1C183007E0101D7E9B15>I<000C00000C00001C00003C00003C00005C0000DC00009C00
011C00031C00021C00041C000C1C00081C00101C00301C00201C00401C00C01C00FFFFC0
001C00001C00001C00001C00001C00001C00001C0001FFC0121C7F9B15>I<300C3FF83F
F03FC020002000200020002000200023E024302818301C200E000E000F000F000F600FF0
0FF00FF00F800E401E401C2038187007C0101D7E9B15>I<00F0030C06040C0E181E301E
300C700070006000E3E0E430E818F00CF00EE006E007E007E007E007E007600760077006
300E300C18180C3003E0101D7E9B15>I<4000007FFF807FFF007FFF0040020080040080
040080080000100000100000200000600000400000C00000C00001C00001800001800003
8000038000038000038000078000078000078000078000078000078000030000111D7E9B
15>I<03E00C301008200C20066006600660067006780C3E083FB01FE007F007F818FC30
7E601E600FC007C003C003C003C00360026004300C1C1007E0101D7E9B15>I<03C00C30
1818300C700C600EE006E006E007E007E007E007E0076007700F300F18170C2707C70006
0006000E300C780C78187010203030C00F80101D7E9B15>I<60F0F06000000000000000
00000060F0F06004127C910C>I<60F0F0600000000000000000000060F0F07010101010
20204080041A7C910C>I<000600000006000000060000000F0000000F0000000F000000
17800000178000001780000023C0000023C0000023C0000041E0000041E0000041E00000
80F0000080F0000180F8000100780001FFF80003007C0002003C0002003C0006003E0004
001E0004001E000C001F001E001F00FF80FFF01C1D7F9C1F>65 D<FFFFC00F00F00F0038
0F003C0F001C0F001E0F001E0F001E0F001E0F001C0F003C0F00780F01F00FFFE00F0078
0F003C0F001E0F000E0F000F0F000F0F000F0F000F0F000F0F001E0F001E0F003C0F0078
FFFFE0181C7E9B1D>I<001F808000E0618001801980070007800E0003801C0003801C00
018038000180780000807800008070000080F0000000F0000000F0000000F0000000F000
0000F0000000F0000000F0000000700000807800008078000080380000801C0001001C00
01000E000200070004000180080000E03000001FC000191E7E9C1E>I<FFFFC0000F00F0
000F003C000F000E000F0007000F0007000F0003800F0003C00F0001C00F0001C00F0001
E00F0001E00F0001E00F0001E00F0001E00F0001E00F0001E00F0001E00F0001C00F0001
C00F0003C00F0003800F0007800F0007000F000E000F001C000F007000FFFFC0001B1C7E
9B20>I<FFFFFC0F003C0F000C0F00040F00040F00060F00020F00020F02020F02000F02
000F02000F06000FFE000F06000F02000F02000F02000F02010F00010F00020F00020F00
020F00060F00060F000C0F003CFFFFFC181C7E9B1C>I<FFFFF80F00780F00180F00080F
00080F000C0F00040F00040F02040F02000F02000F02000F06000FFE000F06000F02000F
02000F02000F02000F00000F00000F00000F00000F00000F00000F00000F8000FFF80016
1C7E9B1B>I<001F808000E0618001801980070007800E0003801C0003801C0001803800
0180780000807800008070000080F0000000F0000000F0000000F0000000F0000000F000
0000F000FFF0F0000F80700007807800078078000780380007801C0007801C0007800E00
078007000B800180118000E06080001F80001C1E7E9C21>I<FFF3FFC00F003C000F003C
000F003C000F003C000F003C000F003C000F003C000F003C000F003C000F003C000F003C
000F003C000FFFFC000F003C000F003C000F003C000F003C000F003C000F003C000F003C
000F003C000F003C000F003C000F003C000F003C000F003C00FFF3FFC01A1C7E9B1F>I<
FFF00F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00
0F000F000F000F000F000F000F000F000F00FFF00C1C7F9B0F>I<1FFF00F80078007800
7800780078007800780078007800780078007800780078007800780078007800787078F8
78F878F878F0F040E021C01F00101D7F9B15>I<FFF8000F80000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F
00000F00080F00080F00080F00180F00180F00100F00300F00700F01F0FFFFF0151C7E9B
1A>76 D<FF8000FF800F8000F8000F8000F8000BC00178000BC00178000BC001780009E0
02780009E002780008F004780008F004780008F004780008780878000878087800087808
7800083C107800083C107800083C107800081E207800081E207800081E207800080F4078
00080F40780008078078000807807800080780780008030078001C03007800FF8307FF80
211C7E9B26>I<FF007FC00F800E000F8004000BC0040009E0040009E0040008F0040008
F8040008780400083C0400083C0400081E0400080F0400080F0400080784000807C40008
03C4000801E4000801E4000800F40008007C0008007C0008003C0008003C0008001C0008
000C001C000C00FF8004001A1C7E9B1F>I<003F800000E0E0000380380007001C000E00
0E001C0007003C00078038000380780003C0780003C0700001C0F00001E0F00001E0F000
01E0F00001E0F00001E0F00001E0F00001E0F00001E0700001C0780003C0780003C03800
03803C0007801C0007000E000E0007001C000380380000E0E000003F80001B1E7E9C20>
I<FFFF800F00E00F00780F003C0F001C0F001E0F001E0F001E0F001E0F001E0F001C0F00
3C0F00780F00E00FFF800F00000F00000F00000F00000F00000F00000F00000F00000F00
000F00000F00000F0000FFF000171C7E9B1C>I<003F800000E0E0000380380007001C00
0E000E001C0007003C00078038000380780003C0780003C0700001C0F00001E0F00001E0
F00001E0F00001E0F00001E0F00001E0F00001E0F00001E0700001C0780003C0780003C0
380003803C0E07801C1107000E208E0007205C0003A0780000F0E020003FE02000006020
00003060000038E000003FC000003FC000001F8000000F001B257E9C20>I<FFFF00000F
01E0000F0078000F003C000F001C000F001E000F001E000F001E000F001E000F001C000F
003C000F0078000F01E0000FFF00000F03C0000F00E0000F00F0000F0078000F0078000F
0078000F0078000F0078000F0078000F0078100F0078100F0038100F003C20FFF01C2000
0007C01C1D7E9B1F>I<07E0801C1980300580700380600180E00180E00080E00080E000
80F00000F800007C00007FC0003FF8001FFE0007FF0000FF80000F800007C00003C00001
C08001C08001C08001C0C00180C00180E00300D00200CC0C0083F800121E7E9C17>I<7F
FFFFC0700F01C0600F00C0400F0040400F0040C00F0020800F0020800F0020800F002000
0F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F000000
0F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000001F800003
FFFC001B1C7F9B1E>I<FFF07FC00F000E000F0004000F0004000F0004000F0004000F00
04000F0004000F0004000F0004000F0004000F0004000F0004000F0004000F0004000F00
04000F0004000F0004000F0004000F0004000F0004000F00040007000800078008000380
10000180100000C020000070C000001F00001A1D7E9B1F>I<FFE00FF01F0003C00F0001
800F0001000F800300078002000780020003C0040003C0040003C0040001E0080001E008
0001F0080000F0100000F0100000F830000078200000782000003C4000003C4000003C40
00001E8000001E8000001F8000000F0000000F00000006000000060000000600001C1D7F
9B1F>I<FFE0FFE0FF1F001F003C1E001E00180F001F00100F001F00100F001F00100780
1F00200780278020078027802003C027804003C043C04003C043C04003E043C04001E081
E08001E081E08001E081E08000F100F10000F100F10000F100F100007900FA00007A007A
00007A007A00003E007C00003C003C00003C003C00003C003C0000180018000018001800
0018001800281D7F9B2B>I<FFF007FC0F8001E00780008007C0018003C0010003E00200
01F0020000F0040000F8040000780800007C1800003C1000001E2000001F2000000F4000
000FC0000007800000078000000780000007800000078000000780000007800000078000
000780000007800000078000007FF8001E1C809B1F>89 D<FEFEC0C0C0C0C0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0FEFE07297C9E0C>91
D<08081010202040404040808080808080B0B0F8F8787830300D0C7A9C15>I<FEFE0606
0606060606060606060606060606060606060606060606060606060606060606060606FE
FE0729809E0C>I<0810204040808080B0F87830050C7D9C0C>96
D<1FC000307000783800781C00301C00001C00001C0001FC000F1C00381C00701C00601C
00E01C40E01C40E01C40603C40304E801F870012127E9115>I<FC00001C00001C00001C
00001C00001C00001C00001C00001C00001C00001C00001C7C001D86001E03001C01801C
01C01C00C01C00E01C00E01C00E01C00E01C00E01C00E01C00C01C01C01C01801E030019
060010F800131D7F9C17>I<07E00C301878307870306000E000E000E000E000E000E000
60007004300418080C3007C00E127E9112>I<003F000007000007000007000007000007
0000070000070000070000070000070003E7000C1700180F00300700700700600700E007
00E00700E00700E00700E00700E00700600700700700300700180F000C370007C7E0131D
7E9C17>I<03E00C301818300C700E6006E006FFFEE000E000E000E00060007002300218
040C1803E00F127F9112>I<00F8018C071E061E0E0C0E000E000E000E000E000E00FFE0
0E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E007FE00F1D
809C0D>I<00038003C4C00C38C01C3880181800381C00381C00381C00381C001818001C
38000C300013C0001000003000001800001FF8001FFF001FFF803003806001C0C000C0C0
00C0C000C06001803003001C0E0007F800121C7F9215>I<FC00001C00001C00001C0000
1C00001C00001C00001C00001C00001C00001C00001C7C001C87001D03001E03801C0380
1C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C0380
FF9FF0141D7F9C17>I<18003C003C0018000000000000000000000000000000FC001C00
1C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00FF80091D7F9C
0C>I<00C001E001E000C000000000000000000000000000000FE000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E060E0F0C0F1
C061803E000B25839C0D>I<FC00001C00001C00001C00001C00001C00001C00001C0000
1C00001C00001C00001C3FC01C0F001C0C001C08001C10001C20001C40001CE0001DE000
1E70001C78001C38001C3C001C1C001C0E001C0F001C0F80FF9FE0131D7F9C16>I<FC00
1C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00
1C001C001C001C001C001C001C001C001C00FF80091D7F9C0C>I<FC7E07E0001C838838
001D019018001E01E01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C00
1C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C
01C01C00FF8FF8FF8021127F9124>I<FC7C001C87001D03001E03801C03801C03801C03
801C03801C03801C03801C03801C03801C03801C03801C03801C03801C0380FF9FF01412
7F9117>I<03F0000E1C00180600300300700380600180E001C0E001C0E001C0E001C0E0
01C0E001C06001807003803003001806000E1C0003F00012127F9115>I<FC7C001D8600
1E03001C01801C01C01C00C01C00E01C00E01C00E01C00E01C00E01C00E01C01C01C01C0
1C01801E03001D06001CF8001C00001C00001C00001C00001C00001C00001C0000FF8000
131A7F9117>I<03C1000C3300180B00300F00700700700700E00700E00700E00700E007
00E00700E00700600700700700300F00180F000C370007C7000007000007000007000007
00000700000700000700003FE0131A7E9116>I<FCE01D301E781E781C301C001C001C00
1C001C001C001C001C001C001C001C001C00FFC00D127F9110>I<1F9030704030C010C0
10E010F8007F803FE00FF000F880388018C018C018E010D0608FC00D127F9110>I<0400
0400040004000C000C001C003C00FFE01C001C001C001C001C001C001C001C001C001C10
1C101C101C101C100C100E2003C00C1A7F9910>I<FC1F801C03801C03801C03801C0380
1C03801C03801C03801C03801C03801C03801C03801C03801C03801C07800C07800E1B80
03E3F014127F9117>I<FF07E03C03801C01001C01000E02000E02000704000704000704
0003880003880003D80001D00001D00000E00000E00000E00000400013127F9116>I<FF
3FCFE03C0F03801C0701801C0701001C0B01000E0B82000E0B82000E1182000711C40007
11C4000720C40003A0E80003A0E80003C0680001C0700001C0700001803000008020001B
127F911E>I<7F8FF00F03800F030007020003840001C80001D80000F000007000007800
00F800009C00010E00020E000607000403801E07C0FF0FF81512809116>I<FF07E03C03
801C01001C01000E02000E020007040007040007040003880003880003D80001D00001D0
0000E00000E00000E000004000004000008000008000F08000F10000F300006600003C00
00131A7F9116>I<7FFC70386038407040F040E041C003C0038007000F040E041C043C0C
380870087038FFF80E127F9112>I<FFFFFFFFFF802901808B2A>124
D E /Fl 27 119 df<000FF000007FFC0001F80E0003E01F0007C03F000F803F000F803F
000F801E000F800C000F8000000F8000000F8000000F800000FFFFFF00FFFFFF000F801F
000F801F000F801F000F801F000F801F000F801F000F801F000F801F000F801F000F801F
000F801F000F801F000F801F000F801F000F801F000F801F000F801F000F801F007FF0FF
E07FF0FFE01B237FA21F>12 D<00180000780001F800FFF800FFF80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8007FFFE07FFF
E013207C9F1C>49 D<03FC000FFF003C1FC07007E07C07F0FE03F0FE03F8FE03F8FE01F8
7C01F83803F80003F80003F00003F00007E00007C0000F80001F00003E00003800007000
00E01801C0180380180700180E00380FFFF01FFFF03FFFF07FFFF0FFFFF0FFFFF015207D
9F1C>I<00FE0007FFC00F07E01E03F03F03F03F81F83F81F83F81F81F03F81F03F00003
F00003E00007C0001F8001FE0001FF000007C00001F00001F80000FC0000FC3C00FE7E00
FEFF00FEFF00FEFF00FEFF00FC7E01FC7801F81E07F00FFFC001FE0017207E9F1C>I<00
00E00001E00003E00003E00007E0000FE0001FE0001FE00037E00077E000E7E001C7E001
87E00307E00707E00E07E00C07E01807E03807E07007E0E007E0FFFFFEFFFFFE0007E000
07E00007E00007E00007E00007E00007E000FFFE00FFFE17207E9F1C>I<000070000000
007000000000F800000000F800000000F800000001FC00000001FC00000003FE00000003
FE00000003FE00000006FF000000067F0000000E7F8000000C3F8000000C3F800000183F
C00000181FC00000381FE00000300FE00000300FE00000600FF000006007F00000E007F8
0000FFFFF80000FFFFF800018001FC00018001FC00038001FE00030000FE00030000FE00
0600007F000600007F00FFE00FFFF8FFE00FFFF825227EA12A>65
D<0003FE0080001FFF818000FF01E38001F8003F8003E0001F8007C0000F800F80000780
1F800007803F000003803F000003807F000001807E000001807E00000180FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E00
0000007E000001807F000001803F000001803F000003801F800003000F8000030007C000
060003F0000C0001F800380000FF00F000001FFFC0000003FE000021227DA128>67
D<FFFFE0FFFFE003F80003F80003F80003F80003F80003F80003F80003F80003F80003F8
0003F80003F80003F80003F80003F80003F80003F80003F80003F80003F80003F80003F8
0003F80003F80003F80003F80003F80003F80003F80003F800FFFFE0FFFFE013227FA115
>73 D<FFF000000FFFFFF800001FFF07F800001FE006FC000037E006FC000037E006FC00
0037E0067E000067E0067E000067E0063F0000C7E0063F0000C7E0061F800187E0061F80
0187E0060FC00307E0060FC00307E0060FC00307E00607E00607E00607E00607E00603F0
0C07E00603F00C07E00601F81807E00601F81807E00601F81807E00600FC3007E00600FC
3007E006007E6007E006007E6007E006003FC007E006003FC007E006001F8007E006001F
8007E006001F8007E006000F0007E0FFF00F00FFFFFFF00600FFFF30227EA135>77
D<FFFFFF00FFFFFFE007F007F007F001FC07F000FC07F0007E07F0007E07F0007F07F000
7F07F0007F07F0007F07F0007F07F0007E07F0007E07F000FC07F001FC07F007F007FFFF
E007FFFF0007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F000
0007F0000007F0000007F0000007F0000007F00000FFFF8000FFFF800020227EA126>80
D<FFFFFE0000FFFFFFC00007F007F00007F001F80007F000FC0007F0007E0007F0007F00
07F0007F0007F0007F0007F0007F0007F0007F0007F0007F0007F0007E0007F000FC0007
F001F80007F007F00007FFFFC00007FFFF800007F00FE00007F007F00007F003F80007F0
01FC0007F001FC0007F001FC0007F001FC0007F001FC0007F001FC0007F001FC0007F001
FC0007F001FC0607F000FE0607F000FF0CFFFF803FF8FFFF800FF027227EA12A>82
D<07FC001FFF803F07C03F03E03F01E03F01F01E01F00001F00001F0003FF003FDF01FC1
F03F01F07E01F0FC01F0FC01F0FC01F0FC01F07E02F07E0CF81FF87F07E03F18167E951B
>97 D<00FF8007FFE00F83F01F03F03E03F07E03F07C01E07C0000FC0000FC0000FC0000
FC0000FC0000FC00007C00007E00007E00003E00301F00600FC0E007FF8000FE0014167E
9519>99 D<0001FE000001FE0000003E0000003E0000003E0000003E0000003E0000003E
0000003E0000003E0000003E0000003E0000003E0001FC3E0007FFBE000F81FE001F007E
003E003E007E003E007C003E00FC003E00FC003E00FC003E00FC003E00FC003E00FC003E
00FC003E00FC003E007C003E007C003E003E007E001E00FE000F83BE0007FF3FC001FC3F
C01A237EA21F>I<00FE0007FF800F87C01E01E03E01F07C00F07C00F8FC00F8FC00F8FF
FFF8FFFFF8FC0000FC0000FC00007C00007C00007E00003E00181F00300FC07003FFC000
FF0015167E951A>I<003F8000FFC001E3E003C7E007C7E00F87E00F83C00F80000F8000
0F80000F80000F80000F8000FFFC00FFFC000F80000F80000F80000F80000F80000F8000
0F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F8000
7FF8007FF80013237FA211>I<03FC1E0FFF7F1F0F8F3E07CF3C03C07C03E07C03E07C03
E07C03E07C03E03C03C03E07C01F0F801FFF0013FC003000003000003800003FFF801FFF
F00FFFF81FFFFC3800FC70003EF0001EF0001EF0001EF0001E78003C7C007C3F01F80FFF
E001FF0018217E951C>I<1C003F007F007F007F003F001C000000000000000000000000
000000FF00FF001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F
001F001F001F00FFE0FFE00B247EA310>105 D<FF00FF001F001F001F001F001F001F00
1F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F001F001F001F001F001F001F00FFE0FFE00B237EA210>108 D<FF07F007F000FF1FFC
1FFC001F303E303E001F403E403E001F801F801F001F801F801F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F
001F00FFE0FFE0FFE0FFE0FFE0FFE02B167E9530>I<FF07E000FF1FF8001F307C001F40
3C001F803E001F803E001F003E001F003E001F003E001F003E001F003E001F003E001F00
3E001F003E001F003E001F003E001F003E001F003E001F003E001F003E00FFE1FFC0FFE1
FFC01A167E951F>I<00FE0007FFC00F83E01E00F03E00F87C007C7C007C7C007CFC007E
FC007EFC007EFC007EFC007EFC007EFC007E7C007C7C007C3E00F81F01F00F83E007FFC0
00FE0017167E951C>I<FE1F00FE3FC01E67E01EC7E01E87E01E87E01F83C01F00001F00
001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F0000FFF0
00FFF00013167E9517>114 D<0FF3003FFF00781F00600700E00300E00300F00300FC00
007FE0007FF8003FFE000FFF0001FF00000F80C00780C00380E00380E00380F00700FC0E
00EFFC00C7F00011167E9516>I<01800001800001800001800003800003800007800007
80000F80003F8000FFFF00FFFF000F80000F80000F80000F80000F80000F80000F80000F
80000F80000F80000F80000F81800F81800F81800F81800F81800F830007C30003FE0000
F80011207F9F16>I<FF01FE00FF01FE001F003E001F003E001F003E001F003E001F003E
001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E
001F003E001F007E001F00FE000F81BE0007FF3FC001FC3FC01A167E951F>I<FFE01FE0
FFE01FE00F8006000F8006000FC00E0007C00C0007E01C0003E0180003E0180001F03000
01F0300000F8600000F86000007CC000007CC000007FC000003F8000003F8000001F0000
001F0000000E0000000E00001B167F951E>I E /Fm 39 122 df<0001FC000703000C03
001C07001C0300180000380000380000380000380000700007FFFC00701C00701C00701C
00E03800E03800E03800E03800E07001C07001C07001C07001C0E201C0E201C0E20380E4
038064038038038000030000070000060000C60000E40000CC00007000001825819C17>
12 D<00030006000800180030006000C000C0018003000300060006000C000C001C0018
001800380030003000700070006000600060006000E000E000E000E000E0006000600060
006000600020003000100008000800102A7B9E11>40 D<001000100008000C0004000600
06000600060006000700070007000700070006000600060006000E000E000C000C001C00
1800180038003000300060006000C000C001800300030006000C00180010006000C00010
2A809E11>I<183878380808101020404080050C7D830D>44 D<FFC0FFC0FFC00A037D89
0F>I<3078F06005047C830D>I<0000180000001800000038000000380000007800000078
000000B8000001B800000138000002380000023C0000041C0000041C0000081C0000181C
0000101C0000201C0000201C00007FFC0000401C0000801C0001801C0001001C0002001C
0002001C0004000E000C000E001C001E00FF00FFC01A1D7E9C1F>65
D<01FFFE00003C0780003803C0003801C0003801C0003801C0007001C0007003C0007003
C00070078000E0070000E00E0000E03C0000FFF80001C01C0001C00E0001C00F0001C00F
0003800F0003800F0003800F0003800F0007001E0007001C0007003C00070078000E01E0
00FFFF80001A1C7D9B1D>I<01FFE0003C00003800003800003800003800007000007000
00700000700000E00000E00000E00000E00001C00001C00001C00001C000038008038008
0380080380100700100700300700600700E00E03C0FFFFC0151C7D9B1A>76
D<01FE0007F8003E000780002E000F00002E001700002E001700002E002700004E002E00
004E004E00004E004E00004E008E00008E011C00008E011C00008E021C00008E021C0001
070438000107043800010708380001071038000207107000020720700002072070000207
407000040740E000040780E000040700E0000C0700E0001C0601E000FF861FFC00251C7D
9B25>I<0007F000001C1C0000700E0000E0070001C0038003800380070003800E0003C0
1E0003C01C0003C03C0003C03C0003C0780003C0780003C0780003C0F0000780F0000780
F0000780F0000F00F0000F00F0000E00F0001E00F0003C0070003800700070007800E000
3801C0001C0380000E0E000003F800001A1E7A9C20>79 D<01FFFC00003C070000380380
003801C0003801C0003801C0007003C0007003C0007003C00070038000E0078000E00700
00E00E0000E0380001FFE00001C0000001C0000001C00000038000000380000003800000
03800000070000000700000007000000070000000F000000FFE000001A1C7D9B1C>I<00
0F8400304C00403C00801801001803001803001806001006001006000007000007000003
E00003FC0001FF00007F800007C00001C00001C00000C00000C02000C02000C060018060
0180600300600200F00400CC180083E000161E7D9C17>83 D<1FFFFFC01C0701C0300E00
C0200E0080600E0080400E0080401C0080801C0080801C0080001C000000380000003800
0000380000003800000070000000700000007000000070000000E0000000E0000000E000
0000E0000001C0000001C0000001C0000001C0000003C000007FFE00001A1C799B1E>I<
7FF0FF800F001C000E0018000E0010000E0010000E0010001C0020001C0020001C002000
1C0020003800400038004000380040003800400070008000700080007000800070008000
E0010000E0010000E0010000E0020000E0020000E0040000E00400006008000030300000
104000000F800000191D779B1F>I<03CC063C0C3C181C3838303870387038E070E070E0
70E070E0E2C0E2C0E261E462643C380F127B9115>97 D<3F00070007000E000E000E000E
001C001C001C001C0039C03E60383038307038703870387038E070E070E070E060E0E0C0
C0C1C0618063003C000D1D7B9C13>I<01F007080C08181C3838300070007000E000E000
E000E000E000E008E010602030C01F000E127B9113>I<001F8000038000038000070000
0700000700000700000E00000E00000E00000E0003DC00063C000C3C00181C0038380030
3800703800703800E07000E07000E07000E07000E0E200C0E200C0E20061E4006264003C
3800111D7B9C15>I<01E007100C1018083810701070607F80E000E000E000E000E000E0
086010602030C01F000D127B9113>I<0003C0000670000C70001C60001C00001C000038
0000380000380000380000380003FF8000700000700000700000700000700000E00000E0
0000E00000E00000E00001C00001C00001C00001C00001C0000380000380000380000300
00030000070000C60000E60000CC00007800001425819C0D>I<00F3018F030F06070E0E
0C0E1C0E1C0E381C381C381C381C383830383038187818F00F700070007000E000E0C0C0
E1C0C3007E00101A7D9113>I<0FC00001C00001C0000380000380000380000380000700
000700000700000700000E78000E8C000F0E000E0E001C0E001C0E001C0E001C0E00381C
00381C00381C00383800703880703880707080707100E03200601C00111D7D9C15>I<01
800380010000000000000000000000000000001C002600470047008E008E000E001C001C
001C0038003800710071007100720072003C00091C7C9B0D>I<0FC00001C00001C00003
80000380000380000380000700000700000700000700000E0F000E11000E23800E43801C
83001C80001D00001E00003F800039C00038E00038E00070E20070E20070E20070E400E0
6400603800111D7D9C13>107 D<1F800380038007000700070007000E000E000E000E00
1C001C001C001C0038003800380038007000700070007000E400E400E400E40068003800
091D7C9C0B>I<3C1E0780266318C04683A0E04703C0E08E0380E08E0380E00E0380E00E
0380E01C0701C01C0701C01C0701C01C070380380E0388380E0388380E0708380E071070
1C0320300C01C01D127C9122>I<3C3C002646004687004707008E07008E07000E07000E
07001C0E001C0E001C0E001C1C00381C40381C40383840383880701900300E0012127C91
17>I<01E007180C0C180C380C300E700E700EE01CE01CE01CE018E038E030E06060C031
801E000F127B9115>I<07870004D98008E0C008E0C011C0E011C0E001C0E001C0E00381
C00381C00381C00381800703800703000707000706000E8C000E70000E00000E00001C00
001C00001C00001C00003C0000FF8000131A7F9115>I<03C4062C0C3C181C3838303870
387038E070E070E070E070E0E0C0E0C0E061E063C03DC001C001C0038003800380038007
803FF00E1A7B9113>I<3C3C26C2468747078E068E000E000E001C001C001C001C003800
3800380038007000300010127C9112>I<01F006080C080C1C18181C001F001FC00FF007
F0007800386030E030C030806060C01F000E127D9111>I<00C001C001C001C003800380
03800380FFE00700070007000E000E000E000E001C001C001C001C003840384038403880
19000E000B1A7D990E>I<1E0300270700470700470700870E00870E000E0E000E0E001C
1C001C1C001C1C001C1C003838803838801838801839001C5900078E0011127C9116>I<
1E06270E470E4706870287020E020E021C041C041C041C0818083808181018200C400780
0F127C9113>I<1E01832703874703874703838707018707010E07010E07011C0E021C0E
021C0E021C0E04180C04181C04181C081C1C100C263007C3C018127C911C>I<070E0019
910010E38020E38041C30041C00001C00001C00003800003800003800003800007020067
0200E70400CB04008B080070F00011127D9113>I<1E03270747074707870E870E0E0E0E
0E1C1C1C1C1C1C1C1C38383838183818381C7007F00070007000E0E0C0E1C0818047003C
00101A7C9114>I E /Fn 32 119 df<000FE000007FF80000F81C0001E07C0003E07C00
07C07C0007C07C0007C0380007C0000007C0000007C0000007C1FE00FFFFFE00FFFFFE00
07C03E0007C03E0007C03E0007C03E0007C03E0007C03E0007C03E0007C03E0007C03E00
07C03E0007C03E0007C03E0007C03E0007C03E0007C03E0007C03E003FF9FFC03FF9FFC0
1A20809F1D>12 D<FFF0FFF0FFF0FFF00C047F8B11>45 D<387CFEFEFE7C3807077C860F
>I<00E00001E0000FE000FFE000F3E00003E00003E00003E00003E00003E00003E00003
E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003
E00003E00003E00003E000FFFF80FFFF80111D7C9C1A>49 D<07F0001FFE00383F007C1F
80FE0FC0FE0FC0FE0FE0FE07E07C07E03807E0000FE0000FC0000FC0001F80001F00003E
0000780000F00000E00001C0000380600700600E00601C00E01FFFC03FFFC07FFFC0FFFF
C0FFFFC0131D7D9C1A>I<01FC0007FF000E0F801E0FC03F07E03F07E03F07E03F07E01E
0FC0000FC0000F80001F0001FC0001FC00000F800007C00003E00003F00003F83803F87C
03F8FE03F8FE03F8FE03F0FC03F07807E03C0FC01FFF8003FC00151D7E9C1A>I<0000E0
00000000E000000001F000000001F000000001F000000003F800000003F800000006FC00
000006FC0000000EFE0000000C7E0000000C7E000000183F000000183F000000303F8000
00301F800000701FC00000600FC00000600FC00000C007E00000FFFFE00001FFFFF00001
8003F000018003F000030001F800030001F800060001FC00060000FC000E0000FE00FFE0
0FFFE0FFE00FFFE0231F7E9E28>65 D<0007FC02003FFF0E00FE03DE03F000FE07E0003E
0FC0001E1F80001E3F00000E3F00000E7F0000067E0000067E000006FE000000FE000000
FE000000FE000000FE000000FE000000FE0000007E0000007E0000067F0000063F000006
3F00000C1F80000C0FC0001807E0003803F0007000FE01C0003FFF800007FC001F1F7D9E
26>67 D<FFFFFFFF07E007E007E007E007E007E007E007E007E007E007E007E007E007E0
07E007E007E007E007E007E007E007E007E007E007E007E007E0FFFFFFFF101F7E9E14>
73 D<FFFFFE00FFFFFF8007E00FE007E003F007E001F807E001F807E001FC07E001FC07
E001FC07E001FC07E001FC07E001F807E001F807E003F007E00FE007FFFF8007FFFE0007
E0000007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E0000007
E0000007E0000007E00000FFFF0000FFFF00001E1F7E9E24>80 D<03FC080FFF381E03F8
3800F8700078700038F00038F00018F00018F80000FC00007FC0007FFE003FFF801FFFE0
0FFFF007FFF000FFF80007F80000FC00007C00003CC0003CC0003CC0003CE00038E00078
F80070FE01E0E7FFC081FF00161F7D9E1D>83 D<7FFFFFFC7FFFFFFC7C07E07C7007E01C
6007E00C6007E00CE007E00EC007E006C007E006C007E006C007E0060007E0000007E000
0007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E000
0007E0000007E0000007E0000007E0000007E0000007E00003FFFFC003FFFFC01F1E7E9D
24>I<FFFF01FFE0FFFF01FFE007E0000C0007E0000C0007E0000C0007E0000C0007E000
0C0007E0000C0007E0000C0007E0000C0007E0000C0007E0000C0007E0000C0007E0000C
0007E0000C0007E0000C0007E0000C0007E0000C0007E0000C0007E0000C0007E0000C00
07E0000C0007E0000C0007E0000C0003E000180001F000180001F000300000F800600000
7E03C000001FFF80000003FC0000231F7E9E28>I<07FC001FFF003F0F803F07C03F03E0
3F03E00C03E00003E0007FE007FBE01F03E03C03E07C03E0F803E0F803E0F803E0FC05E0
7E0DE03FF8FE0FE07E17147F9319>97 D<FF0000FF00001F00001F00001F00001F00001F
00001F00001F00001F00001F00001F00001F1FC01F7FF01FE0F81F807C1F007E1F003E1F
003E1F003F1F003F1F003F1F003F1F003F1F003F1F003E1F003E1F007C1F807C1EC1F81C
7FE0181F8018207E9F1D>I<01FE0007FF801F0FC03E0FC03E0FC07C0FC07C0300FC0000
FC0000FC0000FC0000FC0000FC00007C00007E00003E00603F00C01F81C007FF0001FC00
13147E9317>I<0007F80007F80000F80000F80000F80000F80000F80000F80000F80000
F80000F80000F801F8F80FFEF81F83F83E01F87E00F87C00F87C00F8FC00F8FC00F8FC00
F8FC00F8FC00F8FC00F87C00F87C00F87E00F83E01F81F07F80FFEFF03F8FF18207E9F1D
>I<01FE0007FF800F83C01E01E03E00F07C00F07C00F8FC00F8FFFFF8FFFFF8FC0000FC
0000FC00007C00007C00003E00181E00180F807007FFE000FF8015147F9318>I<001F80
00FFC001F3E003E7E003C7E007C7E007C3C007C00007C00007C00007C00007C000FFFC00
FFFC0007C00007C00007C00007C00007C00007C00007C00007C00007C00007C00007C000
07C00007C00007C00007C00007C0003FFC003FFC0013207F9F10>I<01FC3C07FFFE0F07
9E1E03DE3E03E03E03E03E03E03E03E03E03E01E03C00F07800FFF0009FC001800001800
001C00001FFF800FFFF007FFF81FFFFC3C007C70003EF0001EF0001EF0001E78003C7800
3C3F01F80FFFE001FF00171E7F931A>I<FF0000FF00001F00001F00001F00001F00001F
00001F00001F00001F00001F00001F00001F0FC01F3FE01F61F01FC0F81F80F81F00F81F
00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F8FF
E3FFFFE3FF18207D9F1D>I<1C003E003F007F003F003E001C0000000000000000000000
0000FF00FF001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F00FFE0FFE00B217EA00E>I<FF00FF001F001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F
00FFE0FFE00B207E9F0E>108 D<FE0FE03F80FE1FF07FC01E70F9C3E01E407D01F01E80
7E01F01F807E01F01F007C01F01F007C01F01F007C01F01F007C01F01F007C01F01F007C
01F01F007C01F01F007C01F01F007C01F01F007C01F01F007C01F01F007C01F0FFE3FF8F
FEFFE3FF8FFE27147D932E>I<FE0FC0FE3FE01E61F01EC0F81E80F81F00F81F00F81F00
F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F8FFE3FFFFE3
FF18147D931D>I<01FF0007FFC01F83F03E00F83E00F87C007C7C007CFC007EFC007EFC
007EFC007EFC007EFC007E7C007C7C007C3E00F83E00F81F83F007FFC001FF0017147F93
1A>I<FF1FC0FF7FF01FE1F81F80FC1F007E1F007E1F003E1F003F1F003F1F003F1F003F
1F003F1F003F1F003E1F007E1F007C1F80FC1FC1F81F7FE01F1F801F00001F00001F0000
1F00001F00001F00001F0000FFE000FFE000181D7E931D>I<FE3E00FE7F801ECFC01E8F
C01E8FC01F8FC01F03001F00001F00001F00001F00001F00001F00001F00001F00001F00
001F00001F0000FFF000FFF00012147E9316>114 D<0FE63FFE701E600EE006E006F800
FFC07FF83FFC1FFE03FE001FC007C007E007F006F81EFFFCC7F010147E9315>I<018001
80018003800380038007800F803F80FFFCFFFC0F800F800F800F800F800F800F800F800F
800F800F860F860F860F860F8607CC03F801F00F1D7F9C14>I<FF07F8FF07F81F00F81F
00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F
01F81F01F80F06F807FCFF03F8FF18147D931D>I<FFE07F80FFE07F801F001C000F8018
000F80180007C0300007C0300003E0600003E0600001F0C00001F0C00001F9C00000F980
0000FF8000007F0000007F0000003E0000003E0000001C0000001C000019147F931C>I
E /Fo 27 127 df<70F8FCFC7C0C1830E0C0060A798414>44 D<FFFEFFFEFFFE0F037E8C
14>I<70F8F8F8700505798414>I<0006000E000E001C001C003800380070007000E000E0
01C001C0038003800380070007000E000E001C001C003800380070007000E000E000C000
0F1D7E9914>I<70F8F8F87000000000000070F8F8F8700510798F14>58
D<01E007F00E38181C38FC71FC739E739EE70EE70EE70EE70EE70EE70EE70E739C739C71
F838F018060E1E07F801F00F177E9614>64 D<1FC0007FF000707800201800001C00001C
0007FC001FFC003C1C00701C00E01C00E01C00E01C00707C003FFF800F8F8011107E8F14
>97 D<FC0000FC00001C00001C00001C00001C00001C00001CF8001DFE001F07001E0300
1C03801C01C01C01C01C01C01C01C01C01C01C01C01C03801E03001F0E001DFC000CF800
1217809614>I<03F80FFC1C1C380870006000E000E000E000E00060007000380E1C1E0F
FC03F00F107E8F14>I<007E00007E00000E00000E00000E00000E00000E0007CE000FFE
001C3E00301E00700E00E00E00E00E00E00E00E00E00E00E00E00E00700E00301E00383E
001FEFC007CFC012177F9614>I<07E00FF01C38301C700CE00EE00EFFFEFFFEE0006000
7000380E1C1E0FFC03F00F107E8F14>I<007C00FE01CE03840380038003807FFEFFFE03
80038003800380038003800380038003800380038003807FFC7FFC0F177F9614>I<07CF
001FFF80383B80301800701C00701C00701C003018003838003FF00037C0007000007000
003FF8001FFC003FFE00700F00E00380E00380E00380E003807007003C1E001FFC0007F0
0011197F8F14>I<FC0000FC00001C00001C00001C00001C00001C00001C78001DFE001F
86001E07001C07001C07001C07001C07001C07001C07001C07001C07001C07001C0700FF
8FE0FF8FE01317809614>I<030007800780030000000000000000007F807F8003800380
0380038003800380038003800380038003800380FFFCFFFC0E187D9714>I<006000F000
F0006000000000000000001FF01FF0007000700070007000700070007000700070007000
70007000700070007000700070007040E0E0C07F803F000C207E9714>I<FF80FF800380
038003800380038003800380038003800380038003800380038003800380038003800380
FFFEFFFE0F177E9614>108 D<FB8E00FFDF003CF3803CF38038E38038E38038E38038E3
8038E38038E38038E38038E38038E38038E380FEFBE0FE79E01310808F14>I<FC7800FD
FE001F86001E07001C07001C07001C07001C07001C07001C07001C07001C07001C07001C
0700FF8FE0FF8FE01310808F14>I<07C01FF03C78701C701CE00EE00EE00EE00EE00EE0
0E701C783C3C781FF007C00F107E8F14>I<FCF800FDFE001F07001E03001C03801C01C0
1C01C01C01C01C01C01C01C01C01C01C03801E03001F0E001DFC001CF8001C00001C0000
1C00001C00001C00001C0000FF8000FF80001218808F14>I<FE1F00FE7F800EE3800F81
000F00000F00000E00000E00000E00000E00000E00000E00000E00000E0000FFF000FFF0
0011107F8F14>114 D<0FD83FF86038C038C038F0007F803FF007F8001C6006E006F006
F81CFFF8CFE00F107E8F14>I<030007000700070007007FFCFFFC070007000700070007
00070007000700070E070E070E070C03FC00F00F157F9414>I<FC3F00FC3F001C07001C
07001C07001C07001C07001C07001C07001C07001C07001C07001C07001C1F000FFFE003
E7E01310808F14>I<FF7F80FF7F80380E00380E00380E00380E0039CE0039CE0019CC00
1B6C001B6C001A6C001A6C001E7C000E78000E780011107F8F14>119
D<1C103F38E7E041C00D047D9614>126 D E /Fp 2 104 df<007001C003800700070007
0007000700070007000700070007000700070007000E001C00F0001C000E000700070007
000700070007000700070007000700070007000700038001C000700C257D9B13>102
D<F0001C000E000700070007000700070007000700070007000700070007000700038001
C0007001C0038007000700070007000700070007000700070007000700070007000E001C
00F0000C257D9B13>I E /Fq 66 124 df<00FC7C0183C607078E0607040E07000E0700
0E07000E07000E07000E0700FFFFF00E07000E07000E07000E07000E07000E07000E0700
0E07000E07000E07000E07000E07000E07000E07007F0FF0171A809916>11
D<00FC000182000703000607000E02000E00000E00000E00000E00000E0000FFFF000E07
000E07000E07000E07000E07000E07000E07000E07000E07000E07000E07000E07000E07
000E07007F0FE0131A809915>I<01C0000003200000061000000E1000000E1000000E10
00000E1000000E2000000E4000000E40000007807F8007001E0007000800078010000B80
100013C0200031C0200060E04000E0F08000E0788000E0390000E01E0080E00E0080700F
01003873C3000F807C00191A7E991E>38 D<60F0F07010101020204080040B7D830B>44
D<FFC0FFC00A0280880D>I<60F0F06004047D830B>I<078018603030303060186018E01C
E01CE01CE01CE01CE01CE01CE01CE01CE01CE01CE01C6018601870383030186007800E18
7E9713>48 D<03000700FF00070007000700070007000700070007000700070007000700
07000700070007000700070007000700FFF00C187D9713>I<0F80106020304038803CC0
1CE01C401C003C003800380070006000C001800100020004040804100430083FF87FF8FF
F80E187E9713>I<0F8010E02070607870382038007800700070006000C00F8000E00070
0038003C003CE03CE03CC03C4038407030E00F800E187E9713>I<00300030007000F000
F001700370027004700C7008701070307020704070C070FFFF0070007000700070007000
7007FF10187F9713>I<30183FF03FE03FC02000200020002000200027C0386020300038
0018001C001C401CE01CE01C80184038403030E00F800E187E9713>I<01E006100C1818
383038300070006000E000E7C0E860F030F018E018E01CE01CE01C601C601C7018301830
30186007C00E187E9713>I<40007FFE7FFC7FFC40088010801080200040004000800180
01800100030003000300030007000700070007000700070002000F197E9813>I<078018
603030201860186018601870103C303E600F8007C019F030F86038401CC00CC00CC00CC0
0C6008201018600FC00E187E9713>I<07801860303070306018E018E018E01CE01CE01C
601C603C303C185C0F9C001C00180018003870307060604021801F000E187E9713>I<00
0C0000000C0000000C0000001E0000001E0000003F000000270000002700000043800000
438000004380000081C0000081C0000081C0000100E0000100E00001FFE0000200700002
00700006007800040038000400380008001C0008001C001C001E00FF00FFC01A1A7F991D
>65 D<FFFF000E01C00E00E00E00700E00780E00780E00780E00780E00780E00F00E00E0
0E03C00FFF800E01E00E00700E00780E003C0E003C0E003C0E003C0E003C0E00380E0078
0E00F00E01E0FFFF80161A7E991B>I<003F0201C0C603002E0E001E1C000E1C00063800
06780002700002700002F00000F00000F00000F00000F00000F000007000027000027800
023800041C00041C00080E000803003001C0C0003F00171A7E991C>I<FFFF000E01C00E
00E00E00300E00380E001C0E001C0E000E0E000E0E000F0E000F0E000F0E000F0E000F0E
000F0E000F0E000F0E000E0E000E0E001E0E001C0E00380E00380E00700E01C0FFFF0018
1A7E991D>I<FFFFF00E00700E00300E00100E00180E00080E00080E00080E04000E0400
0E04000E0C000FFC000E0C000E04000E04000E04000E00040E00040E00080E00080E0008
0E00180E00380E0070FFFFF0161A7E991A>I<FFFFE00E00E00E00600E00200E00300E00
100E00100E00100E04000E04000E04000E0C000FFC000E0C000E04000E04000E04000E00
000E00000E00000E00000E00000E00000E00000E0000FFF000141A7E9919>I<003F0200
01C0C60003002E000E001E001C000E001C00060038000600780002007000020070000200
F0000000F0000000F0000000F0000000F0000000F001FFC070000E0070000E0078000E00
38000E001C000E001C000E000E000E000300160001C06600003F82001A1A7E991E>I<FF
E7FF0E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700F
FFF00E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E
0070FFE7FF181A7E991D>I<FFE00E000E000E000E000E000E000E000E000E000E000E00
0E000E000E000E000E000E000E000E000E000E000E000E000E00FFE00B1A7F990E>I<1F
FC00E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E040E0E0E0E0E041C061801E000E1A7D9914>I<FFE07F800E001E000E0018000E00
10000E0020000E0040000E0080000E0100000E0200000E0400000E0800000E1C00000E2E
00000E4E00000E8700000F0380000E0380000E01C0000E00E0000E00E0000E0070000E00
70000E0038000E001C000E003E00FFE0FF80191A7E991E>I<FFF0000E00000E00000E00
000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00
000E00000E00200E00200E00200E00600E00400E00400E00C00E03C0FFFFC0131A7E9918
>I<FF0003FC0F0003C00F0003C00B8005C00B8005C00B8005C009C009C009C009C009C0
09C008E011C008E011C008E011C0087021C0087021C0083841C0083841C0083841C0081C
81C0081C81C0081C81C0080F01C0080F01C0080F01C0080601C01C0601C0FF861FFC1E1A
7E9923>I<FE01FF0F00380F00100B80100B801009C01008E01008E01008701008701008
3810081C10081C10080E10080E100807100803900803900801D00801D00800F008007008
00700800301C0030FF8010181A7E991D>I<007F000001C1C000070070000E0038001C00
1C003C001E0038000E0078000F0070000700F0000780F0000780F0000780F0000780F000
0780F0000780F0000780F000078078000F0078000F0038000E003C001E001C001C000E00
38000700700001C1C000007F0000191A7E991E>I<FFFF000E03C00E00E00E00700E0070
0E00780E00780E00780E00780E00700E00700E00E00E03C00FFF000E00000E00000E0000
0E00000E00000E00000E00000E00000E00000E00000E0000FFE000151A7E991A>I<FFFC
00000E0780000E01C0000E00E0000E00F0000E00F0000E00F0000E00F0000E00F0000E00
E0000E01C0000E0780000FFC00000E0600000E0300000E0180000E01C0000E01C0000E01
C0000E01E0000E01E0000E01E0000E01E0800E00F0800E007100FFE03E00191A7E991C>
82 D<0FC21836200E6006C006C002C002C002E00070007E003FE01FF807FC003E000E00
070003800380038003C002C006E004D81887E0101A7E9915>I<7FFFFF00701C0700401C
0100401C0100C01C0180801C0080801C0080801C0080001C0000001C0000001C0000001C
0000001C0000001C0000001C0000001C0000001C0000001C0000001C0000001C0000001C
0000001C0000001C0000001C0000001C000003FFE000191A7F991C>I<FFE1FF0E00380E
00100E00100E00100E00100E00100E00100E00100E00100E00100E00100E00100E00100E
00100E00100E00100E00100E00100E001006002007002003004001804000C180003E0018
1A7E991D>I<FF83FF0FF03C007801C01C007800801C007800800E007801000E00780100
0E009C010007009C020007009C020007010E020007010E020003810E0400038207040003
8207040001C207080001C403880001C403880000E403900000E403900000E801D0000078
01E000007801E000007000E000007000E000003000C0000020004000241A7F9927>87
D<FF801FE01E0007000E0006000F000400070008000780080003C0100001C0300001E020
0000F04000007040000078800000388000001D0000001F0000000E0000000E0000000E00
00000E0000000E0000000E0000000E0000000E0000000E0000000E000000FFE0001B1A7F
991D>89 D<FEFEC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0C0FEFE07257D9B0B>91 D<FEFE0606060606060606060606060606060606060606
06060606060606060606060606FEFE0725809B0B>93 D<3F8070C070E020700070007007
F01C7030707070E070E071E071E0F171FB1E3C10107E8F13>97 D<FC00001C00001C0000
1C00001C00001C00001C00001C00001C00001C00001CF8001F0E001E07001C03801C0180
1C01C01C01C01C01C01C01C01C01C01C01C01C03801C03001E07001B0C0010F000121A7F
9915>I<07F80C1C381C30087000E000E000E000E000E000E0007000300438080C1807E0
0E107F8F11>I<007E00000E00000E00000E00000E00000E00000E00000E00000E00000E
0003CE000C3E00380E00300E00700E00E00E00E00E00E00E00E00E00E00E00E00E00600E
00700E00381E001C2E0007CFC0121A7F9915>I<07C01C3030187018600CE00CFFFCE000
E000E000E0006000300438080C1807E00E107F8F11>I<01F0031807380E100E000E000E
000E000E000E00FFC00E000E000E000E000E000E000E000E000E000E000E000E000E000E
007FE00D1A80990C>I<0FCE187330307038703870387038303018602FC0200060007000
3FF03FFC1FFE600FC003C003C003C0036006381C07E010187F8F13>I<FC00001C00001C
00001C00001C00001C00001C00001C00001C00001C00001CF8001D0C001E0E001E0E001C
0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E00FF9FC012
1A7F9915>I<18003C003C001800000000000000000000000000FC001C001C001C001C00
1C001C001C001C001C001C001C001C001C001C00FF80091A80990A>I<FC00001C00001C
00001C00001C00001C00001C00001C00001C00001C00001C3F801C1E001C18001C10001C
20001C40001DC0001FE0001CE0001C70001C78001C38001C1C001C1E001C1F00FF3FC012
1A7F9914>107 D<FC001C001C001C001C001C001C001C001C001C001C001C001C001C00
1C001C001C001C001C001C001C001C001C001C001C00FF80091A80990A>I<FC7C1F001D
8E63801E0781C01E0781C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C
0701C01C0701C01C0701C01C0701C01C0701C0FF9FE7F81D107F8F20>I<FCF8001D0C00
1E0E001E0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E00
1C0E00FF9FC012107F8F15>I<07E01C38300C700E6006E007E007E007E007E007E00760
06700E381C1C3807E010107F8F13>I<FCF8001F0E001E07001C03801C03801C01C01C01
C01C01C01C01C01C01C01C01C01C03801C03001E07001F0C001CF0001C00001C00001C00
001C00001C00001C0000FF800012177F8F15>I<03C2000C2600381E00300E00700E00E0
0E00E00E00E00E00E00E00E00E00E00E00700E00700E00381E001C2E0007CE00000E0000
0E00000E00000E00000E00000E00007FC012177F8F14>I<FCE01D701E701E201C001C00
1C001C001C001C001C001C001C001C001C00FFC00C107F8F0F>I<1F2060E04020C020C0
20F0007F003FC01FE000F080708030C030C020F0408F800C107F8F0F>I<040004000400
0C000C001C003C00FFC01C001C001C001C001C001C001C001C001C201C201C201C201C20
0E4003800B177F960F>I<FC7E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C
0E001C0E001C0E001C0E001C0E001C1E000C2E0007CFC012107F8F15>I<FF1F803C0600
1C04001C04001E0C000E08000E080007100007100007900003A00003A00001C00001C000
01C00000800011107F8F14>I<FF3F9F803C0E0700380E06001C1604001C1704001E170C
000E2308000E2388000F239800074190000741D00003C1E0000380E0000380E0000180C0
000100400019107F8F1C>I<FF3F803C1C001C18000E100007200007600003C00001C000
01E00003E000027000043800083800181C00381E00FC3FC012107F8F14>I<FF1F803C06
001C04001C04001E0C000E08000E080007100007100007900003A00003A00001C00001C0
0001C000008000008000010000010000E10000E20000E4000078000011177F8F14>I<7F
F86070407040E041C041C00380070007000E081C081C08381070107030FFF00D107F8F11
>I<FFFFC01201808913>I E /Fr 20 117 df<70F8FCFC7404040404080810102040060F
7C840E>44 D<FFFFF0000F801E0007800700078003C0078001C0078000E0078000F00780
0078078000780780007C0780003C0780003C0780003C0780003E0780003E0780003E0780
003E0780003E0780003E0780003E0780003E0780003E0780003C0780003C0780007C0780
007807800078078000F0078000E0078001E0078003C0078007000F801E00FFFFF8001F22
7EA125>68 D<FFFFFFC00F8007C0078001C0078000C00780004007800040078000600780
0020078000200780002007802020078020000780200007802000078060000780E00007FF
E0000780E000078060000780200007802000078020000780200007800000078000000780
00000780000007800000078000000780000007800000078000000FC00000FFFE00001B22
7EA120>70 D<0007F008003C0C1800E0021801C001B8038000F8070000780F0000381E00
00381E0000183C0000183C0000187C0000087800000878000008F8000000F8000000F800
0000F8000000F8000000F8000000F8000000F8001FFF780000F8780000787C0000783C00
00783C0000781E0000781E0000780F00007807000078038000B801C000B800E00318003C
0C080007F00020247DA226>I<FFFC03FF000FC000F80007800060000780004000078000
800007800100000780020000078004000007800800000780100000078020000007804000
00078080000007818000000783C000000787E000000789E000000788F000000790F00000
07A078000007C03C000007803C000007801E000007800F000007800F0000078007800007
8007C000078003C000078001E000078001E000078000F000078000F8000FC000FC00FFFC
07FF8021227EA126>75 D<FFFE00000FC000000780000007800000078000000780000007
800000078000000780000007800000078000000780000007800000078000000780000007
800000078000000780000007800000078000000780000007800000078000800780008007
80008007800080078001800780018007800100078003000780030007800F000F803F00FF
FFFF0019227EA11E>I<FFFFE000000F803C000007800E00000780078000078007C00007
8003C000078003E000078003E000078003E000078003E000078003E000078003C0000780
07C000078007800007800E000007803C000007FFE000000780700000078038000007801C
000007801E000007800E000007800F000007800F000007800F000007800F000007800F80
0007800F800007800F800007800F808007800FC080078007C0800FC003C100FFFC01E200
0000007C0021237EA124>82 D<0FE0001838003C0C003C0E001807000007000007000007
0000FF0007C7001E07003C0700780700700700F00708F00708F00708F00F087817083C23
900FC1E015157E9418>97 D<0E0000FE00001E00000E00000E00000E00000E00000E0000
0E00000E00000E00000E00000E00000E00000E1F000E61C00E80600F00300E00380E003C
0E001C0E001E0E001E0E001E0E001E0E001E0E001E0E001E0E001C0E003C0E00380F0070
0C80600C41C0083F0017237FA21B>I<01FC000707000C03801C01C03801C07801E07000
E0F000E0FFFFE0F00000F00000F00000F00000F000007000007800203800201C00400E00
8007030000FC0013157F9416>101 D<00007001F198071E180E0E181C07001C07003C07
803C07803C07803C07801C07001C07000E0E000F1C0019F0001000001000001800001800
001FFE000FFFC00FFFE03800F0600030400018C00018C00018C000186000306000303800
E00E038003FE0015217F9518>103 D<0E0000FE00001E00000E00000E00000E00000E00
000E00000E00000E00000E00000E00000E00000E00000E1F800E60C00E80E00F00700F00
700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00
700E00700E00700E0070FFE7FF18237FA21B>I<1C001E003E001E001C00000000000000
000000000000000000000E00FE001E000E000E000E000E000E000E000E000E000E000E00
0E000E000E000E000E000E000E00FFC00A227FA10E>I<01C003E003E003E001C0000000
0000000000000000000000000001E00FE001E000E000E000E000E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E060E0F0C0F18061
803E000B2C82A10F>I<0E1FC07F00FE60E183801E807201C00F003C00E00F003C00E00E
003800E00E003800E00E003800E00E003800E00E003800E00E003800E00E003800E00E00
3800E00E003800E00E003800E00E003800E00E003800E00E003800E00E003800E00E0038
00E0FFE3FF8FFE27157F942A>109 D<0E1F80FE60C01E80E00F00700F00700E00700E00
700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00
700E0070FFE7FF18157F941B>I<01FC000707000C01801800C03800E0700070700070F0
0078F00078F00078F00078F00078F00078F000787000707800F03800E01C01C00E038007
070001FC0015157F9418>I<0E3CFE461E8F0F0F0F060F000E000E000E000E000E000E00
0E000E000E000E000E000E000E000F00FFF010157F9413>114 D<0F8830786018C018C0
08C008E008F0007F803FE00FF001F8003C801C800C800CC00CC008E018D0308FC00E157E
9413>I<02000200020002000600060006000E001E003E00FFF80E000E000E000E000E00
0E000E000E000E000E000E000E040E040E040E040E040E040708030801F00E1F7F9E13>
I E /Fs 3 16 df<FFFFFF80FFFFFF8019027D8A20>0 D<01800180018001804182F18F
399C0FF003C003C00FF0399CF18F4182018001800180018010127E9215>3
D<03C00FF01FF83FFC7FFE7FFEFFFFFFFFFFFFFFFF7FFE7FFE3FFC1FF80FF003C010107E
9115>15 D E /Ft 24 121 df<FFFFFFF800FFFFFFFF00FFFFFFFFC003F8001FE003F800
0FF003F80007F803F80003F803F80003FC03F80003FC03F80001FC03F80001FC03F80001
FC03F80003FC03F80003F803F80003F803F80007F003F8000FF003F8001FC003F800FF80
03FFFFFE0003FFFFFFC003F8000FF003F80003F803F80001FC03F80001FE03F80000FE03
F80000FE03F80000FF03F80000FF03F80000FF03F80000FF03F80000FF03F80000FF03F8
0000FE03F80001FE03F80003FC03F80007FC03F8001FF8FFFFFFFFE0FFFFFFFFC0FFFFFF
FE0028297DA830>66 D<FFFFFFFFE0FFFFFFFFE0FFFFFFFFE003FC001FE003FC0007F003
FC0001F003FC0001F003FC0000F003FC00007003FC00007003FC00007003FC01C07803FC
01C03803FC01C03803FC01C03803FC03C00003FC03C00003FC0FC00003FFFFC00003FFFF
C00003FFFFC00003FC0FC00003FC03C00003FC03C00003FC01C00E03FC01C00E03FC01C0
0E03FC01C01C03FC00001C03FC00001C03FC00001C03FC00003C03FC00003803FC000078
03FC0000F803FC0001F803FC0003F803FC001FF8FFFFFFFFF0FFFFFFFFF0FFFFFFFFF027
297EA82C>69 D<FFFFF00FFFFFFFFFF00FFFFFFFFFF00FFFFF03FC00003FC003FC00003F
C003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003F
C003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003F
C003FC00003FC003FFFFFFFFC003FFFFFFFFC003FFFFFFFFC003FC00003FC003FC00003F
C003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003F
C003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003FC003FC00003F
C003FC00003FC003FC00003FC003FC00003FC0FFFFF00FFFFFFFFFF00FFFFFFFFFF00FFF
FF30297EA835>72 D<FFFE0000003FFF80FFFE0000003FFF80FFFF0000007FFF8003FF00
00007FE00003FF0000007FE00003BF800000EFE00003BF800000EFE000039FC00001CFE0
00039FC00001CFE000038FE000038FE000038FE000038FE000038FE000038FE0000387F0
00070FE0000387F000070FE0000383F8000E0FE0000383F8000E0FE0000381FC001C0FE0
000381FC001C0FE0000381FC001C0FE0000380FE00380FE0000380FE00380FE00003807F
00700FE00003807F00700FE00003803F80E00FE00003803F80E00FE00003803F80E00FE0
0003801FC1C00FE00003801FC1C00FE00003800FE3800FE00003800FE3800FE000038007
F7000FE000038007F7000FE000038007F7000FE000038003FE000FE000038003FE000FE0
00038001FC000FE000038001FC000FE000038000F8000FE000FFFE00F803FFFF80FFFE00
F803FFFF80FFFE007003FFFF8039297DA840>77 D<FFFFFFF800FFFFFFFF00FFFFFFFFC0
03FC003FE003FC0007F003FC0003F803FC0003FC03FC0001FC03FC0001FE03FC0001FE03
FC0001FE03FC0001FE03FC0001FE03FC0001FE03FC0001FE03FC0001FC03FC0003FC03FC
0003F803FC0007F003FC003FE003FFFFFF8003FFFFFE0003FC00000003FC00000003FC00
000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC0000
0003FC00000003FC00000003FC00000003FC00000003FC00000003FC000000FFFFF00000
FFFFF00000FFFFF0000027297EA82E>80 D<00FF00C003FFE1C00FFFF9C01F80FFC03F00
3FC03E000FC07C0007C07C0007C0FC0003C0FC0003C0FC0001C0FE0001C0FE0001C0FF00
0000FFC000007FFC00007FFFE0003FFFF8001FFFFE001FFFFF0007FFFF8003FFFFC000FF
FFC0000FFFE000007FE000001FF000000FF0000007F0E00003F0E00003F0E00003F0E000
03F0F00003E0F00003E0F80007E0FC0007C0FF000F80FFE01F80E3FFFF00E1FFFC00C01F
F0001C297CA825>83 D<FFFFF000FFFEFFFFF000FFFEFFFFF000FFFE03FC0000038003FC
0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC
0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC
0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC
0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC0000038003FC
0000038003FC0000038003FC0000038001FC0000070001FE0000070000FE00000E00007F
00000E00003F00003C00001FC0007800000FF003F0000007FFFFE0000000FFFF80000000
1FFC00002F297EA834>85 D<FFE00000FFE00000FFE000000FE000000FE000000FE00000
0FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00000
0FE1FE000FE7FF800FFE07E00FF803F00FF001F80FE000FC0FE000FC0FE0007E0FE0007E
0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007E
0FE0007E0FE0007E0FE000FC0FE000FC0FF001F80FF803F00F9C0FE00F0FFF800E01FC00
202A7EA925>98 D<003FF00001FFFC0003F03E000FC07F001F807F003F007F003F007F00
7F003E007E0000007E000000FE000000FE000000FE000000FE000000FE000000FE000000
FE0000007E0000007E0000007F0000003F0003803F8003801F8007000FE00E0003F83C00
01FFF800003FC000191B7E9A1E>I<00007FF000007FF000007FF0000007F0000007F000
0007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F000
0007F0003F87F001FFF7F007F03FF00FC00FF01F8007F03F0007F03F0007F07E0007F07E
0007F07E0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE
0007F07E0007F07E0007F03F0007F03F0007F01F800FF00FC01FF007E07FFF01FFE7FF00
7F87FF202A7EA925>I<003FC00001FFF00003E07C000F803E001F801F001F001F003F00
0F807E000F807E000FC07E000FC0FE0007C0FE0007C0FFFFFFC0FFFFFFC0FE000000FE00
0000FE0000007E0000007E0000007F0000003F0001C01F0001C00F80038007C0070003F0
1E0000FFFC00003FE0001A1B7E9A1F>I<007F80F001FFE3F807C0FE1C0F807C7C1F003E
7C1F003E103F003F003F003F003F003F003F003F003F003F003F003F001F003E001F003E
000F807C0007C0F80005FFE0000C7F8000180000001C0000001C0000001E0000001FFFF8
001FFFFF000FFFFFC007FFFFE003FFFFF00FFFFFF03E0007F07C0001F8F80000F8F80000
F8F80000F8F80000F87C0001F07C0001F03F0007E00FC01F8007FFFF00007FF0001E287E
9A22>103 D<FFE00000FFE00000FFE000000FE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE07E000FE1
FF800FE30FC00FE40FE00FE807E00FF807F00FF007F00FF007F00FE007F00FE007F00FE0
07F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE0
07F00FE007F00FE007F00FE007F00FE007F0FFFE3FFFFFFE3FFFFFFE3FFF202A7DA925>
I<07000FC01FE03FE03FE03FE01FE00FC007000000000000000000000000000000FFE0FF
E0FFE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00F
E00FE00FE00FE00FE0FFFEFFFEFFFE0F2B7EAA12>I<FFE0FFE0FFE00FE00FE00FE00FE0
0FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE0
0FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE0FFFEFFFEFFFE0F2A
7EA912>108 D<FFC07E00FFC1FF80FFC30FC00FC40FE00FC807E00FD807F00FD007F00F
D007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00F
E007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F0FFFE3FFFFF
FE3FFFFFFE3FFF201B7D9A25>110 D<003FE00001FFFC0003F07E000FC01F801F800FC0
3F0007E03F0007E07E0003F07E0003F07E0003F0FE0003F8FE0003F8FE0003F8FE0003F8
FE0003F8FE0003F8FE0003F8FE0003F87E0003F07E0003F03F0007E03F0007E01F800FC0
0FC01F8007F07F0001FFFC00003FE0001D1B7E9A22>I<FFE1FE00FFE7FF80FFFE0FE00F
F803F00FF001F80FE001FC0FE000FC0FE000FE0FE000FE0FE0007F0FE0007F0FE0007F0F
E0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007E0FE000FE0FE000FE0FE000FC0F
E001FC0FF001F80FF803F00FFC0FE00FEFFF800FE1FC000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE00000FFFE0000FFFE0000FFFE000020
277E9A25>I<FFC3E0FFC7F8FFCC7C0FD8FE0FD0FE0FD0FE0FF0FE0FE07C0FE0000FE000
0FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE000
0FE0000FE000FFFF00FFFF00FFFF00171B7E9A1B>114 D<03FE300FFFF03E03F07800F0
7000F0F00070F00070F80070FE0000FFE0007FFF007FFFC03FFFE01FFFF007FFF800FFF8
0007FC0000FCE0007CE0003CF0003CF00038F80038FC0070FF01E0E7FFC0C1FF00161B7E
9A1B>I<00700000700000700000700000F00000F00000F00001F00003F00003F00007F0
001FFFE0FFFFE0FFFFE007F00007F00007F00007F00007F00007F00007F00007F00007F0
0007F00007F00007F00007F00007F07007F07007F07007F07007F07007F07007F07003F0
E001F8C000FFC0003F0014267FA51A>I<FFE07FF0FFE07FF0FFE07FF00FE007F00FE007
F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007
F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE00FF00FE00F
F007E017F003F067FF01FFC7FF007F87FF201B7D9A25>I<FFFC7FFC1FFCFFFC7FFC1FFC
FFFC7FFC1FFC0FE00FE001C007F007E0038007F007E0038007F807F0078003F807F00700
03F807F8070001FC0FF80E0001FC0FF80E0001FE1FFC1E0000FE1CFC1C0000FE1CFE1C00
00FF387E3C00007F387E3800007F787F3800003FF03F7000003FF03F7000003FE01FF000
001FE01FE000001FE01FE000000FC00FC000000FC00FC000000FC00FC000000780078000
0007800780002E1B7F9A31>119 D<FFFC1FFEFFFC1FFEFFFC1FFE07F0078003F8070001
FC0F0001FE1E0000FE3C00007F7800003FF800003FF000001FE000000FE0000007F00000
07F800000FF800001FFC00003DFE000038FF0000787F0000F03F8001E03FC003C01FE003
800FE0FFF03FFFFFF03FFFFFF03FFF201B7F9A23>I E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop 2 140 a Ft(Exp)r(eriences)23 b(with)g(Mo)r(delling)h(the)e(USB)
h(Hub)f(Proto)r(col)h(Using)f(Spin)1863 118 y Fs(\003)91
260 y Fr(Dennis)16 b(Dams,)f(Rob)i(Gerth)283 b(Lo)q(e)17
b(F)l(eijs)280 b(Gertjan)16 b(Kamsteeg)86 319 y Fq(Dept.)d(of)g(Math.)g
(&)g(Comp.)f(Science)162 b(Philips)15 b(Researc)o(h)f(Labs.)k(&)159
b(Dept.)13 b(of)g(Comp.)f(Science)97 377 y(Eindho)o(v)o(en)j(Univ.)j
(of)13 b(T)m(ec)o(hnology)120 b(Eindho)o(v)o(en)15 b(Univ.)j(of)13
b(T)m(ec)o(hnology)200 b(Leiden)14 b(Univ.)260 435 y(PO)e(Bo)o(x)i(513)
404 b(Prof.)13 b(Holstlaan)i(4)316 b(PO)12 b(Bo)o(x)i(9512)191
493 y(5600)g(MB)f(Eindho)o(v)o(en)313 b(5656)14 b(AA)e(Eindho)o(v)o(en)
270 b(2300)14 b(RA)e(Leiden)127 551 y Fp(f)p Fo(wsindd,rob)o(g)p
Fp(g)p Fo(@w)o(in.)o(tue)o(.n)o(l)88 b(feijs@nat)o(lab)o(.r)o(ese)o(ar)
o(ch.)o(phi)o(li)o(ps.)o(co)o(m)306 714 y Fn(Abstract)-21
813 y Fm(This)14 b(p)n(ap)n(er)h(describ)n(es)g(our)f(ongoing)i(exp)n
(erienc)n(es)f(dur-)-71 863 y(ing)d(the)f(a-p)n(osteriori)f
(formalisation)h(of)g(the)h(USB)g(hub)g(pr)n(o-)-71 913
y(to)n(c)n(ol)h(in)g(Pr)n(omela,)g(and)h(subse)n(quent)h(simulation)e
(and)h(ver-)-71 963 y(i\014c)n(ation)i(exp)n(eriments.)22
b(Such)17 b(an)g(activity)e(for)n(c)n(es)h(one)g(to)-71
1012 y(c)n(onsider)c(al)r(l)f(chosen)i(asp)n(e)n(cts)e(with)g(e)n(qual)
h(\(and)h(gr)n(e)n(at\))e(pr)n(e-)-71 1062 y(cision.)19
b(The)13 b(p)n(ap)n(er)h(fo)n(cusses)f(on)i(the)e(te)n(chnic)n(al)h
(asp)n(e)n(cts)f(of)-71 1112 y(the)h(mo)n(del,)g(the)g(choic)n(es)g(we)
f(had)i(to)f(make,)g(and)h(the)e(pr)n(ob-)-71 1162 y(lems)i(we)g(enc)n
(ounter)n(e)n(d.)21 b(Many)16 b(unclarities,)f(inc)n(onsisten-)-71
1212 y(cies)e(and)g(err)n(ors)e(in)i(the)f(original)g(text)h(of)f(the)h
(sp)n(e)n(ci\014c)n(ation)-71 1261 y(wer)n(e)h(unc)n(over)n(e)n(d.)-71
1419 y Fl(1)56 b(In)n(tro)r(duction)18 b(and)h(Motiv)m(ation)-21
1518 y Fk(The)11 b(USB)h(h)o(ub)f(proto)q(col)g(is)g(a)g(recen)o(tly)h
(dev)o(elop)q(ed)f(pro-)-71 1568 y(to)q(col)j(whic)o(h)g(is)f(used)i
(for)f(building)e(up)i(net)o(w)o(orks)h(consist-)-71
1618 y(ing)f(of)h(one)g(computer)g(and)g(a)g(n)o(um)o(b)q(er)f(of)g(p)q
(eripheral)i(de-)-71 1668 y(vices.)38 b(In)20 b(this)h(pap)q(er)g(w)o
(e)f(rep)q(ort)h(on)f(our)h(exp)q(eriences)-71 1718 y(during)13
b(the)h(a-p)q(osteriori)f(formalisation)d(of)j(the)g(USB)h(h)o(ub)-71
1767 y(proto)q(col)h(in)f(Promela,)f(and)h(subsequen)o(t)j(sim)o
(ulation)11 b(and)-71 1817 y(v)o(eri\014cation)21 b(exp)q(erimen)o(ts.)
42 b(Our)22 b(in)o(terests)h(that)e(moti-)-71 1867 y(v)n(ated)f(the)h
(researc)o(h)h(conducted)g(in)e(the)h(presen)o(t)h(pap)q(er)-71
1917 y(are)14 b(threefold:)-29 1999 y Fs(\017)20 b Fk(to)e(impro)o(v)o
(e)f(our)h(understanding)h(of)f(the)h(USB)g(h)o(ub)12
2049 y(proto)q(col,)-29 2104 y Fs(\017)h Fk(to)e(\014nd)g(out)g(in)g
(ho)o(w)g(far)f(a)h(state-of-the-art)h(mo)q(del)12 2154
y(c)o(hec)o(k)o(er)14 b(lik)o(e)e(Spin)h([4)o(,)f(5])g(w)o(ould)g(b)q
(e)h(capable)g(of)f(deal-)12 2203 y(ing)h(with)h(a)f(complex)g
(real-life)g(proto)q(col,)-29 2258 y Fs(\017)20 b Fk(to)28
b(exp)q(erimen)o(t)f(with)g(mo)q(deling)e(principles)j(that)12
2308 y(w)o(ould)21 b(allo)o(w)f(for)i(a)f(mo)q(dular)f(separation)i(of)
f(con-)12 2357 y(cerns)d(suc)o(h)g(that)f(\(ideally\))e(the)j(Spin)e
(mo)q(del)f(w)o(ould)12 2407 y(b)q(e)f(a)g(faithful)e(mo)q(del)g(of)h
(the)h(electrical,)g(logical,)d(and)12 2457 y(timing-related)f(asp)q
(ects)k(of)d(the)h(proto)q(col,)g(while)f(still)12 2507
y(allo)o(wing)h(e\016cien)o(t)i(sim)o(ulation)d(and)j(v)o
(eri\014cation.)-21 2590 y(The)i(USB)g(h)o(ub)f(proto)q(col)h(is)f
(part)g(of)g(an)h(emerging)e(in-)-71 2639 y(dustry)19
b(standard)f(called)f(Univ)o(ersal)h(Serial)f(Bus)i(\(USB\),)-71
2689 y(whic)o(h)i(is)g(mean)o(t)f(as)h(a)g(cost-e\013ectiv)o(e)i
(solution)e(for)g(the)p -71 2715 382 2 v -25 2742 a Fj(\003)-7
2754 y Fi(This)8 b(researc)o(h)e(w)o(as)j(supp)q(orted)d(b)o(y)i(the)f
(Netherlands)f(Computer)-71 2793 y(Science)k(Researc)o(h)f(F)m
(oundation)g(\(SION\).)983 714 y Fk(problem)i(of)h(connecting)h(a)g(v)n
(ariet)o(y)f(of)g(lo)o(w-)f(and)i(medium-)983 764 y(sp)q(eed)h(p)q
(eripheral)g(devices)g(to)f(p)q(ersonal)h(computers.)k(The)983
813 y(USB)g(allo)o(ws)e(for)i(hot)f(plug-and-pla)o(y)f(of)h(devices,)i
(whic)o(h)983 863 y(means)11 b(that)i(the)g(user)g(can)g(at)f(an)o(y)g
(time)f(add)h(or)h(remo)o(v)o(e)e(a)983 913 y(device)h(from)d(the)j
(USB)f(net)o(w)o(ork,)h(without)e(disturbing)h(the)983
963 y(op)q(eration)k(of)f(the)h(rest)h(of)f(the)g(net)o(w)o(ork.)21
b(Moreo)o(v)o(er)15 b(USB)983 1013 y(allo)o(ws)c(the)h(PC)h(to)f(put)g
(one)g(or)g(more)g(devices)h(in)o(to)e(a)h(state)983
1062 y(of)i(rest)h(\(t)o(ypically)e(for)i(reasons)g(of)f(p)q(o)o(w)o
(er)g(consumption\),)983 1112 y(and)e(still)e(main)o(tain)g(the)i(p)q
(ossibilit)o(y)f(that)h(later)f(the)i(PC)f(or)983 1162
y(the)17 b(device)g(itself)e(w)o(ak)o(es)i(up)f(and)g(reactiv)n(ates)h
(the)g(p)q(erti-)983 1212 y(nen)o(t)11 b(part)f(of)g(the)h(net)o(w)o
(ork.)17 b(The)11 b(USB)g(proto)q(col)f(is)g(partic-)983
1262 y(ularly)h(suited)i(for)e(m)o(ultimedia)e(applications)i(b)q
(ecause)i(the)983 1311 y(net)o(w)o(ork)j(will)e(carry)j(data)e(of)g
(di\013eren)o(t)i(kinds)f(in)f(a)g(time-)983 1361 y(division)9
b(m)o(ultiplex)g(manner.)16 b(In)11 b(particular,)g(it)f(will)f(carry)
983 1411 y(in)o(terrupt)j(messages)f(with)g(a)f(guaran)o(teed)i
(latency)f(time,)f(it)983 1461 y(will)g(carry)i(stream-lik)o(e)e(data)i
(suc)o(h)g(as)g(audio-streams)e(and)983 1511 y
(\(restricted-bandwidth\))24 b(video)e(streams)h(with)f(a)g(guar-)983
1561 y(an)o(teed)f(throughput,)g(and)f(it)f(will)g(also)g(carry)h
(bulk-lik)o(e)983 1610 y(computer)15 b(data)g(suc)o(h)h(as)f(texts)h
(to)f(b)q(e)h(sen)o(t)g(to)f(a)g(prin)o(ter.)983 1660
y(The)g(requiremen)o(t)f(to)g(USB)h(of)f(b)q(eing)h(cost-e\013ectiv)o
(e,)h(also)983 1710 y(implies)g(that)i(the)g(proto)q(col)g(m)o(ust)f(b)
q(e)i(robust)f(for)g(errors)983 1760 y(caused)23 b(b)o(y)f
(malfunctions)e(due)i(to)g(hardw)o(are)h(faults)e(in)983
1810 y(\(p)q(ossibly)14 b(c)o(heap\))g(p)q(eripheral)h(devices.)1033
1878 y(All)22 b(these)i(requiremen)o(ts)f(ha)o(v)o(e)f(con)o(tributed)i
(signi\014-)983 1928 y(can)o(tly)16 b(to)h(the)g(complexit)o(y)e(of)h
(the)h(USB)h(proto)q(cols.)27 b(Al-)983 1978 y(though)15
b(the)g(in)o(terconnecting)h(wires)g(and)f(plugs)f(are)i(v)o(ery)983
2027 y(simple)h(and)i(can)g(b)q(e)g(pro)q(duced)h(c)o(heaply)m(,)f(the)
h(proto)q(cols)983 2077 y(are)i(v)o(ery)g(complex.)40
b(In)21 b(particular)g(the)i(h)o(ub)e(proto)q(col)983
2127 y(\(the)d(h)o(ub)f(is)g(the)h(net)o(w)o(ork)f(comp)q(onen)o(t)f
(whic)o(h)h(p)q(erforms)983 2177 y(splitter)10 b(and)g(rep)q(eater)h
(functions\))f(has)g(b)q(ecome)f(v)o(ery)h(com-)983 2227
y(plex.)18 b(The)13 b(h)o(ub)g(pla)o(ys)g(a)g(k)o(ey)g(role)g(in)g(the)
h(automatic)d(con-)983 2277 y(\014guration)19 b(and)g
(re-con\014guration)h(of)e(the)j(net)o(w)o(ork)e(\(the)983
2326 y(hot)c(plug-and-pla)o(y\),)e(in)i(the)h(detection)g(and)f
(isolation)f(of)983 2376 y(malfunctioning)k(p)q(eripheral)k(devices,)j
(and)c(in)g(the)h(sus-)983 2426 y(p)q(end/resume)14 b(b)q(eha)o(viour)g
(of)f(the)i(bus.)1033 2494 y(Throughout)10 b(our)h(case)h(study)f(w)o
(e)g(use)h(the)f(proto)q(col)g(de-)983 2544 y(sign)f(language)f(PR)o
(OMELA,)g(as)h(prop)q(osed)h(b)o(y)f(Holzmann,)983 2594
y(together)15 b(with)g(the)g(mo)q(del)e(c)o(hec)o(k)o(er)j(to)q(ol)d
(Spin.)20 b(The)15 b(lan-)983 2644 y(guage)20 b(Promela)g(has)g(a)h
(C-lik)o(e)f(syn)o(tax)g(with)h(a)f(limited)983 2694
y(n)o(um)o(b)q(er)15 b(of)h(concrete)i(data)d(t)o(yp)q(es,)i(con)o(v)o
(en)o(tional)e(assign-)983 2743 y(men)o(ts,)20 b(Dijkstra's)e(guarded)i
(commands)d(and)j(CSP-lik)o(e)983 2793 y(send)h(and)f(receiv)o(e)i
(statemen)o(ts.)37 b(Promela)19 b(mo)q(dels)g(can)p eop
%%Page: 2 2
2 1 bop -106 24 a Fk(b)q(e)22 b(executed)h(directly)f(\(sim)o
(ulation\),)f(or)g(can)h(b)q(e)g(anal-)-106 74 y(ysed)f(b)o(y)f(means)g
(of)g(mo)q(del-c)o(hec)o(king,)g(that)h(is,)g(the)g(en-)-106
123 y(tire)d(state)h(space)g(is)e(searc)o(hed)j(for)e(violations)e(of)h
(certain)-106 173 y(temp)q(oral)10 b(prop)q(erties.)19
b(The)13 b(temp)q(oral)d(prop)q(erties)k(can)e(b)q(e)-106
223 y(expressed)23 b(b)o(y)d(so-called)h(nev)o(er-claims,)g(whic)o(h)f
(roughly)-106 273 y(sp)q(eaking)c(represen)o(t)j(form)o(ulae)c(of)g
(linear-time)g(temp)q(oral)-106 323 y(logic.)-106 425
y Fn(1.1)52 b(Arc)o(hitectural)18 b(asp)q(ects)-56 527
y Fk(In)e(Figure)g(1)f(w)o(e)i(sho)o(w)f(a)f(t)o(ypical)h(USB)g
(con\014guration)-106 577 y(with)i(one)i(PC,)e(a)h(k)o(eyb)q(oard,)h(a)
f(mouse,)g(and)g(t)o(w)o(o)g(loud-)-106 627 y(sp)q(eak)o(ers.)f(There)
11 b(are)g(t)o(w)o(o)f(h)o(ubs,)g(and)g(as)h(can)f(b)q(e)h(seen,)h(one)
-106 1603 y @beginspecial 109 @llx 393 @lly 438 @urx
709 @ury 2289 @rwi @setspecial
%%BeginDocument: hub.eps
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
109.65 557.95 228.45 597.55 R
4 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
99.65 384.95 495.65 717.95 R
297.65 636.95 396.65 708.95 R
7 X
V
0 X
N
306.65 645.95 387.65 699.95 18 RR
6 X
V
0 X
N
288.65 582.95 405.65 618.95 R
7 X
V
0 X
N
369.65 605.95 396.65 614.95 R
4 X
V
0 X
N
369.65 591.95 396.65 600.95 R
4 X
V
0 X
N
4 X
90 450 4.5 4.5 361.15 610.45 G
0 X
90 450 4.5 4.5 361.15 610.45 A
324.65 618.95 369.65 636.95 R
4 X
V
0 X
N
114.45 559.55 222.45 595.55 R
7 X
V
0 X
N
116.95 583.05 121.45 587.55 R
4 X
V
0 X
N
125.95 583.05 130.45 587.55 R
4 X
V
0 X
N
134.95 583.05 139.45 587.55 R
4 X
V
0 X
N
143.95 583.05 148.45 587.55 R
4 X
V
0 X
N
152.95 583.05 157.45 587.55 R
4 X
V
0 X
N
161.95 583.05 166.45 587.55 R
4 X
V
0 X
N
121.45 574.05 125.95 578.55 R
4 X
V
0 X
N
130.45 574.05 134.95 578.55 R
4 X
V
0 X
N
139.45 574.05 143.95 578.55 R
4 X
V
0 X
N
148.45 574.05 152.95 578.55 R
4 X
V
0 X
N
157.45 574.05 161.95 578.55 R
4 X
V
0 X
N
166.45 574.05 170.95 578.55 R
4 X
V
0 X
N
125.95 565.05 130.45 569.55 R
4 X
V
0 X
N
134.95 565.05 139.45 569.55 R
4 X
V
0 X
N
143.95 565.05 148.45 569.55 R
4 X
V
0 X
N
152.95 565.05 157.45 569.55 R
4 X
V
0 X
N
161.95 565.05 166.45 569.55 R
4 X
V
0 X
N
170.95 565.05 175.45 569.55 R
4 X
V
0 X
N
175.45 574.05 179.95 578.55 R
4 X
V
0 X
N
170.95 583.05 175.45 587.55 R
4 X
V
0 X
N
179.95 583.05 184.45 587.55 R
4 X
V
0 X
N
197.95 583.05 202.45 587.55 R
4 X
V
0 X
N
205.45 583.05 209.95 587.55 R
4 X
V
0 X
N
212.95 583.05 217.45 587.55 R
4 X
V
0 X
N
197.95 574.55 202.45 579.05 R
4 X
V
0 X
N
205.45 574.55 209.95 579.05 R
4 X
V
0 X
N
212.95 574.55 217.45 579.05 R
4 X
V
0 X
N
197.95 566.55 202.45 571.05 R
4 X
V
0 X
N
205.45 566.55 209.95 571.05 R
4 X
V
0 X
N
212.95 566.55 217.45 571.05 R
4 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
244.65 543.55 266.25 573.25 10.8 RR
N
245.85 565.15 251.25 575.95 R
6 X
V
0 X
N
259.35 565.15 264.75 575.95 R
6 X
V
0 X
N
252.75 565.15 258.15 575.95 R
6 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315.65 411.95 360.65 483.95 R
6 X
V
0 X
N
324.65 429.95 351.65 474.95 R
11 X
V
0 X
N
4 X
90 450 4.5 4.5 326.15 422.45 G
0 X
90 450 4.5 4.5 326.15 422.45 A
4 X
90 450 4.5 4.5 338.15 422.45 G
0 X
90 450 4.5 4.5 338.15 422.45 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
388.65 411.95 433.65 483.95 R
6 X
V
0 X
N
397.65 429.95 424.65 474.95 R
11 X
V
0 X
N
4 X
90 450 4.5 4.5 399.15 422.45 G
0 X
90 450 4.5 4.5 399.15 422.45 A
4 X
90 450 4.5 4.5 411.15 422.45 G
0 X
90 450 4.5 4.5 411.15 422.45 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
294.65 506.95 330.65 560.95 R
7 X
V
0 X
N
330.65 528.95 339.65 537.95 R
4 X
V
0 X
N
285.65 546.95 294.65 555.95 R
4 X
V
0 X
N
285.65 528.95 294.65 537.95 R
4 X
V
0 X
N
285.65 510.95 294.65 519.95 R
4 X
V
0 X
N
0 0 0 1 0 0 0 K
0 12 Q
(hub) 304.65 531.95 T
0 0 0 1 0 0 0 K
207.65 429.95 261.65 465.95 R
7 X
V
0 X
N
230.65 465.95 239.65 474.95 R
4 X
V
0 X
N
212.65 420.95 221.65 429.95 R
4 X
V
0 X
N
230.65 420.95 239.65 429.95 R
4 X
V
0 X
N
248.65 420.95 257.65 429.95 R
4 X
V
0 X
N
0 0 0 1 0 0 0 K
(hub) 225.65 443.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
405.65 600.95 M
 429.87 612.82 440.67 582.62 436.03 563.95 D
 428.79 534.88 390.65 525.93 363.65 531.94 D
 355.74 533.69 347.74 534.39 339.65 533.95 D
3 H
2 X
N
285.65 531.95 M
 269.57 533.54 271.75 550.77 273.66 563.5 D
 275.48 575.59 273.49 607.03 255.4 593.73 D
 249.84 589.64 254.41 582.98 254.48 576.88 D
N
288.65 515.08 M
 274.58 517.44 235.93 528.31 240.61 507.27 D
 243.01 496.48 230.69 483.96 236.65 474.95 D
N
234.65 419.13 M
 226.49 381.23 198.48 403.33 180.7 396.75 D
 166.95 391.66 147.45 388.56 146.21 419.13 D
 145.89 427.17 140.01 422.55 135.65 423.35 D
N
252.65 420.95 M
 263.45 413.87 280.79 398.05 288.67 415.95 D
 292.98 425.75 304.62 422.35 311.65 422.95 D
N
287.65 549.95 M
 270.51 567.35 290.47 597.11 272.9 611.32 D
 262.19 619.98 241.91 623.75 237.49 611.3 D
 234.96 604.16 243.51 585.82 228.65 588.29 D
N
108.65 420.95 189.65 456.95 R
7 X
V
0.5 H
0 X
N
4 X
90 450 4.5 4.5 180.15 443.45 G
0 X
90 450 4.5 4.5 180.15 443.45 A
4 X
90 450 4.5 4.5 167.15 443.45 G
0 X
90 450 4.5 4.5 167.15 443.45 A
0 0 0 1 0 0 0 K
(printer) 111.65 426.95 T
0 0 0 1 0 0 0 K
7 X
0 90 9 18 113.65 456.95 G
0 X
0 90 9 18 113.65 456.95 A
7 X
0 90 9 18 162.65 456.95 G
0 X
0 90 9 18 162.65 456.95 A
117.65 474.95 162.65 474.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
120.65 468.95 149.72 468.95 2 L
N
127.11 465.45 156.19 465.45 2 L
N
133.57 461.95 162.65 461.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
360.65 429.95 387.65 429.95 2 L
N
FMENDPAGE

%%EndDocument
 @endspecial 10 1694 a Fh(Figure)g Fk(1:)18 b(USB)d(Net)o(w)o(ork)f
(with)f(t)o(w)o(o)h(h)o(ubs)-106 1796 y(h)o(ub)i(is)g(con\014gured)h
(as)f(a)g(subno)q(de)h(of)f(another)h(h)o(ub,)f(and)-106
1846 y(in)g(this)h(w)o(a)o(y)f(the)h(whole)g(net)o(w)o(ork)g(has)g(a)f
(tree)i(structure.)-106 1895 y(In)f(general,)h(the)h(tree)f(ma)o(y)e
(ha)o(v)o(e)h(a)g(width)h(and)f(breadth)-106 1945 y(of)g(up)g(to)h
(\014v)o(e.)29 b(In)18 b(practice,)h(one)f(or)g(more)e(of)h(the)h(h)o
(ubs)-106 1995 y(are)12 b(built-in)f(to)g(one)h(of)g(the)g(p)q
(eripheral)h(devices)667 1980 y Fg(1)686 1995 y Fk(,)f(e.g.)17
b(the)-106 2045 y(k)o(eyb)q(oard,)i(rather)g(than)g(b)q(eing)f
(separate)i(devices.)33 b(But)-106 2095 y(from)10 b(a)i(logical)f(p)q
(oin)o(t)g(of)h(view)g(that)g(mak)o(es)f(no)h(di\013erence,)-106
2144 y(and)h(in)g(order)h(to)f(a)o(v)o(oid)f(confusion)h(w)o(e)h(lea)o
(v)o(e)f(it)g(as)h(in)f(Fig-)-106 2194 y(ure)h(1.)-106
2297 y Fn(1.2)52 b(Informal)15 b(description)k(of)e(the)h(proto)q(col)
-56 2399 y Fk(The)c(proto)q(col)h(is)f(a)g(kind)g(of)g(master-sla)o(v)o
(e)g(proto)q(col)g(in)-106 2449 y(whic)o(h)20 b(the)h(PC)f(is)g(the)h
(master.)37 b(It)21 b(is)f(called)g(the)h Fm(host)-106
2499 y Fk(and)11 b(pla)o(ys)h(a)f(sp)q(ecial)h(role.)18
b(It)12 b(assigns)g(time)e(slots)i(to)g(other)-106 2548
y(devices,)f(and)e(it)g(mak)o(es)f(sure)i(that)g(the)g(en)o(tire)g(bus)
f(op)q(erates)-106 2598 y(in)k(a)h(certain)g(rh)o(ythm)f(based)h(on)g
(so-called)g Fm(fr)n(ames)p Fk(.)p -106 2636 382 2 v
-60 2663 a Ff(1)-43 2675 y Fi(W)m(e)d(follo)o(w)f(the)g(terminolog)o(y)
e(of)i([3)o(])h(in)f(that)g(the)g(term)f Fe(devic)n(e)15
b Fi(is)-106 2714 y(used)10 b(for)g(an)o(y)g(no)q(de)f(in)i(the)f(USB)h
(tree)f(except)f(the)h(host.)k(Th)o(us,)d(also)-106 2754
y(a)i(h)o(ub)f(is)h(a)g(device.)18 b(A)c(device)e(that)g(is)h(not)f(a)h
(h)o(ub)f(is)h(also)g(called)e(a)-106 2793 y Fe(function)p
Fi(.)997 24 y Fk(W)m(e)24 b(ough)o(t)g(to)g(explain)g(t)o(w)o(o)g(imp)q
(ortan)o(t)f(USB)h(con-)947 74 y(cepts.)19 b(A)10 b Fm(p)n(acket)k
Fk(is)c(a)g(short)h(sequence)h(of)e(consecutiv)o(e)h(bits)947
123 y(that)i(can)g(b)q(e)g(transmitted)f(o)o(v)o(er)g(the)h(USB.)g(P)o
(ac)o(k)o(et)g(length)947 173 y(ma)o(y)j(v)n(ary)h(from)f(24)h(bits)g
(up)h(to)f(1026)g(b)o(ytes.)30 b(A)17 b(pac)o(k)o(et)947
223 y(has)j(a)g(clearly)f(indicated)h(b)q(eginning,)g(c)o(haracterised)
i(b)o(y)947 273 y(a)15 b(unique)g(sync)o(hronisation)g(sequence,)i(and)
e(a)g(clearly)g(in-)947 323 y(dicated)j(end,)h(c)o(haracterised)h(b)o
(y)d(a)g(certain)h(state)h(of)e(the)947 372 y(bus,)g(already)f
(recognisable)g(at)g(the)h(electrical)g(lev)o(el.)24
b(W)m(e)947 422 y(use)18 b(the)g(abbreviations)f(SOP)g(for)g(`start)g
(of)g(pac)o(k)o(et')g(and)947 472 y(EOP)e(for)f(`end)g(of)f(pac)o(k)o
(et'.)997 524 y(A)21 b Fm(fr)n(ame)h Fk(is)e(a)g(p)q(erio)q(d)h(of)e
(time)g(of)h(one)g(millisecond.)947 574 y(Within)14 b(one)h(frame)e
(there)j(is)e(enough)h(time)e(for)h(h)o(undreds)947 624
y(of)c(pac)o(k)o(ets)h(\(the)f(bus)h(rate)f(is)g(12.000.000)d(bits)j(p)
q(er)h(second\).)947 673 y(The)k(notion)e(of)g(frame)g(is)g(imp)q
(ortan)o(t)f(for)i(the)g(adjustmen)o(t)947 723 y(of)d(lo)q(cal)f(clo)q
(c)o(ks)h(and)g(for)f(detection)i(of)e(malfunctioning)e(de-)947
773 y(vices.)21 b(The)15 b(idea)f(is)h(that)f(the)h(PC)g(signals)f(the)
h(b)q(eginning)947 823 y(of)f(a)f(new)i(frame)d(b)o(y)i(means)f(of)g(a)
g(sp)q(ecial)i(pac)o(k)o(et,)e(started)947 873 y(b)o(y)k(a)g
(di\013eren)o(t)g(sync)o(hronisation)g(sequence,)j(called)c(SOF)947
923 y(\(start)j(of)e(frame\).)29 b(When)18 b(one)h(milli)o(second)d
(has)i(almost)947 972 y(passed,)h(whic)o(h)e(the)h(devices)g(are)g
(supp)q(osed)g(to)f(kno)o(w)g(b)o(y)947 1022 y(ha)o(ving)c(coun)o(ted)h
(almost)e(12.000)f(clo)q(c)o(k)j(tic)o(ks)f(on)h(their)f(lo-)947
1072 y(cal)f(clo)q(c)o(k,)f(the)i(bus)f(is)f(supp)q(osed)i(to)f(b)q(e)g
(silen)o(t.)17 b(If)11 b(it)h(is)f(not,)947 1122 y(some)f(device)i(has)
f(failed)e(to)i(ab)q(ort)g(its)g(pac)o(k)o(et)g(in)f(due)h(time,)947
1172 y(and)19 b(suc)o(h)g(a)f(device)i(is)e(said)g(to)h(b)q(e)g
Fm(b)n(abbling)p Fk(.)32 b(A)19 b(device)947 1221 y(whic)o(h)13
b(p)q(ersists)i(in)e(babbling,)f(will)f(ev)o(en)o(tually)i(b)q(e)h
(discon-)947 1271 y(nected)j(from)d(the)i(bus)g(b)o(y)f(its)g(\\paren)o
(t")g(h)o(ub.)23 b(The)15 b(same)947 1321 y(happ)q(ens)g(to)e(a)f
(device)i(that)g(starts)g(a)e(pac)o(k)o(et)i(and)f(then)h(si-)947
1371 y(lences)h(un)o(til)d(the)h(end)h(of)e(the)h(frame)f(|)g(this)h
(is)g(called)g Fm(loss)947 1421 y(of)k(activity)g(\(LO)o(A\))p
Fk(.)e(The)h(h)o(ub's)g(state)h(diagram)c(is)j(giv)o(en)947
2249 y @beginspecial 76 @llx 186 @lly 458 @urx 492 @ury
2289 @rwi @setspecial
%%BeginDocument: myfsm.eps
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 415.95 284.65 451.95 R
4 X
0 0 0 1 0 0 0 K
V
74.48 183.79 470.48 492.45 R
207.65 420.95 279.65 456.95 R
7 X
V
0.5 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 343.95 284.65 379.95 R
4 X
V
207.65 348.95 279.65 384.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 199.95 284.65 235.95 R
4 X
V
207.65 204.95 279.65 240.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.65 271.95 392.65 307.95 R
4 X
V
315.65 276.95 387.65 312.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 X
90 450 1.5 1.5 270 243.65 405.14 GG
243.65 403.64 247.45 403.64 243.65 390.39 239.85 403.64 4 Y
3 H
0 Z
N
243.65 403.64 247.45 403.64 243.65 390.39 239.85 403.64 4 Y
V
243.65 420.95 243.65 405.14 2 L
2 Z
N
90 450 1.5 1.5 270 351.65 327.95 GG
351.65 326.45 353.96 326.45 351.65 318.39 349.34 326.45 4 Y
0 Z
N
351.65 326.45 353.96 326.45 351.65 318.39 349.34 326.45 4 Y
V
261.65 348.95 261.65 330.95 351.65 330.95 351.65 327.95 4 L
2 Z
N
90 450 1.5 1.5 270 261.65 255.95 GG
261.65 254.45 263.96 254.45 261.65 246.39 259.34 254.45 4 Y
0 Z
N
261.65 254.45 263.96 254.45 261.65 246.39 259.34 254.45 4 Y
V
351.65 276.95 351.65 258.95 261.65 258.95 261.65 255.95 4 L
2 Z
N
90 450 1.5 1.5 270 225.65 255.95 GG
225.65 254.45 227.96 254.45 225.65 246.39 223.34 254.45 4 Y
0 Z
N
225.65 254.45 227.96 254.45 225.65 246.39 223.34 254.45 4 Y
V
225.65 420.95 225.65 402.95 180.65 402.95 180.65 258.95 225.65 258.95 225.65 255.95 6 L
2 Z
N
90 450 1.5 1.5 294.77 234.36 477.78 GG
234.99 476.42 238.43 478.01 240.53 464.39 231.54 474.83 4 Y
0 Z
N
234.99 476.42 238.43 478.01 240.53 464.39 231.54 474.83 4 Y
V
200.15 490.12 M
 214.15 490.12 229.83 487.59 234.36 477.78 D
2 Z
N
175.65 371.95 184.65 380.95 R
7 X
V
N
175.65 265.45 184.65 274.45 R
V
N
2 X
90 450 1.5 1.5 187.46 427.45 G
188.96 427.45 188.96 431.25 202.21 427.45 188.96 423.65 4 Y
0 Z
N
188.96 427.45 188.96 431.25 202.21 427.45 188.96 423.65 4 Y
V
207.65 376.79 167.98 376.79 167.98 427.45 187.46 427.45 4 L
2 Z
N
139.65 226.95 148.65 235.95 R
7 X
V
N
180 270 25.79 12.29 30 304.13 442.41 GG
2 X
180 270 25.79 12.29 30 304.13 442.41 AA
7 X
270 360 25.79 12.29 30 304.13 442.41 GG
2 X
270 360 25.79 12.29 30 304.13 442.41 AA
283.09 444.46 M
 303.65 456.33 323.08 461.19 326.47 455.31 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 301.26 453.29 GG
299.91 452.64 301.57 449.22 287.99 446.84 298.25 456.05 4 Y
0 Z
N
299.91 452.64 301.57 449.22 287.99 446.84 298.25 456.05 4 Y
V
301.26 453.29 M
 313.62 459.3 324.12 459.38 326.47 455.31 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 303.13 372.5 GG
2 X
180 270 25.79 12.29 30 303.13 372.5 AA
7 X
270 360 25.79 12.29 30 303.13 372.5 GG
2 X
270 360 25.79 12.29 30 303.13 372.5 AA
282.09 374.55 M
 302.65 386.42 322.08 391.27 325.47 385.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 300.26 383.38 GG
298.91 382.72 300.57 379.31 286.99 376.93 297.25 386.14 4 Y
0 Z
N
298.91 382.72 300.57 379.31 286.99 376.93 297.25 386.14 4 Y
V
300.26 383.38 M
 312.62 389.39 323.12 389.47 325.47 385.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 410.16 301.5 GG
2 X
180 270 25.79 12.29 30 410.16 301.5 AA
7 X
270 360 25.79 12.29 30 410.16 301.5 GG
2 X
270 360 25.79 12.29 30 410.16 301.5 AA
389.12 303.55 M
 409.68 315.42 429.11 320.27 432.5 314.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 407.29 312.38 GG
405.94 311.72 407.6 308.31 394.02 305.93 404.28 315.14 4 Y
0 Z
N
405.94 311.72 407.6 308.31 394.02 305.93 404.28 315.14 4 Y
V
407.29 312.38 M
 419.65 318.39 430.15 318.47 432.5 314.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 303.13 226.5 GG
2 X
180 270 25.79 12.29 30 303.13 226.5 AA
7 X
270 360 25.79 12.29 30 303.13 226.5 GG
2 X
270 360 25.79 12.29 30 303.13 226.5 AA
282.09 228.55 M
 302.65 240.42 322.08 245.27 325.47 239.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 300.26 237.38 GG
298.91 236.72 300.57 233.31 286.99 230.93 297.25 240.14 4 Y
0 Z
N
298.91 236.72 300.57 233.31 286.99 230.93 297.25 240.14 4 Y
V
300.26 237.38 M
 312.62 243.39 323.12 243.47 325.47 239.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
(WFSOP) 223.65 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOP) 223.65 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFSOF) 223.65 217.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOF2) 324.65 289.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Reset) 172.15 478.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Downstream SOP) 119.82 191.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOP & ! EOF1) 129.48 432.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1) 182.98 318.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF2) 231.48 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1 & !EOP) 283.65 335.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOP) 257.65 262.95 T
(EOF2) 295.82 262.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SOP & !EOF1) 249.65 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 329.65 438.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 430.98 288.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 322.65 359.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 315.65 207.56 T
0 0 0 1 0 0 0 K
80.65 344.29 152.65 380.29 R
4 X
V
75.65 349.29 147.65 385.29 R
7 X
V
0.5 H
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOP_) 91.65 362.29 T
0 0 0 1 0 0 0 K
282.57 267.99 287.61 262.95 2 L
1 H
N
287.61 262.95 292.65 267.99 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 X
90 450 1.5 1.5 90 99.65 328.77 GG
99.65 330.27 95.85 330.27 99.65 343.51 103.45 330.27 4 Y
3 H
0 Z
N
99.65 330.27 95.85 330.27 99.65 343.51 103.45 330.27 4 Y
V
243.65 204.95 243.65 186.95 99.65 186.95 99.65 328.77 4 L
2 Z
N
90 450 1.5 1.5 90 126.65 328.77 GG
126.65 330.27 122.85 330.27 126.65 343.51 130.45 330.27 4 Y
0 Z
N
126.65 330.27 122.85 330.27 126.65 343.51 130.45 330.27 4 Y
V
225.65 348.95 225.65 269.62 126.65 269.62 126.65 328.77 4 L
2 Z
N
90 450 1.5 1.5 187.46 452.95 G
188.96 452.95 188.96 456.75 202.21 452.95 188.96 449.15 4 Y
0 Z
N
188.96 452.95 188.96 456.75 202.21 452.95 188.96 449.15 4 Y
V
108.65 385.79 108.65 452.95 187.46 452.95 3 L
2 Z
N
0 0 0 1 0 0 0 K
0 X
(EOP) 112.48 393.62 T
0 0 0 1 0 0 0 K
7 X
180 270 13.43 7.36 30 161.31 358.56 GG
2 X
180 270 13.43 7.36 30 161.31 358.56 AA
7 X
270 360 13.43 7.36 30 161.31 358.56 GG
2 X
270 360 13.43 7.36 30 161.31 358.56 AA
149.88 360.45 M
 160.59 366.63 170.91 368.79 172.94 365.27 D
O
7 X
V
2 X
90 450 1.5 1.5 198.78 169 366.95 GG
167.58 366.47 168.8 362.87 155.04 362.2 166.36 370.06 4 Y
0 Z
N
167.58 366.47 168.8 362.87 155.04 362.2 166.36 370.06 4 Y
V
169 366.95 M
 170.83 367.57 172.32 366.34 172.94 365.27 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
(ELSE) 141.48 338.06 T
0 0 0 1 0 0 0 K
FMENDPAGE

%%EndDocument
 @endspecial 92 x Fh(Figure)g Fk(2:)25 b(Rep)q(eater)18
b(state)g(mac)o(hine)e(\(as)i(used)g(in)f(\014rst)947
2391 y(mo)q(del\))947 2494 y(in)11 b(Figure)g(2,)g(whic)o(h)g(is)g
(obtained)f(as)h(a)g(\014rst)h(step)g(of)e(debug-)947
2544 y(ging)i(and)g(adapting)f(the)i(diagram)d(presen)o(ted)15
b(in)c([3].)17 b(This)947 2594 y(state)12 b(diagram)c(is)j(concerned)i
(with)d(the)h(rep)q(eater)i(function)947 2644 y(of)h(the)g(h)o(ub,)f
(and)h(during)f(its)h(t)o(ypical)f(op)q(eration,)g(the)i(h)o(ub)947
2694 y(cycles)k(through)f(this)g(diagram)e(precisely)j(once)f(for)g
(eac)o(h)947 2743 y(pac)o(k)o(et)d(transferred)h(b)o(y)f(the)g(h)o(ub.)
k(The)c(four)f(main)e(states)947 2793 y(are)j(named)e(as)h(follo)o(ws.)
j(WFSOP)d(means)f(`w)o(ait)g(for)h(start)p eop
%%Page: 3 3
3 2 bop -71 24 a Fk(of)16 b(pac)o(k)o(et',)h(WFEOP)g(means)f(`w)o(ait)f
(for)i(end)g(of)f(pac)o(k)o(et',)-71 74 y(WFEOF2)h(means)f(`w)o(ait)g
(for)h(EOF2)g(p)q(oin)o(t',)g(and)f(\014nally)-71 123
y(WFSOF)e(means)f(`w)o(ait)g(for)g(start)i(of)e(frame'.)-21
177 y(When)23 b(w)o(e)g(started)h(with)f(our)g(initial)e(mo)q(deling)g
(at-)-71 227 y(tempts,)11 b(taking)g(place)h(in)f(August)h(1996,)e(w)o
(e)i(started)h(from)-71 276 y(a)i(sligh)o(tly)f(di\013eren)o(t)i
(diagram,)d(as)j(pro)o(vided)f(in)g(the)h(USB)-71 326
y(Revision)22 b(1.0)g(sp)q(eci\014cation)i([3)o(])e(\(Fig.)45
b(11-6\).)f(While)-71 376 y(building)16 b(our)i(Promela)f(mo)q(del,)f
(w)o(e)i(found)g(that)f(the)i(di-)-71 426 y(agram)11
b(from)f(USB)j(Revision)f(1.0)f(sp)q(eci\014cation)i(could)f(im-)-71
476 y(p)q(ossibly)18 b(b)q(e)h(righ)o(t)e(and)h(w)o(e)g(had)g(to)g
(devise)h(an)f(adapted)-71 525 y(diagram)12 b(ourselv)o(es.)-21
579 y(The)21 b(state-diagram)e(in)h([3])g(has)h(a)f(direct)i
(transition)-71 629 y(from)10 b(the)i(state)h(WFSOF)f(to)f(to)h(the)g
(state)h(WFSOP)f(when)-71 678 y(a)21 b(do)o(wnstream)g(SOP)h(ev)o(en)o
(t)g(is)g(sensed.)42 b(This)22 b(seemed)-71 728 y(wrong)12
b(as)g(a)g(prop)q(er)h(`start)g(of)e(frame')g(pac)o(k)o(et)h(\(SOF\))h
(ends)-71 778 y(with)i(a)f(EOP)h(tok)o(en.)21 b(In)15
b(addition,)e(it)h(w)o(as)h(unclear)g(what)-71 828 y(should)20
b(happ)q(en)i(if)d(the)i(rep)q(eater)i(is)d(in)g(state)i(WFEOP)-71
878 y(when)e(the)g(EOF2)g(ev)o(en)o(t)g(o)q(ccurs.)36
b(Accordingly)m(,)19 b(in)g(our)-71 927 y(o)o(wn)g(\014rst)g(mo)q(del,)
f(there)i(is)f(a)f(sp)q(ecial)h(state)h(WFEOP)p 857 927
15 2 v 18 w(,)-71 977 y(whic)o(h)14 b(is)g(almost)e(the)j(same)e(as)h
(WFEOP)m(,)g(except)h(for)f(the)-71 1027 y(fact)k(that)g(in)f(this)g
(state,)i(the)g(pac)o(k)o(et)f(whose)g(end)g(is)g(b)q(e-)-71
1077 y(ing)h(w)o(aited)h(for)f(is)h(kno)o(wn)f(to)h(b)q(e)g(the)h(SOF)f
(pac)o(k)o(et;)i(at)-71 1127 y(least)17 b(if)e(the)i(host)f(p)q
(erforms)g(w)o(ell,)g(whic)o(h)g(is)g(an)g(assump-)-71
1177 y(tion)d(throughout)h(the)h(h)o(ub)f(sp)q(eci\014cation.)-21
1230 y(W)m(e)h(still)f(ough)o(t)h(to)g(explain)g(the)h(so-called)f
(EOF1)g(and)-71 1280 y(EOF2)k(p)q(oin)o(ts.)33 b(These)20
b(are)f(particular)g(p)q(oin)o(ts)g(in)f(time,)-71 1329
y(to)d(b)q(e)g(signalled)f(b)o(y)h(lo)q(cal)f(timers)g(in)g(eac)o(h)i
(device,)f(whic)o(h)-71 1379 y(o)q(ccur)i(when)f(the)h(end)f(of)f
(frame)g(is)h(approac)o(hing.)23 b(EOF1)-71 1429 y(o)q(ccurs)18
b(\014rst:)24 b(at)17 b(EOF)g Fs(\000)f Fk(32)g(bits.)26
b(EOF2)17 b(o)q(ccurs)h(next:)-71 1479 y(at)c(EOF)g Fs(\000)g
Fk(10)g(bits.)-21 1564 y(Y)m(et)26 b(another)f(diagram)e(w)o(as)j
(published)f(b)o(y)h([6)o(],)h(as)-71 1614 y(sho)o(wn)12
b(in)f(Figure)h(3,)f(whic)o(h)h(came)f(to)g(our)h(atten)o(tion)g(a)f
(few)-71 1664 y(mon)o(ths)16 b(later.)27 b(Notice)17
b(that)g(the)h(transition)e(from)f(state)-71 2535 y @beginspecial
75 @llx 186 @lly 458 @urx 513 @ury 2289 @rwi @setspecial
%%BeginDocument: fsm.eps
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 415.95 284.65 451.95 R
4 X
0 0 0 1 0 0 0 K
V
63.65 177.95 459.65 519.95 R
207.65 420.95 279.65 456.95 R
7 X
V
0.5 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 343.95 284.65 379.95 R
4 X
V
207.65 348.95 279.65 384.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 199.95 284.65 235.95 R
4 X
V
207.65 204.95 279.65 240.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.65 271.95 392.65 307.95 R
4 X
V
315.65 276.95 387.65 312.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 X
90 450 1.5 1.5 270 243.65 405.14 GG
243.65 403.64 247.45 403.64 243.65 390.39 239.85 403.64 4 Y
3 H
0 Z
N
243.65 403.64 247.45 403.64 243.65 390.39 239.85 403.64 4 Y
V
243.65 420.95 243.65 405.14 2 L
2 Z
N
90 450 1.5 1.5 270 243.65 261.14 GG
243.65 259.64 247.45 259.64 243.65 246.39 239.85 259.64 4 Y
0 Z
N
243.65 259.64 247.45 259.64 243.65 246.39 239.85 259.64 4 Y
V
243.65 348.95 243.65 261.14 2 L
2 Z
N
90 450 1.5 1.5 270 351.65 327.95 GG
351.65 326.45 353.96 326.45 351.65 318.39 349.34 326.45 4 Y
0 Z
N
351.65 326.45 353.96 326.45 351.65 318.39 349.34 326.45 4 Y
V
261.65 348.95 261.65 330.95 351.65 330.95 351.65 327.95 4 L
2 Z
N
90 450 1.5 1.5 270 261.65 255.95 GG
261.65 254.45 263.96 254.45 261.65 246.39 259.34 254.45 4 Y
0 Z
N
261.65 254.45 263.96 254.45 261.65 246.39 259.34 254.45 4 Y
V
351.65 276.95 351.65 258.95 261.65 258.95 261.65 255.95 4 L
2 Z
N
90 450 1.5 1.5 270 225.65 255.95 GG
225.65 254.45 227.96 254.45 225.65 246.39 223.34 254.45 4 Y
0 Z
N
225.65 254.45 227.96 254.45 225.65 246.39 223.34 254.45 4 Y
V
225.65 420.95 225.65 402.95 180.65 402.95 180.65 258.95 225.65 258.95 225.65 255.95 6 L
2 Z
N
90 450 1.5 1.5 277.28 241.09 476.98 GG
241.28 475.49 245.05 475.98 242.96 462.35 237.51 475.01 4 Y
0 Z
N
241.28 475.49 245.05 475.98 242.96 462.35 237.51 475.01 4 Y
V
207.65 510.95 M
 222.81 510.95 238.48 497.42 241.09 476.98 D
2 Z
N
90 450 1.5 1.5 358.07 187.48 223.63 GG
188.98 223.58 189.1 227.38 202.21 223.14 188.85 219.79 4 Y
0 Z
N
188.98 223.58 189.1 227.38 202.21 223.14 188.85 219.79 4 Y
V
187.48 223.63 M
 147.41 224.99 117.65 237.12 117.65 249.95 D
2 Z
N
175.65 371.95 184.65 380.95 R
7 X
V
N
175.65 352.95 184.65 361.95 R
V
N
2 X
90 450 1.5 1.5 187.46 438.95 G
188.96 438.95 188.96 442.75 202.21 438.95 188.96 435.15 4 Y
0 Z
N
188.96 438.95 188.96 442.75 202.21 438.95 188.96 435.15 4 Y
V
207.65 375.95 144.65 375.95 144.65 438.95 187.46 438.95 4 L
2 Z
N
139.65 226.95 148.65 235.95 R
7 X
V
N
2 X
90 450 1.5 1.5 190.46 357.95 G
191.96 357.95 191.96 361.75 205.21 357.95 191.96 354.15 4 Y
0 Z
N
191.96 357.95 191.96 361.75 205.21 357.95 191.96 354.15 4 Y
V
243.65 204.95 243.65 186.95 144.65 186.95 144.65 357.95 190.46 357.95 5 L
2 Z
N
7 X
180 270 25.79 12.29 30 304.13 442.41 GG
2 X
180 270 25.79 12.29 30 304.13 442.41 AA
7 X
270 360 25.79 12.29 30 304.13 442.41 GG
2 X
270 360 25.79 12.29 30 304.13 442.41 AA
283.09 444.46 M
 303.65 456.33 323.08 461.19 326.47 455.31 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 301.26 453.29 GG
299.91 452.64 301.57 449.22 287.99 446.84 298.25 456.05 4 Y
0 Z
N
299.91 452.64 301.57 449.22 287.99 446.84 298.25 456.05 4 Y
V
301.26 453.29 M
 313.62 459.3 324.12 459.38 326.47 455.31 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 303.13 372.5 GG
2 X
180 270 25.79 12.29 30 303.13 372.5 AA
7 X
270 360 25.79 12.29 30 303.13 372.5 GG
2 X
270 360 25.79 12.29 30 303.13 372.5 AA
282.09 374.55 M
 302.65 386.42 322.08 391.27 325.47 385.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 300.26 383.38 GG
298.91 382.72 300.57 379.31 286.99 376.93 297.25 386.14 4 Y
0 Z
N
298.91 382.72 300.57 379.31 286.99 376.93 297.25 386.14 4 Y
V
300.26 383.38 M
 312.62 389.39 323.12 389.47 325.47 385.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 410.16 301.5 GG
2 X
180 270 25.79 12.29 30 410.16 301.5 AA
7 X
270 360 25.79 12.29 30 410.16 301.5 GG
2 X
270 360 25.79 12.29 30 410.16 301.5 AA
389.12 303.55 M
 409.68 315.42 429.11 320.27 432.5 314.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 407.29 312.38 GG
405.94 311.72 407.6 308.31 394.02 305.93 404.28 315.14 4 Y
0 Z
N
405.94 311.72 407.6 308.31 394.02 305.93 404.28 315.14 4 Y
V
407.29 312.38 M
 419.65 318.39 430.15 318.47 432.5 314.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 303.13 226.5 GG
2 X
180 270 25.79 12.29 30 303.13 226.5 AA
7 X
270 360 25.79 12.29 30 303.13 226.5 GG
2 X
270 360 25.79 12.29 30 303.13 226.5 AA
282.09 228.55 M
 302.65 240.42 322.08 245.27 325.47 239.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 300.26 237.38 GG
298.91 236.72 300.57 233.31 286.99 230.93 297.25 240.14 4 Y
0 Z
N
298.91 236.72 300.57 233.31 286.99 230.93 297.25 240.14 4 Y
V
300.26 237.38 M
 312.62 243.39 323.12 243.47 325.47 239.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
(WFSOP) 223.65 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOP) 223.65 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFSOF) 223.65 217.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOF2) 324.65 289.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Reset) 179.65 501.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Resume) 73.65 241.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Downstream SOP) 150.65 191.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOP & !EOF1) 108.65 447.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1) 184.65 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1 & EOP) 245.65 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1 & !EOP) 283.65 335.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOP # EOF2) 257.65 262.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SOP & !EOF1) 249.65 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 329.65 438.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 430.98 288.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 322.65 359.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 315.65 207.56 T
0 0 0 1 0 0 0 K
FMENDPAGE

%%EndDocument
 @endspecial 91 x Fh(Figure)f Fk(3:)20 b(Rep)q(eater)d(state)f(mac)o
(hine)e(\(as)i(giv)o(en)f(b)o(y)g(Ja\013)-71 2676 y(and)f(Morris\))-71
2793 y(WFSOF)h(no)o(w)g(prop)q(erly)g(go)q(es)g(to)g(an)f(in)o
(termediate)g(state)983 24 y(to)g(a)o(w)o(ait)f(an)h(EOP)h(tok)o(en.)k
(On)c(the)g(other)g(hand,)f(there)h(is)983 74 y(no)f(additional)e
(WFEOP)p 1398 74 V 17 w(.)983 235 y Fl(2)56 b(A)19 b(\014rst)g(Promela)
d(mo)r(del)1033 337 y Fk(Belo)o(w)g(w)o(e)i(describ)q(e)g(a)f(small)d
(Promela)i(mo)q(del)f(of)h(the)983 387 y(h)o(ub)23 b(proto)q(col.)44
b(The)23 b(follo)o(wing)d(proto)q(col)i(asp)q(ects)j(are)983
437 y(mo)q(deled:)1024 523 y Fs(\017)c Fk(precisely)15
b(four)e(do)o(wnstream)g(p)q(orts)1647 508 y Fg(2)1667
523 y Fk(,)1024 580 y Fs(\017)21 b Fk(h)o(ubs)d(can)g(b)q(e)g(instan)o
(tiated)f(and)g(connected)j(b)o(y)d(ca-)1066 630 y(bles,)1024
687 y Fs(\017)k Fk(SOP)14 b(and)g(EOP)h(messages,)1024
743 y Fs(\017)21 b Fk(EOF1)14 b(and)g(EOF2)g(ev)o(en)o(ts,)1024
800 y Fs(\017)21 b Fk(rela)o(ying)13 b(and)h(broadcasting)f(of)h
(messages,)1024 857 y Fs(\017)21 b Fk(p)q(orts)14 b(can)h(\(only\))e(b)
q(e)h(disabled)g(or)g(enabled,)1024 914 y Fs(\017)21
b Fk(full)13 b(h)o(ub)g(rep)q(eater)j(state)f(mac)o(hine)e(\(cf.)18
b(Figure)c(2\).)983 1000 y(There)21 b(are)g(also)e(a)h(n)o(um)o(b)q(er)
f(of)h(asp)q(ects)i(whic)o(h)e(are)g(not)983 1050 y(mo)q(deled:)1024
1136 y Fs(\017)h Fk(Susp)q(end/resume)27 b(matters)g(\(for)f(putting)g
(devices)1066 1186 y(in)o(to)13 b(a)h(state)g(of)g(rest\).)1024
1243 y Fs(\017)21 b Fk(\(Quan)o(titativ)o(e\))13 b(timing)f(asp)q
(ects.)1024 1299 y Fs(\017)21 b Fk(P)o(arametrisation)12
b(of)h(the)i(USB)f(con\014guration.)1024 1356 y Fs(\017)21
b Fk(The)30 b(p)q(ort)g(statuses)i(\\disconnected")f(and)f(\\sus-)1066
1406 y(p)q(ended".)1024 1463 y Fs(\017)21 b Fk(P)o(ac)o(k)o(et)c(con)o
(ten)o(ts:)23 b(pac)o(k)o(ets)17 b(are)g(mo)q(deled)e(as)h(a)g(pair)
1066 1513 y(consisting)e(of)f(a)h(SOP)g(and)g(an)f(EOP)m(.)1024
1569 y Fs(\017)21 b Fk(The)16 b(en)o(umeration)e(proto)q(col,)i(where)g
(eac)o(h)h(h)o(ub)e(and)1066 1619 y(eac)o(h)f(device)h(is)f(assigned)g
(an)g(address.)1024 1676 y Fs(\017)21 b Fk(The)13 b(in)o(terpretation)h
(of)e(h)o(ub)h(commands)e(suc)o(h)i(as)g(re-)1066 1726
y(sets.)1024 1783 y Fs(\017)21 b Fk(Line)14 b(ev)o(en)o(ts)h(suc)o(h)f
(as)g(frame)f(errors.)1024 1839 y Fs(\017)21 b Fk(Lo)o(w/high)12
b(sp)q(eed)k(matters.)1024 1896 y Fs(\017)21 b Fk(P)o(o)o(w)o(er)14
b(switc)o(hing.)1024 1953 y Fs(\017)21 b Fk(The)14 b(USB)h(proto)q(col)
e(from)f(Chapter)j(8)f(of)f([3)o(].)1033 2039 y(W)m(e)32
b(omit)f(the)i(ob)o(vious)f(de\014nition)g(of)g(constan)o(ts)983
2089 y(for)j(Bo)q(oleans)g(\()p Fd(false)p Fk(,)k Fd(true)p
Fk(\),)g(for)c(pac)o(k)o(et-related)983 2139 y(ev)o(en)o(ts)43
b(\()p Fd(SOP)p Fk(,)d Fd(EOP)p Fk(\),)h(for)h(timer-related)f
(messages)983 2189 y(\()p Fd(START)p Fk(,)25 b Fd(EOF1)p
Fk(,)j Fd(EOF2)p Fk(\),)g(for)e(rep)q(eater)j(states)e(\()p
Fd(WFSOP)p Fk(,)983 2238 y Fd(WFEOP)p Fk(,)c Fd(WFEOP)p
Fk(,)f Fd(WFSOF)p Fk(,)h Fd(WFEOF2)p Fk(\),)i(and)f(for)g(h)o(ub)h(p)q
(ort)983 2288 y(states)e(\()p Fd(DISABLED)p Fk(,)d Fd(ENABLED)p
Fk(\).)h(The)h(\014rst)h(t)o(w)o(o)f(macros)983 2338
y(\()p Fd(port)p 1089 2338 13 2 v 14 w(enable)p Fk(,)g
Fd(fr)p 1313 2338 V 15 w(error)p Fk(\))e(allo)o(w)g(the)j(con)o(trol)e
(of)g(h)o(ub)983 2388 y(p)q(ort)14 b(states.)20 b(After)15
b(that)f(w)o(e)g(ha)o(v)o(e)g(v)n(arious)f(h)o(ub)h(`subrou-)983
2438 y(tines':)k Fd(enabled)p Fk(,)11 b Fd(snd)p Fk(,)i
Fd(broadcast)p Fk(,)e Fd(FrameTimerReset)o Fk(,)983 2487
y Fd(any)p 1051 2487 V 14 w(EOP)p Fk(,)16 b Fd(any)p
1225 2487 V 15 w(SOP)p Fk(.)g Fd(FrameTimerReset)e Fk(sends)k(a)f
Fd(START)983 2537 y Fk(o)o(v)o(er)e(c)o(hannel)h Fd(time)p
Fk(.)21 b(In)15 b(order)h(to)f(ensure)i(that)e(sync)o(hro-)983
2587 y(nisation)g(with)g(the)h Fd(timer)e Fk(pro)q(cess,)j(the)f
Fd(EOF)p Fk(s)g(ma)o(y)d(ha)o(v)o(e)983 2637 y(to)h(b)q(e)g(skipp)q(ed)
h(\014rst.)p 983 2676 382 2 v 1029 2703 a Ff(2)1046 2714
y Fi(The)g(p)q(orts)e(in)h(the)g(direction)e(of)j(the)e(lea)o(v)o(es)g
(of)i(the)e(USB)i(tree)983 2754 y(are)f(called)g Fe(downstr)n(e)n(am)s
Fi(;)j(the)d(\(single\))f(p)q(ort)h(to)o(w)o(ards)g(the)g(host)g(is)983
2793 y(the)d Fe(r)n(o)n(ot)i(p)n(ort)p Fi(.)p eop
%%Page: 4 4
4 3 bop -106 24 a Fc(#define)15 b(port_enabl)o(e\(P)o(\))473
b(\\)-71 63 y(if)793 b(\\)-71 103 y(::)17 b(\(pstate[P])o(==D)o(ISA)o
(BL)o(ED\))d(->)j(pstate[P]=)o(ENA)o(BLE)o(D)32 b(\\)-71
142 y(::)17 b(\(pstate[P])o(!=D)o(ISA)o(BL)o(ED\))d(->)j(skip)263
b(\\)-71 182 y(fi)-106 260 y(#define)15 b(fr_error\(P)o(\))526
b(\\)-71 300 y(if)793 b(\\)-71 339 y(::)17 b(\(pstate[P])o(==E)o(NAB)o
(LE)o(D\))d(->)j(pstate[P]=D)o(ISA)o(BLE)o(D)32 b(\\)-71
379 y(::)17 b(\(pstate[P])o(!=E)o(NAB)o(LE)o(D\))d(->)j(skip)281
b(\\)-71 418 y(fi)-106 497 y(#define)15 b(enabled\(P\))f(\(pstate[P])o
(==E)o(NAB)o(LE)o(D\))-106 536 y(#define)h(snd\(P,M\))579
b(\\)-71 576 y(if)793 b(\\)-71 615 y(::)17 b(enabled\(P\))d(->)j(if)493
b(\\)229 655 y(::)17 b(P==0)f(->)h(p0!M)263 b(\\)229
694 y(::)17 b(P==1)f(->)h(p1!M)263 b(\\)229 734 y(::)17
b(P==2)f(->)h(p2!M)263 b(\\)229 773 y(::)17 b(P==3)f(->)h(p3!M)263
b(\\)229 813 y(::)17 b(P==4)f(->)h(p4!M)263 b(\\)229
852 y(fi)493 b(\\)-71 891 y(::)17 b(else)f(skip)616 b(\\)-71
931 y(fi)-106 970 y(#define)15 b(broadcast\()o(M\))508
b(\\)-71 1010 y(snd\(1,M\);)14 b(snd\(2,M\);)h(snd\(3,M\);)f
(snd\(4,M\))-106 1089 y(#define)h(FrameTimer)o(Res)o(et)455
b(\\)-71 1128 y(if)793 b(\\)-71 1167 y(::)17 b(time?EOF1)d(->)j
(time?EOF2)e(->)i(time!STAR)o(T)138 b(\\)-71 1207 y(::)17
b(time?EOF2)d(->)j(time!START)367 b(\\)-71 1246 y(::)17
b(time!START)596 b(\\)-71 1286 y(fi)-106 1365 y(#define)15
b(any_EOP)597 b(\\)-71 1404 y(p0?EOP)15 b(::)i(p1?EOP)f(::)h(p2?EOP)e
(::)i(p3?EOP)f(::)h(p4?EOP)-106 1443 y(#define)e(any_SOP)597
b(\\)-71 1483 y(p0?SOP)15 b(::)i(p1?SOP)f(::)h(p2?SOP)e(::)i(p3?SOP)f
(::)h(p4?SOP)-56 1564 y Fk(After)e(these)h(preparations)f(the)h(main)c
(h)o(ub)j(mo)q(del)f(can)-106 1614 y(b)q(e)g(giv)o(en.)j(It)c(is)g
(describ)q(ed)i(in)e(an)g(SDL)g(st)o(yle,)g(where)h(eac)o(h)-106
1664 y(of)d(the)i(main)c(states)k(\(v)n(ariable)e Fd(state)p
Fk(\))g(has)h(a)g(list)g(of)f(alter-)-106 1714 y(nativ)o(e)i(receiv)o
(e)i(statemen)o(ts,)f(one)g(for)g(eac)o(h)g(p)q(ossible)h(mes-)-106
1763 y(sage.)26 b(F)m(or)17 b(eac)o(h)g(alternativ)o(e)f(message,)h
(there)h(is)e(a)h(tran-)-106 1813 y(sition)e(whic)o(h)h(consists)h(of)e
(assignmen)o(ts)g(to)h(the)g(\014v)o(e)g(p)q(ort)-106
1863 y(states,)11 b(the)g(directivit)o(y)f(of)f(the)i(pac)o(k)o(et)f
(transfer,)h(as)f(w)o(ell)g(as)-106 1913 y(outgoing)j(messages)i(and)f
(the)h(next)g(state.)21 b(The)15 b Fd(timeout)-106 1963
y Fk(construct)22 b(is)f(a)f(test)i(that)f(b)q(ecomes)g(enabled)g(when)
g(all)-106 2013 y(other)14 b(pro)q(cesses)j(are)d(blo)q(c)o(k)o(ed.)
-106 2083 y Fc(proctype)g(hub\(chan)h(p0,)i(p1,)f(p2,)h(p3,)g(p4,)f
(time\))-106 2123 y({)-71 2162 y(short)g(state;)121 b(/*)17
b(repeater)e(main)h(state)157 b(*/)-71 2202 y(short)16
b(pstate[5];)49 b(/*)17 b(port)f(states)298 b(*/)-71
2241 y(short)16 b(src;)157 b(/*)17 b(connectivit)o(y)d(indicated)h(by)
317 2281 y(source)386 b(*/)-71 2320 y(short)16 b(x;)193
b(/*)17 b(buffer)f(for)g(don't)g(care)g(value)g(*/)-71
2399 y(port_enabl)o(e\(1)o(\);)-71 2438 y(port_enabl)o(e\(2)o(\);)-71
2478 y(FrameTimer)o(Res)o(et;)-71 2517 y(do)-71 2557
y(::)h(\(state==WF)o(SOP)o(\))e(->)-18 2596 y(if)-18
2636 y(::)i(p0?SOP)e(->)i(src=0;)f(state=WFEO)o(P;)e(broadcast\(S)o(OP)
o(\))-18 2675 y(::)j(p1?SOP)e(->)35 2714 y(if)35 2754
y(::)i(enabled\(1\))d(->)j(src=1;)e(state=WFEOP)o(;)g(p0!SOP)35
2793 y(::)i(else)f(skip)1089 24 y(fi)1036 63 y(::)h(p2?SOP)e(->)1089
103 y(if)1089 142 y(::)i(enabled\(2)o(\))e(->)i(src=2;)e(state=WFEO)o
(P;)f(p0!SOP)1089 182 y(::)j(else)f(skip)1089 221 y(fi)1036
260 y(::)h(p3?SOP)e(->)1089 300 y(if)1089 339 y(::)i(enabled\(3)o(\))e
(->)i(src=3;)e(state=WFEO)o(P;)f(p0!SOP)1089 379 y(::)j(else)f(skip)
1089 418 y(fi)1036 458 y(::)h(p4?SOP)e(->)1089 497 y(if)1089
536 y(::)i(enabled\(4)o(\))e(->)i(src=4;)e(state=WFEO)o(P;)f(p0!SOP)
1089 576 y(::)j(else)f(skip)1089 615 y(fi)1036 655 y(::)h(any_EOP)1036
694 y(::)g(time?EOF1)d(->)j(state=WFSO)o(F)1036 734 y(::)g(time?EOF2)
1036 773 y(fi)983 813 y(::)g(\(state==W)o(FEO)o(P\))d(->)1036
852 y(if)1036 891 y(::)j(any_SOP)1036 931 y(::)g(p0?EOP)e(->)1089
970 y(if)1089 1010 y(::)i(src==0)e(->)i(state=WFSO)o(P;)d(broadcast\(E)
o(OP\))1089 1049 y(::)j(else)f(skip)1089 1089 y(fi)1036
1128 y(::)h(p1?EOP)e(->)1089 1167 y(if)1089 1207 y(::)i(enabled\(1)o
(\))e(&&)i(src==1)e(->)i(state=WFSO)o(P;)d(p0!EOP)1089
1246 y(::)j(else)f(skip)1089 1286 y(fi)1036 1325 y(::)h(p2?EOP)e(->)
1089 1365 y(if)1089 1404 y(::)i(enabled\(2)o(\))e(&&)i(src==2)e(->)i
(state=WFSO)o(P;)d(p0!EOP)1089 1443 y(::)j(else)f(skip)1089
1483 y(fi)1036 1522 y(::)h(p3?EOP)e(->)1089 1562 y(if)1089
1601 y(::)i(enabled\(3)o(\))e(&&)i(src==3)e(->)i(state=WFSO)o(P;)d
(p0!EOP)1089 1641 y(::)j(else)f(skip)1089 1680 y(fi)1036
1720 y(::)h(p4?EOP)e(->)1089 1759 y(if)1089 1798 y(::)i(enabled\(4)o
(\))e(&&)i(src==4)e(->)i(state=WFSO)o(P;)d(p0!EOP)1089
1838 y(::)j(else)f(skip)1089 1877 y(fi)1036 1917 y(::)h(time?EOF1)d(->)
1089 1956 y(if)1089 1996 y(::)j(\(src>0\))e(->)i(state=WFE)o(OF2)o(;)e
(p0!EOP)1089 2035 y(::)i(else)f(skip)1089 2074 y(fi)1036
2114 y(::)h(time?EOF2)d(->)1089 2153 y(if)1089 2193 y(::)j(\(src==0\))d
(->)j(state=WFEOP)o(_;)d(FrameTimerR)o(ese)o(t)1089 2232
y(::)j(else)f(skip)1089 2272 y(fi)1036 2311 y(fi)983
2350 y(::)h(\(state==W)o(FEO)o(P_\))d(->)1036 2390 y(if)1036
2429 y(::)j(any_SOP)1036 2469 y(::)g(p0?EOP)e(->)i(state=WFSO)o(P;)d
(broadcast\(E)o(OP\))1036 2508 y(::)j(p1?EOP)1036 2548
y(::)g(p2?EOP)1036 2587 y(::)g(p3?EOP)1036 2627 y(::)g(p4?EOP)1036
2666 y(::)g(time?EOF1)1036 2705 y(::)g(time?EOF2)1036
2745 y(fi)983 2784 y(::)g(\(state==W)o(FEO)o(F2\))o(->)p
eop
%%Page: 5 5
5 4 bop 17 24 a Fc(if)17 63 y(::)17 b(any_SOP)17 103
y(::)g(p0?EOP)17 142 y(::)g(p1?EOP)f(->)70 182 y(if)70
221 y(::)h(enabled\(1\))d(&&)j(src==1)f(->)h(state=WFS)o(OF)70
260 y(::)g(else)f(skip)70 300 y(fi)17 339 y(::)h(p2?EOP)f(->)70
379 y(if)70 418 y(::)h(enabled\(2\))d(&&)j(src==2)f(->)h(state=WFS)o
(OF)70 458 y(::)g(else)f(skip)70 497 y(fi)17 536 y(::)h(p3?EOP)f(->)70
576 y(if)70 615 y(::)h(enabled\(3\))d(&&)j(src==3)f(->)h(state=WFS)o
(OF)70 655 y(::)g(else)f(skip)70 694 y(fi)17 734 y(::)h(p4?EOP)f(->)70
773 y(if)70 813 y(::)h(enabled\(4\))d(&&)j(src==4)f(->)h(state=WFS)o
(OF)70 852 y(::)g(else)f(skip)70 891 y(fi)17 931 y(::)h(time?EOF1)17
970 y(::)g(time?EOF2)e(->)i(fr_error\()o(src)o(\);)d(state=WFSOF)17
1010 y(fi)-36 1049 y(::)j(\(state==WFS)o(OF\))d(->)17
1089 y(if)17 1128 y(::)j(p0?SOP)f(->)70 1167 y(FrameTimerR)o(ese)o(t;)e
(state=WFEOP)o(_;)g(broadcast\(S)o(OP\))o(;)17 1207 y(::)j(p1?SOP)17
1246 y(::)g(p2?SOP)17 1286 y(::)g(p3?SOP)17 1325 y(::)g(p4?SOP)17
1365 y(::)g(any_EOP)17 1404 y(::)g(time?EOF1)17 1443
y(::)g(time?EOF2)17 1483 y(fi)-36 1522 y(od)-71 1562
y(})-71 1641 y(/*)g(test)f(drivers,)f(stubs)h(and)g(timers)g(*/)-71
1720 y(/*)h(The)g(host)f(sends,)f(successivel)o(y,)f(an)j(SOP)g(and)f
(EOP)h(and)-18 1759 y(then)f(waits)g(for)h(a)g(similar)e(reply)h(from)g
(a)h(device.)-18 1798 y(If)g(there)f(is)h(none,)f(it)h(continues)o(.)e
(*/)-71 1838 y(proctype)g(host\(chan)f(c\))-71 1877 y({)17
1917 y(do)17 1956 y(::)j(c!SOP)f(->)h(c!EOP)f(->)h(if)388
1996 y(::)g(c?SOP)f(->)h(c?EOP)388 2035 y(::)g(timeout)388
2074 y(fi)17 2114 y(od)-71 2153 y(})-71 2232 y(/*)g(An)g(eager)f
(device)f(replies)g(to)i(the)g(SOP)g(\\&)f(EOP)h(sent)f(by)-18
2272 y(the)h(host.)e(*/)-71 2311 y(proctype)g(eager_devi)o(ce\()o(cha)o
(n)f(c\))-71 2350 y({)17 2390 y(do)17 2429 y(::)j(c?SOP)f(->)h(c?EOP)f
(->)70 2469 y(c!SOP)g(->)h(c!EOP)17 2508 y(od)-71 2548
y(})-71 2627 y(/*)g(A)g(lazy)g(device)e(does)h(not)h(reply.)e(*/)-71
2666 y(proctype)g(lazy_devic)o(e\(c)o(han)f(c\))-71 2705
y({)17 2745 y(do)17 2784 y(::)j(c?SOP)f(->)h(c?EOP)1071
24 y(od)983 63 y(})983 142 y(proctype)e(timer\(cha)o(n)g(c\))983
182 y({)1071 221 y(do)1071 260 y(::)i(c?START)e(->)i(c!EOF1)f(->)h
(c!EOF2)1071 300 y(od)983 339 y(})983 442 y Fn(2.1)52
b(Sim)o(ulation)17 b(of)h(the)f(\014rst)g(mo)q(del)983
534 y Fc(chan)f(cable[9])f(=)i([0])g(of)g({)g(mtype)f(};)983
573 y(chan)g(time)g([2])h(=)g([0])g(of)g({)g(mtype)f(};)983
652 y(/*)h(example)e(topology:)1001 692 y(*)1001 731
y(*)334 b(H)1001 771 y(*)g(|)1001 810 y(*)317 b([0])1001
849 y(*)334 b(|)1001 889 y(*)229 b(HUB__REPE)o(ATE)o(R--)o(--)o(tim)o
(e[0)o(]--)o(-TI)o(ME)o(R)1001 928 y(*)g(|)52 b(|)h(|)f(|)1001
968 y(*)211 b([1])16 b([2])h([3])g([4])1001 1007 y(*)229
b(|)52 b(|)h(|)f(|)1001 1047 y(*)229 b(|)52 b(D)1001
1086 y(*)229 b(|)1001 1125 y(*)123 b(HUB__REPE)o(ATE)o(R--)o(--t)o(ime)
o([1)o(]--)o(-TI)o(MER)1001 1165 y(*)g(|)52 b(|)h(|)f(|)1001
1204 y(*)105 b([5])17 b([6])f([7])h([8])1001 1244 y(*)123
b(|)52 b(|)h(|)f(|)1001 1283 y(*)123 b(D)52 b(D!!)1001
1323 y(*)1001 1362 y(*/)983 1441 y(init{)1018 1480 y(atomic{)1053
1520 y(run)17 b(timer\(time)o([0])o(\))e(priority)f(1;)1053
1559 y(run)j(timer\(time)o([1])o(\);)1053 1638 y(run)g(host\(cable)o
([0])o(\);)1053 1678 y(run)g(hub)g(\(cable[0])o(,ca)o(ble)o([1])o(,c)o
(abl)o(e[2)o(],)1212 1717 y(cable[3],ca)o(ble)o([4])o(,t)o(ime)o([0])o
(\);)1053 1756 y(run)g(hub)g(\(cable[1])o(,ca)o(ble)o([5])o(,c)o(abl)o
(e[6)o(],)1212 1796 y(cable[7],ca)o(ble)o([8])o(,t)o(ime)o([1])o(\);)
1053 1835 y(run)g(lazy_devic)o(e)e(\(cable[5]\))o(;)1053
1875 y(run)i(eager_devi)o(ce\()o(cab)o(le[)o(6]\))o(;)1053
1914 y(run)g(lazy_devic)o(e)e(\(cable[2]\))o(;)1018 1954
y(})983 1993 y(})1033 2089 y Fk(W)m(e)e(refer)i(to)f(Figure)g(4.)983
2192 y Fn(2.2)52 b(Conclusions)18 b(of)g(the)f(\014rst)g(mo)q(delling)
1033 2295 y Fk(The)d(follo)o(wing)e(conclusions)j(can)f(b)q(e)h(dra)o
(wn)f(from)f(this)983 2345 y(initial)19 b(mo)q(delling)g(activit)o(y)m
(.)38 b(First,)23 b(sim)o(ulation)c(of)h(the)983 2395
y Fb(Pr)o(omela)k Fk(mo)q(del)d(sho)o(ws)i(man)o(y)e(mo)q(delling)f
(artefacts,)983 2445 y(caused)g(b)o(y)g(the)g(w)o(a)o(y)e(in)h(whic)o
(h)g(ev)o(en)o(ts)i(are)f(mapp)q(ed)e(to)983 2494 y Fb(Pr)o(omela)d
Fk(constructs)i(and)d(b)o(y)h(the)g(lev)o(el)f(of)g(abstraction)983
2544 y(of)9 b(the)h(mo)q(del.)15 b(F)m(or)9 b(example,)f(the)i
(decision)g(to)f(mo)q(del)f(time)983 2594 y(b)o(y)22
b(comm)o(unication)d(of)j(messages)h(\()p Fd(START)p
Fk(,)e Fd(EOF1)p Fk(,)i(and)983 2644 y Fd(EOF2)p Fk(\))11
b(causes)h(a)g(discrepancy)g(b)q(et)o(w)o(een)h(the)f(actual)f(condi-)
983 2694 y(tion)g(\\)p Fd(SOP)21 b(&)g(!EOF1)p Fk(")10
b(from)g Fd(WFSOP)g Fk(to)h Fd(WFEOP)f Fk(in)h(Figure)g(2)983
2743 y(and)16 b(its)h(implem)o(en)o(tation)c(\(see)18
b(the)f(case)g Fd(state==WFSOP)983 2793 y Fk(of)d(the)g
Fd(hub)g Fk(pro)q(ct)o(yp)q(e\).)20 b(The)15 b(latter)f(ma)o(y)f(also)g
(transition)p eop
%%Page: 6 6
6 5 bop -106 1048 a @beginspecial 33 @llx 91 @lly 579
@urx 701 @ury 2289 @rwi @setspecial
%%BeginDocument: msc.bw.ps.1

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /user6/ouster/wish/library/RCS/prolog.ps,v 1.6 93/04/01 14:03:52 ouster Exp $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 0 def

save
306.0 396.0 translate
0.7997 0.7997 scale
-459 -381 translate
118 762 moveto 800 762 lineto 800 0 lineto 118 0 lineto closepath clip newpath
gsave
168 750 moveto
168 738 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 750 moveto
252 738 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 750 moveto
336 738 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 750 moveto
420 738 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 750 moveto
504 738 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 750 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
484 750 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 744 [
    (hub:5)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 738 moveto
168 726 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 738 moveto
252 726 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 738 moveto
336 726 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 738 moveto
420 726 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 738 moveto
504 726 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 738 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 738 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 732 [
    (2!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 726 moveto
168 714 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 726 moveto
252 714 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 726 moveto
336 714 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 726 moveto
420 714 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 726 moveto
504 714 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 726 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
232 726 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 720 [
    (timer:2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 714 moveto
168 702 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 714 moveto
252 702 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 714 moveto
336 702 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 714 moveto
420 702 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 714 moveto
504 702 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 714 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
232 714 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 708 [
    (2?START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
484 732 moveto
274.898154490919 708.328092961236 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
272 708 moveto
277.64319893326 702.600527266515 lineto
277.080753856856 707.56879210809 lineto
276.855775826294 709.55609804472 lineto
276.293330749889 714.524362886294 lineto
272 708 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 720 [
    (2!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 702 moveto
168 690 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 702 moveto
252 690 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 702 moveto
336 690 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 702 moveto
420 690 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 702 moveto
504 690 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 702 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
232 702 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 696 [
    (2!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 690 moveto
168 678 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 690 moveto
252 678 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 690 moveto
336 678 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 690 moveto
420 678 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 690 moveto
504 678 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 690 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 690 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 684 [
    (2?EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
272 696 moveto
481.08799461661 684.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
484 684 moveto
479.347070643468 690.272977634515 lineto
479.064504083355 685.280968405847 lineto
478.951477459309 683.28416471438 lineto
478.668910899196 678.292155485712 lineto
484 684 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 690 [
    (2!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 678 moveto
168 666 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 678 moveto
252 666 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 678 moveto
336 666 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 678 moveto
420 666 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 678 moveto
504 666 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 678 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
232 678 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 672 [
    (2!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 666 moveto
168 654 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 666 moveto
252 654 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 666 moveto
336 654 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 666 moveto
420 654 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 666 moveto
504 654 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 666 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 666 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 660 [
    (2?EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
272 672 moveto
481.08799461661 660.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
484 660 moveto
479.347070643468 666.272977634515 lineto
479.064504083355 661.280968405847 lineto
478.951477459309 659.28416471438 lineto
478.668910899196 654.292155485712 lineto
484 660 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 666 [
    (2!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 654 moveto
168 642 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 654 moveto
252 642 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 654 moveto
336 642 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 654 moveto
420 642 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 654 moveto
504 642 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 654 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
400 654 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 648 [
    (hub:4)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 642 moveto
168 630 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 642 moveto
252 630 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 642 moveto
336 630 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 642 moveto
420 630 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 642 moveto
504 630 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 642 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 642 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 636 [
    (1!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 630 moveto
168 618 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 630 moveto
252 618 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 630 moveto
336 618 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 630 moveto
420 618 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 630 moveto
504 618 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 630 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
148 630 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 624 [
    (timer:1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 618 moveto
168 606 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 618 moveto
252 606 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 618 moveto
336 606 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 618 moveto
420 606 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 618 moveto
504 606 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 618 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
148 618 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 612 [
    (1?START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
400 636 moveto
190.898154490919 612.328092961236 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
188 612 moveto
193.64319893326 606.600527266515 lineto
193.080753856856 611.56879210809 lineto
192.855775826294 613.55609804472 lineto
192.293330749889 618.524362886294 lineto
188 612 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
294 624 [
    (1!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 606 moveto
168 594 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 606 moveto
252 594 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 606 moveto
336 594 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 606 moveto
420 594 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 606 moveto
504 594 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 606 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
148 606 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 600 [
    (1!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 594 moveto
168 582 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 594 moveto
252 582 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 594 moveto
336 582 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 594 moveto
420 582 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 594 moveto
504 582 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 594 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 594 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 588 [
    (1?EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
188 600 moveto
397.08799461661 588.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
400 588 moveto
395.347070643468 594.272977634515 lineto
395.064504083355 589.280968405847 lineto
394.951477459309 587.28416471438 lineto
394.668910899196 582.292155485712 lineto
400 588 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
294 594 [
    (1!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 582 moveto
168 570 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 582 moveto
252 570 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 582 moveto
336 570 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 582 moveto
420 570 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 582 moveto
504 570 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 582 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
148 582 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 576 [
    (1!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 570 moveto
168 558 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 570 moveto
252 558 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 570 moveto
336 558 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 570 moveto
420 558 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 570 moveto
504 558 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 570 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 570 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 564 [
    (1?EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
188 576 moveto
397.08799461661 564.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
400 564 moveto
395.347070643468 570.272977634515 lineto
395.064504083355 565.280968405847 lineto
394.951477459309 563.28416471438 lineto
394.668910899196 558.292155485712 lineto
400 564 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
294 570 [
    (1!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 558 moveto
168 546 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 558 moveto
252 546 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 558 moveto
336 546 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 558 moveto
420 546 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 558 moveto
504 546 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
316 558 moveto 40.0000000000001 0 rlineto 0 -12 rlineto -40.0000000000001 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
316 558 moveto 40.0000000000001 0 rlineto 0 -12 rlineto -40.0000000000001 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
336 552 [
    (host:3)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 546 moveto
168 534 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 546 moveto
252 534 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 546 moveto
336 534 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 546 moveto
420 534 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 546 moveto
504 534 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
316 546 moveto 40.0000000000001 0 rlineto 0 -12 rlineto -40.0000000000001 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
316 546 moveto 40.0000000000001 0 rlineto 0 -12 rlineto -40.0000000000001 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
336 540 [
    (3!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 534 moveto
168 522 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 534 moveto
252 522 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 534 moveto
336 522 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 534 moveto
420 522 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 534 moveto
504 522 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 534 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 534 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 528 [
    (3?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
356 540 moveto
397.18610552139 528.767425766894 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
400 528 moveto
396.754885328564 535.104169956387 lineto
395.439298299603 530.280350850198 lineto
394.913063488019 528.350823207723 lineto
393.597476459059 523.527004101534 lineto
400 528 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 534 [
    (3!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 522 moveto
168 510 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 522 moveto
252 510 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 522 moveto
336 510 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 522 moveto
420 510 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 522 moveto
504 510 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 522 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 522 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 516 [
    (1!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 510 moveto
168 498 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 510 moveto
252 498 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 510 moveto
336 498 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 510 moveto
420 498 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 510 moveto
504 498 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 510 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
148 510 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 504 [
    (1?START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
400 516 moveto
190.91200538339 504.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
188 504 moveto
193.331089100804 498.292155485712 lineto
193.048522540691 503.28416471438 lineto
192.935495916645 505.280968405847 lineto
192.652929356532 510.272977634515 lineto
188 504 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
294 510 [
    (1!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 498 moveto
168 486 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 498 moveto
252 486 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 498 moveto
336 486 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 498 moveto
420 486 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 498 moveto
504 486 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 498 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 498 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 492 [
    (4!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 486 moveto
168 474 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 486 moveto
252 474 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 486 moveto
336 474 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 486 moveto
420 474 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 486 moveto
504 474 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 486 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 486 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 480 [
    (4?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
440 492 moveto
481.18610552139 480.767425766894 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
484 480 moveto
480.754885328564 487.104169956387 lineto
479.439298299603 482.280350850198 lineto
478.913063488019 480.350823207723 lineto
477.597476459059 475.527004101534 lineto
484 480 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
462 486 [
    (4!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 474 moveto
168 462 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 474 moveto
252 462 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 474 moveto
336 462 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 474 moveto
420 462 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 474 moveto
504 462 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 474 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 474 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 468 [
    (2!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 462 moveto
168 450 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 462 moveto
252 450 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 462 moveto
336 450 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 462 moveto
420 450 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 462 moveto
504 450 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 462 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
232 462 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 456 [
    (2?START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
484 468 moveto
274.91200538339 456.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
272 456 moveto
277.331089100804 450.292155485712 lineto
277.048522540691 455.28416471438 lineto
276.935495916645 457.280968405847 lineto
276.652929356532 462.272977634515 lineto
272 456 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 462 [
    (2!START)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 450 moveto
168 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 450 moveto
252 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 450 moveto
336 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 450 moveto
420 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 450 moveto
504 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 450 moveto
588 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 450 moveto
672 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 450 moveto
756 438 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 450 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 450 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 444 [
    (5!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 438 moveto
168 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 438 moveto
252 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 438 moveto
336 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 438 moveto
420 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 438 moveto
504 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 438 moveto
588 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 438 moveto
672 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 438 moveto
756 426 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
736 438 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
736 438 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
756 432 [
    (lazy_device:8)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 426 moveto
168 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 426 moveto
252 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 426 moveto
336 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 426 moveto
420 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 426 moveto
504 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 426 moveto
588 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 426 moveto
672 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 426 moveto
756 414 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
736 426 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
736 426 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
756 420 [
    (5?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
440 444 moveto
733.092873609666 420.235712950568 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
736 420 moveto
731.501249972023 426.384453632518 lineto
731.097170628193 421.400808391945 lineto
730.935538890661 419.407350295716 lineto
730.53145954683 414.423705055142 lineto
736 420 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 432 [
    (5!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 414 moveto
168 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 414 moveto
252 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 414 moveto
336 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 414 moveto
420 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 414 moveto
504 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 414 moveto
588 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 414 moveto
672 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 414 moveto
756 402 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 414 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 414 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 408 [
    (8!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 402 moveto
168 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 402 moveto
252 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 402 moveto
336 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 402 moveto
420 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 402 moveto
504 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 402 moveto
588 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 402 moveto
672 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 402 moveto
756 390 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
568 402 moveto 39.9999999999999 0 rlineto 0 -12 rlineto -39.9999999999999 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
568 402 moveto 39.9999999999999 0 rlineto 0 -12 rlineto -39.9999999999999 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 396 [
    (lazy_device:6)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 390 moveto
168 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 390 moveto
252 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 390 moveto
336 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 390 moveto
420 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 390 moveto
504 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 390 moveto
588 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 390 moveto
672 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 390 moveto
756 378 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
568 390 moveto 39.9999999999999 0 rlineto 0 -12 rlineto -39.9999999999999 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
568 390 moveto 39.9999999999999 0 rlineto 0 -12 rlineto -39.9999999999999 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 384 [
    (8?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
524 408 moveto
565.439471245666 385.396652047818 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
568 384 moveto
566.483634919512 391.661634090889 lineto
564.089374266109 387.272156226317 lineto
563.131670004748 385.516365080488 lineto
560.737409351345 381.126887215917 lineto
568 384 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
546 396 [
    (8!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 378 moveto
168 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 378 moveto
252 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 378 moveto
336 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 378 moveto
420 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 378 moveto
504 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 378 moveto
588 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 378 moveto
672 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 378 moveto
756 366 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 378 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 378 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 372 [
    (9!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 366 moveto
168 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 366 moveto
252 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 366 moveto
336 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 366 moveto
420 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 366 moveto
504 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 366 moveto
588 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 366 moveto
672 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 366 moveto
756 354 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
652 366 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 0.000 setrgbcolor AdjustColor
fill
652 366 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
672 360 [
    (eager_device:7)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 354 moveto
168 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 354 moveto
252 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 354 moveto
336 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 354 moveto
420 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 354 moveto
504 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 354 moveto
588 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 354 moveto
672 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 354 moveto
756 342 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
652 354 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
652 354 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
672 348 [
    (9?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
524 372 moveto
649.133289454775 348.53750822723 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
652 348 moveto
648.191370275629 354.818675796857 lineto
647.269927600379 349.904314862185 lineto
646.901350530278 347.938570488317 lineto
645.979907855027 343.024209553645 lineto
652 348 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 360 [
    (9!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 342 moveto
168 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 342 moveto
252 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 342 moveto
336 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 342 moveto
420 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 342 moveto
504 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 342 moveto
588 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 342 moveto
672 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 342 moveto
756 330 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 342 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
148 342 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 336 [
    (1!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 330 moveto
168 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 330 moveto
252 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 330 moveto
336 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 330 moveto
420 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 330 moveto
504 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 330 moveto
588 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 330 moveto
672 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 330 moveto
756 318 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 330 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 330 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 324 [
    (1?EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
188 336 moveto
397.08799461661 324.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
400 324 moveto
395.347070643468 330.272977634515 lineto
395.064504083355 325.280968405847 lineto
394.951477459309 323.28416471438 lineto
394.668910899196 318.292155485712 lineto
400 324 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
294 330 [
    (1!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 318 moveto
168 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 318 moveto
252 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 318 moveto
336 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 318 moveto
420 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 318 moveto
504 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 318 moveto
588 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 318 moveto
672 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 318 moveto
756 306 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
316 318 moveto 40.0000000000001 0 rlineto 0 -11.9999999999999 rlineto -40.0000000000001 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
316 318 moveto 40.0000000000001 0 rlineto 0 -11.9999999999999 rlineto -40.0000000000001 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
336 312 [
    (3!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 306 moveto
168 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 306 moveto
252 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 306 moveto
336 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 306 moveto
420 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 306 moveto
504 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 306 moveto
588 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 306 moveto
672 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 306 moveto
756 294 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 306 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 306 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 300 [
    (3?EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
356 312 moveto
397.18610552139 300.767425766894 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
400 300 moveto
396.754885328564 307.104169956387 lineto
395.439298299603 302.280350850198 lineto
394.913063488019 300.350823207723 lineto
393.597476459059 295.527004101534 lineto
400 300 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 306 [
    (3!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 294 moveto
168 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 294 moveto
252 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 294 moveto
336 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 294 moveto
420 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 294 moveto
504 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 294 moveto
588 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 294 moveto
672 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 294 moveto
756 282 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 294 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
232 294 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 288 [
    (2!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 282 moveto
168 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 282 moveto
252 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 282 moveto
336 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 282 moveto
420 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 282 moveto
504 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 282 moveto
588 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 282 moveto
672 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 282 moveto
756 270 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 282 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 282 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 276 [
    (2?EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
272 288 moveto
481.08799461661 276.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
484 276 moveto
479.347070643468 282.272977634515 lineto
479.064504083355 277.280968405847 lineto
478.951477459309 275.28416471438 lineto
478.668910899196 270.292155485712 lineto
484 276 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 282 [
    (2!EOF1)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 270 moveto
168 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 270 moveto
252 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 270 moveto
336 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 270 moveto
420 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 270 moveto
504 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 270 moveto
588 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 270 moveto
672 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 270 moveto
756 258 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 270 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 270 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 264 [
    (4!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 258 moveto
168 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 258 moveto
252 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 258 moveto
336 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 258 moveto
420 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 258 moveto
504 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 258 moveto
588 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 258 moveto
672 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 258 moveto
756 246 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 258 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 258 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 252 [
    (4?EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
440 264 moveto
481.18610552139 252.767425766894 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
484 252 moveto
480.754885328564 259.104169956387 lineto
479.439298299603 254.280350850198 lineto
478.913063488019 252.350823207723 lineto
477.597476459059 247.527004101534 lineto
484 252 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
462 258 [
    (4!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 246 moveto
168 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 246 moveto
252 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 246 moveto
336 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 246 moveto
420 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 246 moveto
504 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 246 moveto
588 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 246 moveto
672 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 246 moveto
756 234 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 246 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 246 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 240 [
    (8!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 234 moveto
168 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 234 moveto
252 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 234 moveto
336 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 234 moveto
420 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 234 moveto
504 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 234 moveto
588 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 234 moveto
672 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 234 moveto
756 222 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
568 234 moveto 39.9999999999999 0 rlineto 0 -12 rlineto -39.9999999999999 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
568 234 moveto 39.9999999999999 0 rlineto 0 -12 rlineto -39.9999999999999 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 228 [
    (8?EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
524 240 moveto
565.18610552139 228.767425766894 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
568 228 moveto
564.754885328564 235.104169956387 lineto
563.439298299604 230.280350850198 lineto
562.913063488019 228.350823207723 lineto
561.597476459059 223.527004101534 lineto
568 228 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
546 234 [
    (8!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 222 moveto
168 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 222 moveto
252 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 222 moveto
336 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 222 moveto
420 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 222 moveto
504 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 222 moveto
588 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 222 moveto
672 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 222 moveto
756 210 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 222 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 222 moveto 40 0 rlineto 0 -12.0000000000001 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 216 [
    (9!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 210 moveto
168 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 210 moveto
252 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 210 moveto
336 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 210 moveto
420 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 210 moveto
504 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 210 moveto
588 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 210 moveto
672 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 210 moveto
756 198 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
652 210 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
652 210 moveto 40 0 rlineto 0 -11.9999999999999 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
672 204 [
    (9?EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
524 216 moveto
649.09606684066 204.272243733688 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
652 204 moveto
647.581873121862 210.440508899821 lineto
647.115169578397 205.462337769525 lineto
646.92848816101 203.471069317406 lineto
646.461784617545 198.49289818711 lineto
652 204 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 210 [
    (9!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 198 moveto
168 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 198 moveto
252 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 198 moveto
336 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 198 moveto
420 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 198 moveto
504 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 198 moveto
588 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 198 moveto
672 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 198 moveto
756 186 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 198 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 198 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 192 [
    (5!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 186 moveto
168 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 186 moveto
252 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 186 moveto
336 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 186 moveto
420 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 186 moveto
504 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 186 moveto
588 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 186 moveto
672 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 186 moveto
756 174 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
736 186 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
736 186 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
756 180 [
    (5?EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
440 192 moveto
733.085727205425 180.118146194375 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
736 180 moveto
731.247147380585 186.197611796339 lineto
731.044611047372 181.201715577068 lineto
730.963596514086 179.203357089359 lineto
730.761060180872 174.207460870088 lineto
736 180 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 186 [
    (5!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 174 moveto
168 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 174 moveto
252 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 174 moveto
336 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 174 moveto
420 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 174 moveto
504 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 174 moveto
588 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 174 moveto
672 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 174 moveto
756 162 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
652 174 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
652 174 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
672 168 [
    (9!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 162 moveto
168 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 162 moveto
252 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 162 moveto
336 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 162 moveto
420 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 162 moveto
504 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 162 moveto
588 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 162 moveto
672 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 162 moveto
756 150 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 162 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 162 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 156 [
    (9?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
652 168 moveto
526.90393315934 156.272243733688 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
524 156 moveto
529.538215382455 150.49289818711 lineto
529.07151183899 155.471069317406 lineto
528.884830421603 157.462337769525 lineto
528.418126878138 162.440508899821 lineto
524 156 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 162 [
    (9!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 150 moveto
168 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 150 moveto
252 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 150 moveto
336 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 150 moveto
420 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 150 moveto
504 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 150 moveto
588 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 150 moveto
672 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 150 moveto
756 138 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 150 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 150 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 144 [
    (4!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 138 moveto
168 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 138 moveto
252 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 138 moveto
336 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 138 moveto
420 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 138 moveto
504 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 138 moveto
588 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 138 moveto
672 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 138 moveto
756 126 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 138 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 138 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 132 [
    (4?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
484 144 moveto
442.81389447861 132.767425766894 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
440 132 moveto
446.402523540941 127.527004101534 lineto
445.086936511981 132.350823207723 lineto
444.560701700397 134.280350850198 lineto
443.245114671436 139.104169956387 lineto
440 132 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
462 138 [
    (4!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 126 moveto
168 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 126 moveto
252 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 126 moveto
336 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 126 moveto
420 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 126 moveto
504 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 126 moveto
588 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 126 moveto
672 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 126 moveto
756 114 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
232 126 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
232 126 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
252 120 [
    (2!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 114 moveto
168 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 114 moveto
252 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 114 moveto
336 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 114 moveto
420 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 114 moveto
504 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 114 moveto
588 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 114 moveto
672 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 114 moveto
756 102 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 114 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 114 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 108 [
    (2?EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
272 120 moveto
481.08799461661 108.164830493399 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
484 108 moveto
479.347070643468 114.272977634515 lineto
479.064504083355 109.280968405847 lineto
478.951477459309 107.28416471438 lineto
478.668910899196 102.292155485712 lineto
484 108 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 114 [
    (2!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 102 moveto
168 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 102 moveto
252 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 102 moveto
336 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 102 moveto
420 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 102 moveto
504 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 102 moveto
588 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 102 moveto
672 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 102 moveto
756 90 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 102 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 102 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 96 [
    (3!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 90 moveto
168 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 90 moveto
252 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 90 moveto
336 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 90 moveto
420 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 90 moveto
504 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 90 moveto
588 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 90 moveto
672 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 90 moveto
756 78 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
316 90 moveto 40.0000000000001 0 rlineto 0 -12 rlineto -40.0000000000001 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
316 90 moveto 40.0000000000001 0 rlineto 0 -12 rlineto -40.0000000000001 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
336 84 [
    (3?SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
400 96 moveto
358.81389447861 84.7674257668937 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
356 84 moveto
362.402523540941 79.5270041015341 lineto
361.086936511981 84.3508232077227 lineto
360.560701700397 86.2803508501981 lineto
359.245114671436 91.1041699563868 lineto
356 84 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 90 [
    (3!SOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 78 moveto
168 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 78 moveto
252 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 78 moveto
336 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 78 moveto
420 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 78 moveto
504 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 78 moveto
588 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 78 moveto
672 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 78 moveto
756 66 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
148 78 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
148 78 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
168 72 [
    (1!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 66 moveto
168 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 66 moveto
252 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 66 moveto
336 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 66 moveto
420 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 66 moveto
504 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 66 moveto
588 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 66 moveto
672 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 66 moveto
756 54 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
400 66 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
400 66 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
420 60 [
    (1?EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
188 72 moveto
397.08799461661 60.1648304933994 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
400 60 moveto
395.347070643468 66.2729776345149 lineto
395.064504083355 61.2809684058468 lineto
394.951477459309 59.2841647143797 lineto
394.668910899196 54.2921554857119 lineto
400 60 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
294 66 [
    (1!EOF2)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 54 moveto
168 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 54 moveto
252 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 54 moveto
336 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 54 moveto
420 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 54 moveto
504 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 54 moveto
588 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 54 moveto
672 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 54 moveto
756 42 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
652 54 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
652 54 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
672 48 [
    (9!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
168 42 moveto
168 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
252 42 moveto
252 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
336 42 moveto
336 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
420 42 moveto
420 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 42 moveto
504 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
588 42 moveto
588 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
672 42 moveto
672 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
756 42 moveto
756 30 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
484 42 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
484 42 moveto 40 0 rlineto 0 -12 rlineto -40 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
504 36 [
    (9?EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
gsave
652 48 moveto
526.90393315934 36.2722437336881 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
524 36 moveto
529.538215382455 30.4928981871096 lineto
529.07151183899 35.471069317406 lineto
528.884830421603 37.4623377695245 lineto
528.418126878138 42.4405088998211 lineto
524 36 lineto
fill
grestore
gsave
/Courier-Bold findfont 10 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
588 42 [
    (9!EOP)
] 10 -0.5 0.5 0 () false DrawText
grestore
restore showpage

end

%%EndDocument
 @endspecial -29 1140 a Fh(Figure)12 b Fk(4:)18 b(Sim)o(ulation)11
b(run)j(of)f(the)i(\014rst)g(mo)q(del)-106 1276 y(to)k(the)g
Fd(WFEOP)f Fk(state)i(if)i Fd(SOP)c Fk(and)h Fd(EOF1)f
Fk(o)q(ccur)i(sim)o(ulta-)-106 1326 y(neously)m(.)26
b(Indeed,)18 b(the)g(\014rst)f(mo)q(del)e(do)q(es)j(not)f(deal)f(with)
-106 1375 y(real)h(time)f(asp)q(ects.)30 b(There)18 b(are)g(lo)q(cal)f
(timers,)g(but)g(Spin)-106 1425 y(do)q(es)c(not)f(kno)o(w)f(whether)j
(a)e(single)g(clo)q(c)o(k)g(tic)o(k,)g(or)g(100.000)-106
1475 y(clo)q(c)o(k)f(tic)o(ks)h(ha)o(v)o(e)f(passed)h(b)q(et)o(w)o(een)
h(e.g.)e(a)g(ST)m(AR)m(T)f(and)h(an)-106 1525 y(EOF1.)24
b(Y)m(et)17 b(this)f(ma)o(y)e(b)q(e)i(imp)q(ortan)o(t)e(to)i(v)o(erify)
g(quan)o(ti-)-106 1575 y(tativ)o(e)d(timing)f(prop)q(erties.)-56
1626 y(Second,)f(an)g(imp)q(ortan)o(t)e(asp)q(ect)j(of)e(the)i(h)o
(ub's)e(function-)-106 1676 y(alit)o(y)e(has)i(b)q(een)h(ignored:)16
b(all)9 b(matters)g(of)g(susp)q(end/resume)-106 1726
y(signalling)i(ha)o(v)o(e)h(b)q(een)i(left)f(out.)18
b(This)13 b(is)g(one)g(of)f(the)i(more)-106 1776 y(complex)e(parts)j
(of)e(the)h(h)o(ub)g(whic)o(h)g(furthermore)f(exp)q(oses)-106
1826 y(some)g(b)q(eha)o(viour)h(that)g(is)g(particularly)f(c)o
(hallenging)g(from)-106 1875 y(the)18 b(p)q(oin)o(t)g(of)f(mo)q
(delling,)f(lik)o(e)i(using)f(the)i(p)q(ossibilit)o(y)e(to)-106
1925 y(driv)o(e)i(a)f(wire)h(from)f(t)o(w)o(o)g(sides)i(\(e.g.)e(a)h
(PC)g(and)g(a)f(h)o(ub,)-106 1975 y(or)e(a)f(p)q(eripheral)i(device)g
(and)e(a)h(h)o(ub\).)25 b(A)o(t)16 b(the)g(electrical)-106
2025 y(lev)o(el)i(this)h(is)f(p)q(ossible,)i(pro)o(vided)e(b)q(oth)h
(sides)h(driv)o(e)e(the)-106 2075 y(same)12 b(signal)g(\(high)h(V)m
(oltage)f(or)h(lo)o(w)f(V)m(oltage\).)17 b(It)c(is)g(clear)-106
2125 y(that)f(the)g(ab)q(o)o(v)o(e)g(Spin)f(mo)q(del)g(is)g(far)h(to)q
(o)g(abstract)g(for)g(co)o(v-)-106 2174 y(ering)j(these)h(things,)e
(and)h(y)o(et)g(they)g(are)g(essen)o(tial)h(for)e(the)-106
2224 y(susp)q(end/resume)h(proto)q(col.)-56 2276 y(Finally)m(,)g(w)o(e)
i(w)o(ere)h(faced)f(with)g(a)g(n)o(um)o(b)q(er)f(of)g(striking)-106
2326 y(unclarities)e(in)f(the)i(o\016cial)d(sp)q(eci\014cation.)-106
2489 y Fl(3)56 b(Mo)r(delling)17 b(More)-56 2594 y Fk(These)10
b(conclusions)g(ha)o(v)o(e)g(instigated)f(us)h(to)f(mak)o(e)f(a)i(sec-)
-106 2644 y(ond,)h(more)e(elab)q(orate)j(mo)q(del)d(of)h(the)i(h)o(ub,)
f(while)f(applying)-106 2694 y(a)k(phased)h(approac)o(h)f(as)h
(outlined)f(in)g(Figure)g(5.)20 b(W)m(e)14 b(ha)o(v)o(e)-106
2743 y(decoupled)h(the)f(phases)h(of)f(understanding)g(the)h(sp)q
(eci\014ca-)-106 2793 y(tion)c(and)h(constructing)h(the)f
Fb(Pr)o(omela)h Fk(mo)q(del)e(b)o(y)g(insert-)947 959
y @beginspecial 175 @llx 234 @lly 429 @urx 494 @ury 2289
@rwi @setspecial
%%BeginDocument: approach.eps
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
182.65 234.24 429.22 338.49 R
4 X
0 0 0 1 0 0 0 K
V
1 H
2 Z
N
174.65 238.08 423.36 341.09 R
7 X
V
0.5 H
0 X
N
182.51 360.81 429.08 467.85 R
4 X
V
1 H
N
174.51 364.75 423.22 470.52 R
7 X
V
0.5 H
0 X
N
36.65 232.95 558.65 494.24 R
2 X
90 450 1.15 1.15 290.7 293.88 474.79 GG
294.29 473.72 297.73 475.02 298.82 461.71 290.84 472.42 4 Y
2.3 H
0 Z
N
294.29 473.72 297.73 475.02 298.82 461.71 290.84 472.42 4 Y
V
250.01 492.52 M
 268.85 492.52 289.05 487.56 293.88 474.79 D
2 Z
N
410.51 456.19 410.51 425.1 206.2 425.1 206.2 456.19 4 Y
4 X
V
403.65 458.52 403.65 429.17 197.93 429.17 197.93 458.52 4 Y
7 X
V
0.5 H
0 X
N
0 0 0 1 0 0 0 K
0 12 Q
(Understand the specification document) 208.08 441.23 T
0 0 0 1 0 0 0 K
410.28 403.98 410.28 374.57 205.97 374.57 205.97 403.98 4 Y
4 X
V
403.44 406.19 403.44 378.44 197.73 378.44 197.73 406.19 4 Y
7 X
V
0 X
N
0 0 0 1 0 0 0 K
(Description on intermediate level) 208.19 389.69 T
0 0 0 1 0 0 0 K
373.79 326.95 373.79 298.24 241.63 298.24 241.63 326.95 4 Y
4 X
V
368.22 329.1 368.22 302 233.36 302 233.36 329.1 4 Y
7 X
V
0 X
N
0 0 0 1 0 0 0 K
(Translate to PROMELA) 243.51 312.92 T
0 0 0 1 0 0 0 K
373.5 277.15 373.5 247.38 241.34 247.38 241.34 277.15 4 Y
4 X
V
368.22 279.38 368.22 251.28 233.08 251.28 233.08 279.38 4 Y
7 X
V
0 X
N
0 0 0 1 0 0 0 K
(Simulation & Validation) 243.22 262.71 T
0 0 0 1 0 0 0 K
2.3 H
2 X
90 180 9 11 293.93 352.38 A
90 450 1.15 1.15 329.46 286.89 345.54 GG
287.88 344.95 289.27 347.31 291.95 342.55 286.49 342.6 4 Y
0 Z
N
287.88 344.95 289.27 347.31 291.95 342.55 286.49 342.6 4 Y
V
286.89 345.54 M
 284.96 346.68 284.93 349.79 284.93 352.38 D
2 Z
N
11 X
90 180 9 11 180 302.93 352.38 AA
90 450 1.15 1.15 149.46 309.98 359.22 GG
308.99 359.81 307.6 357.46 304.92 362.21 310.38 362.16 4 Y
0 Z
N
308.99 359.81 307.6 357.46 304.92 362.21 310.38 362.16 4 Y
V
309.98 359.22 M
 311.91 358.09 311.93 354.97 311.93 352.38 D
2 Z
N
2 X
90 180 9 11 293.79 416.38 A
90 450 1.15 1.15 329.46 286.74 409.54 GG
287.73 408.95 289.12 411.31 291.81 406.55 286.35 406.6 4 Y
0 Z
N
287.73 408.95 289.12 411.31 291.81 406.55 286.35 406.6 4 Y
V
286.74 409.54 M
 284.81 410.68 284.79 413.79 284.79 416.38 D
2 Z
N
90 180 9 11 180 302.79 416.38 AA
90 450 1.15 1.15 149.46 309.84 423.22 GG
308.85 423.81 307.46 421.46 304.77 426.21 310.24 426.16 4 Y
0 Z
N
308.85 423.81 307.46 421.46 304.77 426.21 310.24 426.16 4 Y
V
309.84 423.22 M
 311.77 422.09 311.79 418.97 311.79 416.38 D
2 Z
N
90 180 9 11 294.51 290.38 A
90 450 1.15 1.15 329.46 287.46 283.54 GG
288.45 282.95 289.84 285.31 292.52 280.55 287.06 280.6 4 Y
0 Z
N
288.45 282.95 289.84 285.31 292.52 280.55 287.06 280.6 4 Y
V
287.46 283.54 M
 285.53 284.68 285.51 287.79 285.51 290.38 D
2 Z
N
90 180 9 11 180 303.51 290.38 AA
90 450 1.15 1.15 149.46 310.55 297.22 GG
309.56 297.81 308.17 295.46 305.49 300.21 310.95 300.16 4 Y
0 Z
N
309.56 297.81 308.17 295.46 305.49 300.21 310.95 300.16 4 Y
V
310.55 297.22 M
 312.48 296.09 312.51 292.97 312.51 290.38 D
2 Z
N
90 450 1.15 1.15 115.92 411.74 410.61 GG
411.23 411.64 407.92 410.03 405.62 423.2 414.55 413.25 4 Y
0 Z
N
411.23 411.64 407.92 410.03 405.62 423.2 414.55 413.25 4 Y
V
411.74 410.61 M
 418.76 396.16 417.36 369.36 417.36 340.52 D
2 Z
N
FMENDPAGE

%%EndDocument
 @endspecial 1237 1050 a Fh(Figure)h Fk(5:)18 b(Approac)o(h)947
1178 y(ing)11 b(a)g(phase)h(in)f(whic)o(h)h(a)f(description)h(on)f(an)g
(in)o(termediate)947 1228 y(lev)o(el)16 b(is)f(giv)o(en,)g(seeking)h(a)
f(means)f(of)h(description)h(that)g(is)947 1278 y(more)9
b(formal)e(than)i(the)h(sp)q(eci\014cation)g(do)q(cumen)o(t,)f(but)g
(still)947 1327 y(\015exible)18 b(enough)g(to)f(allo)o(w)g(for)g
(frequen)o(t)h(c)o(hanges.)31 b(This)947 1377 y(w)o(as)14
b(exp)q(ected)i(to)e(reduce)h(the)f(amoun)o(t)e(of)h(w)o(ork)h(in)o(v)o
(olv)o(ed)947 1427 y(in)f(iterating)h(b)q(et)o(w)o(een)g(the)g(text)h
(of)d(the)i(sp)q(eci\014cation)h(and)947 1477 y(our)h(understanding)g
(of)f(it)g(as)h(re\015ected)h(in)e(the)i(more)d(for-)947
1527 y(mal)e(description.)20 b(Only)14 b(after)g(this)g(phase)h
(stabilises,)f(the)947 1577 y(in)o(termediate)k(lev)o(el)g(description)
h(w)o(ould)f(then)h(b)q(e)g(trans-)947 1626 y(lated)g(in)o(to)f
Fb(Pr)o(omela)p Fk(,)i(\014lling)d(in)h(additional)f(details)h(of)947
1676 y(the)c(mo)q(delling)d(and)i(bringing)g(it)g(to)g(a)g(completely)f
(formal)947 1726 y(lev)o(el.)18 b(The)13 b(activit)o(y)g(of)f(p)q
(erforming)g(sim)o(ulation)e(and)j(v)o(er-)947 1776 y(i\014cation)e
(runs)h(usually)f(\014rst)h(brings)f(out)h(man)o(y)d(shortcom-)947
1826 y(ings)14 b(whic)o(h)f(are)i(sp)q(eci\014c)g(to)e(the)i(mapping)c
(to)j Fb(Pr)o(omela)p Fk(,)947 1875 y(resulting)j(in)e(iterations)h
(indicated)h(in)e(the)i(lo)o(w)o(er)f(part)g(of)947 1925
y(Figure)h(5.)24 b(Only)16 b(after)g(these)i(ha)o(v)o(e)e(stabilised,)g
(mistak)o(es)947 1975 y(in)g(the)g(higher-lev)o(el)f(mo)q(delling)e
(decisions,)j(and)g(p)q(ossibly)947 2025 y(in)i(the)h(original)e(sp)q
(eci\014cation,)j(will)c(b)q(e)j(brough)o(t)g(to)f(the)947
2075 y(ligh)o(t.)997 2124 y(The)g(additional)d(asp)q(ects)20
b(of)c(the)i(h)o(ub)f(tak)o(en)h(in)o(to)f(ac-)947 2174
y(coun)o(t)e(are:)977 2252 y(1.)20 b(susp)q(end/resume)c(b)q(eha)o
(viour)e(of)f(the)h(rep)q(eater;)977 2306 y(2.)20 b(more)13
b(faithful)g(timers;)977 2359 y(3.)20 b(a)g(more)e(general)h(mo)q(del)f
(of)h(the)h(h)o(ub)f(arc)o(hitecture,)1030 2409 y(allo)o(wing)12
b(for)i(an)f(arbitrary)h(n)o(um)o(b)q(er)f(of)g(p)q(orts;)977
2462 y(4.)20 b(p)q(orts)15 b(can)f(b)q(e)h(disconnected,)g(disabled,)f
(enabled,)g(or)1030 2512 y(susp)q(ended;)977 2566 y(5.)20
b(host)g(requests)h(to)e(the)h(h)o(ub)f(con)o(troller)h(\(to)f(con)o
(trol)1030 2616 y(the)c(p)q(orts\).)947 2694 y(The)21
b(subsections)g(b)q(elo)o(w)e(corresp)q(ond)j(to)d(the)i(approac)o(h)
947 2743 y(outlined)12 b(in)f(Figure)h(5.)17 b(W)m(e)11
b(abbreviate)h(upstream)g(b)o(y)f(u.s.)947 2793 y(and)j(do)o(wnstream)f
(b)o(y)h(d.s.)p eop
%%Page: 7 7
7 6 bop -71 24 a Fn(3.1)52 b(Understanding)16 b(the)g(sp)q
(eci\014cation)i(do)q(c-)48 74 y(umen)o(ts)-21 173 y
Fk(A)12 b(go)q(o)q(d)g(understanding)h(of)f(the)h(sp)q(eci\014cation)
731 158 y Fg(3)763 173 y Fk(is)f(a)g(vi-)-71 223 y(tal)19
b(\014rst)h(step)g(in)f(mo)q(delling)d(the)k(h)o(ub)f(proto)q(col.)34
b(Ho)o(w-)-71 273 y(ev)o(er,)18 b(it)e(also)g(pro)o(v)o(ed)h(to)f(b)q
(e)h(the)g(main)e(di\016cult)o(y)g(so)i(far,)-71 323
y(for)j(a)h(n)o(um)o(b)q(er)f(of)g(reasons.)39 b(Information)19
b(is)h(scattered)-71 373 y(throughout)i(the)g(do)q(cumen)o(t,)g(and)f
(not)h(seldomly)d(o)o(v)o(er-)-71 422 y(lapping)11 b(pieces)j(of)e
(information)d(con)o(tain)j(inconsistencies.)-71 472
y(The)h(st)o(yle)f(is)g(informal)d(\(plain)i(English)h(with)g
(explanatory)-71 522 y(pictures\),)i(whic)o(h)e(need)h(not)f(b)q(e)g(a)
g(problem)f(in)h(itself,)f(w)o(ere)-71 572 y(it)16 b(not)g(that)g(a)g
(certain)g(degree)i(of)d(rigour)h(is)g(lac)o(king.)23
b(Fi-)-71 622 y(nally)m(,)12 b(it)h(is)h(often)g(only)f(explained)g
Fm(how)19 b Fk(things)13 b(are)h(done,)-71 671 y(but)f(not)f
Fm(why)p Fk(.)17 b(More)c(conceptual)g(insigh)o(t)e(w)o(ould)g(b)q(e)i
(help-)-71 721 y(ful,)g(e.g.)g(in)g(solving)g(am)o(biguities.)-21
771 y(T)m(o)22 b(ha)o(v)o(e)g(a)h(b)q(etter)h(starting)e(p)q(oin)o(t)h
(for)f(the)h(mo)q(del,)-71 821 y(w)o(e)g(ha)o(v)o(e)g(extracted)h(and)f
(ordered)h(the)f(relev)n(an)o(t)g(parts)-71 871 y(from)g(the)h(sp)q
(eci\014cation)h(do)q(cumen)o(ts)f(while)g(correcting)-71
920 y(mistak)o(es,)11 b(explicitly)f(listing)g(design)i(and)f(mo)q
(delling)e(deci-)-71 970 y(sions,)16 b(and)g(giving)e(additional)g
(conceptual)j(information.)-71 1020 y(The)e(follo)o(wing)d(top-do)o(wn)
j(description)g(of)f(the)h(h)o(ub)g(func-)-71 1070 y(tionalit)o(y)10
b(is)h(based)h(on)f([3)o(])g(and)g([7)o(],)g(with)g(additional)e
(infor-)-71 1120 y(mation)f(from)g([6)o(])i(and)f([1].)16
b(W)m(e)9 b(stress)j(that)e(it)g(is)g(not)f(mean)o(t)-71
1170 y(as)j(a)f(substitute)j(for)d(the)h(original)e(texts,)j(but)f
(rather)h(as)e(an)-71 1219 y(addition.)-71 1327 y Fh(1.)53
b(Decomp)q(osition)23 b(of)j(a)g(h)o(ub)40 b Fk(A)23
b(h)o(ub)g(con)o(tains)-71 1377 y(the)15 b(follo)o(wing)d(sub)q(comp)q
(onen)o(ts:)20 b(the)c(rep)q(eater,)g(the)f(con-)-71
1427 y(troller,)e(and)h(a)g(n)o(um)o(b)q(er)f(of)g(do)o(wnstream)g(p)q
(orts.)-21 1477 y(The)e(sub)q(comp)q(onen)o(ts)g(op)q(erate)h(in)e
(parallel.)16 b(Eac)o(h)11 b(t)o(yp)q(e)-71 1527 y(\(rep)q(eater,)19
b(con)o(troller,)e(p)q(ort\))g(is)f(resp)q(onsible)i(for)e(sev)o(eral)
-71 1576 y(asp)q(ects)g(of)d(the)h(h)o(ub's)g(functionalit)o(y)m(.)i
([3)o(])e(and)f([7])g(are)h(not)-71 1626 y(alw)o(a)o(ys)d(clear)h(on)g
(whic)o(h)g(asp)q(ects)i(precisely)f(eac)o(h)f(sub)q(com-)-71
1676 y(p)q(onen)o(t)g(co)o(v)o(ers.)18 b(W)m(e)12 b(will)e(clearly)h
(indicate)h(our)g(mo)q(delling)-71 1726 y(decisions)17
b(concerning)g(the)f(assignmen)o(t)f(of)h(functionalit)o(y)-71
1776 y(to)e(sub)q(comp)q(onen)o(ts.)-21 1825 y(The)21
b(rep)q(eater)h(tak)o(es)f(care)g(of)f(connectivit)o(y)h(and)f(ex-)-71
1875 y(ception)i(handling)f(\(suc)o(h)i(as)f(bus)g(fault)f(detection)i
(and)-71 1925 y(connect/disconnect)j(detect\);)j(see)24
b(paragraph)f(1.1)f(b)q(e-)-71 1975 y(lo)o(w.)17 b(The)c(do)o(wnstream)
g(p)q(orts)g(k)o(eep)h(trac)o(k)f(of)g(whether)h(or)-71
2025 y(not)i(devices)g(are)g(connected)i(and)d(if)g(so,)h(con)o(trol)f
(the)h(sta-)-71 2075 y(tus)d(of)f(the)h(connection)g(\(enabled,)f
(disabled,)g(susp)q(ended\);)-71 2124 y(see)27 b(paragraph)e(1.2.)52
b(The)26 b(con)o(troller)g(serv)o(es)h(as)f(the)-71 2174
y(host's)16 b(p)q(eer)h(in)e(host-to-h)o(ub)g(comm)o(unication;)e(see)k
(para-)-71 2224 y(graph)d(1.3.)-21 2274 y(Mo)q(delling)22
b(decisions:)37 b(Susp)q(end/resume)24 b(signalling)-71
2324 y(will,)13 b(as)h(m)o(uc)o(h)f(as)i(p)q(ossible,)f(b)q(e)h(mo)q
(delled)e(as)h(part)h(of)f(the)-71 2373 y(rep)q(eater)19
b(functionalit)o(y)c(\([3])h(suggests)j(that)e(resume)g(sig-)-71
2423 y(nalling)12 b(is)i(an)g(asp)q(ect)h(of)e(connectivit)o(y)h(b)q
(eha)o(viour,)f(whic)o(h)-71 2473 y(is)h(a)f(task)h(of)g(the)g(rep)q
(eater\).)-71 2581 y Fh(1.1.)31 b(Rep)q(eater)40 b Fk(Connectivit)o(y)
17 b(b)q(eha)o(viour)f(of)g(the)i(re-)-71 2631 y(p)q(eater)13
b(di\013ers)g(dep)q(ending)f(on)g(whether)h(it)f(is)f(propagating)-71
2681 y(pac)o(k)o(et)k(tra\016c,)g(resume)f(signalling,)f(or)h(in)g(the)
i(idle)e(state.)p -71 2715 382 2 v -25 2742 a Ff(3)-7
2754 y Fi(In)g(particular,)e(w)o(e)j(refer)e(to)h(Chapter)f(11)h(of)g
([3],)h(and)e(its)i(pro-)-71 2793 y(p)q(osed)10 b(revision,)g([7)o(].)
983 24 y Fk(In)19 b(the)g(idle)f(state)i(all)e(p)q(orts)h(are)g(w)o
(aiting)f(for)g(the)h(start)983 74 y(of)c(a)g(next)h(pac)o(k)o(et.)22
b(As)16 b(suc)o(h,)g(there)h(is)e(no)g(di\013erence)j(b)q(e-)983
123 y(t)o(w)o(een)f(this)g(idle)f(state)i(and)e(the)i(logical)d(states)
j(WFSOP)983 173 y(and)12 b(WFSOF)1214 158 y Fg(4)1246
173 y Fk(of)g(the)h(rep)q(eater.)19 b(F)m(or)13 b(this)f(reason,)h(w)o
(e)g(do)983 223 y(not)h(consider)g(the)h(idle)e(state)i(separately)m(.)
983 343 y Fh(1.1.1.)48 b(Propagation)21 b(of)j(pac)o(k)o(et)g(tra\016c)
41 b Fk(This)21 b(is)983 393 y(either)i(upstream)e(or)h(do)o(wnstream)f
(connectivit)o(y)m(.)42 b(Up-)983 443 y(stream)20 b(pac)o(k)o(ets)h
(are)g(only)f(propagated)h(from)d(the)k(p)q(ort)983 493
y(that)17 b(initiates)g(the)h(tra\016c)f(\(the)h Fm(initiating)j
Fk(p)q(ort\))c(to)g(the)983 543 y(ro)q(ot)g(p)q(ort.)27
b(Do)o(wnstream)15 b(pac)o(k)o(ets)j(are)f(forw)o(arded)g(from)983
593 y(the)d(ro)q(ot)g(p)q(ort)g(to)g(all)f(enabled)h(d.s.)f(p)q(orts.)
1033 645 y(The)d(propagation)e(of)h(pac)o(k)o(et)h(tra\016c)g(is)f
(sligh)o(tly)f(compli-)983 694 y(cated)15 b(b)o(y)f(the)h(fact)f(that)g
(the)h(rep)q(eater)h(is)e(resp)q(onsible)h(for)983 744
y(certain)k(t)o(yp)q(es)g(of)e(exception)i(handling,)f(namely)e(babble)
983 794 y(and)g(loss)g(of)f(activit)o(y)g(\(LO)o(A\),)h(during)f(u.s.)h
(connectivit)o(y)m(.)983 844 y(Without)10 b(this)h(feature,)h(the)f
(rep)q(eater)i(w)o(ould)d(just)h(react)h(to)983 894 y(SOP)j(and)f(EOP)h
(pac)o(k)o(ets,)g(transitioning)e(bac)o(k)i(and)f(forth)983
944 y(b)q(et)o(w)o(een)j(the)f(states)h(WFSOP)f(and)g(WFEOP)m(.)f(Ho)o
(w)o(ev)o(er,)983 993 y(babble)f(or)f(LO)o(A)i(could)e(then)i(cause)g
(deadlo)q(c)o(ks.)1033 1046 y(In)29 b(order)h(to)f(gracefully)f(reco)o
(v)o(er)i(from)e(u.s.)g(bab-)983 1095 y(ble/LO)o(A,)17
b(the)g(frame)f(timer)h(mec)o(hanism)d(is)k(used.)29
b(The)983 1145 y(SOF)16 b(pac)o(k)o(ets)h(are)g(used)g(b)o(y)e(the)i(h)
o(ub)f(to)g(sync)o(hronise)h(its)983 1195 y(o)o(wn)c(frame)g(timer,)g
(whic)o(h)g(ma)o(y)g(b)q(e)h(sk)o(ew)o(ed)h(with)f(resp)q(ect)983
1245 y(to)c(the)i(host's)f(clo)q(c)o(k.)17 b(These)12
b(SOF)f(pac)o(k)o(ets)g(hold)f(the)i(high-)983 1295 y(est)j(priorit)o
(y)f(access)j(to)d(the)i(bus,)e(and)h(are)g(generated)h(\(b)o(y)983
1344 y(the)i(host\))h(regardless)g(of)e(the)i(other)f(bus)g(activit)o
(y)m(.)29 b(It)18 b(is)983 1394 y(the)c(resp)q(onsibilit)o(y)f(of)f
(the)i(h)o(ub)f(to)h(clear)f(the)h(w)o(a)o(y)f(and)g(al-)983
1444 y(lo)o(w)f(for)h(host)g(access)i(to)e(the)h(bus.)k(Eac)o(h)13
b(h)o(ub)g(has)g(a)g(frame)983 1494 y(timer)j(that)h(is)g(reset)h(at)f
(the)h(start)g(of)e(eac)o(h)i(new)f(frame)1908 1479 y
Fg(5)1925 1494 y Fk(.)983 1544 y(It)d(is)h(then)g(used)g(b)o(y)f(the)h
(h)o(ub)g(to)f(determine)g(the)h(p)q(oin)o(t)f(at)983
1593 y(whic)o(h)k(the)h(bus)g(m)o(ust)f(b)q(e)h(silen)o(t)f(in)g(order)
h(to)g(allo)o(w)d(the)983 1643 y(next)f(SOF.)g(The)h(idea)e(is)h(that)g
(those)h(d.s.)e(p)q(orts)i(that)f(are)983 1693 y(still)c(taking)g(up)h
(the)g(bus)g(\(either)h(b)q(ecause)h(they)e(k)o(eep)g(bab-)983
1743 y(bling)d(or)h(b)q(ecause)i(LO)o(A)e(has)g(o)q(ccurred\))i(when)e
(the)h(timer)e(is)983 1793 y(getting)i(near)i(the)f(end)g(of)f(the)i
(frame,)d(are)i(disabled.)17 b(Ho)o(w-)983 1843 y(ev)o(er,)f(this)g
(strategy)g(should)f(b)q(e)h(implemen)o(ted)d(with)i(care)983
1892 y(so)f(as)h(to)f(prev)o(en)o(t)i(\\go)q(o)q(d")e(h)o(ubs)g(to)h(b)
q(e)g(sh)o(ut)g(o\013)f(inadv)o(er-)983 1942 y(ten)o(tly)m(.)26
b(F)m(or)16 b(example,)g(consider)h(a)g(c)o(hain)f(of)g(h)o(ubs,)h
(with)983 1992 y(the)h(top)g(h)o(ub)g(connected)i(to)e(the)g(host)g
(and)g(the)g(b)q(ottom)983 2042 y(one)g(to)g(a)f(babbling)g(device.)31
b(If)17 b(eac)o(h)i(h)o(ub)e(in)h(the)g(c)o(hain)983
2092 y(w)o(ould)f(just)g(let)h(the)g(babble)f(propagate)h(upstream)f
(un)o(til)983 2141 y(the)11 b(\\time-out)e(p)q(oin)o(t",)h(then)i(as)f
(a)f(result)i(all)d(h)o(ubs,)j(except)983 2191 y(for)f(the)h(top)g
(one,)g(will)e(b)q(e)i(sh)o(ut)g(o\013)1535 2176 y Fg(6)1553
2191 y Fk(,)g(b)q(ecause)h(the)f(top)g(h)o(ub)983 2241
y(disables)j(its)g(do)o(wnstream)g(p)q(ort)g(to)g(whic)o(h)g(all)f
(others)j(are)983 2291 y(connected.)36 b(Instead,)21
b(a)e(2-phase)g(time-out)f(strategy)i(is)983 2341 y(follo)o(w)o(ed:)c
(at)d(EOF1,)g(eac)o(h)h(h)o(ub)f(m)o(ust)g(terminate)f(its)h(o)o(wn)983
2390 y(upstream)f(connectivit)o(y)g(|)g(so)g(as)h(to)f(sa)o(v)o(e)g
(itself)g(from)f(b)q(e-)983 2440 y(ing)f(cut)i(o\013)f(|)g(while)f(at)h
(a)g(later)h(p)q(oin)o(t)e(EOF2,)i(the)f(initiat-)983
2490 y(ing)h(d.s.)g(p)q(ort)h(is)g(c)o(hec)o(k)o(ed)h(for)e(babble/LO)o
(A)h(and)f(p)q(ossibly)983 2540 y(disabled.)19 b(The)c(timing)d(of)i
(the)h(EOF1)f(and)g(EOF2)h(p)q(oin)o(ts)983 2590 y(are)g(computed)f(in)
f([3])h(and)g(in)g([7)o(].)19 b(Here,)c(w)o(e)g(do)f(not)g(con-)p
983 2636 V 1029 2663 a Ff(4)1046 2675 y Fi(The)e(WFSOF)g(state)e(is)i
(renamed)d(in)o(to)i(WFDSOP)h(in)f([7)o(].)1029 2703
y Ff(5)1046 2714 y Fi(Actually)m(,)f(up)h(to)g(2)h(SOFs)g(ma)o(y)e(b)q
(e)h(missed.)1029 2742 y Ff(6)1046 2754 y Fi(Actually)m(,)j(as)g(a)h
(result)e(of)h(host-h)o(ub)e(sk)o(ew,)j(the)f(scenario)e(ma)o(y)983
2793 y(also)f(b)q(e)g(di\013eren)o(t.)p eop
%%Page: 8 8
8 7 bop -106 24 a Fk(sider)14 b(timing)e(asp)q(ects.)-56
74 y(Th)o(us,)e(apart)g(from)f(the)h(states)i(WFSOP)e(and)g(WFEOP)m(,)
-106 123 y(b)q(et)o(w)o(een)25 b(whic)o(h)e(the)h(rep)q(eater)h
(alternates)g(within)e(one)-106 173 y(frame,)14 b(the)j(rep)q(eater)g
(has)f(a)g(WFSOF)g(state)h(to)e(whic)o(h)h(it)-106 223
y(transitions)f(near)h(the)g(end)g(of)f(the)h(frame)f(\(at)g(EOF1)h
(and)-106 273 y(pro)o(vided)h(the)h(connectivit)o(y)f(is)h(not)f(u.s.,)
g(to)g(b)q(e)h(precise\))-106 323 y(and)f(in)g(whic)o(h)g(it)h(a)o(w)o
(aits)e(the)i(next)g(d.s.)f(SOP)h(\(whic)o(h)g(is)-106
372 y(supp)q(osed)11 b(to)f(b)q(e)h(the)f(start)h(of)f(the)g(SOF)h(pac)
o(k)o(et\).)17 b(F)m(urther-)-106 422 y(more,)10 b(there)i(is)f(a)g
(WFEOF2)g(state)h(in)e(whic)o(h)h(the)h(rep)q(eater)-106
472 y(ends)k(up)g(when)g(at)g(EOF1)g(the)g(u.s.)f(tra\016c)h(has)g(not)
g(b)q(een)-106 522 y(ended)d(b)o(y)f(an)g(EOP)m(.)g(In)g(WFEOF2)h(it)e
(w)o(aits)h(un)o(til)g(the)g(u.s.)-106 572 y(EOP)19 b(still)f(is)h
(detected,)j(or)d(otherwise)g(un)o(til)f(EOF2)i(o)q(c-)-106
622 y(curs,)c(in)f(whic)o(h)g(case)h(the)g(initiating)d(d.s.)h(p)q(ort)
i(has)f(to)g(b)q(e)-106 671 y(disabled.)29 b(W)m(e)17
b(arriv)o(e)h(at)f(the)h(corrected)i(rep)q(eater)g(state)-106
721 y(mac)o(hine)15 b(sho)o(wn)h(in)g(Figure)h(6.)25
b(While)15 b(w)o(e)i(ha)o(v)o(e)f(devised)-106 1432 y
@beginspecial 75 @llx 186 @lly 551 @urx 513 @ury 2289
@rwi @setspecial
%%BeginDocument: extfsm.eps
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 415.95 284.65 451.95 R
4 X
0 0 0 1 0 0 0 K
V
36.65 177.95 558.65 519.95 R
207.65 420.95 279.65 456.95 R
7 X
V
0.5 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 343.95 284.65 379.95 R
4 X
V
207.65 348.95 279.65 384.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.65 199.95 284.65 235.95 R
4 X
V
207.65 204.95 279.65 240.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
355.65 271.95 427.65 307.95 R
4 X
V
350.65 276.95 422.65 312.95 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 X
90 450 1.5 1.5 270 243.65 405.14 GG
243.65 403.64 247.45 403.64 243.65 390.39 239.85 403.64 4 Y
3 H
0 Z
N
243.65 403.64 247.45 403.64 243.65 390.39 239.85 403.64 4 Y
V
243.65 420.95 243.65 405.14 2 L
2 Z
N
90 450 1.5 1.5 270 243.65 261.14 GG
243.65 259.64 247.45 259.64 243.65 246.39 239.85 259.64 4 Y
0 Z
N
243.65 259.64 247.45 259.64 243.65 246.39 239.85 259.64 4 Y
V
243.65 348.95 243.65 261.14 2 L
2 Z
N
90 450 1.5 1.5 270 387.65 327.95 GG
387.65 326.45 389.96 326.45 387.65 318.39 385.34 326.45 4 Y
0 Z
N
387.65 326.45 389.96 326.45 387.65 318.39 385.34 326.45 4 Y
V
261.65 348.95 261.65 330.95 387.65 330.95 387.65 327.95 4 L
2 Z
N
90 450 1.5 1.5 270 261.65 255.95 GG
261.65 254.45 263.96 254.45 261.65 246.39 259.34 254.45 4 Y
0 Z
N
261.65 254.45 263.96 254.45 261.65 246.39 259.34 254.45 4 Y
V
387.65 276.95 387.65 258.95 261.65 258.95 261.65 255.95 4 L
2 Z
N
90 450 1.5 1.5 270 225.65 255.95 GG
225.65 254.45 227.96 254.45 225.65 246.39 223.34 254.45 4 Y
0 Z
N
225.65 254.45 227.96 254.45 225.65 246.39 223.34 254.45 4 Y
V
225.65 420.95 225.65 402.95 180.65 402.95 180.65 258.95 225.65 258.95 225.65 255.95 6 L
2 Z
N
90 450 1.5 1.5 277.28 241.09 476.98 GG
241.28 475.49 245.05 475.98 242.96 462.35 237.51 475.01 4 Y
0 Z
N
241.28 475.49 245.05 475.98 242.96 462.35 237.51 475.01 4 Y
V
207.65 510.95 M
 222.81 510.95 238.48 497.42 241.09 476.98 D
2 Z
N
90 450 1.5 1.5 358.07 187.48 223.63 GG
188.98 223.58 189.1 227.38 202.21 223.14 188.85 219.79 4 Y
0 Z
N
188.98 223.58 189.1 227.38 202.21 223.14 188.85 219.79 4 Y
V
187.48 223.63 M
 147.41 224.99 117.65 237.12 117.65 249.95 D
2 Z
N
175.65 371.95 184.65 380.95 R
7 X
V
N
175.65 352.95 184.65 361.95 R
V
N
2 X
90 450 1.5 1.5 187.46 438.95 G
188.96 438.95 188.96 442.75 202.21 438.95 188.96 435.15 4 Y
0 Z
N
188.96 438.95 188.96 442.75 202.21 438.95 188.96 435.15 4 Y
V
207.65 375.95 144.65 375.95 144.65 438.95 187.46 438.95 4 L
2 Z
N
139.65 226.95 148.65 235.95 R
7 X
V
N
2 X
90 450 1.5 1.5 190.46 357.95 G
191.96 357.95 191.96 361.75 205.21 357.95 191.96 354.15 4 Y
0 Z
N
191.96 357.95 191.96 361.75 205.21 357.95 191.96 354.15 4 Y
V
243.65 204.95 243.65 186.95 144.65 186.95 144.65 357.95 190.46 357.95 5 L
2 Z
N
7 X
180 270 25.79 12.29 30 304.13 442.41 GG
2 X
180 270 25.79 12.29 30 304.13 442.41 AA
7 X
270 360 25.79 12.29 30 304.13 442.41 GG
2 X
270 360 25.79 12.29 30 304.13 442.41 AA
283.09 444.46 M
 303.65 456.33 323.08 461.19 326.47 455.31 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 301.26 453.29 GG
299.91 452.64 301.57 449.22 287.99 446.84 298.25 456.05 4 Y
0 Z
N
299.91 452.64 301.57 449.22 287.99 446.84 298.25 456.05 4 Y
V
301.26 453.29 M
 313.62 459.3 324.12 459.38 326.47 455.31 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 303.13 372.5 GG
2 X
180 270 25.79 12.29 30 303.13 372.5 AA
7 X
270 360 25.79 12.29 30 303.13 372.5 GG
2 X
270 360 25.79 12.29 30 303.13 372.5 AA
282.09 374.55 M
 302.65 386.42 322.08 391.27 325.47 385.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 300.26 383.38 GG
298.91 382.72 300.57 379.31 286.99 376.93 297.25 386.14 4 Y
0 Z
N
298.91 382.72 300.57 379.31 286.99 376.93 297.25 386.14 4 Y
V
300.26 383.38 M
 312.62 389.39 323.12 389.47 325.47 385.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 445.16 301.5 GG
2 X
180 270 25.79 12.29 30 445.16 301.5 AA
7 X
270 360 25.79 12.29 30 445.16 301.5 GG
2 X
270 360 25.79 12.29 30 445.16 301.5 AA
424.12 303.55 M
 444.68 315.42 464.11 320.27 467.5 314.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 442.29 312.38 GG
440.94 311.72 442.6 308.31 429.02 305.93 439.28 315.14 4 Y
0 Z
N
440.94 311.72 442.6 308.31 429.02 305.93 439.28 315.14 4 Y
V
442.29 312.38 M
 454.65 318.39 465.15 318.47 467.5 314.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
180 270 25.79 12.29 30 303.13 226.5 GG
2 X
180 270 25.79 12.29 30 303.13 226.5 AA
7 X
270 360 25.79 12.29 30 303.13 226.5 GG
2 X
270 360 25.79 12.29 30 303.13 226.5 AA
282.09 228.55 M
 302.65 240.42 322.08 245.27 325.47 239.39 D
O
7 X
V
2 X
90 450 1.5 1.5 205.94 300.26 237.38 GG
298.91 236.72 300.57 233.31 286.99 230.93 297.25 240.14 4 Y
0 Z
N
298.91 236.72 300.57 233.31 286.99 230.93 297.25 240.14 4 Y
V
300.26 237.38 M
 312.62 243.39 323.12 243.47 325.47 239.39 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
(WFSOP) 223.65 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOP) 223.65 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFSOF) 223.65 217.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WFEOF2) 359.65 289.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Reset) 179.65 501.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Resume) 73.65 241.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Downstream SOP) 150.65 191.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOP & !EOF1) 108.65 447.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1) 184.65 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1 & EOP) 245.65 306.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1 & !EOP & USX) 283.65 335.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOP) 257.65 262.95 T
(EOF2) 293.31 262.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SOP & !EOF1) 249.65 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 329.65 438.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 465.98 288.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 322.65 359.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ELSE) 315.65 207.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1 & DSX) 246.51 286.41 T
0 0 0 1 0 0 0 K
247.57 302.14 252.61 297.1 2 L
1 H
N
252.61 297.1 257.65 302.14 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
282.57 267.99 287.61 262.95 2 L
N
287.61 262.95 292.65 267.99 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(USX = upstream connectivity) 369.65 492.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DSX = downstream connectivity) 369.65 480.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EOF1) 369.65 468.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(indicates that the EOF1 time-) 411.08 468.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(out point of the current frame) 411.08 456.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(occurs) 411.08 444.1 T
0 0 0 1 0 0 0 K
519.36 442.9 445.4 442.9 2 L
V
0.6 H
0 Z
N
(or has occurred) 445.4 444.1 T
FMENDPAGE

%%EndDocument
 @endspecial 91 x Fh(Figure)h Fk(6:)29 b(Rep)q(eater)20
b(state)g(mac)o(hine)e(\(as)i(used)g(in)f(ex-)-106 1573
y(tended)c(mo)q(del\))-106 1672 y(this)e(impro)o(v)o(ed)e(v)o(ersion)j
(on)f(the)h(basis)f(of)g(the)g(text)713 1657 y Fg(7)746
1672 y Fk(of)f([3],)-106 1721 y(it)j(is)g(in)o(teresting)h(to)f(note)h
(that)f(the)h(revision)f(of)g(Chapter)-106 1771 y(11)d(prop)q(osed)i
(in)f([7)o(])f(has)h(indep)q(enden)o(tly)h(come)e(up)h(with)g(a)-106
1821 y(v)o(ery)h(similar)d(corrected)16 b(picture.)-106
1928 y Fh(1.1.2.)75 b(Susp)q(end/resu)o(me)31 b(signalli)o(ng)38
b Fk(The)30 b(re-)-106 1977 y(p)q(eater)12 b(displa)o(ys)e(di\013eren)o
(t)h(connectivit)o(y)g(b)q(eha)o(viour)f(when)-106 2027
y(resume)21 b(signalling)e(is)i(b)q(eing)g(propagated)g(through)g(the)
-106 2077 y(bus.)h(The)15 b(susp)q(end/resume)i(mec)o(hanism)12
b(is)j(pro)o(vided)g(in)-106 2127 y(order)d(to)g(place)f(the)i(USB,)f
(or)f(parts)h(of)f(it,)h(in)o(to)f(an)g(energy-)-106
2177 y(sa)o(ving)g(state)h(\(susp)q(end,)h(or)f(sleep\).)18
b(This)12 b(is)f(implemen)o(ted)-106 2227 y(b)o(y)k(the)g(p)q
(ossibilit)o(y)f(for)h(eac)o(h)h(individual)d(device)j(\(includ-)-106
2276 y(ing)h(h)o(ubs\),)i(indep)q(enden)o(tly)f(of)g(others,)h(to)f
(transition)f(to)-106 2326 y(a)h(susp)q(ended)k(state.)34
b(Tw)o(o)19 b(distinctiv)o(e)g(features)h(of)e(the)-106
2376 y(mec)o(hanism)11 b(are)k(the)f(follo)o(wing.)-106
2453 y Fh(h)o(ub)g(susp)q(end)g(vs.)i(p)q(ort)f(susp)q(end)j
Fk(The)51 b(host)g(can)-23 2503 y(send)20 b(\(via)e(the)i(h)o(ub)f(con)
o(troller\))g(susp)q(end)i(requests)-23 2553 y(to)e(individual)e(p)q
(orts.)34 b(This)19 b(allo)o(ws)f(it)g(to)h(susp)q(end)-23
2602 y(certain)24 b(segmen)o(ts)g(\(namely)m(,)f(the)i(segmen)o(t)e(b)q
(elo)o(w)p -106 2636 382 2 v -60 2663 a Ff(7)-43 2675
y Fi([1],)16 b(on)g(p.)f(132,)h(sa)o(ys)f(the)h(follo)o(wing)e(ab)q
(out)g(the)h(discrepancy)-106 2714 y(b)q(et)o(w)o(een)c(text)g(and)g
(\014gure:)16 b(\\The)c(state)f(diagram)f(in)i(the)f(sp)q(eci\014ca-)
-106 2754 y(tion)f(di\013ers)h(from)f(the)h(written)g(description)e
(and)i(it)g(is)h(the)f(author's)-106 2793 y(opinion)e(that)i(the)f
(written)h(description)d(is)k(correct.")1030 24 y Fk(a)23
b(certain)h(p)q(ort\))g(only)m(.)45 b(Th)o(us,)25 b(b)q(esides)g(the)f
(sus-)1030 74 y(p)q(ended/a)o(w)o(ak)o(e)16 b(state)g(of)e(a)h(h)o(ub)g
(itself,)g(also)f(eac)o(h)i(of)1030 123 y(its)d(individual)e(p)q(orts)j
(ma)o(y)d(b)q(e)j(susp)q(ended)h(or)e(a)o(w)o(ak)o(e.)1030
173 y(The)h(susp)q(ended)i(state)e(of)f(a)g(p)q(ort)h(is)f(a)h
(distinguished)1030 223 y(logical)27 b(state.)62 b(An)o(y)28
b(other)h(logical)e(state)i(then)1030 273 y(implies)23
b(that)i(the)g(p)q(ort)g(is)f(a)o(w)o(ak)o(e)g(\(although)g(for)1030
323 y(p)q(orts)15 b(in)f(the)g(disabled)g(or)g(disconnected)i(states)f
(this)1030 372 y(do)q(es)20 b(not)f(mean)e(m)o(uc)o(h\).)31
b(Lik)o(ewise,)20 b(w)o(e)f(in)o(tro)q(duce)1030 422
y(a)j(logical)e(state)j(called)f(\\susp)q(ended")h(to)f(the)h(h)o(ub)
1030 472 y(rep)q(eater)15 b(state)f(diagram.)h(Again,)d(the)h(h)o(ub)g
(is)f(a)o(w)o(ak)o(e)1030 522 y(when)i(it)f(is)g(in)g(an)o(y)g(other)h
(state.)k(The)c(susp)q(end)h(state)1030 572 y(of)i(the)g(p)q(ort)h(and)
e(the)i(susp)q(end)g(state)g(of)e(the)i(en)o(tire)1030
622 y(h)o(ub)23 b(\(or)g(of)f(a)g(device\))h(should)g(not)f(b)q(e)h
(confused.)1030 671 y(They)i(are)g(indep)q(enden)o(t)h(|)e(indeed,)k
(an)o(y)c(of)g(the)1030 721 y(4)j(com)o(binations)d(of)i(p)q
(ossibilities)g(ma)o(y)f(o)q(ccur)j(in)1030 771 y(practice.)947
853 y Fh(host-initi)o(ated)12 b(vs.)k(device-initi)o(ated)c(resume)1030
903 y Fk(Resume)17 b(signalling)e(ma)o(y)g(originate)h(not)h(only)f
(from)1030 953 y(the)21 b(host,)g(but)f(also)f(from)f(a)h(device.)36
b(This)20 b(allo)o(ws)1030 1003 y(devices)32 b(to)f(indep)q(enden)o
(tly)h(w)o(ak)o(e)e(up)h(the)h(bus,)1030 1053 y(without)17
b(the)h(host)g(ha)o(ving)e(to)h(monitor)e(them.)28 b(F)m(or)1030
1102 y(example,)11 b(think)h(of)f(a)h(k)o(ey)g(on)g(a)g(k)o(eyb)q(oard)
g(b)q(eing)g(hit.)1030 1152 y(Th)o(us,)h(resume)g(signalling)d(ma)o(y)g
(b)q(e)k Fm(host)f(initiate)n(d)k Fk(or)1030 1202 y Fm(devic)n(e)g
(initiate)n(d)p Fk(.)23 b(Indep)q(enden)o(t)18 b(from)c(this,)h(resume)
1030 1252 y(signalling)h(ma)o(y)f(\015o)o(w)i(upstream)g(and)g(do)o
(wnstream.)1030 1302 y(W)m(e)g(will)f(see)j(that)e(in)g(the)h(case)g
(of)f(device)h(initiated)1030 1352 y(resume,)c(b)q(oth)g(\015o)o(w)g
(directions)g(o)q(ccur.)947 1433 y(The)f(general)g(rules)g(then,)g(for)
f(an)o(y)f(device,)i(are)g(as)g(follo)o(ws.)989 1515
y Fs(\017)20 b Fk(F)m(or)d(susp)q(end:)27 b(An)o(y)17
b(device)1493 1500 y Fg(8)1530 1515 y Fk(that)g(sees)i(a)e(constan)o(t)
1030 1565 y(idle)d(on)f(its)h(ro)q(ot)g(p)q(ort)g(for)g(more)f(than)g
(3.0)g(ms,)g(tran-)1030 1615 y(sitions)h(to)g(the)h(susp)q(end)g(state)
g(\(from)e(an)o(y)g(state\).)19 b(It)1030 1665 y(is)f(not)f(clear)g
(from)f(the)h(do)q(cumen)o(tation)f(whether)j(a)1030
1715 y(susp)q(end)d(is)e(caused)h(b)o(y)e(a)h(constan)o(t)g(idle)g(on)g
(the)g Fm(r)n(o)n(ot)1030 1764 y(p)n(ort)j Fk(or)c(a)f(constan)o(t)i
(idle)e(on)h Fm(al)r(l)g(p)n(orts)1653 1749 y Fg(9)1672
1764 y Fk(.)k(W)m(e)c(assume)1030 1814 y(that)i(a)g(constan)o(t)g(idle)
g(on)g(the)g(ro)q(ot)g(p)q(ort)g(is)g(enough,)1030 1864
y(with)e(the)g(idea)f(that)g(the)i(host)e(will)f(not)i(silence)g(when)
1030 1914 y(a)19 b(device)g(is)f(still)f(talking)g(|)h(this)g(is)h
(then)g(a)f(prop-)1030 1964 y(ert)o(y)g(of)d(some)h(higher)h(lev)o(el.)
25 b(So)16 b(it)g(will)f(not)i(b)q(e)g(the)1030 2013
y(case)h(that)e(a)g(h)o(ub)g(sees)h(a)f(constan)o(t)h(idle)f(on)f(its)i
(ro)q(ot)1030 2063 y(p)q(ort)g(while)f(some)f(\(non-disabled\))h(d.s.)g
(p)q(ort)g(is)g(still)1030 2113 y(signalling.)989 2195
y Fs(\017)k Fk(F)m(or)e(resume:)27 b(A)19 b(device)g(can)g(return)g
(from)e(its)h(sus-)1030 2245 y(p)q(end)d(state)1220 2230
y Fg(10)1256 2245 y Fk(:)1077 2328 y Fh({)21 b Fk(Up)q(on)i(seeing)g
(normal)e(bus)i(activit)o(y)f(on)h(an)o(y)1122 2378 y(p)q(ort.)17
b(W)m(e)12 b(assume)f(that)h(a)g(resume)g(ma)o(y)e(b)q(e)j(ini-)1122
2427 y(tiated)h(b)o(y)g(\(1\))h(an)f(idle-to-resume)f(on)i(the)g(ro)q
(ot)1122 2477 y(p)q(ort,)f(and)f(\(2\))h Fm(any)k Fk(activit)o(y)13
b(on)h(a)g(d.s.)f(p)q(ort.)1077 2523 y Fh({)21 b Fk(Via)13
b(reset)j(signalling.)p 947 2557 V 994 2584 a Ff(8)1011
2596 y Fi(Recall)10 b(that)h(a)g(h)o(ub)g(is)g(a)h(sp)q(ecial)d(t)o(yp)
q(e)i(of)g(device.)994 2624 y Ff(9)1011 2635 y Fi(E.g.,)16
b(compare)d([3]:p.)i(234)g(\([7)o(]:p.)g(235\),)g(11.5.1,)g(second)g
(sen-)947 2675 y(tence)c(with)g([3)o(]:p.)g(119,)g(7.1.4.4,)e(third)h
(and)h(fourth)f(sen)o(tences.)978 2703 y Ff(10)1011 2714
y Fi(This)k(pro)q(cess)f(is)h(called)e(resume,)h(but)h(there)e(is)i(no)
g(unique)e(re-)947 2754 y(sume)e(state.)k(The)d(logical)e(state)h
(after)g(resume)f(ma)o(y)h(dep)q(end)f(on)i(the)947 2793
y(state)g(b)q(efore)f(susp)q(ending)e(and)j(on)g(the)g(b)q(eha)o(viour)
e(of)i(the)g(device.)p eop
%%Page: 9 9
9 8 bop 59 24 a Fh({)20 b Fk(When)15 b(activ)n(ated)f(b)o(y)g(actions)h
(that)f(are)h(asso)q(ci-)103 74 y(ated)k(with)e(in)o(ternal)g
(functions)h(\(think)g(of)f(hit-)103 123 y(ting)e(a)h(k)o(ey)f(on)h(a)f
(k)o(eyb)q(oard\))h(|)f(this)g(is)g(called)103 173 y
Fm(r)n(emote)g(wake-up)p Fk(.)-71 264 y(Belo)o(w,)d(w)o(e)h(concen)o
(trate)h(on)e(susp)q(end/resume)i(b)q(eha)o(viour)-71
314 y(of)f Fm(hubs)p Fk(.)-71 431 y Fh(1.1.2.1.)44 b(Susp)q(end)39
b Fk(By)21 b(ceasing)f(activit)o(y)g(on)g(a)g(bus)-71
481 y(line,)12 b(all)g(devices)i(b)q(elo)o(w)f(it)g(will)e(en)o(ter)k
(the)e(susp)q(end)i(state.)-71 531 y(A)h(bus)h(line)f(ma)o(y)e(b)q(e)j
(silenced)g(b)o(y)f(putting)g(the)g(d.s.)g(p)q(ort)-71
581 y(to)c(whic)o(h)g(it)f(is)h(connected)i(in)e(the)g(susp)q(ended)i
(state)f(\(via)f(a)-71 631 y(SetP)o(ortF)m(eature\(POR)m(T)p
338 631 13 2 v 17 w(SUSPEND\))i(request)h(|)e(whic)o(h)-71
681 y(is)j(only)g(understo)q(o)q(d)h(b)o(y)f(an)g(a)o(w)o(ak)o(e)f(h)o
(ub.)25 b(Of)16 b(course)i(the)-71 730 y(host)f(ma)o(y)e(also)h(decide)
i(to)f(stop)g(sending)g(an)o(y)f(signalling)-71 780 y(do)o(wn)d(the)g
(USB;)g(in)g(this)g(case)h(the)f(whole)g(USB)h(will)d(en)o(ter)-71
830 y(the)19 b(susp)q(end)h(state.)33 b(This)18 b(is)h(called)f
Fm(glob)n(al)h(susp)n(end)24 b Fk(in)-71 880 y([3)o(].)19
b(Susp)q(ending)c(parts)g(of)e(the)i(USB)g(only)m(,)e(through)h(p)q
(ort)-71 930 y(susp)q(end,)e(is)f(called)f Fm(sele)n(ctive)h(susp)n
(end)16 b Fk(\(device)11 b(lev)o(el\).)17 b(W)m(e)-71
979 y(view)c(global)d(susp)q(end)15 b(as)d(a)h(sp)q(ecial)f(case)i(of)e
(selectiv)o(e)i(sus-)-71 1029 y(p)q(end.)-21 1081 y(Up)q(on)f(susp)q
(ending,)h(a)e(h)o(ub:)18 b(\015oats)13 b(all)f(output)h(driv)o(ers;)
-71 1131 y(main)o(tains)f(static)i(v)n(alues)g(of)f(all)g(con)o(trol)g
(and)h(status)h(bits;)-71 1181 y(preserv)o(es)i(curren)o(t)e(state)g
(information)d(for)h(all)g(d.s.)h(p)q(orts;)-71 1230
y(turns)h(o\013)f(its)g(clo)q(c)o(ks.)-71 1348 y Fh(1.1.2.2.)22
b(Resume)40 b Fk(Resume)12 b(b)q(eha)o(viour)h(is)g(more)g(com-)-71
1398 y(plex.)18 b(Here)d(are)f(the)h(general)f(rules:)-71
1487 y Fh(initiati)o(on)e(of)k(resume:)k(host/device)e
Fk(Resume)9 b(is)g(ini-)12 1537 y(tiated)24 b(b)o(y)g(the)h(host)f(or)g
(b)o(y)g(a)g(device.)49 b(A)24 b(host-)12 1586 y(initiated)16
b(resume)g(is)g(e\013ected)j(b)o(y)d(a)g(reset)i(or)f(b)o(y)f(re-)12
1636 y(sumption)g(of)g(d.s.)g(bus)h(activit)o(y)m(.)26
b(D.s.)16 b(bus)h(activit)o(y)12 1686 y(ma)o(y)10 b(either)i(b)q(e)g
(resumed)g(from)e(the)i(host)g(directly)g(\(in)12 1736
y(case)g(of)d(a)h(global)f(susp)q(end\),)j(or)f(b)o(y)f(a)g(h)o(ub)g
(in)g(resp)q(onse)12 1786 y(to)15 b(a)f(request)i(from)d(the)i(host)491
1771 y Fg(11)527 1786 y Fk(.)20 b(A)15 b(device)g(initiated)12
1835 y(resume)21 b(is)f(e\013ected)i(b)o(y)e(a)g(device)h(that)f
(starts)i(bus)12 1885 y(activit)o(y)d(\(e.g.)h(in)f(resp)q(onse)j(to)e
(actions)f(asso)q(ciated)12 1935 y(with)12 b(in)o(ternal)g(functions\))
g(or)g(b)o(y)g(a)g(h)o(ub)g(that)g(detects)12 1985 y(a)i
(connect/disconnect.)-71 2075 y Fh(scop)q(e)i(of)f(resume)k
Fk(A)13 b(host)g(initiated)f(resume)g(w)o(ak)o(es)h(up)12
2125 y(the)20 b(en)o(tire)g(segmen)o(t)f(of)g(the)h(bus)g(b)q(elo)o(w)f
(the)h(p)q(oin)o(t)12 2175 y(where)d(the)e(bus)h(activit)o(y)e(is)i
(resumed,)f(except)h(those)12 2225 y(parts)k(\\b)q(ehind")f(susp)q
(ended)j(p)q(orts.)35 b(In)19 b(this)h(case,)12 2275
y(the)c(resume)f(scenario)g(only)f(in)o(v)o(olv)o(es)g(d.s.)g
(tra\016c.)21 b(A)12 2324 y(device)e(initiated)f(resume)g(w)o(ak)o(es)h
(up)f(the)h(follo)o(wing)12 2374 y(segmen)o(t)12 b(of)g(the)h(USB:)f
(all)g(h)o(ubs)g(and)g(p)q(orts)i(that)e(can)12 2424
y(b)q(e)j(reac)o(hed)g(b)o(y)f(going)f(u.s.)h(from)e(and)i(including)g
(the)12 2474 y(p)q(oin)o(t)i(where)h(the)g(resume)g(is)f(initiated)f
(up)i(till)e(\(but)12 2524 y(not)10 b(including\))f(the)h(\014rst)h(a)o
(w)o(ak)o(e)e(h)o(ub)h(that)g(is)g(encoun-)12 2574 y(tered,)k(and)e
(from)f(all)g(these)j(h)o(ubs,)f(all)f(segmen)o(ts)g(that)12
2623 y(can)f(b)q(e)g(reac)o(hed)h(b)o(y)f(going)e(d.s.)h(along)g
(enabled)h(p)q(orts.)12 2673 y(In)j(this)g(case,)g(b)q(oth)g(u.s.)g
(and)f(d.s.)h(tra\016c)g(o)q(ccur.)p -71 2715 382 2 v
-40 2742 a Ff(11)-7 2754 y Fi(Note)d(that)f(suc)o(h)g(a)i(request)d
(can)i(only)f(b)q(e)h(sen)o(t)f(to,)h(and)g(only)f(b)q(e)-71
2793 y(receiv)o(ed)f(b)o(y)m(,)i(an)g(a)o(w)o(ak)o(e)g(h)o(ub.)983
24 y Fh(end)k(of)g(resume)k Fk(An)o(y)f(resume)h(scenario)f(should)g
(result)1066 74 y(in)12 b(a)g(situation)f(where)j(the)f(segmen)o(t)e
(that)i(has)f(w)o(ok)o(en)1066 123 y(up)h(is)f(ready)h(to)f(receiv)o(e)
i(d.s.)e(bus)h(signalling.)j(In)c(par-)1066 173 y(ticular,)18
b(the)g(w)o(ok)o(en-up)f(segmen)o(t)g(m)o(ust)g(b)q(e)h(able)f(to)1066
223 y(start)c(taking)f(part)h(in)f(the)h(p)q(erio)q(dic)g(reception)g
(of)f(the)1066 273 y(SOF)j(pulse)f(that)h(is)f(used)h(to)g(sync)o
(hronise)g(its)g(clo)q(c)o(ks)1066 323 y(and)h(to)h(k)o(eep)g(it)f
(from)f(susp)q(ending)j(again.)25 b(An)o(y)16 b(re-)1066
372 y(sume)c(scenario)h(ends)h(with)e(a)g(d.s.)g(resume)h(signal)f(b)q
(e-)1066 422 y(ing)d(propagated)g(for)g(20)g(ms,)g(follo)o(w)o(ed)f(b)o
(y)i(a)f(lo)o(w)f(sp)q(eed)1066 472 y(EOP)m(.)1033 553
y(Mo)q(delling)23 b(decision:)39 b(W)m(e)23 b(mo)q(del)g(the)i(susp)q
(end-to-)983 602 y(resume)18 b(transition)g(of)g(a)g(h)o(ub)h(as)f(an)g
(instan)o(taneous)h(ac-)983 652 y(tion.)e(In)12 b(realit)o(y)m(,)f
(this)h(tak)o(es)h(an)f(amoun)o(t)e(of)i(time)e(\(mainly)983
702 y(b)q(ecause)17 b(clo)q(c)o(ks)e(ha)o(v)o(e)g(to)g(b)q(e)h
(restarted,)h(whic)o(h)e(ma)o(y)e(w)o(ell)983 752 y(last)h(sev)o(eral)g
(frames.)983 859 y Fh(1.1.2.2.1.)34 b(Do)o(wn-stream)18
b(resume)h(signalli)o(n)o(g)39 b Fk(A)983 909 y(h)o(ub)12
b(that)h(sees)h(a)e(resume)h(signal)e(on)i(its)f(ro)q(ot)h(p)q(ort)f
(\(this)h(is)983 959 y(not)e(necessarily)h(caused)f(b)o(y)g(a)g(host)g
(initiated)f(resume,)h(but)983 1009 y(ma)o(y)i(also)i(o)q(ccur)h(in)f
(those)h(segmen)o(ts)g(where)g(d.s.)f(resume)983 1059
y(signalling)g(is)h(generated)j(in)d(a)h(device-initiated)f(scenario)
983 1108 y(\(see)e(b)q(elo)o(w\)\))g(re\015ects)h(this)e(signal)f(d.s.)
h(on)g(all)f(its)h(enabled)983 1158 y(p)q(orts.)18 b(W)m(e)12
b(assume)h(that)f(the)i(resume)e(signal)g(is)h(ended)g(b)o(y)983
1208 y(an)h(EOP)m(.)983 1315 y Fh(1.1.2.2.2.)29 b(Up-stream)17
b(resume)g(signalli)o(ng)38 b Fk(Here,)983 1365 y(the)19
b(general)h(scenario)f(is)g(as)g(follo)o(ws:)27 b(The)19
b(resume)h(sig-)983 1415 y(nalling)12 b(propagates)i(u.s.)f(un)o(til)g
(it)h(reac)o(hes)h(an)f(a)o(w)o(ak)o(e)f(h)o(ub)983 1465
y(\(called)d(the)h Fm(top)h(hub)h Fk(henceforth\))f(or)f(the)g(host.)17
b(Along)9 b(the)983 1515 y(w)o(a)o(y)m(,)16 b(eac)o(h)h
Fm(susp)n(ende)n(d)23 b Fk(h)o(ub)16 b(that)h(sees)i(the)e(u.s.)g
(directed)983 1564 y(resume)i(signal)g(not)g(only)g(propagates)g(it)g
(u.s.,)h(but)g(also)983 1614 y(sends)13 b(it)e Fm(downstr)n(e)n(am)k
Fk(along)10 b(all)h(enabled)h(p)q(orts,)g(and)g(also)983
1664 y(re\015ects)19 b(it)d(to)g(the)h(d.s.)f(p)q(ort)h(on)g(whic)o(h)f
(the)h(resume)g(w)o(as)983 1714 y(receiv)o(ed.)28 b(W)m(e)17
b(assume)f(that)h(it)g(is)g(the)g(resp)q(onsibilit)o(y)g(of)983
1764 y(the)12 b(host)f(to)g(alter)h(\(or)f(lea)o(v)o(e\))g(the)h
(status)g(of)f(that)g(p)q(ort,)h(i.e.)983 1813 y(to)h(mo)o(v)o(e)f(it)h
(to)g(the)h(enabled)g(state)g(through)g(a)f(ClearP)o(ort-)983
1863 y(F)m(eature\(POR)m(T)p 1255 1863 13 2 v 15 w(SUSPEND\))j
(request,)h(after)e(insp)q(ecting)983 1913 y(the)f(status)h(bits.)1033
1963 y(W)m(e)g(describ)q(e)j(the)f(scenario)f(in)g(more)f(detail.)24
b(W)m(e)15 b(dis-)983 2013 y(tinguish)1013 2093 y(1.)20
b(the)c Fm(b)n(ottom)g(hub)p Fk(,)g(whic)o(h)f(is)h(the)g(one)f
(directly)h(ab)q(o)o(v)o(e)1066 2143 y(the)g(device)f(that)g(initiates)
g(the)g(resume,)g(but)h(only)e(if)1066 2193 y(it)e(is)f(a)h(susp)q
(ended)i(h)o(ub)e(\(if)g(it)f(is)h(not)g(susp)q(ended,)i(this)1066
2243 y(means)f(it)g(is)h(the)h(top)f(h)o(ub\);)1013 2324
y(2.)20 b(the)14 b(top)g(h)o(ub)g(\(see)h(ab)q(o)o(v)o(e\);)f(and)1013
2406 y(3.)20 b(all)13 b(in)o(termediate)h(h)o(ubs,)h(that)g(lie)f(on)h
(the)g(path)g(from)1066 2456 y(b)q(ottom)d(to)i(top)g(h)o(ub.)983
2544 y Fh(b)q(ottom)g(h)o(ub)g(and)i(in)o(termed)o(iat)o(e)d(h)o(ubs)19
b Fk(Eac)o(h)80 b(of)1066 2594 y(these)22 b(h)o(ubs)e(\(whic)o(h)h(are)
g(all)e(susp)q(ended\),)k(exp)q(oses)1066 2644 y(the)16
b(follo)o(wing)c(b)q(eha)o(viour.)22 b(In)15 b(case)h(it)f(sees)h(a)f
Fm(signal)1066 2694 y(which)k(is)g(not)g(a)g(c)n(onne)n(ct)h(or)f(disc)
n(onne)n(ct)k Fk(on)18 b(a)h(d.s.)1066 2743 y(p)q(ort)e(\(called)f(the)
h Fm(signal)r(le)n(d)g(p)n(ort)t Fk(\),)f(then)h(regardless)1066
2793 y(whether)e(this)e(p)q(ort)h(itself)f(is)g(enabled)h(or)f(susp)q
(ended,)p eop
%%Page: 10 10
10 9 bop -23 24 a Fk(a)13 b Fm(r)n(esume)j Fk(signal)c(is)h(generated)i
(u.s.)d(to)i(its)f(ro)q(otp)q(ort,)-23 74 y(to)23 b(the)h(signalled)e
(p)q(ort,)j(as)e(w)o(ell)g(as)g(to)g(all)f(other)-23
123 y Fm(enable)n(d)29 b Fk(p)q(orts.)51 b(In)25 b(case)g(the)g
(signalled)f(p)q(ort)h(is)-23 173 y(enabled,)18 b(no)f(status)h(&)f(in)
o(terrupt)i(bits)e(are)h(set.)29 b(In)-23 223 y(case)15
b(it)f(is)g(susp)q(ended,)j(the)e(status)g(&)g(in)o(terrupt)g(bits)-23
273 y(are)i(set,)g(in)f(order)h(to)f(notice)h(to)g(the)g(host)f(that)h
(this)-23 323 y(p)q(ort)d(should)g(b)q(e)g(enabled)g(again.)-23
394 y(In)d(case)h(the)g(h)o(ub)g(sees)h(a)e Fm(c)n(onne)n(ct)16
b Fk(or)11 b Fm(disc)n(onne)n(ct)16 b Fk(on)11 b(a)-23
444 y(d.s.)h(p)q(ort,)i(a)e Fm(r)n(esume)k Fk(signal)d(is)g(generated)h
(u.s.)f(to)g(its)-23 494 y(ro)q(otp)q(ort,)j(as)f(w)o(ell)g(as)g(to)h
(all)e Fm(enable)n(d)20 b Fk(p)q(orts,)c(except)-23 544
y(for)f(the)i(signalled)e(p)q(ort)h(itself.)24 b(Status)17
b(&)f(in)o(terrupt)-23 593 y(bits)j(are)h(set)h(in)e(this)g(case.)36
b(Note)20 b(that)g(w)o(e)f(mo)q(del)-23 643 y(the)12
b(connect)h(and)f(disconnect)h(as)f(instan)o(taneous)g(sig-)-23
693 y(nals.)35 b(In)20 b(realit)o(y)m(,)f(b)q(oth)h(dep)q(end)h(on)f
(the)g(duration)-23 743 y(of)15 b(certain)h(signals,)f(and)h(the)g(h)o
(ub)g(has)f(to)h(return)h(to)-23 793 y(an)i(a)o(w)o(ak)o(e)h(state)h
(\014rst,)g(with)f(its)g(clo)q(c)o(k)g(started)h(\(it)-23
842 y(is)f(stopp)q(ed)h(when)g(the)g(h)o(ub)f(susp)q(ends\).)40
b(In)20 b(order)-23 892 y(to)15 b(mo)q(del)f(this)h(more)g(faithfully)m
(,)e(w)o(e)i(migh)o(t)f(ha)o(v)o(e)h(to)-23 942 y(p)q(erform)j(the)i
(detection)g(of)e(\(dis\)connect)j(in)o(to)d(t)o(w)o(o)-23
992 y(separate)i(phases:)28 b(in)18 b(the)i(\014rst,)g(a)e(p)q(ossible)
h(o)q(ccur-)-23 1042 y(rence)e(of)f(a)g(\(dis\)connect)h(is)f(detected)
i(and)e(the)h(h)o(ub)-23 1091 y(starts)12 b(returning)f(to)g(an)g(a)o
(w)o(ak)o(e)f(state;)i(in)f(the)g(second,)-23 1141 y(after)16
b(the)g(clo)q(c)o(k)f(has)h(started,)h(the)f(detection)g(of)f(the)-23
1191 y(\(dis\)connect)g(can)f(b)q(e)h(\014nished.)-23
1263 y(Note)20 b(that)g(the)g(resume)g(signalling)e(that)h(is)h(gener-)
-23 1312 y(ated)13 b(in)g(the)g(d.s.)g(direction)g(causes)h(h)o(ubs)g
(to)f(react)h(as)-23 1362 y(sp)q(eci\014ed)h(in)f(paragraph)f
(1.1.2.2.1)e(ab)q(o)o(v)o(e.)-106 1455 y Fh(top)k(h)o(ub)k
Fk(The)13 b(top)f(h)o(ub)h(sees)h(a)e(resume,)h(a)f(connect,)i(or)e(a)
-23 1505 y(disconnect)g(on)f(a)f Fm(susp)n(ende)n(d)j(p)n(ort)t
Fk(.)k(Then)11 b(it)g(needs)h(to)-23 1555 y(handle)17
b(this)g(without)f(in)o(terfering)h(with)g(other)g(traf-)-23
1605 y(\014c)12 b(that)g(ma)o(y)d(p)q(ossibly)j(b)q(e)g(propagated)g
(via)e(its)i(other)-23 1654 y(p)q(orts.)27 b(Therefore,)19
b(in)d(case)i(of)e(a)h(resume)g(signal,)f(it)-23 1704
y(re\015ects)24 b(it)d(d.s.)h(\(in)f(order)i(to)f(ac)o(kno)o(wledge\))g
(only)-23 1754 y(on)h(the)i(signalled)d(p)q(ort;)29 b(and)23
b(in)h(case)g(of)f(a)h(con-)-23 1804 y(nect/disconnect,)i(nothing)c(is)
h(re\015ected)i(but)e(only)-23 1854 y(status)14 b(&)h(in)o(terrupt)f
(bits)g(are)g(set.)-106 1975 y Fh(1.2.)25 b(P)o(orts)40
b Fk(Mo)q(delling)14 b(of)g(a)h(single)g(p)q(ort)g(is)g(along)f(the)
-106 2025 y(description)f(in)f([3].)17 b(In)12 b(principle,)h(a)f(p)q
(ort)h(only)f(main)o(tains)-106 2074 y(an)20 b(in)o(ternal)g(state)h
(and,)h(in)e(certain)h(cases,)i(sets)f(status)-106 2124
y(and)15 b(in)o(terrupt)i(bits)e(on)h(reception)h(of)e(certain)h
(signals)f(on)-106 2174 y(its)j(asso)q(ciated)h(bus.)31
b(One)18 b(exceptional)h(case)g(is)e(when)i(a)-106 2224
y(susp)q(ended)e(p)q(ort)e(on)f(an)h(a)o(w)o(ak)o(e)f(h)o(ub)h(detects)
i(activit)o(y)d(on)-106 2274 y(its)k(asso)q(ciated)h(bus.)32
b(In)19 b(this)f(case)h(it)f(tak)o(es)h(care)h(of)d(re-)-106
2323 y(\015ecting)f(a)h(RESUME)f(signal.)25 b(Logically)14
b(sp)q(eaking,)j(this)-106 2373 y(w)o(ould)f(b)q(e)h(the)g(task)g(of)f
(the)h(rep)q(eater.)28 b(Ho)o(w)o(ev)o(er,)17 b(as)g(the)-106
2423 y(h)o(ub)c(is)f(a)o(w)o(ak)o(e,)g(the)i(rep)q(eater)h(ma)o(y)c(b)q
(e)j(o)q(ccupied)f(b)o(y)g(other)-106 2473 y(ongoing)i(tra\016c)j
(through)f(the)h(h)o(ub)f(|)f(whence)j(w)o(e)e(ha)o(v)o(e)-106
2523 y(put)d(this)g(task)g(as)g(part)g(of)f(the)i(p)q(ort's)f
(functionalit)o(y)m(.)-106 2644 y Fh(1.3.)21 b(Con)o(troller)38
b Fk(Just)14 b(as)g(an)o(y)f(other)h(device,)f(also)g(the)-106
2694 y(h)o(ub)f(should)h(b)q(e)g(able)f(to)h(comm)o(unicate)d(with)j
(the)g(host.)18 b(It)-106 2743 y(is)c(the)h(con)o(troller)g(that)f(tak)
o(es)h(care)h(of)e(this)g(functionalit)o(y)m(.)-106 2793
y(It)g(in)o(tercepts)j(those)e(pac)o(k)o(ets)h(that)e(are)h(addressed)i
(to)d(the)947 24 y(h)o(ub)g(from)d(the)j(bus)f(and)g(in)o(terprets)i
(them;)d(this)h(is)g(in)f(con-)947 74 y(trast)i(to)e(the)h(rep)q(eater)
i(whic)o(h)e(just)f(\\blindly")f(propagates)947 123 y(an)o(y)j(pac)o(k)
o(et)g(regardless)h(of)f(its)f(con)o(ten)o(ts.)997 177
y(Curren)o(tly)m(,)41 b(the)36 b(only)f(t)o(yp)q(es)h(of)f(messages)g
(that)947 226 y(our)40 b(mo)q(delling)c(of)j(the)h(con)o(troller)f
(considers)h(are)947 276 y(the)45 b(p)q(ort)g(requests)h(\(of)e(the)h
(form)e(SetP)o(ortF)m(ea-)947 326 y(ture/ClearP)o(ortF)m(eature\).)f
(The)21 b(con)o(troller)h(distributes)947 376 y(these)16
b(to)e(the)g(righ)o(t)f(p)q(orts.)997 429 y(F)m(or)j(comm)o(unicatio)o
(n)d(to)j(the)h(con)o(troller,)f(w)o(e)g(ha)o(v)o(e)g(in-)947
479 y(tro)q(duced)g(a)d(separate)i(c)o(hannel)f(for)g(host-to-h)o(ub)f
(comm)o(u-)947 529 y(nication,)g(whic)o(h)i(is)f(indep)q(enden)o(t)h
(from)d(the)j(bus.)20 b(This)14 b(is)947 578 y(justi\014ed)f(b)q
(ecause)i(at)d(a)g(more)g(conceptual)h(lev)o(el)f(the)h(host-)947
628 y(to-h)o(ub)j(comm)o(uni)o(cation)d(is)i(also)g(describ)q(ed)i(as)e
(if)g(it)g(to)q(ok)947 678 y(place)c(via)e(a)g(separate)j(c)o(hannel)e
(|)f(w)o(e)h(ha)o(v)o(e)g(to)g(b)q(e)g(cautious)947 728
y(of)k(p)q(ossible)g(mo)q(delling)d(artifacts)j(though.)947
837 y Fn(3.2)53 b(In)o(term)o(ediate-lev)o(el)16 b(description)997
947 y Fk(Before)k(mo)q(delling)15 b(the)k(h)o(ub)f(in)g
Fb(Pr)o(omela)p Fk(,)i(w)o(e)f(ha)o(v)o(e)947 997 y(\014xed)e(a)f
(description)h(in)f(an)f(in)o(termediate)h(format)e(in)i(the)947
1047 y(st)o(yle)e(of)f Fm(action)h(systems)j Fk(\([2)o(]\).)h(While)12
b(this)h(\(ad-ho)q(c\))h(no-)947 1096 y(tation)f(allo)o(w)o(ed)g(for)g
(a)h(more)e(concise)j(and)e(precise)j(sp)q(eci\014-)947
1146 y(cation)c(of)f(the)h(state-mac)o(hines)f(of)g(the)h(individual)e
(comp)q(o-)947 1196 y(nen)o(ts,)21 b(it)d(still)g(allo)o(w)o(ed)g(for)g
(a)h(certain)g(lo)q(oseness)h(in)e(de-)947 1246 y(scription)23
b(b)o(y)e(ha)o(ving)g(no)h(formally)d(de\014ned)24 b(syn)o(tax)e(or)947
1296 y(seman)o(tics.)45 b(Our)24 b(decision)f(to)g(use)h(suc)o(h)g(an)e
(in)o(terme-)947 1345 y(diate)d(format)e(w)o(as)i(based)h(on)e(the)i
(exp)q(erience)h(that)e(the)947 1395 y(translation)e(from)f(a)h(sp)q
(eci\014cation)h(in)f(natural)g(language)947 1445 y(to)k(a)g(formal)e
(language)h(is)h(a)g(step)h(whic)o(h)e(t)o(ypically)g(in-)947
1495 y(v)o(olv)o(es)g(a)f(n)o(um)o(b)q(er)g(of)g(iterations.)35
b(The)20 b(pro)q(cess)h(of)e(for-)947 1545 y(malisation)7
b(exp)q(oses)12 b(am)o(biguities,)c(incompletenesses)j(and)947
1594 y(mistak)o(es)j(in)h(the)g(natural-language)f(sp)q(eci\014cation)i
(whic)o(h)947 1644 y(are)k(incremen)o(tally)d(corrected)k(and)d(tak)o
(en)h(in)o(to)f(accoun)o(t)947 1694 y(at)k(the)f(more)g(formal)e(lev)o
(el.)39 b(The)22 b(more)e(p)q(edan)o(tic)i(are)947 1744
y(the)f(rules)f(at)f(this)h(formal)d(lev)o(el,)j(the)g(more)f(time)f
(these)947 1794 y(bac)o(k-and-forth)i(steps)i(tak)o(e.)37
b(The)21 b(in)o(termediate)e(lev)o(el,)947 1844 y(with)25
b(a)h(more)e(restrictiv)o(e)j(format)c(than)i(natural)g(lan-)947
1893 y(guage,)20 b(but)f(not)f(imp)q(osing)f(the)i(strait-jac)o(k)o(et)
g(of)f(a)h(pro-)947 1943 y(gramming)9 b(language,)j(enforced)i(enough)f
(rigidit)o(y)e(so)h(that)947 1993 y(w)o(e)j(had)f(to)g(rethink)h(the)g
(original)d(sp)q(eci\014cation)j(o)o(v)o(er)g(and)947
2043 y(o)o(v)o(er,)22 b(but)f(without)g(in)o(v)o(olving)d(the)k(o)o(v)o
(erhead)f(of)f(b)q(o)q(ok-)947 2093 y(k)o(eeping)15 b(to)q(o)f(man)o(y)
f(details.)20 b(A)15 b(fragmen)o(t)e(of)h(the)h(action-)947
2142 y(system)k(notation)e(is)h(sho)o(wn)h(in)e(Figure)i(7.)31
b(It)18 b(describ)q(es)947 2192 y(the)f(p)q(ossible)g(actions)f(of)g
(the)h(rep)q(eater)h(when)e(it)g(is)g(w)o(ait-)947 2242
y(ing)h(for)g(an)h Fd(SOP)p Fk(.)e(Sev)o(eral)i(asp)q(ects)h(ha)o(v)o
(e)e(b)q(een)i(mo)q(delled)947 2292 y(b)o(y)j(v)n(ariables,)h(lik)o(e)e
(the)i(logical)d(state)j(of)e(the)i(rep)q(eater)947 2342
y(\()p Fd(repeater)p 1142 2342 14 2 v 15 w(stat)p Fk(\),)14
b(the)i(signal)f(on)g(the)h(buses)h(connected)947 2391
y(to)i(the)g(ro)q(ot)g(p)q(ort)g(\()p Fd(rootport)p 1464
2391 V 14 w(bus)p Fk(\))f(and)g(to)h(the)g(do)o(wn-)947
2441 y(stream)g(p)q(orts)h(\()p Fd(port)p 1309 2441 V
15 w(bus[i])p Fk(\),)e(and)h(the)h(p)q(ort)f(statuses)947
2491 y(\()p Fd(port)p 1054 2491 V 15 w(status[i])p Fk(\).)25
b(On)16 b(the)i(other)f(hand,)f(things)h(ha)o(v)o(e)947
2541 y(b)q(een)12 b(left)e(informal,)d(lik)o(e)i(the)i(condition)f
Fd(``rootport)p 1826 2541 V 13 w(bus)947 2591 y(has)22
b(been)f(silent)f(for)h(at)h(least)e(3.0)i(ms'')27 b
Fk(in)g(the)947 2641 y(last)16 b(action.)24 b(Also,)15
b(while)h(the)g(time)f(has)h(b)q(een)h(mo)q(delled)947
2690 y(b)o(y)g(a)f(v)n(ariable)g(\()p Fd(t)p Fk(\),)g(it)h(is)f(not)g
(up)q(dated)i(but)e(assumed)h(to)947 2740 y(pro)q(ceed)f(implicitly)l
(.)997 2793 y(Indeed,)c(Section)g(3.1)e(ab)q(o)o(v)o(e)g(is)h(the)h
(result)f(of)g(this)g(itera-)p eop
%%Page: 11 11
11 10 bop -71 5 a Fc(/*********/)-71 45 y(/*)17 b(WFSOP)f(*/)-71
84 y(/*********/)-71 163 y(repeater_st)o(at)e(=)j(WFSOP)f(&)i
(rootport_)o(bus)c(=)j(\(father,SOP)o(\))-71 203 y(&)g(t)h(<)f(EOF1)-36
242 y(->)35 b(PARALLEL)15 b(i)i(:)g(i)h(in)f(DPORT)35
281 y(&)g(port_status)o([i])d(=)j(ENABLED)e(:)70 321
y(port_bus[i])f(:=)j(\(hubid,SOP)o(\))35 360 y(ENDPARALLE)o(L)e(;)35
400 y(src)i(:=)f(0)i(;)f(repeater_s)o(tat)d(:=)j(WFEOP)-71
479 y(CHOICE)f(i)h(:)g(i)g(in)g(DPORT)f(:)-36 518 y(repeater_st)o(at)e
(=)k(WFSOP)e(&)h(port_bus[i)o(])e(=)i(\(son[i],SO)o(P\))-36
557 y(&)h(port_stat)o(us[)o(i])c(=)k(ENABLED)d(&)i(t)g(<)h(EOF1)0
597 y(->)34 b(rootport_bu)o(s)15 b(:=)i(\(hubid,SO)o(P\))d(;)70
636 y(src)j(:=)g(i)g(;)g(repeater_st)o(at)d(:=)j(WFEOP)-71
676 y(ENDCHOICE)-71 755 y(repeater_st)o(at)d(=)j(WFSOP)f(&)i(t)f(=)g
(EOF1)-36 794 y(->)35 b(repeater_s)o(tat)14 b(:=)j(WFSOF)-71
873 y(repeater_st)o(at)d(=)j(WFSOP)f(&)i(``rootpor)o(t_b)o(us)c(has)j
(been)f(silent)-71 912 y(for)h(at)g(least)e(3.0)i(ms'')-36
952 y(->)35 b(repeater_s)o(tat)14 b(:=)j(SUSPENDED)-71
1085 y Fh(Figure)10 b Fk(7:)16 b(F)m(ragmen)o(t)10 b(of)h(in)o
(termediate)g(lev)o(el)g(description)-71 1219 y(tiv)o(e)g(pro)q(cess)i
(reac)o(hing)e(a)g(stable)g(state.)18 b(Stabilisation)9
b(also)-71 1268 y(indicated)h(that)h(it)e(w)o(as)h(time)f(to)h(pro)q
(ceed)i(to)e(the)h(next)g(step,)-71 1318 y(namely)h(transforming)g(the)
j(description)f(in)o(to)g Fb(Pr)o(omela)p Fk(.)-71 1420
y Fn(3.3)52 b(T)l(ranslation)19 b(to)f(Promela)-21 1521
y Fk(The)h(\014rst)g(and)g(foremost)e(decision)i(is)f(ho)o(w)g(to)h(mo)
q(del)-71 1571 y(time.)k(The)16 b(HUBs)h(in)e(an)g(USB)i(top)q(ology)d
(op)q(erate)j(in)e(an)-71 1621 y(essen)o(tially)g(sync)o(hronous)h(mo)q
(de.)21 b(Conceptually)m(,)14 b(a)h(com-)-71 1671 y(mon)f(global)f(clo)
q(c)o(k)j(is)f(main)o(tained)e(b)o(y)i(the)h(USB)g(devices;)-71
1721 y(indeed,)f(the)h(\(lo)q(cal\))e(clo)q(c)o(k)i(sync)o(hronization)
e(imp)q(osed)g(at)-71 1770 y(the)i(start)f(of)g(eac)o(h)g(frame)f(is)h
(there)h(to)f(ensure)h(a)f(common)-71 1820 y(time)f(frame.)22
b(During)15 b(a)g(clo)q(c)o(k)h(cycle)g(eac)o(h)g(device)g(senses)-71
1870 y(the)g(bus)g(segmen)o(ts)f(to)h(whic)o(h)f(it)g(is)g(connected,)j
(reacts)e(to)-71 1920 y(it)c(and)g(p)q(ossibly)g(driv)o(es)g(its)g(bus)
h(segmen)o(ts)f(to)g(a)g(new)g(state)-71 1970 y(whic)o(h)g(is)g(only)f
(sensed)i(b)o(y)f(other)h(devices)g(during)e(the)i(next)-71
2019 y(cycle.)23 b(Also,)15 b(t)o(w)o(o)g(devices)h(cannot)f(sim)o
(ultaneously)f(\(i.e.,)-71 2069 y(within)h(a)g(clo)q(c)o(k)g(cycle\))i
(driv)o(e)e(the)h(same)f(bus)g(segmen)o(t)g(to)-71 2119
y(di\013eren)o(t)g(v)n(alues.)-21 2170 y(The)22 b Fb(Pr)o(omela)h
Fk(mo)q(del)d(is)h(structured)j(accordingly:)-71 2219
y(eac)o(h)11 b(device)h(is)e(mo)q(delled)g(as)h(a)f(separate)i(pro)q
(cess)g(instance)-71 2269 y(whic)o(h)h(cycles)i(through)e(a)g(Read)g
(phase)h(during)f(whic)o(h)g(the)-71 2319 y(bus)j(is)f(read)g(and)h(a)e
(W)m(rite)h(phase)h(during)f(whic)o(h)g(the)h(bus)-71
2369 y(can)11 b(b)q(e)h(written)f(\(but)h(not)f(read\).)17
b(No)11 b(pro)q(cess)i(can)e(en)o(ter)i(a)-71 2419 y(phase)h(un)o(til)f
(all)g(other)h(pro)q(cesses)i(are)e(ready)g(to)g(en)o(ter)h(the)-71
2468 y(same)g(phase.)25 b(This)16 b(structure)i(can)e(b)q(e)h(seen)g
(in)e(Figure)i(8)-71 2518 y(whic)o(h)e(list)f(the)i(somewhat)e
(simpli\014ed)f(co)q(de)j(corresp)q(ond-)-71 2568 y(ing)9
b(to)h(the)g(\014rst)g(t)o(w)o(o)f(c)o(hoices)i(of)e(the)h(fragmen)o(t)
e(in)h(Figure)h(7.)-71 2618 y Fd(RSTEP\(prio\))e Fk(and)h
Fd(WSTEP\(prio\))f Fk(are)i(macros)698 2603 y Fg(12)742
2618 y Fk(that)g(en-)-71 2668 y(force)15 b(the)g(ab)q(o)o(v)o(e)f(men)o
(tioned)g(sync)o(hronization.)19 b(Because)-71 2717 y(of)h(this)g
(phasing,)h(w)o(e)g(can)g(sc)o(hedule)g(the)g(pro)q(cesses)i
Fm(de-)p -71 2755 382 2 v -40 2782 a Ff(12)-7 2793 y
Fi(I.e.,)10 b(C{prepro)q(cessor)f Fc(#define)p Fi(s)1353
5 y Fc(/*)17 b(Read)g(phase:)e(*/)1159 45 y(RSTEP\(prio\))o(;)1159
84 y(ReadClEvent)o(\(my)o(_t,)o(clo)o(ck)o(_ou)o(t[m)o(y_i)o(d]\))o(;)
1159 124 y(i)j(=)f(1;)1159 163 y(do)1159 203 y(::)g(i)h(<=)e(ndports)g
(->)1212 242 y(ReadBus\(my_)o(bus)o([i])o(,b)o(us[)o(lpo)o(rt)e(+)k(i)f
(-)g(1]\);)1212 281 y(i++)1159 321 y(::)g(else)f(break)1159
360 y(od;)h(i)g(=)g(0;)1159 400 y(ReadBus\(my_)o(bus)o([0])o(,bu)o(s[)o
(my_)o(id])o(\);)1406 479 y(/*)g(Write)f(phase:)g(*/)1159
518 y(if)35 b(/*)17 b(WFSOP)f(*/)1159 557 y(::)h(device_stat)o([my)o
(_id)o(])d(==)j(WFSOP)1212 597 y(&&)g(my_t)f(!=)h(EOF1)g(->)1212
636 y(/*)g(Randomly)e(select)g(a)j(port)1265 676 y(with)e(activity.)f
(*/)1212 715 y(src)i(=)g(\(BusContent)o(\(m)o(y_b)o(us[)o(0],)1336
755 y(father_id,)o(SO)o(P\))d(->)j(0)h(:)f(-1\);)1212
794 y(i)h(=)f(1;)1212 833 y(do)1212 873 y(::)g(i)g(<=)g(ndports)f(->)
1265 912 y(if)1265 952 y(::)h(BusContent\()o(my)o(_bu)o(s[i)o(],l)o
(por)o(t+)o(i-1)o(,SO)o(P\))1318 991 y(&&)g(port_stat[)o(lpo)o(rt+)o
(i-1)o(]==)o(EN)o(ABL)o(ED\))d(->)1318 1031 y(if)j(::)g(src)g(!=)f(-1)h
(::)g(src)g(=)g(i)g(fi)1265 1070 y(::)g(else)1265 1110
y(fi;)g(i++)1212 1149 y(::)g(else)f(break)1212 1188 y(od;)1212
1228 y(if)1212 1267 y(::)h(src)g(==)g(0)g(->)g(/*)g(Downstream)d(*/)
1265 1307 y(i)j(=)h(1;)1265 1346 y(do)1265 1386 y(::)f(i)g(<=)g
(ndports)e(->)1318 1425 y(if)1318 1464 y(::)i(port_stat[)o(lpo)o(rt+)o
(i-1)o(])e(==)h(ENABLED)g(->)1371 1504 y(WriteBus\(b)o(us[)o(lpo)o(rt+)
o(i-1)o(],)o(my_)o(id,)o(SOP)o(\))1318 1543 y(::)h(else)1318
1583 y(fi;)1318 1622 y(i++)1265 1662 y(::)g(else)f(->)h(break)1265
1701 y(od;)1265 1741 y(device_stat)o([my)o(_i)o(d])d(=)k(WFEOP;)1212
1780 y(::)f(src)g(>)g(0)g(->)g(/*)g(Upstream)e(*/)1265
1819 y(WriteBus\(bu)o(s[m)o(y_)o(id])o(,my)o(_id)o(,SO)o(P\))o(;)1265
1859 y(device_stat)o([my)o(_i)o(d])f(=)k(WFEOP;)1212
1898 y(::)f(else)f(/*)h(No)g(activity)e(*/)1212 1938
y(fi;)1113 2029 y Fh(Figure)d Fk(8:)18 b(F)m(ragmen)o(t)12
b(of)i(Promela)e(co)q(de)983 2224 y Fm(terministic)n(al)r(ly)p
Fk(,)e(th)o(us)j(reducing)g(the)g(n)o(um)o(b)q(er)e(of)h(separate)983
2274 y(computations)g(to)h(analyse.)18 b(Indeed,)c(there)h(is)e(an)g
(explicit)983 2324 y(sc)o(heduler)h(pro)q(cess)h(and)d(the)h
Fd(prio)f Fk(argumen)o(ts)g(determine)983 2374 y(the)i(sc)o(heduling)g
(order.)1033 2434 y(Global)h(time,)g(then,)j(is)f(measured)f(as)h(the)h
(n)o(um)o(b)q(er)e(of)983 2484 y(Read/W)m(rite)j(cycles)i(and)e(the)i
(lo)q(cal)e(HUB)h(time)e(as)i(the)983 2534 y(n)o(um)o(b)q(er)9
b(if)h(cycles)h(since)g(the)g(last)f Fd(RESET)f Fk(o)q(ccured)j(at)e
(start-)983 2583 y(of-frame;)g(note)h(that)h(w)o(e)g(are)g(ignoring)e
(clo)q(c)o(k)h(sk)o(ew)h(for)f(the)983 2633 y(momen)o(t.)1033
2694 y(In)19 b(this)g(set-up,)i(the)e(bus)h(segmen)o(ts)f(are)g(most)f
(natu-)983 2743 y(rally)i(mo)q(delled)f(as)i(shared)g(v)n(ariables.)38
b(Unfortunately)m(,)983 2793 y(the)18 b(`message)e(sequence)k(c)o
(harts')d(that)g(the)h(Spin)f(v)o(eri\014er)p eop
%%Page: 12 12
12 11 bop -106 24 a Fk(can)15 b(pro)q(duce)i(only)e(depict)h(comm)o
(uni)o(cation)d(ev)o(en)o(ts.)23 b(F)m(or)-106 74 y(this)10
b(reason)h(w)o(e)f(opted)h(to)f(use)h(1-bu\013ered)g(comm)o(unication)
-106 123 y(c)o(hannels.)18 b(Some)13 b(added)h(complexit)o(y)e(w)o(as)i
(hidden)g(b)o(y)g(us-)-106 173 y(ing)f(macros)g(\(e.g.,)g
Fd(ReadClEvent)p Fk(,)e Fd(BusContent)p Fk(,)g(etc.\))-56
223 y(Still,)j(a)h(simple)f(comparison)g(of)h(these)i(t)o(w)o(o)e
(fragmen)o(ts)-106 273 y(giv)o(es)20 b(a)h(strong)g(argumen)o(t)e(for)i
(using)f(an)h(in)o(termediate)-106 323 y(description)14
b(\014rst.)-106 478 y Fl(4)56 b(Conclusions)-56 575 y
Fk(W)m(e)18 b(ha)o(v)o(e)h(giv)o(en)g(an)g(accoun)o(t)h(of)e(our)h(exp)
q(eriences)j(in)-106 625 y(mo)q(delling)11 b(the)k(USB)g(h)o(ub)f
(using)h Fb(Pr)o(omela)p Fk(.)20 b(While)14 b(this)-106
674 y(is)k(an)g(ongoing)f(pro)r(ject,)j(some)e(conclusions)h(can)f(y)o
(et)h(b)q(e)-106 724 y(dra)o(wn.)e(Our)d(main)d(e\013ort)j(so)g(far)f
(has)g(b)q(een)h(aimed)e(at)h(un-)-106 774 y(derstanding)g(the)h
(functioning)e(of)g(the)i(h)o(ub's)f(comp)q(onen)o(ts)-106
824 y(in)j(detail.)25 b(Being)16 b(forced)h(to)g(describ)q(e)h(this)e
(in)g(a)g(formal-)-106 874 y(ism)11 b(is)h(an)g(excellen)o(t)h(w)o(a)o
(y)f(to)g(b)q(e)h(sure)g(to)f(consider)i(all)d(c)o(ho-)-106
923 y(sen)17 b(asp)q(ects)h(with)e(equal)g(\(and)g(great\))h
(precision.)26 b(Man)o(y)-106 973 y(unclarities,)15 b(inconsistencies)i
(and)e(errors)i(in)e(the)h(original)-106 1023 y(text)f(of)f(the)h(sp)q
(eci\014cation)h(ha)o(v)o(e)e(b)q(een)i(unco)o(v)o(ered)g(during)-106
1073 y(this)j(pro)q(cess.)38 b(The)20 b(use)g(of)g(an)f(in)o
(termediate)g(lev)o(el)g(b)q(e-)-106 1123 y(t)o(w)o(een)c(the)g(sp)q
(eci\014cation)g(do)q(cumen)o(t)f(and)g(the)h Fb(Pr)o(omela)-106
1173 y Fk(mo)q(del)f(pro)o(v)o(ed)i(useful)g(to)f(separate)i(the)f
(concerns)i(of)d(un-)-106 1222 y(derstanding)f(the)g(h)o(ub)f(on)g(the)
h(one)g(hand,)f(and)g(mo)q(delling)-106 1272 y(this)h(using)g
Fb(Pr)o(omela)p Fk('s)h(capabilities)e(on)g(the)i(other.)-56
1322 y(No)o(w)d(that)h(the)h(h)o(ub's)f(functioning,)e(as)i(w)o(e)h
(understand)-106 1372 y(it,)j(has)g(b)q(een)h(\014xed,)f(w)o(e)h
(curren)o(tly)g(fo)q(cus)f(on)g(sim)o(ulation)-106 1422
y(and)f(v)o(eri\014cation)g(in)g Fb(Spin)p Fk(.)26 b(One)17
b(di\016cult)o(y)f(here)h(is)g(that)-106 1471 y(the)d(description)g(of)
f(the)i(h)o(ub,)e(as)h(extracted)h(from)d(the)i(de-)-106
1521 y(scription)j(in)g([3],)g(has)h(b)q(ecome)f(a)g(single)g
(monolithic)e(ob-)-106 1571 y(ject.)25 b(In)o(terestingly)m(,)16
b(it)f(is)h(not)g(so)g(m)o(uc)o(h)f Fb(Spin)i Fk(that)f(can-)-106
1621 y(not)f(handle)g(its)g(o)o(v)o(erall)f(size)i(|)e(at)h(least)h
(there)g(ha)o(v)o(e)f(not)-106 1671 y(b)q(een)i(an)o(y)e(indication)g
(of)g(this)h(so)g(far.)23 b(Rather,)16 b(it)g(mak)o(es)-106
1720 y(debugging)h(a)g(lab)q(our-in)o(tensiv)o(e)g(job.)28
b(Although)17 b(the)h(re-)-106 1770 y(p)q(eater,)i(p)q(orts)f(and)f
(con)o(troller)h(ha)o(v)o(e)f(b)q(een)i(mo)q(delled)d(as)-106
1820 y(separate)i Fb(Pr)o(omela)g Fd(proctype)p Fk('s,)d(it)h(pro)o(v)o
(es)i(to)e(b)q(e)i(dif-)-106 1870 y(\014cult)d(to)g(further)g(mo)q
(dularise)f(these)i(in)e(trac)o(king)h(errors.)-106 1920
y(Hence,)11 b(scaling)e(do)o(wn)g(these)i(comp)q(onen)o(ts)e(is)g(a)g
(ma)r(jor)f(con-)-106 1970 y(cern)15 b(of)e(ongoing)g(w)o(ork.)-106
2125 y Fl(References)-106 2217 y Fq([1])20 b(Don)d(Anderson.)29
b Fa(Universal)15 b(Serial)g(Bus)i(System)e(A)o(r)n(chi-)-45
2263 y(te)n(ctur)n(e)p Fq(.)e(The)e(PC)g(System)h(Arc)o(hitecture)h
(Series)g(b)o(y)f(Mind-)-45 2309 y(Share,)17 b(Inc.)e(Addison-W)m
(esley)j(Dev)o(elop)q(ers)g(Press,)e(Read-)-45 2354 y(ing,)e(Massac)o
(h)o(usetts,)g(1997.)-106 2414 y([2])20 b(R.)13 b(J.)f(R.)h(Bac)o(k)g
(and)h(R.)e(Kurki-Suonio.)20 b(Decen)o(tralization)-45
2460 y(of)12 b(pro)q(cess)i(nets)f(with)g(cen)o(tralized)i(con)o(trol.)
j(In)12 b Fa(2nd)g(A)o(CM)-45 2505 y(SIGA)o(CT{SIGOPS)d(Symp.)h(on)g
(Principles)f(of)h(Distribute)n(d)-45 2551 y(Computing)p
Fq(,)h(pages)j(131{142,)f(New)g(Y)m(ork,)f(1983.)i(A)o(CM.)-106
2611 y([3])20 b(Compaq,)h(Digital)h(Equipmen)o(t)f(Corp)q(oration,)i
(IBM)c(PC)-45 2656 y(Compan)o(y)m(,)14 b(In)o(tel,)f(Microsoft,)h(NEC,)
f(and)h(Northern)g(T)m(ele-)-45 2702 y(com.)22 b(Univ)o(ersal)17
b(serial)g(bus)e(sp)q(eci\014cation.)25 b(Do)o(wnloaded)-45
2748 y(from)20 b Fo(http://ww)o(w.)o(tel)o(ep)o(ort)o(.c)o(om/)o(~us)o
(b/)o(pre)o(se)o(nt.)o(htm)o Fq(,)-45 2793 y(Jan)o(uary)14
b(15)f(1996.)k(Revision)f(1.0.)947 24 y([4])21 b(Gerard)91
b(Holzmann.)251 b(Spin)92 b(pac)o(k-)1009 69 y(age.)277
b Fo(http://netl)o(ib)o(.be)o(ll)o(-la)o(bs.)o(co)o(m/)1009
115 y(netlib/sp)o(in)o(/wh)o(ati)o(sp)o(in.)o(ht)o(ml)p
Fq(.)947 177 y([5])21 b(Gerard)27 b(J.)e(Holzmann.)58
b Fa(Design)25 b(and)g(V)m(alidation)d(of)1009 223 y(Computer)c(Pr)n
(oto)n(c)n(ols)p Fq(.)31 b(Pren)o(tice)19 b(Hall)h(Soft)o(w)o(are)f
(Series.)1009 269 y(Pren)o(tice-Hall)c(In)o(ternational,)g(London,)f
(1991.)947 331 y([6])21 b(Kosar)35 b(Ja\013)h(and)g(Je\013)g(Morriss.)
85 b(Hub)35 b(arc)o(hitec-)1009 377 y(ture.)77 b(Handout)34
b(of)f(the)h(USB)f(Dev)o(elop)q(ers)j(Con-)1009 422 y(ference)44
b(F)m(ebruary)m(,)52 b(1996.)109 b(Do)o(wnloaded)46 b(from)1009
468 y Fo(http://ww)o(w.)o(tel)o(epo)o(rt)o(.co)o(m/)o(~us)o(b/p)o(re)o
(sen)o(t.)o(htm)o Fq(.)947 530 y([7])21 b(Univ)o(ersal)80
b(Serial)h(Bus)e(sp)q(eci\014cation)i(Re-)1009 576 y(vision)59
b(1.1)f(R)o(C)f(2.)149 b(Do)o(wnloaded)60 b(from)1009
622 y Fo(http://ww)o(w.)o(tel)o(epo)o(rt)o(.co)o(m/)o(~us)o(b/s)o(pe)o
(cup)o(.h)o(tm)p Fq(,)40 b(Ma)o(y)1009 667 y(1997.)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
